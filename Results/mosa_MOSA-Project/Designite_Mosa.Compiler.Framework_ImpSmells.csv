Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,ProcessInstruction,The method has 138 lines of code.
Long Method,Mosa.Compiler.Framework,Operand,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Operand.cs,ToString,The method has 100 lines of code.
Long Method,Mosa.Compiler.Framework.CIL,CILInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\CILInstruction.cs,Initialize,The method has 452 lines of code.
Long Method,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateTypeDefinition,The method has 118 lines of code.
Long Method,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,TraceUsageMap,The method has 124 lines of code.
Long Method,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,BuildLiveIntervals,The method has 100 lines of code.
Long Method,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Initialize,The method has 112 lines of code.
Long Method,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,PopulateVisitationDictionary,The method has 222 lines of code.
Long Method,Mosa.Compiler.Framework.Stages,InlineEvaluationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineEvaluationStage.cs,Run,The method has 104 lines of code.
Long Method,Mosa.Compiler.Framework.Stages,InlineStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineStage.cs,Inline,The method has 103 lines of code.
Long Method,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,ValueNumber,The method has 188 lines of code.
Complex Method,Mosa.Compiler.Framework.Analysis,SimpleFastDominance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SimpleFastDominance.cs,CalculateDominance,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,ProcessInstruction,Cyclomatic complexity of the method is 15
Complex Method,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,NullComparisionCheck,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,Move,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,IntegerOperation,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,IntegerOperation,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,CompareegerBranch,Cyclomatic complexity of the method is 14
Complex Method,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,Compare,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,Phi,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Analysis.LiveVariableAnalysis,GCEnvironment,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\LiveVariableAnalysis\GCEnvironment.cs,GetKills,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Analysis.LiveVariableAnalysis,LivenessAnalysis,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\LiveVariableAnalysis\LivenessAnalysis.cs,ComputeLocalLiveSets,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Analysis.LiveVariableAnalysis,LivenessAnalysis,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\LiveVariableAnalysis\LivenessAnalysis.cs,BuildLiveIntervals,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Compiler.Framework.Analysis.LiveVariableAnalysis,LiveRanges,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\LiveVariableAnalysis\LiveRanges.cs,Add,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework,BaseMethodCompilerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseMethodCompilerStage.cs,IsSourceAndTargetWithinSameTryOrException,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework,BaseMethodCompilerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseMethodCompilerStage.cs,GetLoadInstruction,Cyclomatic complexity of the method is 15
Complex Method,Mosa.Compiler.Framework,BaseMethodCompilerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseMethodCompilerStage.cs,GetMoveInstruction,Cyclomatic complexity of the method is 14
Complex Method,Mosa.Compiler.Framework,BaseMethodCompilerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseMethodCompilerStage.cs,GetStoreParameterInstruction,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework,BaseMethodCompilerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseMethodCompilerStage.cs,GetLoadParameterInstruction,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework,BaseMethodCompilerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseMethodCompilerStage.cs,GetStoreInstruction,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetTypeFromTypeCode,Cyclomatic complexity of the method is 18
Complex Method,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetStackTypeCode,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework,ConditionCodeExtension,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\ConditionCodeExtension.cs,GetUnsigned,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Compiler.Framework,ConditionCodeExtension,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\ConditionCodeExtension.cs,GetOpposite,Cyclomatic complexity of the method is 23
Complex Method,Mosa.Compiler.Framework,ConditionCodeExtension,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\ConditionCodeExtension.cs,GetReverse,Cyclomatic complexity of the method is 23
Complex Method,Mosa.Compiler.Framework,ConditionCodeExtension,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\ConditionCodeExtension.cs,GetConditionString,Cyclomatic complexity of the method is 20
Complex Method,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetOperand,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,ToString,Cyclomatic complexity of the method is 19
Complex Method,Mosa.Compiler.Framework,MethodScanner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodScanner.cs,InterfaceMethodInvoked,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework,MethodScanner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodScanner.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework,MosaTypeLayout,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaTypeLayout.cs,ResolveType,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework,MosaTypeLayout,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaTypeLayout.cs,FindInterfaceMethod,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework,MosaTypeLayout,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaTypeLayout.cs,CreateMethodTable,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework,MosaTypeLayout,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaTypeLayout.cs,FitsInRegister,Cyclomatic complexity of the method is 29
Complex Method,Mosa.Compiler.Framework,Operand,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Operand.cs,ToString,Cyclomatic complexity of the method is 20
Complex Method,Mosa.Compiler.Framework,Operand,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Operand.cs,ShortenTypeName2,Cyclomatic complexity of the method is 17
Complex Method,Mosa.Compiler.Framework.CIL,ArithmeticInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\ArithmeticInstruction.cs,Resolve,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.CIL,ConversionInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\ConversionInstruction.cs,Resolve,Cyclomatic complexity of the method is 18
Complex Method,Mosa.Compiler.Framework.CIL,LdcInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdcInstruction.cs,Decode,Cyclomatic complexity of the method is 17
Complex Method,Mosa.Compiler.Framework.CIL,LdelemInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdelemInstruction.cs,LdelemInstruction,Cyclomatic complexity of the method is 12
Complex Method,Mosa.Compiler.Framework.CIL,LdobjInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdobjInstruction.cs,LdobjInstruction,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework.CIL,StelemInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\StelemInstruction.cs,StelemInstruction,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.CIL,StobjInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\StobjInstruction.cs,StobjInstruction,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.CompilerStages,DebugFileStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\DebugFileStage.cs,EmitSourceFileInformation,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.CompilerStages,DebugFileStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\DebugFileStage.cs,EmitSourceInformation,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.CompilerStages,ExceptionTableStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\ExceptionTableStage.cs,CreateMethodExceptionLookupTable,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateTypeDefinition,Cyclomatic complexity of the method is 15
Complex Method,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,ComputeArgumentSize,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,WriteArgument,Cyclomatic complexity of the method is 18
Complex Method,Mosa.Compiler.Framework.CompilerStages,MethodTableStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MethodTableStage.cs,Finalization,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Trace,CompilerEventExtension,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Trace\CompilerEvent.cs,ToText,Cyclomatic complexity of the method is 23
Complex Method,Mosa.Compiler.Framework.Linker.Elf,ElfLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfLinker.cs,CreateRelocationSections,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework.Linker.Elf,ElfLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfLinker.cs,EmitRelocation,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Linker.Elf,ElfLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfLinker.cs,EmitRelocationAddend,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Linker.Elf,ElfLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfLinker.cs,ConvertType,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,TraceDefAndUseLocations,Cyclomatic complexity of the method is 12
Complex Method,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,TraceUsageMap,Cyclomatic complexity of the method is 29
Complex Method,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,ComputeLocalLiveSets,Cyclomatic complexity of the method is 17
Complex Method,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,BuildLiveIntervals,Cyclomatic complexity of the method is 19
Complex Method,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,PlaceLiveIntervalOnTrackAllowEvictions,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,ProcessLiveInterval,Cyclomatic complexity of the method is 16
Complex Method,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,ResolveDataFlow,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,GetRegisterMoves,Cyclomatic complexity of the method is 15
Complex Method,Mosa.Compiler.Framework.RegisterAllocator,GreedyRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\GreedyRegisterAllocator.cs,TrySimplePartialFreeIntervalSplit,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework.RegisterAllocator,LiveRange,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\LiveRange.cs,LiveRange,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.RegisterAllocator,LiveRange,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\LiveRange.cs,InternalValidation,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Compiler.Framework.RegisterAllocator,VirtualRegister,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\VirtualRegister.cs,AddLiveInterval,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.RegisterAllocator.RedBlackTree,IntervalTree<T>,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\RedBlackTree\IntervalTree.Color.cs,RenewConstraintsAfterInsert,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.RegisterAllocator.RedBlackTree,IntervalTree<T>,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\RedBlackTree\IntervalTree.Color.cs,RemoveNode,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.RegisterAllocator.RedBlackTree,IntervalTree<T>,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\RedBlackTree\IntervalTree.Color.cs,RenewConstraintsAfterDelete,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.Source,SourceRegions,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Source\SourceRegions.cs,GetSourceRegions,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,DumpValues,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Evaluate,Cyclomatic complexity of the method is 14
Complex Method,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,UpdateInstruction,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,UpdateBranchInstructions,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,EvaluateCompare,Cyclomatic complexity of the method is 17
Complex Method,Mosa.Compiler.Framework.Stages,BlockMergeStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BlockMergeStage.cs,MergeBlocks,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,CILDecodingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILDecodingStage.cs,InitializePromotedLocalVariablesToVirtualRegisters,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Stages,CILDecodingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILDecodingStage.cs,InsertFlowOrJumpInstructions,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,CILDecodingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILDecodingStage.cs,ConvertVirtualRegisterToStackLocal,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Stages,CILOperandAssignmentStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILOperandAssignmentStage.cs,AssignOperands,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,CILProtectedRegionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILProtectedRegionStage.cs,UpdateBlockProtectInstructions,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,BinaryLogic,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Callvirt,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,ConvertCondition,Cyclomatic complexity of the method is 26
Complex Method,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,GetIndex,Cyclomatic complexity of the method is 16
Complex Method,Mosa.Compiler.Framework.Stages,CodeGenerationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CodeGenerationStage.cs,EmitInstructions,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.Stages,DeadBlockStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\DeadBlockRemovalStage.cs,EmptyDeadBlocks,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.Stages,EnterSSAStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\EnterSSAStage.cs,UpdateOperands,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,GotoLeaveTargetInstruction,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.Stages,InlineEvaluationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineEvaluationStage.cs,Run,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Compiler.Framework.Stages,InlineEvaluationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineEvaluationStage.cs,StaticCanNotInline,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Compiler.Framework.Stages,InlineEvaluationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineEvaluationStage.cs,CopyInstructions,Cyclomatic complexity of the method is 16
Complex Method,Mosa.Compiler.Framework.Stages,InlineEvaluationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineEvaluationStage.cs,Map,Cyclomatic complexity of the method is 14
Complex Method,Mosa.Compiler.Framework.Stages,InlineStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineStage.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,InlineStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineStage.cs,Inline,Cyclomatic complexity of the method is 23
Complex Method,Mosa.Compiler.Framework.Stages,InlineStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineStage.cs,UpdateParameterInstructions,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Compiler.Framework.Stages,InlineStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineStage.cs,Map,Cyclomatic complexity of the method is 16
Complex Method,Mosa.Compiler.Framework.Stages,LoopInvariantCodeMotionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LoopInvariantCodeMotionStage.cs,FindLoopInvariantInstructions,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.Stages,LoopInvariantCodeMotionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LoopInvariantCodeMotionStage.cs,CreatePreHeader,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.Stages,PromoteTemporaryVariables,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\PromoteTemporaryVariables.cs,CanPromote,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.Stages,PromoteTemporaryVariables,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\PromoteTemporaryVariables.cs,Check,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.Stages,PromoteTemporaryVariables,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\PromoteTemporaryVariables.cs,Promote,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,PromoteTemporaryVariables,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\PromoteTemporaryVariables.cs,Promote,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Stages,SparseConditionalConstantPropagationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\SparseConditionalConstantPropagationStage.cs,ReplaceVirtualRegisterWithConstant,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,SparseConditionalConstantPropagationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\SparseConditionalConstantPropagationStage.cs,RemoveBranchesToDeadBlocks,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,SparseConditionalConstantPropagationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\SparseConditionalConstantPropagationStage.cs,_RemoveBlockFromPhiInstructions,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,DetermineReadOnlyParameters,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,ValueNumber,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,ValueNumber,Cyclomatic complexity of the method is 28
Complex Method,Mosa.Compiler.Framework.Stages,VirtualRegisterRenameStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\VirtualRegisterRenameStage.cs,Run,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Trace.BuiltIn,ConsoleEventListener,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Trace\BuiltIn\ConsoleEventListener.cs,TraceEvent,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,Add32MultipleWithCommon,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\Add32MultipleWithCommon.cs,Match,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,Add64MultipleWithCommon,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\Add64MultipleWithCommon.cs,Match,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,Load32AddressFold,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\Load32AddressFold.cs,Match,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,Load64AddressFold,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\Load64AddressFold.cs,Match,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,LoadR4AddressFold,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\LoadR4AddressFold.cs,Match,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,LoadR8AddressFold,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\LoadR8AddressFold.cs,Match,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,Sub32MultipleWithCommon,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\Sub32MultipleWithCommon.cs,Match,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,Sub64MultipleWithCommon,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\Sub64MultipleWithCommon.cs,Match,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,Truncate64x32Add64FromZeroExtended32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\Truncate64x32Add64FromZeroExtended32x64.cs,Match,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,Truncate64x32And64FromZeroExtended32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\Truncate64x32And64FromZeroExtended32x64.cs,Match,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,Truncate64x32MulUnsigned64FromZeroExtended32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\Truncate64x32MulUnsigned64FromZeroExtended32x64.cs,Match,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,Truncate64x32Or64FromZeroExtended32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\Truncate64x32Or64FromZeroExtended32x64.cs,Match,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,Truncate64x32Sub64FromZeroExtended32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\Truncate64x32Sub64FromZeroExtended32x64.cs,Match,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Rewrite,Truncate64x32Xor64FromZeroExtended32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Rewrite\Truncate64x32Xor64FromZeroExtended32x64.cs,Match,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Simplification,GetHigh64FromRightLeftAndTo64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Simplification\GetHigh64FromRightLeftAndTo64.cs,Match,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Simplification,GetLow64FromRightShiftAndTo64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Simplification\GetLow64FromRightShiftAndTo64.cs,Match,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.Transform.Auto.IR.Simplification,To64FromLowHigh,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Simplification\To64FromLowHigh.cs,Match,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.Framework.Transform,BaseTransformation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\BaseTransformation.cs,AreSame,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x32.cs,Match,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x32.cs,Transform,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x64.cs,Match,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x64.cs,Transform,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x32.cs,Match,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x32.cs,Transform,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x64.cs,Match,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x64.cs,Transform,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch32.cs,Match,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch32.cs,Transform,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch64.cs,Match,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch64.cs,Transform,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.Simplification,Compare64x32SameHigh,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Simplification\Compare64x32SameHigh.cs,Match,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Compiler.Framework.Transform.Manual.IR.Simplification,Compare64x32SameLow,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Simplification\Compare64x32SameLow.cs,Match,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Compiler.Framework.Transform.IR.Special,Deadcode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Special\Deadcode.cs,Match,Cyclomatic complexity of the method is 8
Long Parameter List,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,IntegerOperation,The method has 5 parameters. Parameters: instruction' operand1' operand2' conditionCode' result
Long Parameter List,Mosa.Compiler.Framework,BaseCodeEmitter,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseCodeEmitter.cs,EmitLink,The method has 5 parameters. Parameters: position' patchType' symbolOperand' patchOffset' referenceOffset
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,SetInstruction2,The method has 5 parameters. Parameters: instruction' result' result2' operand1' operand2
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,SetInstruction2,The method has 6 parameters. Parameters: instruction' result' result2' operand1' operand2' operand3
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,SetInstruction,The method has 5 parameters. Parameters: instruction' statusRegister' result' operand1' operand2
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,SetInstruction,The method has 5 parameters. Parameters: instruction' statusRegister' condition' result' operand1
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,SetInstruction,The method has 5 parameters. Parameters: instruction' condition' result' operand1' operand2
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,SetInstruction,The method has 6 parameters. Parameters: instruction' condition' result' operand1' operand2' operand3
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,SetInstruction,The method has 6 parameters. Parameters: instruction' condition' result' operand1' operand2' block
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,SetInstruction,The method has 6 parameters. Parameters: instruction' statusRegister' condition' result' operand1' operand2
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,SetInstruction,The method has 5 parameters. Parameters: instruction' result' operand1' operand2' operand3
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,SetInstruction,The method has 6 parameters. Parameters: instruction' result' operand1' operand2' operand3' operand4
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,AppendInstruction2,The method has 5 parameters. Parameters: instruction' result' result2' operand1' operand2
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,AppendInstruction2,The method has 6 parameters. Parameters: instruction' result' result2' operand1' operand2' operand3
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,AppendInstruction,The method has 5 parameters. Parameters: instruction' statusRegister' result' operand1' operand2
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,AppendInstruction,The method has 5 parameters. Parameters: instruction' result' operand1' operand2' operands
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,AppendInstruction,The method has 5 parameters. Parameters: instruction' statusRegister' condition' result' operand1
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,AppendInstruction,The method has 5 parameters. Parameters: instruction' condition' result' operand1' operand2
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,AppendInstruction,The method has 6 parameters. Parameters: instruction' condition' result' operand1' operand2' block
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,AppendInstruction,The method has 6 parameters. Parameters: instruction' statusRegister' condition' result' operand1' operand2
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,AppendInstruction,The method has 5 parameters. Parameters: instruction' result' operand1' operand2' operand3
Long Parameter List,Mosa.Compiler.Framework,Context,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Context.cs,AppendInstruction,The method has 6 parameters. Parameters: instruction' result' operand1' operand2' operand3' operand4
Long Parameter List,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The method has 5 parameters. Parameters: instruction' result' operand1' operand2' operands
Long Parameter List,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction2,The method has 5 parameters. Parameters: instruction' result' result2' operand1' operand2
Long Parameter List,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction2,The method has 6 parameters. Parameters: instruction' result' result2' operand1' operand2' operand3
Long Parameter List,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The method has 5 parameters. Parameters: instruction' result' operand1' operand2' operand3
Long Parameter List,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The method has 6 parameters. Parameters: instruction' result' operand1' operand2' operand3' operand4
Long Parameter List,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The method has 5 parameters. Parameters: instruction' statusRegister' result' operand1' operand2
Long Parameter List,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The method has 5 parameters. Parameters: instruction' statusRegister' condition' result' operand1
Long Parameter List,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The method has 5 parameters. Parameters: instruction' condition' result' operand1' operand2
Long Parameter List,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The method has 6 parameters. Parameters: instruction' condition' result' operand1' operand2' operand3
Long Parameter List,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The method has 6 parameters. Parameters: instruction' condition' result' operand1' operand2' block
Long Parameter List,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The method has 6 parameters. Parameters: instruction' statusRegister' condition' result' operand1' operand2
Long Parameter List,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,SetStackParameter,The method has 5 parameters. Parameters: index' type' name' isThis' offset
Long Parameter List,Mosa.Compiler.Framework,Operand,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Operand.cs,CreateStackParameter,The method has 5 parameters. Parameters: type' index' name' isThis' offset
Long Parameter List,Mosa.Compiler.Framework,PhysicalRegister,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\PhysicalRegister.cs,PhysicalRegister,The method has 5 parameters. Parameters: index' registerCode' name' isInteger' isFloatingPoint
Long Parameter List,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateCustomAttributeArgument,The method has 5 parameters. Parameters: name' count' argName' arg' isField
Long Parameter List,Mosa.Compiler.Framework.Trace,InstructionLogger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionLogger.cs,Run,The method has 5 parameters. Parameters: compilerTrace' stage' method' basicBlocks' version
Long Parameter List,Mosa.Compiler.Framework.Trace,TraceLog,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Trace\TraceLog.cs,TraceLog,The method has 5 parameters. Parameters: type' method' stage' section' version
Long Parameter List,Mosa.Compiler.Framework.Linker,LinkRequest,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\LinkRequest.cs,LinkRequest,The method has 6 parameters. Parameters: linkType' patchType' patchSymbol' patchOffset' referenceSymbol' referenceOffset
Long Parameter List,Mosa.Compiler.Framework.Linker,MosaLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\MosaLinker.cs,MosaLinker,The method has 8 parameters. Parameters: baseAddress' machineType' emitAllSymbols' emitStaticRelocations' emitShortSymbolName' linkerFormatType' createExtraSections' createExtraProgramHeaders
Long Parameter List,Mosa.Compiler.Framework.Linker,MosaLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\MosaLinker.cs,Link,The method has 6 parameters. Parameters: linkType' patchType' patchSymbol' patchOffset' referenceSymbol' referenceOffset
Long Parameter List,Mosa.Compiler.Framework.Linker,MosaLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\MosaLinker.cs,Link,The method has 6 parameters. Parameters: linkType' patchType' patchSymbolName' patchOffset' referenceSymbolName' referenceOffset
Long Parameter List,Mosa.Compiler.Framework.Linker,MosaLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\MosaLinker.cs,Link,The method has 6 parameters. Parameters: linkType' patchType' patchSymbol' patchOffset' referenceSymbolName' referenceOffset
Long Parameter List,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,BaseRegisterAllocator,The method has 6 parameters. Parameters: basicBlocks' virtualRegisters' architecture' addStackLocal' stackFrame' traceFactory
Long Parameter List,Mosa.Compiler.Framework.RegisterAllocator,BasicRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BasicRegisterAllocator.cs,BasicRegisterAllocator,The method has 6 parameters. Parameters: basicBlocks' virtualRegisters' architecture' addStackLocal' stackFrame' traceFactory
Long Parameter List,Mosa.Compiler.Framework.RegisterAllocator,GreedyRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\GreedyRegisterAllocator.cs,GreedyRegisterAllocator,The method has 6 parameters. Parameters: basicBlocks' virtualRegisters' architecture' addStackLocal' stackFrame' traceFactory
Long Parameter List,Mosa.Compiler.Framework.RegisterAllocator,LiveRange,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\LiveRange.cs,LiveRange,The method has 5 parameters. Parameters: start' end' virtualRegister' startIndex' endIndex
Long Parameter List,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Replace,The method has 5 parameters. Parameters: node' integerInstruction32' integerInstruction64' floatingPointR8Instruction' floatingPointR4Instruction
Long Parameter List,Mosa.Compiler.Framework.Stages,CompoundStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CompoundStage.cs,CopyCompound,The method has 6 parameters. Parameters: context' type' destinationBase' destination' sourceBase' source
Long Parameter List,Mosa.Compiler.Framework.Stages,ProtectedRegionLayoutStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ProtectedRegionLayoutStage.cs,CreateProtectedRegionDefinition,The method has 6 parameters. Parameters: name' start' end' handler' handlerType' exceptionType
Long Identifier,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,,The length of the parameter StringClassTypeDefinitionSymbolName is 35.
Long Identifier,Mosa.Compiler.Framework.Stages,InlineEvaluationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineEvaluationStage.cs,Run,The length of the parameter totalStackParameterInstruction is 30.
Long Identifier,Mosa.Compiler.Framework.Stages,ProtectedRegionLayoutStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ProtectedRegionLayoutStage.cs,CreateProtectedRegionDefinition,The length of the parameter protectedRegionDefinitionSymbol is 31.
Long Identifier,Mosa.Compiler.Framework.Stages,SparseConditionalConstantPropagationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\SparseConditionalConstantPropagationStage.cs,,The length of the parameter ConditionalConstantPropagationCount is 35.
Long Identifier,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,,The length of the parameter ConstantFoldingAndStrengthReductionCount is 40.
Long Identifier,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,,The length of the parameter StrengthReductionAndSimplificationCount is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_AddCarryIn32 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_AddCarryIn64 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_ShiftRight32 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_ShiftRight64 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_ShiftLeft32 is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_ShiftLeft64 is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_DivUnsigned32 is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_DivUnsigned64 is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_DivSigned32 is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_DivSigned64 is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_MulUnsigned32 is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_MulUnsigned64 is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_MulSigned32 is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_MulSigned64 is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_RemUnsigned32 is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_RemUnsigned64 is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_RemSigned32 is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_RemSigned64 is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_SubCarryIn32 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_SubCarryIn64 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_SignExtend16x32 is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_SignExtend16x64 is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_SignExtend32x64 is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_SignExtend8x32 is 33.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_SignExtend8x64 is 33.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_ZeroExtend16x32 is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_ZeroExtend16x64 is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_ZeroExtend32x64 is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_ZeroExtend8x32 is 33.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_ZeroExtend8x64 is 33.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_Convert32ToR4 is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_Convert32ToR8 is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_Convert64ToR4 is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_Convert64ToR8 is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_IfThenElse32AlwaysTrue is 41.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_IfThenElse64AlwaysTrue is 41.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_IfThenElse32AlwaysFalse is 42.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_ConstantFolding_IfThenElse64AlwaysFalse is 42.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_Move32Propagation is 35.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_Move64Propagation is 35.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_Add32Combine is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_Add64Combine is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_AddR4Combine is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_AddR8Combine is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_Sub32Combine is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_Sub64Combine is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_SubR4Combine is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_SubR8Combine is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_MulUnsigned32 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_MulUnsigned64 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_And32Combine is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_And64Combine is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_Xor32Combine is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_Xor64Combine is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_AddSub32Combine is 33.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_AddSub64Combine is 33.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_AddSubR4Combine is 33.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_AddSubR8Combine is 33.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_SubAdd32Combine is 33.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_SubAdd64Combine is 33.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_SubAddR4Combine is 33.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_SubAddR8Combine is 33.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_GetLow64FromTo64 is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_GetHigh64FromTo64 is 35.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_GetHigh64To64 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_GetLow64To64 is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_To64FromLowHigh is 33.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_GetLow64FromShiftedRight32 is 44.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_GetLow64FromRightShiftAndTo64 is 47.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_GetHigh64FromRightLeftAndTo64 is 47.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_GetHigh64FromShiftedMore32 is 44.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Simplification_GetLow64FromShiftedMore32 is 43.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_And32Zero is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_And64Zero is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_Xor32Zero is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_Xor64Zero is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_Add32Zero is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_Add64Zero is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_ShiftRight32ZeroValue is 42.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_ShiftRight32ByZero is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_ShiftRight64ZeroValue is 42.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_ShiftRight64ByZero is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_ShiftLeft32ByZero is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_ShiftLeft64ByZero is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_Sub32ByZero is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_Sub64ByZero is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_Sub32Same is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_Sub64Same is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_Xor32Same is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_Xor64Same is 30.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_MulUnsigned32ByPowerOfTwo is 46.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_MulUnsigned64ByPowerOfTwo is 46.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_MulSigned32ByPowerOfTwo is 44.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_MulSigned64ByPowerOfTwo is 44.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_DivUnsigned32ByPowerOfTwo is 46.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_DivUnsigned64ByPowerOfTwo is 46.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_DivSigned32ByPowerOfTwo is 44.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_DivSigned64ByPowerOfTwo is 44.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_RemUnsigned32ByPowerOfTwo is 46.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_StrengthReduction_RemUnsigned64ByPowerOfTwo is 46.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_Add32MultipleWithCommon is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_Add64MultipleWithCommon is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_Sub32MultipleWithCommon is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_Sub64MultipleWithCommon is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend8x32FoldAdd32 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend16x32FoldAdd32 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend8x64FoldAdd32 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend16x64FoldAdd32 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend32x64FoldAdd32 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend8x32FoldAdd32 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend16x32FoldAdd32 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend8x64FoldAdd32 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend16x64FoldAdd32 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend32x64FoldAdd32 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend8x32FoldAdd64 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend16x32FoldAdd64 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend8x64FoldAdd64 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend16x64FoldAdd64 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend32x64FoldAdd64 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend8x32FoldAdd64 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend16x32FoldAdd64 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend8x64FoldAdd64 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend16x64FoldAdd64 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend32x64FoldAdd64 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend8x32FoldSub32 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend16x32FoldSub32 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend8x64FoldSub32 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend16x64FoldSub32 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend32x64FoldSub32 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend8x32FoldSub32 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend16x32FoldSub32 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend8x64FoldSub32 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend16x64FoldSub32 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend32x64FoldSub32 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend8x32FoldSub64 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend16x32FoldSub64 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend8x64FoldSub64 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend16x64FoldSub64 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend32x64FoldSub64 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend8x32FoldSub64 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend16x32FoldSub64 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend8x64FoldSub64 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend16x64FoldSub64 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend32x64FoldSub64 is 39.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend8x32AddressFold is 40.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend16x32AddressFold is 41.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend8x64AddressFold is 40.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend16x64AddressFold is 41.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadSignExtend32x64AddressFold is 41.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend8x32AddressFold is 40.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend16x32AddressFold is 41.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend8x64AddressFold is 40.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend16x64AddressFold is 41.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_LoadZeroExtend32x64AddressFold is 41.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_Truncate64x32Add64FromZeroExtended32x64 is 50.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_Truncate64x32Sub64FromZeroExtended32x64 is 50.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_Truncate64x32MulUnsigned64FromZeroExtended32x64 is 58.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_Truncate64x32And64FromZeroExtended32x64 is 50.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_Truncate64x32Or64FromZeroExtended32x64 is 49.
Long Identifier,Mosa.Compiler.Framework.Transform.Auto,AutoInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\AutoInstance.cs,,The length of the parameter IR_Rewrite_Truncate64x32Xor64FromZeroExtended32x64 is 50.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_ConstantFolding_Compare32x32 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_ConstantFolding_Compare32x64 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_ConstantFolding_Compare64x32 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_ConstantFolding_Compare64x64 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_ConstantFolding_CompareBranch32 is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_ConstantFolding_CompareBranch64 is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_AddCarryOut32CarryNotUsed is 43.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_AddCarryOut64CarryNotUsed is 43.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_SubCarryOut32CarryNotUsed is 43.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_SubCarryOut64CarryNotUsed is 43.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_Compare32x32Same is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_Compare32x64Same is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_Compare64x32Same is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_Compare64x64Same is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_Compare32x32NotSame is 37.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_Compare32x64NotSame is 37.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_Compare64x32NotSame is 37.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_Compare64x64NotSame is 37.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_CompareBranch32OnlyOneExit is 44.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Simplification_CompareBranch64OnlyOneExit is 44.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_ConstantMove_CompareBranch32 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_ConstantMove_CompareBranch64 is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_CompareBranch32From64 is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_CompareBranch64From32 is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Special_MoveCompoundPropagate is 32.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Special_Move32PropagateConstant is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Special_Move64PropagateConstant is 34.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_Compare32x32Combine32x32 is 35.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_Compare32x32Combine64x32 is 35.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_Compare32x32Combine64x64 is 35.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_Compare64x64Combine32x32 is 35.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_Compare64x64Combine64x32 is 35.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_Compare64x64Combine64x64 is 35.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_CompareBranch32Combine32x32 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_CompareBranch32Combine32x64 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_CompareBranch32Combine64x32 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_CompareBranch32Combine64x64 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_CompareBranch64Combine32x32 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_CompareBranch64Combine32x64 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_CompareBranch64Combine64x32 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_CompareBranch64Combine64x64 is 38.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_Compare64x32SameHigh is 31.
Long Identifier,Mosa.Compiler.Framework.Transform.Manual,ManualInstance,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\ManualInstance.cs,,The length of the parameter IR_Rewrite_Compare64x32SameLow is 30.
Long Statement,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,ProcessInstruction,The length of the statement  "			else if (instruction == IRInstruction.Phi32 || instruction == IRInstruction.Phi64 || instruction == IRInstruction.PhiR4 || instruction == IRInstruction.PhiR8) " is 158.
Long Statement,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,IntegerOperation,The length of the statement  "				if (IntegerOperation(node.Instruction' operand1.ConstantUnsignedLongInteger' operand2.ConstantUnsignedLongInteger' node.ConditionCode' out ulong value)) " is 152.
Long Statement,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,CompareegerBranch,The length of the statement  "				bool? compare = Compare(operand1.ConstantUnsignedLongInteger' operand2.ConstantUnsignedLongInteger' node.ConditionCode); " is 120.
Long Statement,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,Phi,The length of the statement  "				//if (Trace.Active) Trace.Log("# " + index.ToString() + ": " + predecessor.ToString() + " " + (executable ? "Yes" : "No")); " is 123.
Long Statement,Mosa.Compiler.Framework.Analysis.LiveVariableAnalysis,GCEnvironment,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\LiveVariableAnalysis\GCEnvironment.cs,GetInputs,The length of the statement  "			if (node.Instruction == IRInstruction.KillAll || node.Instruction == IRInstruction.KillAllExcept || node.Instruction == IRInstruction.Kill) " is 139.
Long Statement,Mosa.Compiler.Framework.Analysis.LiveVariableAnalysis,GCEnvironment,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\LiveVariableAnalysis\GCEnvironment.cs,GetOutputs,The length of the statement  "			if (node.Instruction == IRInstruction.KillAll || node.Instruction == IRInstruction.KillAllExcept || node.Instruction == IRInstruction.Kill) " is 139.
Long Statement,Mosa.Compiler.Framework.Analysis.LiveVariableAnalysis,LiveRanges,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\LiveVariableAnalysis\LiveRanges.cs,Add,The length of the statement  "							var newliveRange = new Range(Math.Min(liveRange.Start' nextLiveRange.Start)' Math.Max(liveRange.End' nextLiveRange.End)); " is 121.
Long Statement,Mosa.Compiler.Framework,BaseCodeEmitter,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseCodeEmitter.cs,EmitForwardLink,The length of the statement  "			Linker.Link(LinkType.AbsoluteAddress' PatchType.I32' MethodName' CurrentPosition' MethodName' CurrentPosition + offset); " is 120.
Long Statement,Mosa.Compiler.Framework,BaseCodeTransformationStageLegacy,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseCodeTransformationStageLegacy.cs,Run,The length of the statement  "					if (visitationDictionary.TryGetValue(node.Instruction' out Tuple<ContextVisitationDelegate' NodeVisitationDelegate> visitationMethod)) " is 134.
Long Statement,Mosa.Compiler.Framework,BaseMethodCompilerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseMethodCompilerStage.cs,RemoveBlockFromPhiInstructions,The length of the statement  "					if (node.Instruction != IRInstruction.Phi32 && node.Instruction != IRInstruction.Phi64 && node.Instruction != IRInstruction.PhiR4 && node.Instruction != IRInstruction.PhiR8) " is 173.
Long Statement,Mosa.Compiler.Framework,BaseMethodCompilerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseMethodCompilerStage.cs,UpdatePhiInstructionTargets,The length of the statement  "					if (node.Instruction != IRInstruction.Phi32 && node.Instruction != IRInstruction.Phi64 && node.Instruction != IRInstruction.PhiR4 && node.Instruction != IRInstruction.PhiR8) " is 173.
Long Statement,Mosa.Compiler.Framework,BaseMethodCompilerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseMethodCompilerStage.cs,CreateTraceLog,The length of the statement  "			var traceLog = new TraceLog(TraceType.MethodDebug' MethodCompiler.Method' FormattedStageName' section' MethodData.Version); " is 123.
Long Statement,Mosa.Compiler.Framework,BaseMethodCompilerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseMethodCompilerStage.cs,IsPhiInstruction,The length of the statement  "			return instruction == IRInstruction.Phi32 || instruction == IRInstruction.Phi64 || instruction == IRInstruction.PhiR4 || instruction == IRInstruction.PhiR8; " is 156.
Long Statement,Mosa.Compiler.Framework,BasicBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BasicBlock.cs,AddBranchInstruction,The length of the statement  "			// Note: The list only has 1 unless it's a switch statement' so actual performance is very close to O(1) for non-switch statements " is 130.
Long Statement,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetDefaultMethodPipeline,The length of the statement  "				(compilerOptions.EnableLoopInvariantCodeMotion && compilerOptions.EnableSSA) ? new LoopInvariantCodeMotionStage() : null' " is 121.
Long Statement,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetDefaultMethodPipeline,The length of the statement  "				(compilerOptions.EnableSparseConditionalConstantPropagation && compilerOptions.EnableSSA) ? new SparseConditionalConstantPropagationStage() : null' " is 147.
Long Statement,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetDefaultMethodPipeline,The length of the statement  "				(compilerOptions.EnableLongExpansion && compilerOptions.Architecture.NativePointerSize == 4) ? new LongExpansionStage() : null' " is 127.
Long Statement,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetDefaultMethodPipeline,The length of the statement  "				(compilerOptions.EnableBasicOptimizations && compilerOptions.EnableLongExpansion && compilerOptions.Architecture.NativePointerSize == 4) ? new OptimizationStage() : null' " is 170.
Long Statement,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetDefaultMethodPipeline,The length of the statement  "				(compilerOptions.TwoPassOptimizations && compilerOptions.EnableValueNumbering && compilerOptions.EnableSSA) ? new ValueNumberingStage() : null' " is 143.
Long Statement,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetDefaultMethodPipeline,The length of the statement  "				(compilerOptions.TwoPassOptimizations && compilerOptions.EnableLoopInvariantCodeMotion && compilerOptions.EnableSSA) ? new LoopInvariantCodeMotionStage() : null' " is 161.
Long Statement,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetDefaultMethodPipeline,The length of the statement  "				(compilerOptions.TwoPassOptimizations && compilerOptions.EnableSparseConditionalConstantPropagation && compilerOptions.EnableSSA) ? new SparseConditionalConstantPropagationStage() : null' " is 187.
Long Statement,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetDefaultMethodPipeline,The length of the statement  "				(compilerOptions.TwoPassOptimizations && compilerOptions.EnableBasicOptimizations && compilerOptions.EnableSSA) ? new OptimizationStage() : null' " is 145.
Long Statement,Mosa.Compiler.Framework,DelegatePatcher,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\DelegatePatcher.cs,PatchConstructor,The length of the statement  "			var loadParameterInstruction = methodCompiler.Architecture.Is32BitPlatform ? (BaseInstruction)IRInstruction.LoadParam32 : IRInstruction.LoadParam64; " is 148.
Long Statement,Mosa.Compiler.Framework,DelegatePatcher,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\DelegatePatcher.cs,PatchConstructor,The length of the statement  "			var storeIntegerInstruction = methodCompiler.Architecture.Is32BitPlatform ? (BaseInstruction)IRInstruction.Store32 : IRInstruction.Store64; " is 139.
Long Statement,Mosa.Compiler.Framework,DelegatePatcher,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\DelegatePatcher.cs,PatchInvoke,The length of the statement  "			var loadInstruction = methodCompiler.Architecture.Is32BitPlatform ? (BaseInstruction)IRInstruction.Load32 : IRInstruction.Load64; " is 129.
Long Statement,Mosa.Compiler.Framework,DelegatePatcher,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\DelegatePatcher.cs,PatchInvoke,The length of the statement  "			var compareInstruction = methodCompiler.Architecture.Is32BitPlatform ? (BaseInstruction)IRInstruction.Compare32x32 : IRInstruction.Compare64x64; " is 144.
Long Statement,Mosa.Compiler.Framework,DelegatePatcher,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\DelegatePatcher.cs,PatchInvoke,The length of the statement  "			var branchInstruction = methodCompiler.Architecture.Is32BitPlatform ? (BaseInstruction)IRInstruction.CompareBranch32 : IRInstruction.CompareBranch64; " is 149.
Long Statement,Mosa.Compiler.Framework,DelegatePatcher,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\DelegatePatcher.cs,PatchInvoke,The length of the statement  "			var nativeIntegerType = methodCompiler.Architecture.Is32BitPlatform ? methodCompiler.TypeSystem.BuiltIn.U4 : methodCompiler.TypeSystem.BuiltIn.U8; " is 146.
Long Statement,Mosa.Compiler.Framework,DelegatePatcher,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\DelegatePatcher.cs,PatchInvoke,The length of the statement  "			bool withReturn = (methodCompiler.Method.Signature.ReturnType == null) ? false : !methodCompiler.Method.Signature.ReturnType.IsVoid; " is 132.
Long Statement,Mosa.Compiler.Framework,DelegatePatcher,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\DelegatePatcher.cs,PatchInvoke,The length of the statement  "					var paramLoadInstruction = BaseMethodCompilerStage.GetLoadParameterInstruction(vrs[i].Type' methodCompiler.Architecture.Is32BitPlatform); " is 137.
Long Statement,Mosa.Compiler.Framework,DelegatePatcher,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\DelegatePatcher.cs,PatchInvoke,The length of the statement  "			var opReturn = withReturn ? methodCompiler.AllocateVirtualRegisterOrStackSlot(methodCompiler.Method.Signature.ReturnType) : null; " is 129.
Long Statement,Mosa.Compiler.Framework,DelegatePatcher,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\DelegatePatcher.cs,PatchInvoke,The length of the statement  "				var setReturn = BaseMethodCompilerStage.GetSetReturnInstruction(opReturn.Type' methodCompiler.Architecture.Is32BitPlatform); " is 124.
Long Statement,Mosa.Compiler.Framework,DelegatePatcher,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\DelegatePatcher.cs,PatchBeginInvoke,The length of the statement  "			var setReturn = BaseMethodCompilerStage.GetSetReturnInstruction(nullOperand.Type' methodCompiler.Architecture.Is32BitPlatform); " is 127.
Long Statement,Mosa.Compiler.Framework,LoadStore,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\LoadStore.cs,OrderLoadOperands,The length of the statement  "				context.Operand1 = methodCompiler.CreateConstant(context.Operand1.ConstantUnsigned64 + context.Operand2.ConstantUnsigned64); " is 124.
Long Statement,Mosa.Compiler.Framework,LoadStore,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\LoadStore.cs,OrderStoreOperands,The length of the statement  "				context.Operand1 = methodCompiler.CreateConstant(context.Operand1.ConstantUnsigned64 + context.Operand2.ConstantUnsigned64); " is 124.
Long Statement,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,CalculateMethodParameterSize,The length of the statement  "				var size = parameter.ParameterType.IsValueType ? TypeLayout.GetTypeSize(parameter.ParameterType) : TypeLayout.NativePointerAlignment; " is 133.
Long Statement,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,ExecutePipeline,The length of the statement  "					var entry = $"[{i:00}] {Pipeline[i].Name.PadRight(45)} : {percentage:00.00} % [{string.Empty.PadRight(per' '#').PadRight(20' ' ')}] ({ticks})"; " is 143.
Long Statement,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,SplitLongOperand,The length of the statement  "			//	operandLow = Operand.CreateStackParameter(TypeSystem.BuiltIn.U4' operand.Index' operand.Name + " (Low)"' false' (int)operand.Offset); " is 136.
Long Statement,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,SplitLongOperand,The length of the statement  "			//	operandHigh = Operand.CreateStackParameter(TypeSystem.BuiltIn.U4' operand.Index' operand.Name + " (High)"' false' (int)operand.Offset + 4); " is 142.
Long Statement,Mosa.Compiler.Framework,MethodScanner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodScanner.cs,Complete,The length of the statement  "					if ((!(!method.HasImplementation && method.IsAbstract)) && !method.HasOpenGenericParams && !method.DeclaringType.HasOpenGenericParams) " is 134.
Long Statement,Mosa.Compiler.Framework,MethodScanner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodScanner.cs,ScheduleMethod,The length of the statement  "				if (method.FullName.Contains("Mosa.UnitTests.GenericInterfaceTestClass`1<System.Int32>::Mosa.UnitTests.IInterfaceBB<T>.Get")) " is 125.
Long Statement,Mosa.Compiler.Framework,MosaCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaCompiler.cs,Load,The length of the statement  "				TypeLayout = new MosaTypeLayout(typeSystem' CompilerOptions.Architecture.NativePointerSize' CompilerOptions.Architecture.NativeAlignment); " is 138.
Long Statement,Mosa.Compiler.Framework,MosaCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaCompiler.cs,Initialize,The length of the statement  "				Linker = new MosaLinker(CompilerOptions.BaseAddress' CompilerOptions.Architecture.ElfMachineType' CompilerOptions.EmitAllSymbols' CompilerOptions.EmitStaticRelocations' CompilerOptions.EmitShortSymbolNames' CompilerOptions.LinkerFormatType' CompilerOptions.CreateExtraSections' CompilerOptions.CreateExtraProgramHeaders); " is 321.
Long Statement,Mosa.Compiler.Framework,MosaTypeLayout,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaTypeLayout.cs,GetMethodTable,The length of the statement  "			if (type.BaseType == null && !type.IsInterface && type.FullName != "System.Object")   // ghost types like generic params' function ptr' etc. " is 140.
Long Statement,Mosa.Compiler.Framework,MosaTypeLayout,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaTypeLayout.cs,ResolveType,The length of the statement  "			if (type.BaseType == null && !type.IsInterface && type.FullName != "System.Object")   // ghost types like generic params' function ptr' etc. " is 140.
Long Statement,Mosa.Compiler.Framework,MosaTypeLayout,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaTypeLayout.cs,ScanExplicitInterfaceImplementations,The length of the statement  "						if (overrideTarget.Equals(interfaceMethod) && overrideTarget.DeclaringType.Equals(interfaceType) && cleanOverrideTargetName.Equals(cleanInterfaceMethodName)) " is 157.
Long Statement,Mosa.Compiler.Framework,MosaTypeLayout,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaTypeLayout.cs,FindInterfaceMethod,The length of the statement  "			throw new InvalidOperationException("Failed to find implicit interface implementation for type " + type + " and interface method " + interfaceMethod); " is 150.
Long Statement,Mosa.Compiler.Framework,Operand,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Operand.cs,CreateHighSplitForLong,The length of the statement  "				operand = CreateStackParameter(typeSystem.BuiltIn.U4' longOperand.Index' longOperand.Name + " (High)"' false' (int)longOperand.Offset + 4); " is 139.
Long Statement,Mosa.Compiler.Framework,Operand,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Operand.cs,CreateLowSplitForLong,The length of the statement  "				operand = CreateStackParameter(typeSystem.BuiltIn.U4' longOperand.Index' longOperand.Name + " (Low)"' false' (int)longOperand.Offset); " is 134.
Long Statement,Mosa.Compiler.Framework.CIL,BinaryComparisonInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\BinaryComparisonInstruction.cs,Decode,The length of the statement  "			node.Result = decoder.MethodCompiler.CreateVirtualRegister(decoder.MethodCompiler.Architecture.Is32BitPlatform ? decoder.TypeSystem.BuiltIn.I4 : decoder.TypeSystem.BuiltIn.I8); " is 176.
Long Statement,Mosa.Compiler.Framework.CIL,LdcInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdcInstruction.cs,Decode,The length of the statement  "				case OpCode.Ldc_i4: constantValueOperand = decoder.MethodCompiler.CreateConstant((int)decoder.Instruction.Operand); break; " is 122.
Long Statement,Mosa.Compiler.Framework.CIL,LdcInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdcInstruction.cs,Decode,The length of the statement  "				case OpCode.Ldc_i4_s: constantValueOperand = decoder.MethodCompiler.CreateConstant((sbyte)decoder.Instruction.Operand); break; " is 126.
Long Statement,Mosa.Compiler.Framework.CIL,LdcInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdcInstruction.cs,Decode,The length of the statement  "				case OpCode.Ldc_i8: constantValueOperand = decoder.MethodCompiler.CreateConstant((long)decoder.Instruction.Operand); break; " is 123.
Long Statement,Mosa.Compiler.Framework.CIL,LdcInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdcInstruction.cs,Decode,The length of the statement  "				case OpCode.Ldc_r4: constantValueOperand = decoder.MethodCompiler.CreateConstant((float)decoder.Instruction.Operand); break; " is 124.
Long Statement,Mosa.Compiler.Framework.CIL,LdcInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdcInstruction.cs,Decode,The length of the statement  "				case OpCode.Ldc_r8: constantValueOperand = decoder.MethodCompiler.CreateConstant((double)decoder.Instruction.Operand); break; " is 125.
Long Statement,Mosa.Compiler.Framework.CIL,LdtokenInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdtokenInstruction.cs,Decode,The length of the statement  "				node.Result = decoder.MethodCompiler.CreateVirtualRegister(decoder.TypeSystem.GetTypeByName("System"' "RuntimeTypeHandle")); " is 124.
Long Statement,Mosa.Compiler.Framework.CIL,LdtokenInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdtokenInstruction.cs,Decode,The length of the statement  "				node.Result = decoder.MethodCompiler.CreateVirtualRegister(decoder.TypeSystem.GetTypeByName("System"' "RuntimeMethodHandle")); " is 126.
Long Statement,Mosa.Compiler.Framework.CIL,LdtokenInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdtokenInstruction.cs,Decode,The length of the statement  "				node.Result = decoder.MethodCompiler.CreateVirtualRegister(decoder.TypeSystem.GetTypeByName("System"' "RuntimeFieldHandle")); " is 125.
Long Statement,Mosa.Compiler.Framework.CIL,NewobjInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\NewobjInstruction.cs,Resolve,The length of the statement  "			Debug.Assert(context.OperandCount == context.InvokeMethod.Signature.Parameters.Count - offset' "Operand count doesn't match parameter count."); " is 143.
Long Statement,Mosa.Compiler.Framework.CIL,RefanytypeInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\RefanytypeInstruction.cs,Decode,The length of the statement  "			node.Result = decoder.MethodCompiler.CreateVirtualRegister(decoder.MethodCompiler.Architecture.Is32BitPlatform ? decoder.TypeSystem.BuiltIn.I4 : decoder.TypeSystem.BuiltIn.I8); " is 176.
Long Statement,Mosa.Compiler.Framework.CIL,RefanyvalInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\RefanyvalInstruction.cs,Resolve,The length of the statement  "				if (!Object.ReferenceEquals(_operands[0].Type' MetadataTypeReference.FromName(compiler.Assembly.Metadata' @"System"' @"TypedReference"))) " is 137.
Long Statement,Mosa.Compiler.Framework.CIL,SizeofInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\SizeofInstruction.cs,Decode,The length of the statement  "			node.Result = decoder.MethodCompiler.CreateVirtualRegister(decoder.MethodCompiler.Architecture.Is32BitPlatform ? decoder.TypeSystem.BuiltIn.I4 : decoder.TypeSystem.BuiltIn.I8); " is 176.
Long Statement,Mosa.Compiler.Framework.CompilerStages,DebugFileStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\DebugFileStage.cs,EmitMethods,The length of the statement  "			writer.WriteLine("MethodID\tAddress\tSize\tMethodDef\tFullName\tTypeID\tReturnTypeID\tStackSize\tParameterStackSize\tAttributes"); " is 130.
Long Statement,Mosa.Compiler.Framework.CompilerStages,ExceptionTableStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\ExceptionTableStage.cs,CreateMethodExceptionLookupTable,The length of the statement  "			var exceptionMethodLookupTable = Linker.DefineSymbol(Metadata.MethodExceptionLookupTable' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 148.
Long Statement,Mosa.Compiler.Framework.CompilerStages,ExceptionTableStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\ExceptionTableStage.cs,CreateMethodExceptionLookupTable,The length of the statement  "						Linker.Link(LinkType.AbsoluteAddress' NativePatchType' exceptionMethodLookupTable' writer.GetPosition()' targetMethodData.Method.FullName' 0); " is 142.
Long Statement,Mosa.Compiler.Framework.CompilerStages,ExceptionTableStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\ExceptionTableStage.cs,CreateMethodExceptionLookupTable,The length of the statement  "						Linker.Link(LinkType.Size' NativePatchType' exceptionMethodLookupTable' writer.GetPosition()' targetMethodData.Method.FullName' 0); " is 131.
Long Statement,Mosa.Compiler.Framework.CompilerStages,ExceptionTableStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\ExceptionTableStage.cs,CreateMethodExceptionLookupTable,The length of the statement  "						Linker.Link(LinkType.AbsoluteAddress' NativePatchType' exceptionMethodLookupTable' writer.GetPosition()' Metadata.MethodDefinition + method.FullName' 0); " is 153.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MapFileStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MapFileStage.cs,EmitSections,The length of the statement  "				writer.WriteLine("{0:x16} {1:x16} {2:x16} {3} {4}"' linkerSection.FileOffset' linkerSection.VirtualAddress' linkerSection.Size' linkerSection.Name.PadRight(32)' linkerSection.SectionKind); " is 188.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MapFileStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MapFileStage.cs,EmitSymbols,The length of the statement  "					writer.WriteLine("{0:x16} {1:x16} {2:x16} {3} {4}"' symbol.VirtualAddress' symbol.SectionOffset' symbol.Size' symbol.SectionKind.ToString().PadRight(7)' symbol.Name); " is 166.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,EmitStringWithLength,The length of the statement  "			Linker.Link(LinkType.AbsoluteAddress' NativePatchType' symbol' writer.GetPosition()' $"{Metadata.TypeDefinition}System.String"' 0); " is 131.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateDefinitionTables,The length of the statement  "			var assemblyListSymbol = Linker.DefineSymbol(Metadata.AssembliesTable' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 129.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateDefinitionTables,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' assemblyListSymbol' writer.GetPosition()' assemblyTableSymbol' 0); " is 121.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateAssemblyDefinition,The length of the statement  "			var assemblyTableSymbol = Linker.DefineSymbol(Metadata.AssemblyDefinition + module.Assembly' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 151.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateAssemblyDefinition,The length of the statement  "			Linker.Link(LinkType.AbsoluteAddress' NativePatchType' assemblyTableSymbol' writer.GetPosition()' assemblyNameSymbol' 0); " is 121.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateAssemblyDefinition,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' assemblyTableSymbol' writer.GetPosition()' customAttributeListSymbol' 0); " is 128.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateTypeDefinition,The length of the statement  "			var typeTableSymbol = Linker.DefineSymbol(Metadata.TypeDefinition + type.FullName' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 141.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateTypeDefinition,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' typeTableSymbol' writer.GetPosition()' customAttributeListSymbol' 0); " is 124.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateTypeDefinition,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' typeTableSymbol' writer.GetPosition()' Metadata.TypeDefinition + type.BaseType.FullName' 0); " is 147.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateTypeDefinition,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' typeTableSymbol' writer.GetPosition()' Metadata.TypeDefinition + type.DeclaringType.FullName' 0); " is 152.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateTypeDefinition,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' typeTableSymbol' writer.GetPosition()' Metadata.TypeDefinition + type.ElementType.FullName' 0); " is 150.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateTypeDefinition,The length of the statement  "					Linker.Link(LinkType.AbsoluteAddress' NativePatchType' typeTableSymbol' writer.GetPosition()' Metadata.MethodDefinition + targetMethodData.Method.FullName' 0); " is 159.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateTypeDefinition,The length of the statement  "					Linker.Link(LinkType.AbsoluteAddress' NativePatchType' typeTableSymbol' writer.GetPosition()' interfaceSlotTableSymbol' 0); " is 123.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateTypeDefinition,The length of the statement  "					Linker.Link(LinkType.AbsoluteAddress' NativePatchType' typeTableSymbol' writer.GetPosition()' interfaceBitmapSymbol' 0); " is 120.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateTypeDefinition,The length of the statement  "						Linker.Link(LinkType.AbsoluteAddress' NativePatchType' typeTableSymbol' writer.GetPosition()' targetMethodData.Method.FullName' 0); " is 131.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateTypeDefinition,The length of the statement  "					Linker.Link(LinkType.AbsoluteAddress' NativePatchType' typeTableSymbol' writer.GetPosition()' methodDefinitionSymbol' 0); " is 121.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateInterfaceBitmap,The length of the statement  "			var symbol = Linker.DefineSymbol(Metadata.InterfaceBitmap + type.FullName' SectionKind.ROData' TypeLayout.NativePointerAlignment' bitmap.Length); " is 145.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateInterfaceSlotTable,The length of the statement  "			var interfaceSlotTableSymbol = Linker.DefineSymbol(Metadata.InterfaceSlotTable + type.FullName' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 154.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateInterfaceSlotTable,The length of the statement  "					Linker.Link(LinkType.AbsoluteAddress' NativePatchType' interfaceSlotTableSymbol' writer.GetPosition()' interfaceMethodTableSymbol' 0); " is 134.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateInterfaceMethodTable,The length of the statement  "			var interfaceMethodTableSymbol = Linker.DefineSymbol($"{Metadata.InterfaceMethodTable}{type.FullName}${interfaceType.FullName}"' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 187.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateInterfaceMethodTable,The length of the statement  "			Linker.Link(LinkType.AbsoluteAddress' NativePatchType' interfaceMethodTableSymbol' writer.GetPosition()' Metadata.TypeDefinition + interfaceType.FullName' 0); " is 158.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateInterfaceMethodTable,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' interfaceMethodTableSymbol' writer.GetPosition()' methodDefinitionSymbol' 0); " is 132.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateFieldDefinitions,The length of the statement  "			var fieldsTableSymbol = Linker.DefineSymbol(Metadata.FieldsTable + type.FullName' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 140.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateFieldDefinitions,The length of the statement  "				var fieldDefSymbol = Linker.DefineSymbol(Metadata.FieldDefinition + field.FullName' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 142.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateFieldDefinitions,The length of the statement  "					Linker.Link(LinkType.AbsoluteAddress' NativePatchType' fieldDefSymbol' writer2.GetPosition()' customAttributesTableSymbol' 0); " is 126.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateFieldDefinitions,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' fieldDefSymbol' writer2.GetPosition()' Metadata.TypeDefinition + field.FieldType.FullName' 0); " is 149.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreatePropertyDefinitions,The length of the statement  "			var propertiesTableSymbol = Linker.DefineSymbol(Metadata.PropertiesTable + type.FullName' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 148.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreatePropertyDefinitions,The length of the statement  "				var propertyDefSymbol = Linker.DefineSymbol(Metadata.PropertyDefinition + property.FullName' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 151.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreatePropertyDefinitions,The length of the statement  "					Linker.Link(LinkType.AbsoluteAddress' NativePatchType' propertyDefSymbol' writer.GetPosition()' customAttributesTableSymbol' 0); " is 128.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreatePropertyDefinitions,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' propertyDefSymbol' writer2.GetPosition()' Metadata.TypeDefinition + property.PropertyType.FullName' 0); " is 158.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreatePropertyDefinitions,The length of the statement  "					if (property.GetterMethod != null && property.GetterMethod.HasImplementation && !property.GetterMethod.HasOpenGenericParams) " is 124.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreatePropertyDefinitions,The length of the statement  "						Linker.Link(LinkType.AbsoluteAddress' NativePatchType' propertyDefSymbol' writer2.GetPosition()' Metadata.MethodDefinition + property.GetterMethod.FullName' 0); " is 160.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreatePropertyDefinitions,The length of the statement  "					if (property.SetterMethod != null && property.SetterMethod.HasImplementation && !property.SetterMethod.HasOpenGenericParams) " is 124.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreatePropertyDefinitions,The length of the statement  "						Linker.Link(LinkType.AbsoluteAddress' NativePatchType' propertyDefSymbol' writer2.GetPosition()' Metadata.MethodDefinition + property.SetterMethod.FullName' 0); " is 160.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreatePropertyDefinitions,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' propertiesTableSymbol' writer.GetPosition()' propertyDefSymbol' 0); " is 122.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateMethodDefinition,The length of the statement  "			methodTableSymbol = Linker.DefineSymbol(symbolName' SectionKind.ROData' TypeLayout.NativePointerAlignment' (method.Signature.Parameters.Count + 9) * TypeLayout.NativePointerSize); " is 179.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateMethodDefinition,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' methodTableSymbol' writer.GetPosition()' customAttributeListSymbol' 0); " is 126.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateMethodDefinition,The length of the statement  "			writer.Write(targetMethodData.LocalMethodStackSize | (targetMethodData.ParameterStackSize << 16)' TypeLayout.NativePointerSize); " is 128.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateMethodDefinition,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' methodTableSymbol' writer.GetPosition()' targetMethodData.Method.FullName' 0); " is 133.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateMethodDefinition,The length of the statement  "			Linker.Link(LinkType.AbsoluteAddress' NativePatchType' methodTableSymbol' writer.GetPosition()' Metadata.TypeDefinition + method.Signature.ReturnType.FullName' 0); " is 163.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateMethodDefinition,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' methodTableSymbol' writer.GetPosition()' Metadata.ProtectedRegionTable + targetMethodData.Method.FullName' 0); " is 165.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateMethodDefinition,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' methodTableSymbol' writer.GetPosition()' parameterDefinitionSymbol' 0); " is 126.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateParameterDefinition,The length of the statement  "			var parameterTableSymbol = Linker.DefineSymbol(Metadata.MethodDefinition + parameter.FullName' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 153.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateParameterDefinition,The length of the statement  "			Linker.Link(LinkType.AbsoluteAddress' NativePatchType' parameterTableSymbol' writer.GetPosition()' parameterNameSymbol' 0); " is 123.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateParameterDefinition,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' parameterTableSymbol' writer.GetPosition()' customAttributeListSymbol' 0); " is 129.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateParameterDefinition,The length of the statement  "			Linker.Link(LinkType.AbsoluteAddress' NativePatchType' parameterTableSymbol' writer.GetPosition()' Metadata.TypeDefinition + parameter.ParameterType.FullName' 0); " is 162.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateCustomAttributesTable,The length of the statement  "			customAttributesTableSymbol = Linker.DefineSymbol(symbolName' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 120.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateCustomAttributesTable,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' customAttributesTableSymbol' writer.GetPosition()' customAttributeTableSymbol' 0); " is 137.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateCustomAttribute,The length of the statement  "			var customAttributeSymbol = Linker.DefineSymbol(Metadata.CustomAttribute + name' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 139.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateCustomAttribute,The length of the statement  "			Linker.Link(LinkType.AbsoluteAddress' NativePatchType' customAttributeSymbol' writer1.GetPosition()' Metadata.TypeDefinition + ca.Constructor.DeclaringType.FullName' 0); " is 169.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateCustomAttribute,The length of the statement  "			Linker.Link(LinkType.AbsoluteAddress' NativePatchType' customAttributeSymbol' writer1.GetPosition()' Metadata.MethodDefinition + ca.Constructor.FullName' 0); " is 157.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateCustomAttribute,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' customAttributeSymbol' writer1.GetPosition()' customAttributeArgumentSymbol' 0); " is 135.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateCustomAttribute,The length of the statement  "				var customAttributeArgumentSymbol = CreateCustomAttributeArgument(name' 0' namedArg.Name' namedArg.Argument' namedArg.IsField); " is 127.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateCustomAttribute,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' customAttributeSymbol' writer1.GetPosition()' customAttributeArgumentSymbol' 0); " is 135.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateCustomAttributeArgument,The length of the statement  "			customAttributeArgumentSymbol = Linker.DefineSymbol(symbolName' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 122.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateCustomAttributeArgument,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' customAttributeArgumentSymbol' writer1.GetPosition()' nameSymbol' 0); " is 124.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateCustomAttributeArgument,The length of the statement  "			Linker.Link(LinkType.AbsoluteAddress' NativePatchType' customAttributeArgumentSymbol' writer1.GetPosition()' Metadata.TypeDefinition + arg.Type.FullName' 0); " is 157.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,WriteArgument,The length of the statement  "					Linker.Link(LinkType.AbsoluteAddress' NativePatchType' symbol' writer.GetPosition()' $"{Metadata.TypeDefinition}System.String"' 0); " is 131.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,WriteArgument,The length of the statement  "						Linker.Link(LinkType.AbsoluteAddress' NativePatchType' symbol' writer.GetPosition()' Metadata.TypeDefinition + valueType.FullName' 0); " is 134.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MethodCompileTimeStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MethodCompileTimeStage.cs,Finalization,The length of the statement  "					writer.WriteLine($"{data.ElapsedTicks}{'\t'}{data.ElapsedTicks / TimeSpan.TicksPerMillisecond}{'\t'}{data.Version}{'\t'}{data.Method.FullName}"); " is 145.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MethodTableStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MethodTableStage.cs,Finalization,The length of the statement  "			var methodLookupTable = Linker.DefineSymbol(Metadata.MethodLookupTable' SectionKind.ROData' TypeLayout.NativePointerAlignment' 0); " is 130.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MethodTableStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MethodTableStage.cs,Finalization,The length of the statement  "						Linker.Link(LinkType.AbsoluteAddress' NativePatchType' methodLookupTable' writer.GetPosition()' targetMethodData.Method.FullName' 0); " is 133.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MethodTableStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MethodTableStage.cs,Finalization,The length of the statement  "						Linker.Link(LinkType.Size' NativePatchType' methodLookupTable' writer.GetPosition()' targetMethodData.Method.FullName' 0); " is 122.
Long Statement,Mosa.Compiler.Framework.CompilerStages,MethodTableStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MethodTableStage.cs,Finalization,The length of the statement  "						Linker.Link(LinkType.AbsoluteAddress' NativePatchType' methodLookupTable' writer.GetPosition()' Metadata.MethodDefinition + method.FullName' 0); " is 144.
Long Statement,Mosa.Compiler.Framework.Trace,InstructionLogger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionLogger.cs,Run,The length of the statement  "					traceLog?.Log($"Block #{block.Sequence} - Label L_{block.Label:X4}" + (block.IsHeadBlock ? " [Header]" : string.Empty)); " is 120.
Long Statement,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,GetAssemblyListTable,The length of the statement  "			context.SetInstruction(move' context.Result' Operand.CreateUnmanagedSymbolPointer(Metadata.AssembliesTable' methodCompiler.TypeSystem)); " is 136.
Long Statement,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,GetDelegateMethodAddress,The length of the statement  "			context.SetInstruction(load' context.Result' context.Operand1' methodCompiler.CreateConstant(2 * methodCompiler.Architecture.NativePointerSize)); " is 145.
Long Statement,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,GetDelegateTargetAddress,The length of the statement  "			context.SetInstruction(load' context.Result' context.Operand1' methodCompiler.CreateConstant(3 * methodCompiler.Architecture.NativePointerSize)); " is 145.
Long Statement,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,GetExceptionRegister,The length of the statement  "			var instruction = methodCompiler.Architecture.Is32BitPlatform ? (BaseInstruction)IRInstruction.Move32 : IRInstruction.Move64; " is 125.
Long Statement,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,GetMethodExceptionLookupTable,The length of the statement  "			context.SetInstruction(move' context.Result' Operand.CreateUnmanagedSymbolPointer(Metadata.MethodExceptionLookupTable' methodCompiler.TypeSystem)); " is 147.
Long Statement,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,GetMethodLookupTable,The length of the statement  "			context.SetInstruction(move' context.Result' Operand.CreateUnmanagedSymbolPointer(Metadata.MethodLookupTable' methodCompiler.TypeSystem)); " is 138.
Long Statement,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,GetStackFrame,The length of the statement  "			var instruction = methodCompiler.Architecture.Is32BitPlatform ? (BaseInstruction)IRInstruction.Move32 : IRInstruction.Move64; " is 125.
Long Statement,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,GetStackPointer,The length of the statement  "			var instruction = methodCompiler.Architecture.Is32BitPlatform ? (BaseInstruction)IRInstruction.Move32 : IRInstruction.Move64; " is 125.
Long Statement,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,Load16,The length of the statement  "			var instruction = methodCompiler.Architecture.Is32BitPlatform ? (BaseInstruction)IRInstruction.LoadZeroExtend16x32 : IRInstruction.LoadZeroExtend16x64; " is 151.
Long Statement,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,Load32,The length of the statement  "			var instruction = methodCompiler.Architecture.Is32BitPlatform ? (BaseInstruction)IRInstruction.Load32 : IRInstruction.LoadZeroExtend32x64; " is 138.
Long Statement,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,Load8,The length of the statement  "			var instruction = methodCompiler.Architecture.Is32BitPlatform ? (BaseInstruction)IRInstruction.LoadZeroExtend8x32 : IRInstruction.LoadZeroExtend8x64; " is 149.
Long Statement,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,LoadPointer,The length of the statement  "			var instruction = methodCompiler.Architecture.Is32BitPlatform ? (BaseInstruction)IRInstruction.Load32 : IRInstruction.LoadZeroExtend32x64; " is 138.
Long Statement,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,StorePointer,The length of the statement  "			var instruction = methodCompiler.Architecture.Is32BitPlatform ? (BaseInstruction)IRInstruction.Store32 : IRInstruction.Store64; " is 127.
Long Statement,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,Read32,The length of the statement  "			if (Ident[0] != MagicNumber[0] || Ident[1] != MagicNumber[1] || Ident[2] != MagicNumber[2] || Ident[3] != MagicNumber[3]) " is 121.
Long Statement,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,PrintInfo,The length of the statement  "			Console.WriteLine("Ident class:                    {0} ({1})"' (IdentClass)Ident[4]' ((IdentClass)Ident[4]).ToString("x")); " is 123.
Long Statement,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,PrintInfo,The length of the statement  "			Console.WriteLine("Ident data:                     {0} ({1})"' (IdentData)Ident[4]' ((IdentData)Ident[4]).ToString("x")); " is 121.
Long Statement,Mosa.Compiler.Framework.Linker.Elf,ElfLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfLinker.cs,WriteElfHeader,The length of the statement  "			elfheader.CreateIdent((linkerFormatType == LinkerFormatType.Elf32) ? IdentClass.Class32 : IdentClass.Class64' IdentData.Data2LSB); " is 130.
Long Statement,Mosa.Compiler.Framework.Linker.Elf,ElfLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfLinker.cs,WriteProgramHeaders,The length of the statement  "						(linkerSection.SectionKind == SectionKind.ROData) ? ProgramHeaderFlags.Read : ProgramHeaderFlags.Read | ProgramHeaderFlags.Write " is 128.
Long Statement,Mosa.Compiler.Framework.Linker.Elf,ElfLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfLinker.cs,WriteSectionHeaders,The length of the statement  "			elfheader.SectionHeaderOffset = elfheader.ProgramHeaderOffset + (ProgramHeader.GetEntrySize(linkerFormatType) * elfheader.ProgramHeaderNumber); " is 143.
Long Statement,Mosa.Compiler.Framework.Linker.Elf,ElfLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfLinker.cs,CreateRelocationSection,The length of the statement  "				EntrySize = addend ? RelocationAddendEntry.GetEntrySize(linkerFormatType) : RelocationEntry.GetEntrySize(linkerFormatType)' " is 123.
Long Statement,Mosa.Compiler.Framework.Linker,MosaLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\MosaLinker.cs,Link,The length of the statement  "			var linkRequest = new LinkRequest(linkType' patchType' patchSymbol' (int)patchOffset' referenceSymbol' referenceOffset); " is 120.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,TraceBlocks,The length of the statement  "				extendedBlockTrace.Log($"Block # {block.BasicBlock} [{block.BasicBlock.Sequence.ToString()}] ({block.Start} destination {block.End})"); " is 135.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,TraceLiveIntervals,The length of the statement  "				registerTrace.Log($"Live Intervals ({virtualRegister.LiveIntervals.Count}): {LiveIntervalsToString(virtualRegister.LiveIntervals' operand)}"); " is 142.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,TraceLiveIntervals,The length of the statement  "					registerTrace.Log($"Def Positions ({virtualRegister.DefPositions.Count}): {SlotsToString(virtualRegister.DefPositions)}"); " is 122.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,TraceLiveIntervals,The length of the statement  "					registerTrace.Log($"Use Positions ({virtualRegister.UsePositions.Count}): {SlotsToString(virtualRegister.UsePositions)}"); " is 122.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,LiveIntervalsToString,The length of the statement  "					sb.Append("[").Append(liveInterval.Start).Append("'").Append(liveInterval.End).Append("]/").Append(liveInterval.AssignedOperand).Append("'"); " is 141.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,PlaceLiveIntervalOnTrackAllowEvictions,The length of the statement  "					if (intersection.SpillCost >= liveInterval.SpillCost || intersection.SpillCost == int.MaxValue || intersection.VirtualRegister.IsPhysicalRegister || intersection.IsPhysicalRegister) " is 181.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,ProcessLiveInterval,The length of the statement  "			Trace?.Log($"Processing Interval: {liveInterval} / Length: {liveInterval.Length} / Spill Cost: {liveInterval.SpillCost} / Stage: {liveInterval.Stage.ToString()}"); " is 163.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,CreatePhysicalRegisterOperands,The length of the statement  "					liveInterval.AssignedPhysicalOperand = Operand.CreateCPURegister(liveInterval.VirtualRegister.VirtualRegisterOperand.Type' liveInterval.AssignedPhysicalRegister); " is 162.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,InsertSpillMoves,The length of the statement  "						Architecture.InsertStoreInstruction(context' StackFrame' register.SpillSlotOperand' liveInterval.AssignedPhysicalOperand); " is 122.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,AssignRegisters,The length of the statement  "						AssignPhysicalRegistersToInstructions(GetNode(use)' register.VirtualRegisterOperand' liveInterval.AssignedPhysicalOperand ?? liveInterval.VirtualRegister.SpillSlotOperand); " is 172.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,AssignRegisters,The length of the statement  "						AssignPhysicalRegistersToInstructions(GetNode(def)' register.VirtualRegisterOperand' liveInterval.AssignedPhysicalOperand ?? liveInterval.VirtualRegister.SpillSlotOperand); " is 172.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,ResolveDataFlow,The length of the statement  "							resolverTrace?.Log($"  INSERT: {(fromAnchorFlag ? "FROM (bottom)" : "TO (Before)")}{((toLiveInterval.AssignedPhysicalOperand == null) ? "  ****SKIPPED***" : string.Empty)}"); " is 174.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator,MoveResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\MoveResolver.cs,InsertResolvingMoves,The length of the statement  "					case ResolvedMoveType.Load: architecture.InsertLoadInstruction(context' move.Destination' stackFrame' move.Source); break; " is 122.
Long Statement,Mosa.Compiler.Framework.RegisterAllocator.RedBlackTree,DelayedIntervalTree<T>,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\RedBlackTree\DelayedIntervalTree.cs,Add,The length of the statement  "			if (delayedDelete && (Contains(delayedDeleteStart' delayedDeleteEnd' start) || Contains(delayedDeleteStart' delayedDeleteEnd' end))) " is 132.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,EvaluateCompare,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,EvaluateCompare,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,EvaluateCompare,The length of the statement  "				else if (areRangeValuesDeterminate1 && areRangeValuesDeterminate2 && maxValue1 == minValue1 && maxValue1 == maxValue2 && minValue1 == minValue2) " is 144.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,EvaluateCompare,The length of the statement  "				else if ((((bitsSet1 & bitsSet2) != bitsSet1) || ((bitsClear1 & bitsClear2) != bitsClear1)) && areBitsIndeterminate1 && areBitsIndeterminate2) " is 142.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,EvaluateCompare,The length of the statement  "				else if (areRangeValuesDeterminate1 && areRangeValuesDeterminate2 && maxValue1 == minValue1 && maxValue1 == maxValue2 && minValue1 == minValue2) " is 144.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Add32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Add32,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Add32,The length of the statement  "				AreRangeValuesDeterminate = value1.AreRangeValuesDeterminate && value2.AreRangeValuesDeterminate && !IsAddOverflow((uint)value1.MaxValue' (uint)value2.MaxValue)' " is 161.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Add32,The length of the statement  "				BitsClear = Upper32BitsSet | ((value1.AreRangeValuesIndeterminate || value2.AreRangeValuesIndeterminate) ? 0 : BitTwiddling.GetClearBitsOver((value1.MaxValue + value2.MaxValue)))' " is 179.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Add64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' false) : Values[node.Operand1.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Add64,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' false) : Values[node.Operand2.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Add64,The length of the statement  "				AreRangeValuesDeterminate = value1.AreRangeValuesDeterminate && value2.AreRangeValuesDeterminate && !IsAddOverflow(value1.MaxValue' value2.MaxValue)' " is 149.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Add64,The length of the statement  "				BitsClear = (value1.AreRangeValuesIndeterminate || value2.AreRangeValuesIndeterminate) ? 0 : BitTwiddling.GetClearBitsOver(value1.MaxValue + value2.MaxValue)' " is 158.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,AddCarryIn32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,AddCarryIn32,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,AddCarryIn32,The length of the statement  "			var value3 = node.Operand3.IsConstant ? new Value(node.Operand3.ConstantUnsigned64' true) : Values[node.Operand3.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,AddCarryIn32,The length of the statement  "				AreRangeValuesDeterminate = value1.AreRangeValuesDeterminate && value2.AreRangeValuesDeterminate && !IsAddOverflow((uint)value1.MaxValue' (uint)value2.MaxValue' true)' " is 167.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,AddCarryIn32,The length of the statement  "				BitsClear = Upper32BitsSet | ((value1.AreRangeValuesIndeterminate || value2.AreRangeValuesIndeterminate) ? 0 : BitTwiddling.GetClearBitsOver(value1.MaxValue + value2.MaxValue + 1))' " is 181.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ArithShiftRight32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ArithShiftRight32,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ArithShiftRight64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' false) : Values[node.Operand1.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ArithShiftRight64,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' false) : Values[node.Operand2.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,GetHigh64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,GetLow64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,And32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,And32,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,And64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' false) : Values[node.Operand1.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,And64,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' false) : Values[node.Operand2.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Not32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Not64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' false) : Values[node.Operand1.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Or32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Or32,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Or64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' false) : Values[node.Operand1.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Or64,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' false) : Values[node.Operand2.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Xor32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Xor32,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Xor64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' false) : Values[node.Operand1.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Xor64,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' false) : Values[node.Operand2.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MoveInt32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MoveInt64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' false) : Values[node.Operand1.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulSigned32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulSigned32,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulSigned32,The length of the statement  "			//if (value1.AreRangeValuesDeterminate && value2.AreRangeValuesDeterminate && !IsMultiplyOverflow((long)value1.MaxValue' (long)value2.MaxValue) && !IsMultiplyOverflow((long)value1.MinValue' (long)value2.MinValue)) " is 213.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulSigned64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' false) : Values[node.Operand1.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulSigned64,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' false) : Values[node.Operand2.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulSigned64,The length of the statement  "			if (value1.AreRangeValuesDeterminate && value2.AreRangeValuesDeterminate && !IsMultiplyOverflow((int)value1.MaxValue' (int)value2.MaxValue) && !IsMultiplyOverflow((int)value1.MinValue' (int)value2.MinValue)) " is 207.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulUnsigned32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulUnsigned32,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulUnsigned32,The length of the statement  "				AreRangeValuesDeterminate = value1.AreRangeValuesDeterminate && value2.AreRangeValuesDeterminate && !IsMultiplyOverflow((uint)value1.MaxValue' (uint)value2.MaxValue)' " is 166.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulUnsigned32,The length of the statement  "				BitsClear = Upper32BitsSet | ((value1.AreRangeValuesIndeterminate || value2.AreRangeValuesIndeterminate) ? 0 : BitTwiddling.GetClearBitsOver(value1.MaxValue * value2.MaxValue))' " is 177.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulUnsigned64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' false) : Values[node.Operand1.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulUnsigned64,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' false) : Values[node.Operand2.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulUnsigned64,The length of the statement  "				AreRangeValuesDeterminate = value1.AreRangeValuesDeterminate && value2.AreRangeValuesDeterminate && !IsMultiplyOverflow(value1.MaxValue' value2.MaxValue)' " is 154.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulUnsigned64,The length of the statement  "				BitsClear = (value1.AreRangeValuesIndeterminate || value2.AreRangeValuesIndeterminate) ? 0 : BitTwiddling.GetClearBitsOver(value1.MaxValue * value2.MaxValue)' " is 158.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Phi32,The length of the statement  "			var value = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned32' false) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Phi64,The length of the statement  "			var value = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' false) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,RemUnsigned32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,RemUnsigned32,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,RemUnsigned64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,RemUnsigned64,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ShiftLeft32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ShiftLeft32,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ShiftLeft32,The length of the statement  "			// FUTURE: Using the known highest and lowers bit sequences' the bit sets and ranges can be set and narrower respectively " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ShiftLeft64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' false) : Values[node.Operand1.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ShiftLeft64,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' false) : Values[node.Operand2.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ShiftLeft64,The length of the statement  "			// FUTURE: Using the known highest and lowers bit sequences' the bit sets and ranges can be set and narrower respectively " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ShiftRight32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ShiftRight32,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ShiftRight32,The length of the statement  "			// FUTURE: Using the known highest and lowers bit sequences' the bit sets and ranges can be set and narrower respectively " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ShiftRight64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' false) : Values[node.Operand1.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ShiftRight64,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' false) : Values[node.Operand2.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ShiftRight64,The length of the statement  "			// FUTURE: Using the known highest and lowers bit sequences' the bit sets and ranges can be set and narrower respectively " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend16x32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend16x64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend32x64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend8x32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend8x64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' false) : Values[node.Operand1.Index]; " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,To64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,To64,The length of the statement  "			var value2 = node.Operand2.IsConstant ? new Value(node.Operand2.ConstantUnsigned64' true) : Values[node.Operand2.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Truncate64x32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ZeroExtend16x32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ZeroExtend32x64,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ZeroExtend8x32,The length of the statement  "			var value1 = node.Operand1.IsConstant ? new Value(node.Operand1.ConstantUnsigned64' true) : Values[node.Operand1.Index]; " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,SetReturnR4,The length of the statement  "			context.SetInstruction(IRInstruction.MoveR4' Operand.CreateCPURegister(context.Operand1.Type' Architecture.ReturnFloatingPointRegister)' context.Operand1); " is 155.
Long Statement,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,SetReturnR8,The length of the statement  "			context.SetInstruction(IRInstruction.MoveR8' Operand.CreateCPURegister(context.Operand1.Type' Architecture.ReturnFloatingPointRegister)' context.Operand1); " is 155.
Long Statement,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,SetReturn32,The length of the statement  "			context.SetInstruction(IRInstruction.Move32' Operand.CreateCPURegister(context.Operand1.Type' Architecture.ReturnRegister)' context.Operand1); " is 142.
Long Statement,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,SetReturn64,The length of the statement  "				context.SetInstruction(IRInstruction.GetLow64' Operand.CreateCPURegister(TypeSystem.BuiltIn.U4' Architecture.ReturnRegister)' operand); " is 135.
Long Statement,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,SetReturn64,The length of the statement  "				context.AppendInstruction(IRInstruction.GetHigh64' Operand.CreateCPURegister(TypeSystem.BuiltIn.U4' Architecture.ReturnHighRegister)' operand); " is 143.
Long Statement,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,SetReturn64,The length of the statement  "				context.SetInstruction(IRInstruction.Move64' Operand.CreateCPURegister(TypeSystem.BuiltIn.U8' Architecture.ReturnRegister)' context.Operand1); " is 142.
Long Statement,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,CallInterface,The length of the statement  "			context.AppendInstruction(loadInstruction' interfaceMethodTablePtr' interfaceSlotPtr' CreateConstant(interfaceMethodTableOffset)); " is 130.
Long Statement,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,CallInterface,The length of the statement  "			context.AppendInstruction(loadInstruction' methodDefinition' interfaceMethodTablePtr' CreateConstant(methodDefinitionOffset)); " is 126.
Long Statement,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,ReserveStackSizeForCall,The length of the statement  "			context.AppendInstruction(Select(StackPointer' IRInstruction.Sub32' IRInstruction.Sub64)' StackPointer' StackPointer' CreateConstant(TypeSystem.BuiltIn.I4' stackSize)); " is 168.
Long Statement,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,FreeStackAfterCall,The length of the statement  "			context.AppendInstruction(Select(StackPointer' IRInstruction.Add32' IRInstruction.Add64)' StackPointer' StackPointer' CreateConstant(TypeSystem.BuiltIn.I4' stackSize)); " is 168.
Long Statement,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,Push,The length of the statement  "				context.AppendInstruction(Select(operand' IRInstruction.Store32' IRInstruction.Store64)' null' scratch' offsetOperand' operand); " is 128.
Long Statement,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,Push,The length of the statement  "				context.AppendInstruction(Select(operand' IRInstruction.Store32' IRInstruction.Store64)' null' scratch' offsetOperand' operand); " is 128.
Long Statement,Mosa.Compiler.Framework.Stages,CILDecodingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILDecodingStage.cs,DecodeInstructions,The length of the statement  "				if (flow == FlowControl.Next || flow == FlowControl.Call || flow == FlowControl.ConditionalBranch || flow == FlowControl.Switch) " is 128.
Long Statement,Mosa.Compiler.Framework.Stages,CILDecodingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILDecodingStage.cs,InitializePromotedLocalVariablesToVirtualRegisters,The length of the statement  "					prologue.AppendInstruction(Select(variable.Is64BitInteger' IRInstruction.Move32' IRInstruction.Move64)' variable' Operand.GetNull(variable.Type)); " is 146.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,BinaryBranch,The length of the statement  "				context.AppendInstruction(Select(result' IRInstruction.CompareBranch32' IRInstruction.CompareBranch64)' ConditionCode.Equal' null' result' CreateConstant(1)); // TODO: Constant should be 64bit " is 192.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,BinaryBranch,The length of the statement  "				context.SetInstruction(Select(first' IRInstruction.CompareBranch32' IRInstruction.CompareBranch64)' cc' null' first' second); " is 125.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,BinaryLogic,The length of the statement  "				case OpCode.And: node.SetInstruction(Select(node.Result' IRInstruction.And32' IRInstruction.And64)' node.Result' node.Operand1' node.Operand2); break; " is 150.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,BinaryLogic,The length of the statement  "				case OpCode.Or: node.SetInstruction(Select(node.Result' IRInstruction.Or32' IRInstruction.Or64)' node.Result' node.Operand1' node.Operand2); break; " is 147.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,BinaryLogic,The length of the statement  "				case OpCode.Xor: node.SetInstruction(Select(node.Result' IRInstruction.Xor32' IRInstruction.Xor64)' node.Result' node.Operand1' node.Operand2); break; " is 150.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,BinaryLogic,The length of the statement  "				case OpCode.Div_un: node.SetInstruction(Select(node.Result' IRInstruction.DivUnsigned32' IRInstruction.DivUnsigned64)' node.Result' node.Operand1' node.Operand2); break; " is 169.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,BinaryLogic,The length of the statement  "				case OpCode.Rem_un: node.SetInstruction(Select(node.Result' IRInstruction.RemUnsigned32' IRInstruction.RemUnsigned64)' node.Result' node.Operand1' node.Operand2); break; " is 169.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Call,The length of the statement  "					before.SetInstruction(Select(context.Operand1' IRInstruction.Sub32' IRInstruction.Sub64)' context.Operand1' context.Operand1' CreateConstant(NativePointerSize * 2)); " is 165.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Call,The length of the statement  "					before.SetInstruction(IRInstruction.Box' boxedValue' GetRuntimeTypeHandle(type)' context.Operand1' CreateConstant(typeSize)); " is 125.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Callvirt,The length of the statement  "							before.SetInstruction(Select(context.Operand1' IRInstruction.Sub32' IRInstruction.Sub64)' context.Operand1' context.Operand1' CreateConstant(NativePointerSize * 2)); " is 165.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Callvirt,The length of the statement  "						before.SetInstruction(IRInstruction.Box' boxedValue' GetRuntimeTypeHandle(type)' context.Operand1' CreateConstant(typeSize)); " is 125.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,GetRuntimeTypeHandle,The length of the statement  "			return Operand.CreateSymbol(TypeSystem.GetTypeByName("System"' "RuntimeTypeHandle")' Metadata.TypeDefinition + runtimeType.FullName); " is 133.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,InitObj,The length of the statement  "				node.SetInstruction(Select(IRInstruction.Store32' IRInstruction.Store64)' null' ptr' ConstantZero' Operand.GetNullObject(TypeSystem)); " is 134.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldflda,The length of the statement  "				node.SetInstruction(Select(fieldAddress' IRInstruction.Add32' IRInstruction.Add64)' fieldAddress' objectOperand' CreateConstant(offset)); " is 137.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldftn,The length of the statement  "			node.SetInstruction(Select(node.Result' IRInstruction.Move32' IRInstruction.Move64)' node.Result' Operand.CreateSymbolFromMethod(invokedMethod' TypeSystem)); " is 157.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldlen,The length of the statement  "			node.SetInstruction(Select(node.Result' IRInstruction.Load32' IRInstruction.Load64)' node.Result' node.Operand1' offset); " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldstr,The length of the statement  "			var symbol = Linker.DefineSymbol(symbolName' SectionKind.ROData' NativeAlignment' (NativePointerSize * 2) + 4 + (stringdata.Length * 2)); " is 137.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldstr,The length of the statement  "			Debug.Assert(stringData.Length == stringdata.Length * 2' "Byte array of string data doesn't match expected string data length"); " is 128.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Shift,The length of the statement  "				case OpCode.Shl: node.SetInstruction(Select(node.Result' IRInstruction.ShiftLeft32' IRInstruction.ShiftLeft64)' node.Result' node.Operand1' node.Operand2); break; " is 162.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Shift,The length of the statement  "				case OpCode.Shr: node.SetInstruction(Select(node.Result' IRInstruction.ArithShiftRight32' IRInstruction.ArithShiftRight64)' node.Result' node.Operand1' node.Operand2); break; " is 174.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Shift,The length of the statement  "				case OpCode.Shr_un: node.SetInstruction(Select(node.Result' IRInstruction.ShiftRight32' IRInstruction.ShiftRight64)' node.Result' node.Operand1' node.Operand2); break; " is 167.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Sizeof,The length of the statement  "			node.SetInstruction(Select(node.Result' IRInstruction.Move32' IRInstruction.Move64)' node.Result' CreateConstant(size)); " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,UnaryBranch,The length of the statement  "				context.SetInstruction(Select(first' IRInstruction.CompareBranch32' IRInstruction.CompareBranch64)' ConditionCode.NotEqual' null' first' second); // TODO: Constant should be 64bit " is 179.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,UnaryBranch,The length of the statement  "				context.SetInstruction(Select(first' IRInstruction.CompareBranch32' IRInstruction.CompareBranch64)' ConditionCode.Equal' null' first' second); // TODO: Constant should be 64bit " is 176.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,UnaryBranch,The length of the statement  "			throw new NotImplementCompilerException("ExpressionEvaluation: CILTransformationStage.UnaryBranch doesn't support CIL opcode " + opcode); " is 137.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,AddArrayBoundsCheck,The length of the statement  "			before.SetInstruction(Select(lengthOperand' IRInstruction.Load32' IRInstruction.Load64)' lengthOperand' arrayOperand' fixedOffset); " is 131.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,AddArrayBoundsCheck,The length of the statement  "			before.AppendInstruction(Select(IRInstruction.CompareBranch32' IRInstruction.CompareBranch64)' ConditionCode.UnsignedGreaterOrEqual' null' arrayIndexOperand' lengthOperand' exceptionContext.Block); " is 197.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,CalculateArrayElementOffset,The length of the statement  "			context.AppendInstruction(Select(elementOffset' IRInstruction.MulUnsigned32' IRInstruction.MulSigned64)' elementOffset' index' elementSize); " is 140.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,CalculateTotalArrayOffset,The length of the statement  "			context.AppendInstruction(Select(arrayElement' IRInstruction.Add32' IRInstruction.Add64)' arrayElement' elementOffset' fixedOffset); " is 132.
Long Statement,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,ProcessExternalCall,The length of the statement  "					intrinsic = MethodCompiler.Compiler.GetInstrincMethod($"{node.InvokeMethod.DeclaringType.FullName}::{node.InvokeMethod.Name}"); " is 127.
Long Statement,Mosa.Compiler.Framework.Stages,CompoundStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CompoundStage.cs,CopyCompound,The length of the statement  "			var srcReg = AllocateVirtualRegister(Is32BitPlatform ? destinationBase.Type.TypeSystem.BuiltIn.I4 : destinationBase.Type.TypeSystem.BuiltIn.I8); " is 144.
Long Statement,Mosa.Compiler.Framework.Stages,CompoundStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CompoundStage.cs,CopyCompound,The length of the statement  "			var dstReg = AllocateVirtualRegister(Is32BitPlatform ? destinationBase.Type.TypeSystem.BuiltIn.I4 : destinationBase.Type.TypeSystem.BuiltIn.I8); " is 144.
Long Statement,Mosa.Compiler.Framework.Stages,CompoundStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CompoundStage.cs,CopyCompound,The length of the statement  "			var tmpLarge = Is32BitPlatform && size >= 8 ? null : AllocateVirtualRegister(destinationBase.Type.TypeSystem.BuiltIn.I8); " is 121.
Long Statement,Mosa.Compiler.Framework.Stages,EnterSSAStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\EnterSSAStage.cs,UpdatePHIs,The length of the statement  "					if (node.Instruction != IRInstruction.Phi32 && node.Instruction != IRInstruction.Phi64 && node.Instruction != IRInstruction.PhiR4 && node.Instruction != IRInstruction.PhiR8) " is 173.
Long Statement,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,SetLeaveTargetInstruction,The length of the statement  "			context.SetInstruction(Select(LeaveTargetRegister' IRInstruction.Move32' IRInstruction.Move64)' LeaveTargetRegister' CreateConstant(target.Label)); " is 147.
Long Statement,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,ExceptionStartInstruction,The length of the statement  "			context.AppendInstruction(Select(exceptionVirtualRegister' IRInstruction.Move32' IRInstruction.Move64)' exceptionVirtualRegister' ExceptionRegister); " is 149.
Long Statement,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,FinallyEndInstruction,The length of the statement  "			context.SetInstruction(Select(IRInstruction.CompareBranch32' IRInstruction.CompareBranch64)' ConditionCode.NotEqual' null' exceptionVirtualRegister' nullOperand' newBlocks[0].Block); " is 182.
Long Statement,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,FinallyEndInstruction,The length of the statement  "			newBlocks[0].AppendInstruction(Select(ExceptionRegister' IRInstruction.Move32' IRInstruction.Move64)' ExceptionRegister' exceptionVirtualRegister); " is 147.
Long Statement,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,FinallyStartInstruction,The length of the statement  "			context.AppendInstruction(Select(exceptionVirtualRegister' IRInstruction.Move32' IRInstruction.Move64)' exceptionVirtualRegister' ExceptionRegister); " is 149.
Long Statement,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,FinallyStartInstruction,The length of the statement  "			context.AppendInstruction(Select(leaveTargetVirtualRegister' IRInstruction.Move32' IRInstruction.Move64)' leaveTargetVirtualRegister' LeaveTargetRegister); " is 155.
Long Statement,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,ThrowInstruction,The length of the statement  "			context.SetInstruction(Select(ExceptionRegister' IRInstruction.Move32' IRInstruction.Move64)' ExceptionRegister' context.Operand1); " is 131.
Long Statement,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,GotoLeaveTargetInstruction,The length of the statement  "			// FIXME: This will need to be preserved for filtered exceptions; will need a flag to know this - maybe an upper bit of LeaveTargetRegister " is 139.
Long Statement,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,GotoLeaveTargetInstruction,The length of the statement  "			context.SetInstruction(Select(ExceptionRegister' IRInstruction.Move32' IRInstruction.Move64)' ExceptionRegister' nullOperand); " is 126.
Long Statement,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,GotoLeaveTargetInstruction,The length of the statement  "				context.AppendInstruction(Select(IRInstruction.CompareBranch32' IRInstruction.CompareBranch64)' ConditionCode.GreaterThan' null' CreateConstant(handlerBlock.Label)' LeaveTargetRegister' nextBlock.Block); // TODO: Constant should be 64bit " is 237.
Long Statement,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,GotoLeaveTargetInstruction,The length of the statement  "				var otherBranch = (previousBlock.NextBlocks[0] == currentBlock) ? previousBlock.NextBlocks[1] : previousBlock.NextBlocks[0]; " is 124.
Long Statement,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,GotoLeaveTargetInstruction,The length of the statement  "				context.AppendInstruction(Select(IRInstruction.CompareBranch32' IRInstruction.CompareBranch64)' ConditionCode.Equal' null' LeaveTargetRegister' CreateConstant(targets[0].Label)' targets[0]); // TODO: Constant should be 64bit " is 224.
Long Statement,Mosa.Compiler.Framework.Stages,ExceptionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExceptionStage.cs,GotoLeaveTargetInstruction,The length of the statement  "					newBlocks[b - 1].AppendInstruction(Select(IRInstruction.CompareBranch32' IRInstruction.CompareBranch64)' ConditionCode.Equal' null' LeaveTargetRegister' CreateConstant(targets[b].Label)' targets[b]); // TODO: Constant should be 64bit " is 233.
Long Statement,Mosa.Compiler.Framework.Stages,GreedyRegisterAllocatorStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\GreedyRegisterAllocatorStage.cs,Run,The length of the statement  "			var allocator = new GreedyRegisterAllocator(BasicBlocks' MethodCompiler.VirtualRegisters' Architecture' MethodCompiler.AddStackLocal' StackFrame' this); " is 152.
Long Statement,Mosa.Compiler.Framework.Stages,InlineEvaluationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineEvaluationStage.cs,StaticCanNotInline,The length of the statement  "			if (((method.MethodAttributes & MosaMethodAttributes.Public) == MosaMethodAttributes.Public) && method.DeclaringType.BaseType != null && method.DeclaringType.BaseType.Namespace == "Mosa.UnitTests") " is 197.
Long Statement,Mosa.Compiler.Framework.Stages,InlineEvaluationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineEvaluationStage.cs,CanInline,The length of the statement  "			int max = methodData.HasAggressiveInliningAttribute ? CompilerOptions.InlineAggressiveMaximum : CompilerOptions.InlineMaximum; " is 126.
Long Statement,Mosa.Compiler.Framework.Stages,InlineStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineStage.cs,Run,The length of the statement  "				//Debug.WriteLine($"{MethodScheduler.GetTimestamp()} - Inline: {(inlineMethodData.IsInlined ? "Inlined" : "NOT Inlined")} [{MethodData.Version}] {Method} -> [{inlineMethodData.Version}] {callee.Method}"); //DEBUGREMOVE " is 218.
Long Statement,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,CompareBranch64,The length of the statement  "			context.AppendInstruction(IRInstruction.CompareBranch32' ConditionCode.Equal' null' op0High' op1High' newBlocks[1].Block); " is 122.
Long Statement,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,CompareBranch64,The length of the statement  "			newBlocks[1].AppendInstruction(IRInstruction.CompareBranch32' branchUnsigned' null' op0Low' op1Low' newBlocks[2].Block); " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The length of the statement  "			context.AppendInstruction(IRInstruction.CompareBranch32' ConditionCode.Equal' null' op0High' op1High' newBlocks[1].Block); " is 122.
Long Statement,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The length of the statement  "			newBlocks[1].AppendInstruction(IRInstruction.CompareBranch32' branchUnsigned' null' op0Low' op1Low' newBlocks[2].Block); " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The length of the statement  "			context.AppendInstruction(IRInstruction.CompareBranch32' ConditionCode.Equal' null' op0High' op1High' newBlocks[1].Block); " is 122.
Long Statement,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The length of the statement  "			newBlocks[1].AppendInstruction(IRInstruction.CompareBranch32' branchUnsigned' null' op0Low' op1Low' newBlocks[2].Block); " is 120.
Long Statement,Mosa.Compiler.Framework.Stages,LoopInvariantCodeMotionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LoopInvariantCodeMotionStage.cs,CreatePreHeader,The length of the statement  "				//if (node.Instruction != IRInstruction.Phi32 && node.Instruction != IRInstruction.Phi64 && node.Instruction != IRInstruction.PhiR4 && node.Instruction != IRInstruction.PhiR8) " is 175.
Long Statement,Mosa.Compiler.Framework.Stages,NewObjectIRStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\NewObjectIRStage.cs,GetVMCallMethod,The length of the statement  "			var method = InternalRuntimeType.FindMethodByName(methodName) ?? PlatformInternalRuntimeType.FindMethodByName(methodName); " is 122.
Long Statement,Mosa.Compiler.Framework.Stages,ProtectedRegionLayoutStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ProtectedRegionLayoutStage.cs,EmitProtectedRegionTable,The length of the statement  "			var protectedRegionTableSymbol = Linker.DefineSymbol(Metadata.ProtectedRegionTable + Method.FullName' SectionKind.ROData' NativeAlignment' 0); " is 142.
Long Statement,Mosa.Compiler.Framework.Stages,ProtectedRegionLayoutStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ProtectedRegionLayoutStage.cs,EmitProtectedRegionTable,The length of the statement  "				trace?.Log($"Handler: {region.Handler.TryStart.ToString("X4")} to {region.Handler.TryEnd.ToString("X4")} Handler: {region.Handler.HandlerStart.ToString("X4")} Offset: [{handler.ToString("X4")}]"); " is 196.
Long Statement,Mosa.Compiler.Framework.Stages,ProtectedRegionLayoutStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ProtectedRegionLayoutStage.cs,EmitProtectedRegionTable,The length of the statement  "					var protectedRegionDefinition = CreateProtectedRegionDefinition(name' (uint)start' (uint)end' handler' region.Handler.ExceptionHandlerType' region.Handler.Type); " is 161.
Long Statement,Mosa.Compiler.Framework.Stages,ProtectedRegionLayoutStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ProtectedRegionLayoutStage.cs,EmitProtectedRegionTable,The length of the statement  "					Linker.Link(LinkType.AbsoluteAddress' NativePatchType' protectedRegionTableSymbol' writer.GetPosition()' protectedRegionDefinition' 0); " is 135.
Long Statement,Mosa.Compiler.Framework.Stages,ProtectedRegionLayoutStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ProtectedRegionLayoutStage.cs,CreateProtectedRegionDefinition,The length of the statement  "			var protectedRegionDefinitionSymbol = Linker.DefineSymbol(name' SectionKind.ROData' 0/*TypeLayout.NativePointerAlignment*/' 0); " is 127.
Long Statement,Mosa.Compiler.Framework.Stages,ProtectedRegionLayoutStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ProtectedRegionLayoutStage.cs,CreateProtectedRegionDefinition,The length of the statement  "				Linker.Link(LinkType.AbsoluteAddress' NativePatchType' protectedRegionDefinitionSymbol' writer1.GetPosition()' Metadata.TypeDefinition + exceptionType.FullName' 0); " is 164.
Long Statement,Mosa.Compiler.Framework.Stages,RuntimeCallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\RuntimeCallStage.cs,GetVMCallMethod,The length of the statement  "			var method = InternalRuntimeType.FindMethodByName(methodName) ?? PlatformInternalRuntimeType.FindMethodByName(methodName); " is 122.
Long Statement,Mosa.Compiler.Framework.Stages,SparseConditionalConstantPropagationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\SparseConditionalConstantPropagationStage.cs,_RemoveBlockFromPhiInstructions,The length of the statement  "					if (node.Instruction != IRInstruction.Phi32 && node.Instruction != IRInstruction.Phi64 && node.Instruction != IRInstruction.PhiR4 && node.Instruction != IRInstruction.PhiR8) " is 173.
Long Statement,Mosa.Compiler.Framework.Stages,StaticAllocationResolutionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\StaticAllocationResolutionStage.cs,PerformStaticAllocation,The length of the statement  "			var symbolName = Linker.DefineSymbol(StaticSymbolPrefix + allocatedType.FullName' SectionKind.BSS' Architecture.NativeAlignment' allocationSize); " is 145.
Long Statement,Mosa.Compiler.Framework.Stages,StaticAllocationResolutionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\StaticAllocationResolutionStage.cs,PerformStaticAllocation,The length of the statement  "			Linker.Link(LinkType.AbsoluteAddress' Is32BitPlatform ? PatchType.I32 : PatchType.I64' symbolName' 0' typeDefinitionSymbol' 0); " is 127.
Long Statement,Mosa.Compiler.Framework.Stages,StaticLoadOptimizationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\StaticLoadOptimizationStage.cs,LoadInt32,The length of the statement  "			if (operand1.Field.DeclaringType.IsValueType && (operand1.Field.DeclaringType.Name == "System.IntPtr" || operand1.Field.DeclaringType.Name == "System.UIntPtr") && operand1.Field.Name == "Zero") " is 193.
Long Statement,Mosa.Compiler.Framework.Stages,StaticLoadOptimizationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\StaticLoadOptimizationStage.cs,LoadInt64,The length of the statement  "			if (operand1.Field.DeclaringType.IsValueType && (operand1.Field.DeclaringType.Name == "System.IntPtr" || operand1.Field.DeclaringType.Name == "System.UIntPtr") && operand1.Field.Name == "Zero") " is 193.
Long Statement,Mosa.Compiler.Framework.Stages,UnboxValueTypeStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\UnboxValueTypeStage.cs,Run,The length of the statement  "			if (BasicBlocks.PrologueBlock.NextBlocks.Count == 0 || BasicBlocks.PrologueBlock.NextBlocks[0] == BasicBlocks.EpilogueBlock) " is 124.
Long Statement,Mosa.Compiler.Framework.Stages,UnboxValueTypeStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\UnboxValueTypeStage.cs,Run,The length of the statement  "			context.AppendInstruction(Select(v1' IRInstruction.Add32' IRInstruction.Add64)' v1' v1' CreateConstant(NativePointerSize * 2)); " is 127.
Long Statement,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,AddExpressionToHashTable,The length of the statement  "			trace?.Log($"Added Expression: {expression.ValueNumber} <= {expression.Instruction} {expression.Operand1} {expression.Operand2}" ?? string.Empty); " is 146.
Long Statement,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,RemoveExpressionFromHashTable,The length of the statement  "			trace?.Log($"Removed Expression: {expression.ValueNumber} <= {expression.Instruction} {expression.Operand1} {expression.Operand2}" ?? string.Empty); " is 148.
Long Statement,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,UpdateNodeWithValueNumbers,The length of the statement  "							throw new CompilerException("ValueNumbering Stage: Expected PHI instruction but found instead: " + node + " for " + operand); " is 125.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x32.cs,Transform,The length of the statement  "				case ConditionCode.NotEqual: compare = context.Operand1.ConstantUnsigned32 != context.Operand2.ConstantUnsigned32; break; " is 121.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x32.cs,Transform,The length of the statement  "				case ConditionCode.GreaterOrEqual: compare = context.Operand1.ConstantUnsigned32 >= context.Operand2.ConstantUnsigned32; break; " is 127.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x32.cs,Transform,The length of the statement  "				case ConditionCode.GreaterThan: compare = context.Operand1.ConstantUnsigned32 > context.Operand2.ConstantUnsigned32; break; " is 123.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x32.cs,Transform,The length of the statement  "				case ConditionCode.LessOrEqual: compare = context.Operand1.ConstantUnsigned32 <= context.Operand2.ConstantUnsigned32; break; " is 124.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x32.cs,Transform,The length of the statement  "				case ConditionCode.LessThan: compare = context.Operand1.ConstantUnsigned32 < context.Operand2.ConstantUnsigned32; break; " is 120.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x32.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedGreaterThan: compare = context.Operand1.ConstantUnsigned32 > context.Operand2.ConstantUnsigned32; break; " is 131.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x32.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedGreaterOrEqual: compare = context.Operand1.ConstantUnsigned32 >= context.Operand2.ConstantUnsigned32; break; " is 135.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x32.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedLessThan: compare = context.Operand1.ConstantUnsigned32 < context.Operand2.ConstantUnsigned32; break; " is 128.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x32.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedLessOrEqual: compare = context.Operand1.ConstantUnsigned32 <= context.Operand2.ConstantUnsigned32; break; " is 132.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x64.cs,Transform,The length of the statement  "				case ConditionCode.NotEqual: compare = context.Operand1.ConstantUnsigned32 != context.Operand2.ConstantUnsigned32; break; " is 121.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x64.cs,Transform,The length of the statement  "				case ConditionCode.GreaterOrEqual: compare = context.Operand1.ConstantUnsigned32 >= context.Operand2.ConstantUnsigned32; break; " is 127.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x64.cs,Transform,The length of the statement  "				case ConditionCode.GreaterThan: compare = context.Operand1.ConstantUnsigned32 > context.Operand2.ConstantUnsigned32; break; " is 123.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x64.cs,Transform,The length of the statement  "				case ConditionCode.LessOrEqual: compare = context.Operand1.ConstantUnsigned32 <= context.Operand2.ConstantUnsigned32; break; " is 124.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x64.cs,Transform,The length of the statement  "				case ConditionCode.LessThan: compare = context.Operand1.ConstantUnsigned32 < context.Operand2.ConstantUnsigned32; break; " is 120.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x64.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedGreaterThan: compare = context.Operand1.ConstantUnsigned32 > context.Operand2.ConstantUnsigned32; break; " is 131.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x64.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedGreaterOrEqual: compare = context.Operand1.ConstantUnsigned32 >= context.Operand2.ConstantUnsigned32; break; " is 135.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x64.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedLessThan: compare = context.Operand1.ConstantUnsigned32 < context.Operand2.ConstantUnsigned32; break; " is 128.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x64.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedLessOrEqual: compare = context.Operand1.ConstantUnsigned32 <= context.Operand2.ConstantUnsigned32; break; " is 132.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x32.cs,Transform,The length of the statement  "				case ConditionCode.NotEqual: compare = context.Operand1.ConstantUnsigned64 != context.Operand2.ConstantUnsigned64; break; " is 121.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x32.cs,Transform,The length of the statement  "				case ConditionCode.GreaterOrEqual: compare = context.Operand1.ConstantUnsigned64 >= context.Operand2.ConstantUnsigned64; break; " is 127.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x32.cs,Transform,The length of the statement  "				case ConditionCode.GreaterThan: compare = context.Operand1.ConstantUnsigned64 > context.Operand2.ConstantUnsigned64; break; " is 123.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x32.cs,Transform,The length of the statement  "				case ConditionCode.LessOrEqual: compare = context.Operand1.ConstantUnsigned64 <= context.Operand2.ConstantUnsigned64; break; " is 124.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x32.cs,Transform,The length of the statement  "				case ConditionCode.LessThan: compare = context.Operand1.ConstantUnsigned64 < context.Operand2.ConstantUnsigned64; break; " is 120.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x32.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedGreaterThan: compare = context.Operand1.ConstantUnsigned64 > context.Operand2.ConstantUnsigned64; break; " is 131.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x32.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedGreaterOrEqual: compare = context.Operand1.ConstantUnsigned64 >= context.Operand2.ConstantUnsigned64; break; " is 135.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x32.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedLessThan: compare = context.Operand1.ConstantUnsigned64 < context.Operand2.ConstantUnsigned64; break; " is 128.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x32.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedLessOrEqual: compare = context.Operand1.ConstantUnsigned64 <= context.Operand2.ConstantUnsigned64; break; " is 132.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x64.cs,Transform,The length of the statement  "				case ConditionCode.NotEqual: compare = context.Operand1.ConstantUnsigned64 != context.Operand2.ConstantUnsigned64; break; " is 121.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x64.cs,Transform,The length of the statement  "				case ConditionCode.GreaterOrEqual: compare = context.Operand1.ConstantUnsigned64 >= context.Operand2.ConstantUnsigned64; break; " is 127.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x64.cs,Transform,The length of the statement  "				case ConditionCode.GreaterThan: compare = context.Operand1.ConstantUnsigned64 > context.Operand2.ConstantUnsigned64; break; " is 123.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x64.cs,Transform,The length of the statement  "				case ConditionCode.LessOrEqual: compare = context.Operand1.ConstantUnsigned64 <= context.Operand2.ConstantUnsigned64; break; " is 124.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x64.cs,Transform,The length of the statement  "				case ConditionCode.LessThan: compare = context.Operand1.ConstantUnsigned64 < context.Operand2.ConstantUnsigned64; break; " is 120.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x64.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedGreaterThan: compare = context.Operand1.ConstantUnsigned64 > context.Operand2.ConstantUnsigned64; break; " is 131.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x64.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedGreaterOrEqual: compare = context.Operand1.ConstantUnsigned64 >= context.Operand2.ConstantUnsigned64; break; " is 135.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x64.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedLessThan: compare = context.Operand1.ConstantUnsigned64 < context.Operand2.ConstantUnsigned64; break; " is 128.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x64.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedLessOrEqual: compare = context.Operand1.ConstantUnsigned64 <= context.Operand2.ConstantUnsigned64; break; " is 132.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch32.cs,Transform,The length of the statement  "				case ConditionCode.NotEqual: compare = context.Operand1.ConstantUnsigned32 != context.Operand2.ConstantUnsigned32; break; " is 121.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch32.cs,Transform,The length of the statement  "				case ConditionCode.GreaterOrEqual: compare = context.Operand1.ConstantUnsigned32 >= context.Operand2.ConstantUnsigned32; break; " is 127.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch32.cs,Transform,The length of the statement  "				case ConditionCode.GreaterThan: compare = context.Operand1.ConstantUnsigned32 > context.Operand2.ConstantUnsigned32; break; " is 123.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch32.cs,Transform,The length of the statement  "				case ConditionCode.LessOrEqual: compare = context.Operand1.ConstantUnsigned32 <= context.Operand2.ConstantUnsigned32; break; " is 124.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch32.cs,Transform,The length of the statement  "				case ConditionCode.LessThan: compare = context.Operand1.ConstantUnsigned32 < context.Operand2.ConstantUnsigned32; break; " is 120.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch32.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedGreaterThan: compare = context.Operand1.ConstantUnsigned32 > context.Operand2.ConstantUnsigned32; break; " is 131.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch32.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedGreaterOrEqual: compare = context.Operand1.ConstantUnsigned32 >= context.Operand2.ConstantUnsigned32; break; " is 135.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch32.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedLessThan: compare = context.Operand1.ConstantUnsigned32 < context.Operand2.ConstantUnsigned32; break; " is 128.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch32.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedLessOrEqual: compare = context.Operand1.ConstantUnsigned32 <= context.Operand2.ConstantUnsigned32; break; " is 132.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch64.cs,Transform,The length of the statement  "				case ConditionCode.NotEqual: compare = context.Operand1.ConstantUnsigned64 != context.Operand2.ConstantUnsigned64; break; " is 121.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch64.cs,Transform,The length of the statement  "				case ConditionCode.GreaterOrEqual: compare = context.Operand1.ConstantUnsigned64 >= context.Operand2.ConstantUnsigned64; break; " is 127.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch64.cs,Transform,The length of the statement  "				case ConditionCode.GreaterThan: compare = context.Operand1.ConstantUnsigned64 > context.Operand2.ConstantUnsigned64; break; " is 123.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch64.cs,Transform,The length of the statement  "				case ConditionCode.LessOrEqual: compare = context.Operand1.ConstantUnsigned64 <= context.Operand2.ConstantUnsigned64; break; " is 124.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch64.cs,Transform,The length of the statement  "				case ConditionCode.LessThan: compare = context.Operand1.ConstantUnsigned64 < context.Operand2.ConstantUnsigned64; break; " is 120.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch64.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedGreaterThan: compare = context.Operand1.ConstantUnsigned64 > context.Operand2.ConstantUnsigned64; break; " is 131.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch64.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedGreaterOrEqual: compare = context.Operand1.ConstantUnsigned64 >= context.Operand2.ConstantUnsigned64; break; " is 135.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch64.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedLessThan: compare = context.Operand1.ConstantUnsigned64 < context.Operand2.ConstantUnsigned64; break; " is 128.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch64.cs,Transform,The length of the statement  "				case ConditionCode.UnsignedLessOrEqual: compare = context.Operand1.ConstantUnsigned64 <= context.Operand2.ConstantUnsigned64; break; " is 132.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantMove,Compare32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantMove\Compare32x32.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.Compare32x32' context.ConditionCode.GetReverse()' context.Result' context.Operand2' context.Operand1); " is 139.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantMove,Compare32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantMove\Compare32x64.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.Compare32x64' context.ConditionCode.GetReverse()' context.Result' context.Operand2' context.Operand1); " is 139.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantMove,Compare64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantMove\Compare64x32.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.Compare64x32' context.ConditionCode.GetReverse()' context.Result' context.Operand2' context.Operand1); " is 139.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantMove,Compare64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantMove\Compare64x64.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.Compare64x64' context.ConditionCode.GetReverse()' context.Result' context.Operand2' context.Operand1); " is 139.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantMove,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantMove\CompareIntBranch32.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch32' context.ConditionCode.GetReverse()' context.Result' context.Operand2' context.Operand1' context.BranchTargets[0]); " is 168.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantMove,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantMove\CompareIntBranch64.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch64' context.ConditionCode.GetReverse()' context.Result' context.Operand2' context.Operand1' context.BranchTargets[0]); " is 168.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,Compare32x32Combine32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\Compare32x32Combine32x32.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,Compare32x32Combine32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\Compare32x32Combine32x64.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,Compare32x32Combine64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\Compare32x32Combine64x32.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,Compare32x32GreaterThanZero,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\Compare32x32GreaterThanZero.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.Compare32x32' ConditionCode.NotEqual' context.Result' context.Operand1' context.Operand2); " is 127.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,Compare32x64GreaterThanZero,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\Compare32x64GreaterThanZero.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.Compare32x64' ConditionCode.NotEqual' context.Result' context.Operand1' context.Operand2); " is 127.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,Compare64x32GreaterThanZero,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\Compare64x32GreaterThanZero.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.Compare64x32' ConditionCode.NotEqual' context.Result' context.Operand1' context.Operand2); " is 127.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,Compare64x64Combine32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\Compare64x64Combine32x32.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,Compare64x64Combine64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\Compare64x64Combine64x32.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,Compare64x64Combine64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\Compare64x64Combine64x64.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,Compare64x64GreaterThanZero,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\Compare64x64GreaterThanZero.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.Compare64x64' ConditionCode.NotEqual' context.Result' context.Operand1' context.Operand2); " is 127.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch32.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch32.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch32' conditionCode' null' node2.Operand1' node2.Operand2' context.BranchTargets[0]); " is 133.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch32Combine32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch32Combine32x32.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch32Combine32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch32Combine32x32.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch32' conditionCode' null' node2.Operand1' node2.Operand2' context.BranchTargets[0]); " is 133.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch32Combine32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch32Combine32x64.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch32Combine32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch32Combine32x64.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch32' conditionCode' null' node2.Operand1' node2.Operand2' context.BranchTargets[0]); " is 133.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch32Combine64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch32Combine64x32.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch32Combine64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch32Combine64x32.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch64' conditionCode' null' node2.Operand1' node2.Operand2' context.BranchTargets[0]); " is 133.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch32Combine64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch32Combine64x64.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch32Combine64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch32Combine64x64.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch64' conditionCode' null' node2.Operand1' node2.Operand2' context.BranchTargets[0]); " is 133.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch32From64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch32From64.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch32From64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch32From64.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch64' conditionCode' null' node2.Operand1' node2.Operand2' context.BranchTargets[0]); " is 133.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch64.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch64.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch64' conditionCode' null' node2.Operand1' node2.Operand2' context.BranchTargets[0]); " is 133.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch64Combine32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch64Combine32x32.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch64Combine32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch64Combine32x32.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch32' conditionCode' null' node2.Operand1' node2.Operand2' context.BranchTargets[0]); " is 133.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch64Combine32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch64Combine32x64.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch64Combine32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch64Combine32x64.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch32' conditionCode' null' node2.Operand1' node2.Operand2' context.BranchTargets[0]); " is 133.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch64Combine64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch64Combine64x32.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch64Combine64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch64Combine64x32.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch64' conditionCode' null' node2.Operand1' node2.Operand2' context.BranchTargets[0]); " is 133.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch64Combine64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch64Combine64x64.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch64Combine64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch64Combine64x64.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch64' conditionCode' null' node2.Operand1' node2.Operand2' context.BranchTargets[0]); " is 133.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch64From32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch64From32.cs,Transform,The length of the statement  "			var conditionCode = context.ConditionCode == ConditionCode.NotEqual ? node2.ConditionCode : node2.ConditionCode.GetOpposite(); " is 126.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Rewrite,CompareBranch64From32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Rewrite\CompareBranch64From32.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch32' conditionCode' null' node2.Operand1' node2.Operand2' context.BranchTargets[0]); " is 133.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Simplification,Compare32x32NotSame,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Simplification\Compare32x32NotSame.cs,Match,The length of the statement  "			return (condition == ConditionCode.NotEqual || condition == ConditionCode.GreaterThan || condition == ConditionCode.LessThan || condition == ConditionCode.UnsignedGreaterThan || condition == ConditionCode.UnsignedLessThan); " is 223.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Simplification,Compare32x32Same,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Simplification\Compare32x32Same.cs,Match,The length of the statement  "			return (condition == ConditionCode.Equal || condition == ConditionCode.GreaterOrEqual || condition == ConditionCode.UnsignedGreaterOrEqual || condition == ConditionCode.UnsignedLessOrEqual || condition == ConditionCode.LessOrEqual); " is 232.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Simplification,Compare32x64NotSame,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Simplification\Compare32x64NotSame.cs,Match,The length of the statement  "			return (condition == ConditionCode.NotEqual || condition == ConditionCode.GreaterThan || condition == ConditionCode.LessThan || condition == ConditionCode.UnsignedGreaterThan || condition == ConditionCode.UnsignedLessThan); " is 223.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Simplification,Compare32x64Same,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Simplification\Compare32x64Same.cs,Match,The length of the statement  "			return (condition == ConditionCode.Equal || condition == ConditionCode.GreaterOrEqual || condition == ConditionCode.UnsignedGreaterOrEqual || condition == ConditionCode.UnsignedLessOrEqual || condition == ConditionCode.LessOrEqual); " is 232.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Simplification,Compare64x32NotSame,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Simplification\Compare64x32NotSame.cs,Match,The length of the statement  "			return (condition == ConditionCode.NotEqual || condition == ConditionCode.GreaterThan || condition == ConditionCode.LessThan || condition == ConditionCode.UnsignedGreaterThan || condition == ConditionCode.UnsignedLessThan); " is 223.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Simplification,Compare64x32Same,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Simplification\Compare64x32Same.cs,Match,The length of the statement  "			return (condition == ConditionCode.Equal || condition == ConditionCode.GreaterOrEqual || condition == ConditionCode.UnsignedGreaterOrEqual || condition == ConditionCode.UnsignedLessOrEqual || condition == ConditionCode.LessOrEqual); " is 232.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Simplification,Compare64x64NotSame,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Simplification\Compare64x64NotSame.cs,Match,The length of the statement  "			return (condition == ConditionCode.NotEqual || condition == ConditionCode.GreaterThan || condition == ConditionCode.LessThan || condition == ConditionCode.UnsignedGreaterThan || condition == ConditionCode.UnsignedLessThan); " is 223.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Simplification,Compare64x64Same,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Simplification\Compare64x64Same.cs,Match,The length of the statement  "			return (condition == ConditionCode.Equal || condition == ConditionCode.GreaterOrEqual || condition == ConditionCode.UnsignedGreaterOrEqual || condition == ConditionCode.UnsignedLessOrEqual || condition == ConditionCode.LessOrEqual); " is 232.
Long Statement,Mosa.Compiler.Framework.Transform.Manual.IR.Simplification,CompareBranch64OnlyOneExit,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Simplification\CompareBranch64OnlyOneExit.cs,Transform,The length of the statement  "			context.SetInstruction(IRInstruction.CompareBranch64' context.ConditionCode.GetReverse()' context.Result' context.Operand2' context.Operand1' context.BranchTargets[0]); " is 168.
Complex Conditional,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,ProcessInstruction,The conditional expression  "instruction == IRInstruction.CallDynamic  				|| instruction == IRInstruction.CallInterface  				|| instruction == IRInstruction.CallDirect  				|| instruction == IRInstruction.CallStatic  				|| instruction == IRInstruction.CallVirtual  				|| instruction == IRInstruction.IntrinsicMethodCall"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,ProcessInstruction,The conditional expression  "instruction == IRInstruction.Load32  				|| instruction == IRInstruction.Load64    				|| instruction == IRInstruction.LoadSignExtend8x32  				|| instruction == IRInstruction.LoadSignExtend16x32  				|| instruction == IRInstruction.LoadSignExtend8x64  				|| instruction == IRInstruction.LoadSignExtend16x64  				|| instruction == IRInstruction.LoadSignExtend32x64    				|| instruction == IRInstruction.LoadZeroExtend8x32  				|| instruction == IRInstruction.LoadZeroExtend16x32  				|| instruction == IRInstruction.LoadZeroExtend8x64  				|| instruction == IRInstruction.LoadZeroExtend16x64  				|| instruction == IRInstruction.LoadZeroExtend32x64    				|| instruction == IRInstruction.LoadR4  				|| instruction == IRInstruction.LoadR8  				|| instruction == IRInstruction.LoadParamSignExtend8x32  				|| instruction == IRInstruction.LoadParamSignExtend16x32  				|| instruction == IRInstruction.LoadParam32  				|| instruction == IRInstruction.LoadParam64  				|| instruction == IRInstruction.LoadParamSignExtend8x64  				|| instruction == IRInstruction.LoadParamSignExtend16x64  				|| instruction == IRInstruction.LoadParamSignExtend32x64  				|| instruction == IRInstruction.LoadParamZeroExtend8x32  				|| instruction == IRInstruction.LoadParamZeroExtend16x32  				|| instruction == IRInstruction.LoadParamZeroExtend8x64  				|| instruction == IRInstruction.LoadParamZeroExtend16x64  				|| instruction == IRInstruction.LoadParamZeroExtend32x64  				|| instruction == IRInstruction.LoadParamR4  				|| instruction == IRInstruction.LoadParamR8"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,ProcessInstruction,The conditional expression  "instruction == IRInstruction.Add32  				|| instruction == IRInstruction.Add64  				|| instruction == IRInstruction.Sub32  				|| instruction == IRInstruction.Sub64  				|| instruction == IRInstruction.MulSigned32  				|| instruction == IRInstruction.MulUnsigned32  				|| instruction == IRInstruction.MulSigned64  				|| instruction == IRInstruction.MulUnsigned64  				|| instruction == IRInstruction.DivSigned32  				|| instruction == IRInstruction.DivUnsigned32  				|| instruction == IRInstruction.RemSigned32  				|| instruction == IRInstruction.RemUnsigned32  				|| instruction == IRInstruction.DivSigned64  				|| instruction == IRInstruction.DivUnsigned64  				|| instruction == IRInstruction.RemSigned64  				|| instruction == IRInstruction.RemUnsigned64  				|| instruction == IRInstruction.ShiftLeft32  				|| instruction == IRInstruction.ShiftRight32  				|| instruction == IRInstruction.ShiftLeft64  				|| instruction == IRInstruction.ShiftRight64  				|| instruction == IRInstruction.ArithShiftRight32  				|| instruction == IRInstruction.ArithShiftRight64"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,ProcessInstruction,The conditional expression  "instruction == IRInstruction.Phi32 || instruction == IRInstruction.Phi64 || instruction == IRInstruction.PhiR4 || instruction == IRInstruction.PhiR8"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,ProcessInstruction,The conditional expression  "instruction == IRInstruction.SignExtend8x32  				|| instruction == IRInstruction.SignExtend16x32  				|| instruction == IRInstruction.SignExtend8x64  				|| instruction == IRInstruction.SignExtend16x64  				|| instruction == IRInstruction.SignExtend32x64  				|| instruction == IRInstruction.ZeroExtend8x32  				|| instruction == IRInstruction.ZeroExtend16x32  				|| instruction == IRInstruction.ZeroExtend8x64  				|| instruction == IRInstruction.ZeroExtend16x64  				|| instruction == IRInstruction.ZeroExtend32x64"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,ProcessInstruction,The conditional expression  "instruction == IRInstruction.SetReturn32  				|| instruction == IRInstruction.SetReturn64  				|| instruction == IRInstruction.SetReturnR4  				|| instruction == IRInstruction.SetReturnR8  				|| instruction == IRInstruction.SetReturnCompound"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,IntegerOperation,The conditional expression  "instruction == IRInstruction.MulUnsigned32  				|| instruction == IRInstruction.MulSigned32  				|| instruction == IRInstruction.MulUnsigned64  				|| instruction == IRInstruction.MulSigned64"  is complex.
Complex Conditional,Mosa.Compiler.Framework,BaseMethodCompilerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseMethodCompilerStage.cs,RemoveBlockFromPhiInstructions,The conditional expression  "node.Instruction != IRInstruction.Phi32 && node.Instruction != IRInstruction.Phi64 && node.Instruction != IRInstruction.PhiR4 && node.Instruction != IRInstruction.PhiR8"  is complex.
Complex Conditional,Mosa.Compiler.Framework,BaseMethodCompilerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseMethodCompilerStage.cs,UpdatePhiInstructionTargets,The conditional expression  "node.Instruction != IRInstruction.Phi32 && node.Instruction != IRInstruction.Phi64 && node.Instruction != IRInstruction.PhiR4 && node.Instruction != IRInstruction.PhiR8"  is complex.
Complex Conditional,Mosa.Compiler.Framework,MethodScanner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodScanner.cs,Complete,The conditional expression  "(!(!method.HasImplementation && method.IsAbstract)) && !method.HasOpenGenericParams && !method.DeclaringType.HasOpenGenericParams"  is complex.
Complex Conditional,Mosa.Compiler.Framework,MethodScanner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodScanner.cs,MethodInvoked,The conditional expression  "method.IsStatic || method.IsConstructor || method.DeclaringType.IsValueType || direct"  is complex.
Complex Conditional,Mosa.Compiler.Framework,Operand,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Operand.cs,ToString,The conditional expression  "IsBoolean || IsChar || IsPointer || IsInteger"  is complex.
Complex Conditional,Mosa.Compiler.Framework.CIL,UnaryBranchInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\UnaryBranchInstruction.cs,DecodeTargets,The conditional expression  "opcode == OpCode.Brfalse_s || opcode == OpCode.Brtrue_s  				|| opcode == OpCode.Brfalse || opcode == OpCode.Brtrue"  is complex.
Complex Conditional,Mosa.Compiler.Framework.CIL,UnaryBranchInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\UnaryBranchInstruction.cs,Decode,The conditional expression  "opcode == OpCode.Brfalse_s || opcode == OpCode.Brtrue_s  				|| opcode == OpCode.Brfalse || opcode == OpCode.Brtrue"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,Read32,The conditional expression  "Ident[0] != MagicNumber[0] || Ident[1] != MagicNumber[1] || Ident[2] != MagicNumber[2] || Ident[3] != MagicNumber[3]"  is complex.
Complex Conditional,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,PlaceLiveIntervalOnTrackAllowEvictions,The conditional expression  "intersection.SpillCost >= liveInterval.SpillCost || intersection.SpillCost == int.MaxValue || intersection.VirtualRegister.IsPhysicalRegister || intersection.IsPhysicalRegister"  is complex.
Complex Conditional,Mosa.Compiler.Framework.RegisterAllocator,GreedyRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\GreedyRegisterAllocator.cs,GetLowerOptimalSplitLocation,The conditional expression  "prevUse.IsNotNull && prevUse.After < at && (max.IsNull || prevUse.After > max)"  is complex.
Complex Conditional,Mosa.Compiler.Framework.RegisterAllocator,GreedyRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\GreedyRegisterAllocator.cs,GetLowerOptimalSplitLocation,The conditional expression  "prevDef.IsNotNull && prevDef.After < at && (max.IsNull || prevDef.After > max)"  is complex.
Complex Conditional,Mosa.Compiler.Framework.RegisterAllocator,GreedyRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\GreedyRegisterAllocator.cs,GetUpperOptimalSplitLocation,The conditional expression  "nextUse.IsNotNull && nextUse.Before > at && (min.IsNull || nextUse.Before < min)"  is complex.
Complex Conditional,Mosa.Compiler.Framework.RegisterAllocator,GreedyRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\GreedyRegisterAllocator.cs,GetUpperOptimalSplitLocation,The conditional expression  "nextDef.IsNotNull && nextDef > at && (min.IsNull || nextDef < min)"  is complex.
Complex Conditional,Mosa.Compiler.Framework.RegisterAllocator,GreedyRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\GreedyRegisterAllocator.cs,CollectMoveHints,The conditional expression  "!((node.Result.IsVirtualRegister && node.Operand1.IsVirtualRegister)  						|| (node.Result.IsVirtualRegister && node.Operand1.IsCPURegister)  						|| (node.Result.IsCPURegister && node.Operand1.IsVirtualRegister))"  is complex.
Complex Conditional,Mosa.Compiler.Framework.RegisterAllocator,MoveResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\MoveResolver.cs,InsertResolvingMoves,The conditional expression  "context.IsEmpty  					|| context.Instruction.FlowControl == FlowControl.UnconditionalBranch  					|| context.Instruction.FlowControl == FlowControl.ConditionalBranch  					|| context.Instruction.FlowControl == FlowControl.Return"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Source,SourceRegions,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Source\SourceRegions.cs,GetSourceRegions,The conditional expression  "methodData.Method.HasImplementation  				&& methodData.HasCode  				&& !methodData.IsMethodImplementationReplaced  				&& !methodData.IsLinkerGenerated"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,EvaluateCompare,The conditional expression  "areRangeValuesDeterminate1 && areRangeValuesDeterminate2 && maxValue1 == minValue1 && maxValue1 == maxValue2 && minValue1 == minValue2"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,EvaluateCompare,The conditional expression  "(((bitsSet1 & bitsSet2) != bitsSet1) || ((bitsClear1 & bitsClear2) != bitsClear1)) && areBitsIndeterminate1 && areBitsIndeterminate2"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,EvaluateCompare,The conditional expression  "areRangeValuesDeterminate1 && areRangeValuesDeterminate2 && maxValue1 == minValue1 && maxValue1 == maxValue2 && minValue1 == minValue2"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,MulSigned64,The conditional expression  "value1.AreRangeValuesDeterminate && value2.AreRangeValuesDeterminate && !IsMultiplyOverflow((int)value1.MaxValue' (int)value2.MaxValue) && !IsMultiplyOverflow((int)value1.MinValue' (int)value2.MinValue)"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,BlockMergeStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BlockMergeStage.cs,MergeBlocks,The conditional expression  "block.IsEpilogue  						|| block.IsPrologue  						|| block.IsTryHeadBlock  						|| block.IsHandlerHeadBlock  						|| (!block.IsCompilerBlock && HasProtectedRegions)"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,BlockMergeStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BlockMergeStage.cs,MergeBlocks,The conditional expression  "next.IsEpilogue  						|| next.IsPrologue  						|| next.IsTryHeadBlock  						|| next.IsHandlerHeadBlock"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,CILDecodingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILDecodingStage.cs,DecodeInstructions,The conditional expression  "flow == FlowControl.Next || flow == FlowControl.Call || flow == FlowControl.ConditionalBranch || flow == FlowControl.Switch"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,CILOperandAssignmentStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILOperandAssignmentStage.cs,AddMoves,The conditional expression  "context.IsEmpty  				|| context.Instruction.FlowControl == FlowControl.ConditionalBranch  				|| context.Instruction.FlowControl == FlowControl.UnconditionalBranch  				|| context.Instruction.FlowControl == FlowControl.Return  				|| context.Instruction == IRInstruction.Jmp"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,CILOperandAssignmentStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILOperandAssignmentStage.cs,AssignOperands,The conditional expression  "ctx.IsEmpty  					|| ctx.IsBlockEndInstruction  					|| ctx.IsBlockStartInstruction  					|| ctx.Instruction == IRInstruction.Jmp"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,CILOperandAssignmentStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILOperandAssignmentStage.cs,AssignOperands,The conditional expression  "ctx.Instruction.FlowControl != FlowControl.ConditionalBranch  					&& ctx.Instruction.FlowControl != FlowControl.UnconditionalBranch  					&& ctx.Instruction.FlowControl != FlowControl.Return  					&& ctx.Instruction != IRInstruction.ExceptionStart  					&& ctx.Instruction != IRInstruction.FilterStart  					&& !(ctx.Instruction is BaseCILInstruction)"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Call,The conditional expression  "method.IsVirtual  				&& context.Operand1.Type.ElementType != null  				&& context.Operand1.Type.ElementType.IsValueType  				&& method.DeclaringType == context.Operand1.Type.ElementType"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Callvirt,The conditional expression  "method.IsVirtual  							&& context.Operand1.Type.ElementType != null  							&& context.Operand1.Type.ElementType.IsValueType  							&& method.DeclaringType == context.Operand1.Type.ElementType"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,GetMethodOrOverride,The conditional expression  "method.DeclaringType.Module == TypeSystem.CorLib  				&& (method.DeclaringType.Name.Equals("ValueType")  					|| method.DeclaringType.Name.Equals("Object")  					|| method.DeclaringType.Name.Equals("Enum"))  				&& (implMethod = type.FindMethodBySignature(method.Name' method.Signature)) != null"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldfld,The conditional expression  "!result.IsOnStack && MosaTypeLayout.CanFitInRegister(operand.Type) && !operand.IsReferenceType && isPointer"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldfld,The conditional expression  "!result.IsOnStack && MosaTypeLayout.CanFitInRegister(operand.Type) && !operand.IsReferenceType && !isPointer"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,DeadBlockStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\DeadBlockRemovalStage.cs,RemoveDeadBlocks,The conditional expression  "block.HasNextBlocks  					|| block.HasPreviousBlocks  					|| block.IsHandlerHeadBlock  					|| block.IsTryHeadBlock  					|| block.IsEpilogue  					|| block.IsPrologue  					|| (HasProtectedRegions && !block.IsCompilerBlock)  					|| block.IsHeadBlock"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,EnterSSAStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\EnterSSAStage.cs,UpdateOperands,The conditional expression  "!(node.Instruction == IRInstruction.Phi32  					|| node.Instruction == IRInstruction.Phi64  					|| node.Instruction == IRInstruction.PhiR4  					|| node.Instruction == IRInstruction.PhiR8)"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,EnterSSAStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\EnterSSAStage.cs,UpdatePHIs,The conditional expression  "node.Instruction != IRInstruction.Phi32 && node.Instruction != IRInstruction.Phi64 && node.Instruction != IRInstruction.PhiR4 && node.Instruction != IRInstruction.PhiR8"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,ExitSSAStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ExitSSAStage.cs,InsertCopyStatement,The conditional expression  "node.IsEmptyOrNop  				|| node.Instruction == IRInstruction.CompareBranch32  				|| node.Instruction == IRInstruction.CompareBranch64  				|| node.Instruction == IRInstruction.Jmp"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,InlineEvaluationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineEvaluationStage.cs,Run,The conditional expression  "node.Instruction == IRInstruction.SetReturn32  							|| node.Instruction == IRInstruction.SetReturn64  							|| node.Instruction == IRInstruction.SetReturnR4  							|| node.Instruction == IRInstruction.SetReturnR8  							|| node.Instruction == IRInstruction.LoadParamCompound  							|| node.Instruction == IRInstruction.LoadParam32  							|| node.Instruction == IRInstruction.LoadParam64  							|| node.Instruction == IRInstruction.LoadParamR4  							|| node.Instruction == IRInstruction.LoadParamR4  							|| node.Instruction == IRInstruction.LoadParamSignExtend16x32  							|| node.Instruction == IRInstruction.LoadParamSignExtend16x64  							|| node.Instruction == IRInstruction.LoadParamSignExtend32x64  							|| node.Instruction == IRInstruction.LoadParamSignExtend8x32  							|| node.Instruction == IRInstruction.LoadParamSignExtend8x64  							|| node.Instruction == IRInstruction.LoadParamZeroExtend16x32  							|| node.Instruction == IRInstruction.LoadParamZeroExtend16x64  							|| node.Instruction == IRInstruction.LoadParamZeroExtend32x64  							|| node.Instruction == IRInstruction.LoadParamZeroExtend8x32  							|| node.Instruction == IRInstruction.LoadParamZeroExtend8x64    							//|| node.Instruction == IRInstruction.Epilogue  							//|| node.Instruction == IRInstruction.Prologue  							|| node.Block.IsEpilogue  							|| node.Block.IsPrologue"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,InlineEvaluationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineEvaluationStage.cs,StaticCanNotInline,The conditional expression  "method.DeclaringType.IsValueType  				&& method.IsVirtual  				&& !method.IsConstructor  				&& !method.IsStatic"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,InlineStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineStage.cs,Inline,The conditional expression  "node.Instruction == IRInstruction.SetReturn32  						|| node.Instruction == IRInstruction.SetReturn64  						|| node.Instruction == IRInstruction.SetReturnR4  						|| node.Instruction == IRInstruction.SetReturnR8  						|| node.Instruction == IRInstruction.SetReturnCompound"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,InlineStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineStage.cs,UpdateParameterInstructions,The conditional expression  "instruction == IRInstruction.LoadParam32  				|| instruction == IRInstruction.LoadParamSignExtend8x32  				|| instruction == IRInstruction.LoadParamSignExtend16x32  				|| instruction == IRInstruction.LoadParamZeroExtend8x32  				|| instruction == IRInstruction.LoadParamZeroExtend16x32"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,InlineStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineStage.cs,UpdateParameterInstructions,The conditional expression  "instruction == IRInstruction.LoadParam64  				|| instruction == IRInstruction.LoadParamSignExtend8x64  				|| instruction == IRInstruction.LoadParamSignExtend16x64  				|| instruction == IRInstruction.LoadParamSignExtend32x64  				|| instruction == IRInstruction.LoadParamZeroExtend8x64  				|| instruction == IRInstruction.LoadParamZeroExtend16x64  				|| instruction == IRInstruction.LoadParamZeroExtend32x64"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,LoopInvariantCodeMotionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LoopInvariantCodeMotionStage.cs,FindLoopInvariantInstructions,The conditional expression  "node.ResultCount != 1  							|| node.OperandCount == 0  							|| node.OperandCount > 2  							|| node.Instruction.IsMemoryWrite  							|| node.Instruction.IsMemoryRead  							|| node.Instruction.IsIOOperation  							|| node.Instruction.HasUnspecifiedSideEffect  							|| node.Instruction.VariableOperands  							|| node.Instruction.FlowControl != FlowControl.Next  							|| node.Instruction.IgnoreDuringCodeGeneration  							|| node.Operand1.IsUnresolvedConstant  							|| (node.OperandCount == 2 && node.Operand2.IsUnresolvedConstant)"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,SparseConditionalConstantPropagationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\SparseConditionalConstantPropagationStage.cs,_RemoveBlockFromPhiInstructions,The conditional expression  "node.Instruction != IRInstruction.Phi32 && node.Instruction != IRInstruction.Phi64 && node.Instruction != IRInstruction.PhiR4 && node.Instruction != IRInstruction.PhiR8"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,StaticLoadOptimizationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\StaticLoadOptimizationStage.cs,LoadInt32,The conditional expression  "operand1.Field.DeclaringType.IsValueType && (operand1.Field.DeclaringType.Name == "System.IntPtr" || operand1.Field.DeclaringType.Name == "System.UIntPtr") && operand1.Field.Name == "Zero""  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,StaticLoadOptimizationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\StaticLoadOptimizationStage.cs,LoadInt64,The conditional expression  "operand1.Field.DeclaringType.IsValueType && (operand1.Field.DeclaringType.Name == "System.IntPtr" || operand1.Field.DeclaringType.Name == "System.UIntPtr") && operand1.Field.Name == "Zero""  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,UnboxValueTypeStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\UnboxValueTypeStage.cs,Run,The conditional expression  "!Method.DeclaringType.IsValueType  				|| Method.IsConstructor  				|| Method.IsStatic  				|| !Method.IsVirtual"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,ValueNumber,The conditional expression  "node.Instruction == IRInstruction.Move32  					|| node.Instruction == IRInstruction.Move64  					|| node.Instruction == IRInstruction.MoveR4  					|| node.Instruction == IRInstruction.MoveR8"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,CanAssignValueNumberToExpression,The conditional expression  "node.ResultCount != 1  				|| node.OperandCount == 0  				|| node.OperandCount > 2  				|| node.Instruction.IsMemoryWrite  				|| node.Instruction.IsMemoryRead  				|| node.Instruction.IsIOOperation  				|| node.Instruction.HasUnspecifiedSideEffect  				|| node.Instruction.VariableOperands  				|| node.Instruction.FlowControl != FlowControl.Next  				|| node.Instruction.IgnoreDuringCodeGeneration  				|| node.Operand1.IsUnresolvedConstant  				|| (node.OperandCount == 2 && node.Operand2.IsUnresolvedConstant)"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,IsEqual,The conditional expression  "operand1.IsResolvedConstant  				&& operand2.IsResolvedConstant  				&& operand1.IsInteger  				&& operand2.IsInteger  				&& operand1.ConstantUnsigned64 == operand2.ConstantUnsigned64"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,IsEqual,The conditional expression  "operand1.IsResolvedConstant  				&& operand2.IsResolvedConstant  				&& operand1.IsR  				&& operand2.IsR  				&& operand1.ConstantDouble == operand2.ConstantDouble"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,IsEqual,The conditional expression  "instruction != null  				&& instruction == IRInstruction.AddressOf  				&& operand1.IsStaticField  				&& operand2.IsStaticField  				&& operand1.Field == operand2.Field"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,IsEqual,The conditional expression  "instruction != null  				&& instruction == IRInstruction.AddressOf  				&& operand1.IsStackLocal  				&& operand2.IsStackLocal  				&& operand1.Index == operand2.Index"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,FindMatch,The conditional expression  "node.Instruction == expression.Instruction  					&& IsEqual(node.Operand1' expression.Operand1' node.Instruction)  					&& (node.OperandCount == 1 || (node.OperandCount == 2 && IsEqual(node.Operand2' expression.Operand2)))"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Transform,TransformationDirectory,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\TransformationDirectory.cs,GetTransformations,The conditional expression  "(type == MatchType.StartsWith && transform.Name.StartsWith(match))  						|| (type == MatchType.Contains && transform.Name.Contains(match))  						|| (type == MatchType.EndsWith && transform.Name.EndsWith(match))"  is complex.
Complex Conditional,Mosa.Compiler.Framework.Transform.IR.Special,Deadcode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Special\Deadcode.cs,Match,The conditional expression  "context.Instruction == IRInstruction.CallDynamic  				|| context.Instruction == IRInstruction.CallInterface  				|| context.Instruction == IRInstruction.CallDirect  				|| context.Instruction == IRInstruction.CallStatic  				|| context.Instruction == IRInstruction.CallVirtual  				|| context.Instruction == IRInstruction.NewObject  				|| context.Instruction == IRInstruction.SetReturn32         // these should not be necessary  				|| context.Instruction == IRInstruction.SetReturn64         // these should not be necessary  				|| context.Instruction == IRInstruction.SetReturnR4         // these should not be necessary  				|| context.Instruction == IRInstruction.SetReturnR8         // these should not be necessary  				|| context.Instruction == IRInstruction.SetReturnCompound   // these should not be necessary  				|| context.Instruction == IRInstruction.IntrinsicMethodCall"  is complex.
Virtual Method Call from Constructor,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,Compiler,The constructor "Compiler" calls a virtual method "ExtendCompilerPipeline".
Magic Number,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,SparseConditionalConstantPropagation,The following statement contains a magic number: MainTrace = CreateTrace("SparseConditionalConstantPropagation"' 5);
Magic Number,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,DumpTrace,The following statement contains a magic number: var variableTrace = CreateTrace("Variables"' 5);
Magic Number,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,DumpTrace,The following statement contains a magic number: var blockTrace = CreateTrace("Blocks"' 5);
Magic Number,Mosa.Compiler.Framework.Analysis,SparseConditionalConstantPropagation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\SparseConditionalConstantPropagation.cs,Default,The following statement contains a magic number: node.ResultCount == 2
Magic Number,Mosa.Compiler.Framework.Analysis.LiveVariableAnalysis,LivenessAnalysis,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\LiveVariableAnalysis\LivenessAnalysis.cs,NumberInstructions,The following statement contains a magic number: const int increment = 2;
Magic Number,Mosa.Compiler.Framework.Analysis.LiveVariableAnalysis,LivenessAnalysis,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\LiveVariableAnalysis\LivenessAnalysis.cs,TraceNumberInstructions,The following statement contains a magic number: var numberTrace = CreateTraceLog("InstructionNumber"' 9);
Magic Number,Mosa.Compiler.Framework.Analysis.LiveVariableAnalysis,LivenessAnalysis,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Analysis\LiveVariableAnalysis\LivenessAnalysis.cs,ComputeLocalLiveSets,The following statement contains a magic number: var liveSetTrace = CreateTraceLog("ComputeLocalLiveSets"' 9);
Magic Number,Mosa.Compiler.Framework,BaseCodeEmitter,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseCodeEmitter.cs,ResolvePatches,The following statement contains a magic number: int relOffset = labelPosition - (p.Position + 4);
Magic Number,Mosa.Compiler.Framework,BaseCodeEmitter,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseCodeEmitter.cs,EmitRelative24,The following statement contains a magic number: Linker.Link(  				LinkType.RelativeOffset'  				PatchType.I24o8'  				MethodName'  				CodeStream.Position'  				symbolOperand.Name'  				-4  			);
Magic Number,Mosa.Compiler.Framework,BaseCodeEmitter,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseCodeEmitter.cs,EmitRelative32,The following statement contains a magic number: Linker.Link(  				LinkType.RelativeOffset'  				PatchType.I32'  				MethodName'  				CodeStream.Position'  				symbolOperand.Name'  				-4  			);
Magic Number,Mosa.Compiler.Framework,BaseCodeEmitter,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BaseCodeEmitter.cs,EmitRelative64,The following statement contains a magic number: Linker.Link(  				LinkType.RelativeOffset'  				PatchType.I64'  				MethodName'  				CodeStream.Position'  				symbolOperand.Name'  				-8  			);
Magic Number,Mosa.Compiler.Framework,BasicBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\BasicBlock.cs,BasicBlock,The following statement contains a magic number: NextBlocks = new List<BasicBlock>(2);
Magic Number,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetDefaultMethodPipeline,The following statement contains a magic number: return new List<BaseMethodCompilerStage>() {  				new CILDecodingStage()'  				new CILOperandAssignmentStage()'  				new CILProtectedRegionStage()'  				new CILTransformationStage()'  				new ExceptionStage()'  				new StackSetupStage()'  				new StaticAllocationResolutionStage()'  				new DevirtualizeCallStage()'  				new PlugStage()'  				new UnboxValueTypeStage()'  				new RuntimeCallStage()'  				(compilerOptions.EnableInlineMethods) ? new InlineStage() : null'  				(compilerOptions.EnableInlineMethods) ? new BlockMergeStage() : null'  				(compilerOptions.EnableInlineMethods) ? new DeadBlockStage() : null'  				new PromoteTemporaryVariables()'  				new StaticLoadOptimizationStage()'  				(compilerOptions.EnableBasicOptimizations) ? new OptimizationStage() : null'  				(compilerOptions.EnableSSA) ? new EdgeSplitStage() : null'  				(compilerOptions.EnableSSA) ? new EnterSSAStage() : null'  				(compilerOptions.EnableBasicOptimizations && compilerOptions.EnableSSA) ? new OptimizationStage() : null'  				(compilerOptions.EnableValueNumbering && compilerOptions.EnableSSA) ? new ValueNumberingStage() : null'  				(compilerOptions.EnableLoopInvariantCodeMotion && compilerOptions.EnableSSA) ? new LoopInvariantCodeMotionStage() : null'  				(compilerOptions.EnableSparseConditionalConstantPropagation && compilerOptions.EnableSSA) ? new SparseConditionalConstantPropagationStage() : null'  				(compilerOptions.EnableBasicOptimizations && compilerOptions.EnableSSA) ? new OptimizationStage() : null'  				(compilerOptions.EnableLongExpansion && compilerOptions.Architecture.NativePointerSize == 4) ? new LongExpansionStage() : null'  				(compilerOptions.EnableBasicOptimizations && compilerOptions.EnableLongExpansion && compilerOptions.Architecture.NativePointerSize == 4) ? new OptimizationStage() : null'  				(compilerOptions.EnableBitTracker) ? new BitTrackerStage() : null'  				(compilerOptions.TwoPassOptimizations && compilerOptions.EnableValueNumbering && compilerOptions.EnableSSA) ? new ValueNumberingStage() : null'  				(compilerOptions.TwoPassOptimizations && compilerOptions.EnableLoopInvariantCodeMotion && compilerOptions.EnableSSA) ? new LoopInvariantCodeMotionStage() : null'  				(compilerOptions.TwoPassOptimizations && compilerOptions.EnableSparseConditionalConstantPropagation && compilerOptions.EnableSSA) ? new SparseConditionalConstantPropagationStage() : null'  				(compilerOptions.TwoPassOptimizations && compilerOptions.EnableBasicOptimizations && compilerOptions.EnableSSA) ? new OptimizationStage() : null'  				(compilerOptions.EnableSSA) ? new ExitSSAStage() : null'  				new DeadBlockStage()'  				new BlockMergeStage()'  				new IRCleanupStage()'  				new NewObjectIRStage()'  				(compilerOptions.EnableInlineMethods) ? new InlineEvaluationStage() : null'    				//new StopStage()'    				new CallStage()'  				new CompoundStage()'  				new PlatformIntrinsicStage()'  				new PlatformEdgeSplitStage()'  				new VirtualRegisterRenameStage()'  				new GreedyRegisterAllocatorStage()'  				new StackLayoutStage()'  				new DeadBlockStage()'  				new BlockOrderingStage()'    				//new PreciseGCStage()'    				new CodeGenerationStage(compilerOptions.EmitBinary)'  				(compilerOptions.EmitBinary) ? new ProtectedRegionLayoutStage() : null'  			};
Magic Number,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetDefaultMethodPipeline,The following statement contains a magic number: return new List<BaseMethodCompilerStage>() {  				new CILDecodingStage()'  				new CILOperandAssignmentStage()'  				new CILProtectedRegionStage()'  				new CILTransformationStage()'  				new ExceptionStage()'  				new StackSetupStage()'  				new StaticAllocationResolutionStage()'  				new DevirtualizeCallStage()'  				new PlugStage()'  				new UnboxValueTypeStage()'  				new RuntimeCallStage()'  				(compilerOptions.EnableInlineMethods) ? new InlineStage() : null'  				(compilerOptions.EnableInlineMethods) ? new BlockMergeStage() : null'  				(compilerOptions.EnableInlineMethods) ? new DeadBlockStage() : null'  				new PromoteTemporaryVariables()'  				new StaticLoadOptimizationStage()'  				(compilerOptions.EnableBasicOptimizations) ? new OptimizationStage() : null'  				(compilerOptions.EnableSSA) ? new EdgeSplitStage() : null'  				(compilerOptions.EnableSSA) ? new EnterSSAStage() : null'  				(compilerOptions.EnableBasicOptimizations && compilerOptions.EnableSSA) ? new OptimizationStage() : null'  				(compilerOptions.EnableValueNumbering && compilerOptions.EnableSSA) ? new ValueNumberingStage() : null'  				(compilerOptions.EnableLoopInvariantCodeMotion && compilerOptions.EnableSSA) ? new LoopInvariantCodeMotionStage() : null'  				(compilerOptions.EnableSparseConditionalConstantPropagation && compilerOptions.EnableSSA) ? new SparseConditionalConstantPropagationStage() : null'  				(compilerOptions.EnableBasicOptimizations && compilerOptions.EnableSSA) ? new OptimizationStage() : null'  				(compilerOptions.EnableLongExpansion && compilerOptions.Architecture.NativePointerSize == 4) ? new LongExpansionStage() : null'  				(compilerOptions.EnableBasicOptimizations && compilerOptions.EnableLongExpansion && compilerOptions.Architecture.NativePointerSize == 4) ? new OptimizationStage() : null'  				(compilerOptions.EnableBitTracker) ? new BitTrackerStage() : null'  				(compilerOptions.TwoPassOptimizations && compilerOptions.EnableValueNumbering && compilerOptions.EnableSSA) ? new ValueNumberingStage() : null'  				(compilerOptions.TwoPassOptimizations && compilerOptions.EnableLoopInvariantCodeMotion && compilerOptions.EnableSSA) ? new LoopInvariantCodeMotionStage() : null'  				(compilerOptions.TwoPassOptimizations && compilerOptions.EnableSparseConditionalConstantPropagation && compilerOptions.EnableSSA) ? new SparseConditionalConstantPropagationStage() : null'  				(compilerOptions.TwoPassOptimizations && compilerOptions.EnableBasicOptimizations && compilerOptions.EnableSSA) ? new OptimizationStage() : null'  				(compilerOptions.EnableSSA) ? new ExitSSAStage() : null'  				new DeadBlockStage()'  				new BlockMergeStage()'  				new IRCleanupStage()'  				new NewObjectIRStage()'  				(compilerOptions.EnableInlineMethods) ? new InlineEvaluationStage() : null'    				//new StopStage()'    				new CallStage()'  				new CompoundStage()'  				new PlatformIntrinsicStage()'  				new PlatformEdgeSplitStage()'  				new VirtualRegisterRenameStage()'  				new GreedyRegisterAllocatorStage()'  				new StackLayoutStage()'  				new DeadBlockStage()'  				new BlockOrderingStage()'    				//new PreciseGCStage()'    				new CodeGenerationStage(compilerOptions.EmitBinary)'  				(compilerOptions.EmitBinary) ? new ProtectedRegionLayoutStage() : null'  			};
Magic Number,Mosa.Compiler.Framework,CompilerOptions,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerOptions.cs,CompilerOptions,The following statement contains a magic number: InlineMaximum = 12;
Magic Number,Mosa.Compiler.Framework,CompilerOptions,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerOptions.cs,CompilerOptions,The following statement contains a magic number: InlineAggressiveMaximum = 24;
Magic Number,Mosa.Compiler.Framework,CompilerVersion,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerVersion.cs,GetVersion,The following statement contains a magic number: version = new Version(1' 9' 2' 0);
Magic Number,Mosa.Compiler.Framework,CompilerVersion,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerVersion.cs,GetVersion,The following statement contains a magic number: version = new Version(1' 9' 2' 0);
Magic Number,Mosa.Compiler.Framework,DelegatePatcher,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\DelegatePatcher.cs,PatchConstructor,The following statement contains a magic number: var methodPointerOperand = methodCompiler.Parameters[2];
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetOperand,The following statement contains a magic number: switch (index)  			{  				case 0: Operand1 = operand; return;  				case 1: Operand2 = operand; return;  				case 2: Operand3 = operand; return;  				default:  					{  						var current = GetAdditionalOperand(index);  						if (current == operand) return;  						if (current != null)  						{  							current.Uses.Remove(this);  						}    						if (operand != null)  						{  							if (operand.IsVirtualRegister || operand.IsOnStack)  							{  								operand.Uses.Add(this);  							}  						}    						SetAdditionalOperand(index' operand);  						return;  					}  			}
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,GetOperand,The following statement contains a magic number: switch (opIndex)  			{  				case 0: return Operand1;  				case 1: return Operand2;  				case 2: return Operand3;  				default: return GetAdditionalOperand(opIndex);  			}
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetAdditionalOperand,The following statement contains a magic number: Debug.Assert(index >= 3' "No Index");
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetAdditionalOperand,The following statement contains a magic number: SizeAdditionalOperands(index - 3 + 1);
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetAdditionalOperand,The following statement contains a magic number: addition.AdditionalOperands[index - 3] = operand;
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SizeAdditionalOperands,The following statement contains a magic number: var minsize = Math.Max(index' 8);
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SizeAdditionalOperands,The following statement contains a magic number: var newsize = Math.Max(index' old.Length * 2);
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,GetAdditionalOperand,The following statement contains a magic number: Debug.Assert(index >= 3' "No Index");
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,GetAdditionalOperand,The following statement contains a magic number: SizeAdditionalOperands(index - 3 + 1);
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,GetAdditionalOperand,The following statement contains a magic number: return addition.AdditionalOperands[index - 3];
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,ToString,The following statement contains a magic number: sb.Length -= 2;
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,ToString,The following statement contains a magic number: (i < 2) && (i < BranchTargetsCount)
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,ToString,The following statement contains a magic number: BranchTargetsCount > 2
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction2,The following statement contains a magic number: SetInstruction(instruction' 1' 2);
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction2,The following statement contains a magic number: SetInstruction(instruction' 1' 2);
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction2,The following statement contains a magic number: SetInstruction(instruction' 2' 2);
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction2,The following statement contains a magic number: SetInstruction(instruction' 2' 2);
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction2,The following statement contains a magic number: SetInstruction(instruction' 3' 2);
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction2,The following statement contains a magic number: SetInstruction(instruction' 3' 2);
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The following statement contains a magic number: SetInstruction(instruction' 2' (byte)((result == null) ? 0 : 1));
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The following statement contains a magic number: SetInstruction(instruction' 3' (byte)((result == null) ? 0 : 1));
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The following statement contains a magic number: SetInstruction(instruction' 4' (byte)((result == null) ? 0 : 1));
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The following statement contains a magic number: SetOperand(3' operand4);
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The following statement contains a magic number: SetInstruction(instruction' 2' (byte)((result == null) ? 0 : 1));
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The following statement contains a magic number: SetInstruction(instruction' 2' (byte)((result == null) ? 0 : 1));
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The following statement contains a magic number: SetInstruction(instruction' 3' (byte)((result == null) ? 0 : 1));
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The following statement contains a magic number: SetInstruction(instruction' 2' (byte)((result == null) ? 0 : 1));
Magic Number,Mosa.Compiler.Framework,InstructionNode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\InstructionNode.cs,SetInstruction,The following statement contains a magic number: SetInstruction(instruction' 2' (byte)((result == null) ? 0 : 1));
Magic Number,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,ExecutePipeline,The following statement contains a magic number: var percentage = totalTick == 0 ? 0 : (ticks * 100) / (double)(totalTick);
Magic Number,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,ExecutePipeline,The following statement contains a magic number: int per = (int)percentage / 5;
Magic Number,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,ExecutePipeline,The following statement contains a magic number: var entry = $"[{i:00}] {Pipeline[i].Name.PadRight(45)} : {percentage:00.00} % [{string.Empty.PadRight(per' '#').PadRight(20' ' ')}] ({ticks})";
Magic Number,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,ExecutePipeline,The following statement contains a magic number: var entry = $"[{i:00}] {Pipeline[i].Name.PadRight(45)} : {percentage:00.00} % [{string.Empty.PadRight(per' '#').PadRight(20' ' ')}] ({ticks})";
Magic Number,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,ExecutePipeline,The following statement contains a magic number: executionTimeLog.Log($"{"****Total Time".PadRight(57)}({lastTick})");
Magic Number,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,PlugMethod,The following statement contains a magic number: Trace.IsTraceable(5)
Magic Number,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,PatchDelegate,The following statement contains a magic number: Trace.IsTraceable(5)
Magic Number,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,ExternalMethod,The following statement contains a magic number: Trace.IsTraceable(5)
Magic Number,Mosa.Compiler.Framework,MethodCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MethodCompiler.cs,InternalMethod,The following statement contains a magic number: Trace.IsTraceable(5)
Magic Number,Mosa.Compiler.Framework,MosaCompiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaCompiler.cs,MosaCompiler,The following statement contains a magic number: MaxThreads = (maxThreads == 0) ? Environment.ProcessorCount * 2 : maxThreads;
Magic Number,Mosa.Compiler.Framework,MosaTypeLayout,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaTypeLayout.cs,MosaTypeLayout,The following statement contains a magic number: Debug.Assert(nativePointerSize == 4 || nativePointerSize == 8);
Magic Number,Mosa.Compiler.Framework,MosaTypeLayout,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaTypeLayout.cs,MosaTypeLayout,The following statement contains a magic number: Debug.Assert(nativePointerSize == 4 || nativePointerSize == 8);
Magic Number,Mosa.Compiler.Framework,MosaTypeLayout,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\MosaTypeLayout.cs,IsCompoundType,The following statement contains a magic number: primitiveSize != null && primitiveSize > 8
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendBit,The following statement contains a magic number: Bits |= (byte)(1u << (7 - BitsLength));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendBit,The following statement contains a magic number: BitsLength == 8
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append3Bits,The following statement contains a magic number: AppendBit((value >> 2) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendNibble,The following statement contains a magic number: AppendBit((value >> 3) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendNibble,The following statement contains a magic number: AppendBit((value >> 2) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append5Bits,The following statement contains a magic number: AppendBit((value >> 4) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append5Bits,The following statement contains a magic number: AppendBit((value >> 3) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append5Bits,The following statement contains a magic number: AppendBit((value >> 2) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append6Bits,The following statement contains a magic number: AppendBit((value >> 5) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append6Bits,The following statement contains a magic number: AppendBit((value >> 4) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append6Bits,The following statement contains a magic number: AppendBit((value >> 3) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append6Bits,The following statement contains a magic number: AppendBit((value >> 2) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append7Bits,The following statement contains a magic number: AppendBit((value >> 6) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append7Bits,The following statement contains a magic number: AppendBit((value >> 5) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append7Bits,The following statement contains a magic number: AppendBit((value >> 4) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append7Bits,The following statement contains a magic number: AppendBit((value >> 3) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append7Bits,The following statement contains a magic number: AppendBit((value >> 2) & 0x1);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendByte,The following statement contains a magic number: AppendBits(value' 8);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendShort,The following statement contains a magic number: WriteByte((byte)(value >> 8));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendShort,The following statement contains a magic number: AppendBits(value' 16);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append24Bits,The following statement contains a magic number: WriteByte((byte)(value >> 16));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append24Bits,The following statement contains a magic number: WriteByte((byte)(value >> 8));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append24Bits,The following statement contains a magic number: AppendBits(value' 24);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append32Bits,The following statement contains a magic number: WriteByte((byte)(value >> 24));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append32Bits,The following statement contains a magic number: WriteByte((byte)(value >> 16));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append32Bits,The following statement contains a magic number: WriteByte((byte)(value >> 8));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append32Bits,The following statement contains a magic number: AppendBits(value' 32);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendLong,The following statement contains a magic number: WriteByte((byte)(value >> 56));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendLong,The following statement contains a magic number: WriteByte((byte)(value >> 48));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendLong,The following statement contains a magic number: WriteByte((byte)(value >> 40));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendLong,The following statement contains a magic number: WriteByte((byte)(value >> 32));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendLong,The following statement contains a magic number: WriteByte((byte)(value >> 24));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendLong,The following statement contains a magic number: WriteByte((byte)(value >> 16));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendLong,The following statement contains a magic number: WriteByte((byte)(value >> 8));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendLong,The following statement contains a magic number: AppendBits(value' 64);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendImmediateInteger,The following statement contains a magic number: WriteByte((byte)(value >> 8));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendImmediateInteger,The following statement contains a magic number: WriteByte((byte)(value >> 16));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendImmediateInteger,The following statement contains a magic number: WriteByte((byte)(value >> 24));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendImmediateInteger,The following statement contains a magic number: AppendBitsReversed(value' 32);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendImmediateInteger,The following statement contains a magic number: WriteByte((byte)(value >> 8));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendImmediateInteger,The following statement contains a magic number: WriteByte((byte)(value >> 16));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendImmediateInteger,The following statement contains a magic number: WriteByte((byte)(value >> 24));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendImmediateInteger,The following statement contains a magic number: WriteByte((byte)(value >> 32));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendImmediateInteger,The following statement contains a magic number: WriteByte((byte)(value >> 40));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendImmediateInteger,The following statement contains a magic number: WriteByte((byte)(value >> 48));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendImmediateInteger,The following statement contains a magic number: WriteByte((byte)(value >> 56));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,AppendImmediateInteger,The following statement contains a magic number: AppendBitsReversed(value' 64);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append2BitImmediate,The following statement contains a magic number: AppendBits(operand.ConstantUnsigned32 & 0b11' 2);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append4BitImmediateHighNibble,The following statement contains a magic number: Append4Bits((byte)operand.ConstantUnsigned32 >> 4);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append5BitImmediate,The following statement contains a magic number: AppendBits(operand.ConstantUnsigned32 & 0b11111' 5);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append16BitImmediate,The following statement contains a magic number: AppendByte((byte)(operand.ConstantUnsigned32 >> 8));
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,Append12BitImmediate,The following statement contains a magic number: AppendBits(operand.ConstantUnsigned32 & 0xFFF' 12);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,EmitRelative24,The following statement contains a magic number: int offset = Emitter.EmitRelative(label' 4);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,EmitRelative32,The following statement contains a magic number: int offset = Emitter.EmitRelative(label' 4);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,EmitRelative32,The following statement contains a magic number: WriteZeroBytes(4);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,EmitRelative64,The following statement contains a magic number: WriteZeroBytes(8);
Magic Number,Mosa.Compiler.Framework,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\OpcodeEncoder.cs,EmitForward32,The following statement contains a magic number: WriteZeroBytes(4);
Magic Number,Mosa.Compiler.Framework,Operand,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Operand.cs,CreateHighSplitForLong,The following statement contains a magic number: operand = CreateStackParameter(typeSystem.BuiltIn.U4' longOperand.Index' longOperand.Name + " (High)"' false' (int)longOperand.Offset + 4);
Magic Number,Mosa.Compiler.Framework,Operand,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Operand.cs,ShortenTypeName,The following statement contains a magic number: value.Length < 2
Magic Number,Mosa.Compiler.Framework,Operand,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Operand.cs,ShortenTypeName,The following statement contains a magic number: type = value.Substring(0' value.Length - 2);
Magic Number,Mosa.Compiler.Framework,VirtualRegisters,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\VirtualRegisters.cs,SplitLongOperand,The following statement contains a magic number: var high = Operand.CreateHighSplitForLong(longOperand' virtualRegisters.Count + 2' typeSystem);
Magic Number,Mosa.Compiler.Framework.CIL,DupInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\DupInstruction.cs,Resolve,The following statement contains a magic number: context.ResultCount = 2;
Magic Number,Mosa.Compiler.Framework.CIL,LdargInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdargInstruction.cs,Decode,The following statement contains a magic number: switch (opcode)  			{  				case OpCode.Ldarg:  				case OpCode.Ldarg_s: index = (int)decoder.Instruction.Operand; break;  				case OpCode.Ldarg_0: index = 0; break;  				case OpCode.Ldarg_1: index = 1; break;  				case OpCode.Ldarg_2: index = 2; break;  				case OpCode.Ldarg_3: index = 3; break;  				default: throw new CompilerException();  			}
Magic Number,Mosa.Compiler.Framework.CIL,LdargInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdargInstruction.cs,Decode,The following statement contains a magic number: switch (opcode)  			{  				case OpCode.Ldarg:  				case OpCode.Ldarg_s: index = (int)decoder.Instruction.Operand; break;  				case OpCode.Ldarg_0: index = 0; break;  				case OpCode.Ldarg_1: index = 1; break;  				case OpCode.Ldarg_2: index = 2; break;  				case OpCode.Ldarg_3: index = 3; break;  				default: throw new CompilerException();  			}
Magic Number,Mosa.Compiler.Framework.CIL,LdcInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdcInstruction.cs,Decode,The following statement contains a magic number: switch (opcode)  			{  				case OpCode.Ldc_i4: constantValueOperand = decoder.MethodCompiler.CreateConstant((int)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i4_s: constantValueOperand = decoder.MethodCompiler.CreateConstant((sbyte)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i8: constantValueOperand = decoder.MethodCompiler.CreateConstant((long)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r4: constantValueOperand = decoder.MethodCompiler.CreateConstant((float)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r8: constantValueOperand = decoder.MethodCompiler.CreateConstant((double)decoder.Instruction.Operand); break;  				case OpCode.Ldnull: constantValueOperand = Operand.GetNullObject(decoder.TypeSystem); break;  				case OpCode.Ldc_i4_0: constantValueOperand = decoder.MethodCompiler.CreateConstant(0); break;  				case OpCode.Ldc_i4_1: constantValueOperand = decoder.MethodCompiler.CreateConstant(1); break;  				case OpCode.Ldc_i4_2: constantValueOperand = decoder.MethodCompiler.CreateConstant(2); break;  				case OpCode.Ldc_i4_3: constantValueOperand = decoder.MethodCompiler.CreateConstant(3); break;  				case OpCode.Ldc_i4_4: constantValueOperand = decoder.MethodCompiler.CreateConstant(4); break;  				case OpCode.Ldc_i4_5: constantValueOperand = decoder.MethodCompiler.CreateConstant(5); break;  				case OpCode.Ldc_i4_6: constantValueOperand = decoder.MethodCompiler.CreateConstant(6); break;  				case OpCode.Ldc_i4_7: constantValueOperand = decoder.MethodCompiler.CreateConstant(7); break;  				case OpCode.Ldc_i4_8: constantValueOperand = decoder.MethodCompiler.CreateConstant(8); break;  				case OpCode.Ldc_i4_m1: constantValueOperand = decoder.MethodCompiler.CreateConstant(-1); break;  				default: throw new NotImplementCompilerException();  			}
Magic Number,Mosa.Compiler.Framework.CIL,LdcInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdcInstruction.cs,Decode,The following statement contains a magic number: switch (opcode)  			{  				case OpCode.Ldc_i4: constantValueOperand = decoder.MethodCompiler.CreateConstant((int)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i4_s: constantValueOperand = decoder.MethodCompiler.CreateConstant((sbyte)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i8: constantValueOperand = decoder.MethodCompiler.CreateConstant((long)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r4: constantValueOperand = decoder.MethodCompiler.CreateConstant((float)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r8: constantValueOperand = decoder.MethodCompiler.CreateConstant((double)decoder.Instruction.Operand); break;  				case OpCode.Ldnull: constantValueOperand = Operand.GetNullObject(decoder.TypeSystem); break;  				case OpCode.Ldc_i4_0: constantValueOperand = decoder.MethodCompiler.CreateConstant(0); break;  				case OpCode.Ldc_i4_1: constantValueOperand = decoder.MethodCompiler.CreateConstant(1); break;  				case OpCode.Ldc_i4_2: constantValueOperand = decoder.MethodCompiler.CreateConstant(2); break;  				case OpCode.Ldc_i4_3: constantValueOperand = decoder.MethodCompiler.CreateConstant(3); break;  				case OpCode.Ldc_i4_4: constantValueOperand = decoder.MethodCompiler.CreateConstant(4); break;  				case OpCode.Ldc_i4_5: constantValueOperand = decoder.MethodCompiler.CreateConstant(5); break;  				case OpCode.Ldc_i4_6: constantValueOperand = decoder.MethodCompiler.CreateConstant(6); break;  				case OpCode.Ldc_i4_7: constantValueOperand = decoder.MethodCompiler.CreateConstant(7); break;  				case OpCode.Ldc_i4_8: constantValueOperand = decoder.MethodCompiler.CreateConstant(8); break;  				case OpCode.Ldc_i4_m1: constantValueOperand = decoder.MethodCompiler.CreateConstant(-1); break;  				default: throw new NotImplementCompilerException();  			}
Magic Number,Mosa.Compiler.Framework.CIL,LdcInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdcInstruction.cs,Decode,The following statement contains a magic number: switch (opcode)  			{  				case OpCode.Ldc_i4: constantValueOperand = decoder.MethodCompiler.CreateConstant((int)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i4_s: constantValueOperand = decoder.MethodCompiler.CreateConstant((sbyte)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i8: constantValueOperand = decoder.MethodCompiler.CreateConstant((long)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r4: constantValueOperand = decoder.MethodCompiler.CreateConstant((float)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r8: constantValueOperand = decoder.MethodCompiler.CreateConstant((double)decoder.Instruction.Operand); break;  				case OpCode.Ldnull: constantValueOperand = Operand.GetNullObject(decoder.TypeSystem); break;  				case OpCode.Ldc_i4_0: constantValueOperand = decoder.MethodCompiler.CreateConstant(0); break;  				case OpCode.Ldc_i4_1: constantValueOperand = decoder.MethodCompiler.CreateConstant(1); break;  				case OpCode.Ldc_i4_2: constantValueOperand = decoder.MethodCompiler.CreateConstant(2); break;  				case OpCode.Ldc_i4_3: constantValueOperand = decoder.MethodCompiler.CreateConstant(3); break;  				case OpCode.Ldc_i4_4: constantValueOperand = decoder.MethodCompiler.CreateConstant(4); break;  				case OpCode.Ldc_i4_5: constantValueOperand = decoder.MethodCompiler.CreateConstant(5); break;  				case OpCode.Ldc_i4_6: constantValueOperand = decoder.MethodCompiler.CreateConstant(6); break;  				case OpCode.Ldc_i4_7: constantValueOperand = decoder.MethodCompiler.CreateConstant(7); break;  				case OpCode.Ldc_i4_8: constantValueOperand = decoder.MethodCompiler.CreateConstant(8); break;  				case OpCode.Ldc_i4_m1: constantValueOperand = decoder.MethodCompiler.CreateConstant(-1); break;  				default: throw new NotImplementCompilerException();  			}
Magic Number,Mosa.Compiler.Framework.CIL,LdcInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdcInstruction.cs,Decode,The following statement contains a magic number: switch (opcode)  			{  				case OpCode.Ldc_i4: constantValueOperand = decoder.MethodCompiler.CreateConstant((int)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i4_s: constantValueOperand = decoder.MethodCompiler.CreateConstant((sbyte)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i8: constantValueOperand = decoder.MethodCompiler.CreateConstant((long)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r4: constantValueOperand = decoder.MethodCompiler.CreateConstant((float)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r8: constantValueOperand = decoder.MethodCompiler.CreateConstant((double)decoder.Instruction.Operand); break;  				case OpCode.Ldnull: constantValueOperand = Operand.GetNullObject(decoder.TypeSystem); break;  				case OpCode.Ldc_i4_0: constantValueOperand = decoder.MethodCompiler.CreateConstant(0); break;  				case OpCode.Ldc_i4_1: constantValueOperand = decoder.MethodCompiler.CreateConstant(1); break;  				case OpCode.Ldc_i4_2: constantValueOperand = decoder.MethodCompiler.CreateConstant(2); break;  				case OpCode.Ldc_i4_3: constantValueOperand = decoder.MethodCompiler.CreateConstant(3); break;  				case OpCode.Ldc_i4_4: constantValueOperand = decoder.MethodCompiler.CreateConstant(4); break;  				case OpCode.Ldc_i4_5: constantValueOperand = decoder.MethodCompiler.CreateConstant(5); break;  				case OpCode.Ldc_i4_6: constantValueOperand = decoder.MethodCompiler.CreateConstant(6); break;  				case OpCode.Ldc_i4_7: constantValueOperand = decoder.MethodCompiler.CreateConstant(7); break;  				case OpCode.Ldc_i4_8: constantValueOperand = decoder.MethodCompiler.CreateConstant(8); break;  				case OpCode.Ldc_i4_m1: constantValueOperand = decoder.MethodCompiler.CreateConstant(-1); break;  				default: throw new NotImplementCompilerException();  			}
Magic Number,Mosa.Compiler.Framework.CIL,LdcInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdcInstruction.cs,Decode,The following statement contains a magic number: switch (opcode)  			{  				case OpCode.Ldc_i4: constantValueOperand = decoder.MethodCompiler.CreateConstant((int)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i4_s: constantValueOperand = decoder.MethodCompiler.CreateConstant((sbyte)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i8: constantValueOperand = decoder.MethodCompiler.CreateConstant((long)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r4: constantValueOperand = decoder.MethodCompiler.CreateConstant((float)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r8: constantValueOperand = decoder.MethodCompiler.CreateConstant((double)decoder.Instruction.Operand); break;  				case OpCode.Ldnull: constantValueOperand = Operand.GetNullObject(decoder.TypeSystem); break;  				case OpCode.Ldc_i4_0: constantValueOperand = decoder.MethodCompiler.CreateConstant(0); break;  				case OpCode.Ldc_i4_1: constantValueOperand = decoder.MethodCompiler.CreateConstant(1); break;  				case OpCode.Ldc_i4_2: constantValueOperand = decoder.MethodCompiler.CreateConstant(2); break;  				case OpCode.Ldc_i4_3: constantValueOperand = decoder.MethodCompiler.CreateConstant(3); break;  				case OpCode.Ldc_i4_4: constantValueOperand = decoder.MethodCompiler.CreateConstant(4); break;  				case OpCode.Ldc_i4_5: constantValueOperand = decoder.MethodCompiler.CreateConstant(5); break;  				case OpCode.Ldc_i4_6: constantValueOperand = decoder.MethodCompiler.CreateConstant(6); break;  				case OpCode.Ldc_i4_7: constantValueOperand = decoder.MethodCompiler.CreateConstant(7); break;  				case OpCode.Ldc_i4_8: constantValueOperand = decoder.MethodCompiler.CreateConstant(8); break;  				case OpCode.Ldc_i4_m1: constantValueOperand = decoder.MethodCompiler.CreateConstant(-1); break;  				default: throw new NotImplementCompilerException();  			}
Magic Number,Mosa.Compiler.Framework.CIL,LdcInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdcInstruction.cs,Decode,The following statement contains a magic number: switch (opcode)  			{  				case OpCode.Ldc_i4: constantValueOperand = decoder.MethodCompiler.CreateConstant((int)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i4_s: constantValueOperand = decoder.MethodCompiler.CreateConstant((sbyte)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i8: constantValueOperand = decoder.MethodCompiler.CreateConstant((long)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r4: constantValueOperand = decoder.MethodCompiler.CreateConstant((float)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r8: constantValueOperand = decoder.MethodCompiler.CreateConstant((double)decoder.Instruction.Operand); break;  				case OpCode.Ldnull: constantValueOperand = Operand.GetNullObject(decoder.TypeSystem); break;  				case OpCode.Ldc_i4_0: constantValueOperand = decoder.MethodCompiler.CreateConstant(0); break;  				case OpCode.Ldc_i4_1: constantValueOperand = decoder.MethodCompiler.CreateConstant(1); break;  				case OpCode.Ldc_i4_2: constantValueOperand = decoder.MethodCompiler.CreateConstant(2); break;  				case OpCode.Ldc_i4_3: constantValueOperand = decoder.MethodCompiler.CreateConstant(3); break;  				case OpCode.Ldc_i4_4: constantValueOperand = decoder.MethodCompiler.CreateConstant(4); break;  				case OpCode.Ldc_i4_5: constantValueOperand = decoder.MethodCompiler.CreateConstant(5); break;  				case OpCode.Ldc_i4_6: constantValueOperand = decoder.MethodCompiler.CreateConstant(6); break;  				case OpCode.Ldc_i4_7: constantValueOperand = decoder.MethodCompiler.CreateConstant(7); break;  				case OpCode.Ldc_i4_8: constantValueOperand = decoder.MethodCompiler.CreateConstant(8); break;  				case OpCode.Ldc_i4_m1: constantValueOperand = decoder.MethodCompiler.CreateConstant(-1); break;  				default: throw new NotImplementCompilerException();  			}
Magic Number,Mosa.Compiler.Framework.CIL,LdcInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdcInstruction.cs,Decode,The following statement contains a magic number: switch (opcode)  			{  				case OpCode.Ldc_i4: constantValueOperand = decoder.MethodCompiler.CreateConstant((int)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i4_s: constantValueOperand = decoder.MethodCompiler.CreateConstant((sbyte)decoder.Instruction.Operand); break;  				case OpCode.Ldc_i8: constantValueOperand = decoder.MethodCompiler.CreateConstant((long)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r4: constantValueOperand = decoder.MethodCompiler.CreateConstant((float)decoder.Instruction.Operand); break;  				case OpCode.Ldc_r8: constantValueOperand = decoder.MethodCompiler.CreateConstant((double)decoder.Instruction.Operand); break;  				case OpCode.Ldnull: constantValueOperand = Operand.GetNullObject(decoder.TypeSystem); break;  				case OpCode.Ldc_i4_0: constantValueOperand = decoder.MethodCompiler.CreateConstant(0); break;  				case OpCode.Ldc_i4_1: constantValueOperand = decoder.MethodCompiler.CreateConstant(1); break;  				case OpCode.Ldc_i4_2: constantValueOperand = decoder.MethodCompiler.CreateConstant(2); break;  				case OpCode.Ldc_i4_3: constantValueOperand = decoder.MethodCompiler.CreateConstant(3); break;  				case OpCode.Ldc_i4_4: constantValueOperand = decoder.MethodCompiler.CreateConstant(4); break;  				case OpCode.Ldc_i4_5: constantValueOperand = decoder.MethodCompiler.CreateConstant(5); break;  				case OpCode.Ldc_i4_6: constantValueOperand = decoder.MethodCompiler.CreateConstant(6); break;  				case OpCode.Ldc_i4_7: constantValueOperand = decoder.MethodCompiler.CreateConstant(7); break;  				case OpCode.Ldc_i4_8: constantValueOperand = decoder.MethodCompiler.CreateConstant(8); break;  				case OpCode.Ldc_i4_m1: constantValueOperand = decoder.MethodCompiler.CreateConstant(-1); break;  				default: throw new NotImplementCompilerException();  			}
Magic Number,Mosa.Compiler.Framework.CIL,LdlocInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdlocInstruction.cs,Decode,The following statement contains a magic number: switch (opcode)  			{  				case OpCode.Ldloc:  				case OpCode.Ldloc_s: index = (int)decoder.Instruction.Operand; break;  				case OpCode.Ldloc_0: index = 0; break;  				case OpCode.Ldloc_1: index = 1; break;  				case OpCode.Ldloc_2: index = 2; break;  				case OpCode.Ldloc_3: index = 3; break;  				default: throw new InvalidMetadataException();  			}
Magic Number,Mosa.Compiler.Framework.CIL,LdlocInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\LdlocInstruction.cs,Decode,The following statement contains a magic number: switch (opcode)  			{  				case OpCode.Ldloc:  				case OpCode.Ldloc_s: index = (int)decoder.Instruction.Operand; break;  				case OpCode.Ldloc_0: index = 0; break;  				case OpCode.Ldloc_1: index = 1; break;  				case OpCode.Ldloc_2: index = 2; break;  				case OpCode.Ldloc_3: index = 3; break;  				default: throw new InvalidMetadataException();  			}
Magic Number,Mosa.Compiler.Framework.CIL,StlocInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\StlocInstruction.cs,Decode,The following statement contains a magic number: switch (opcode)  			{  				case OpCode.Stloc:  				case OpCode.Stloc_s: index = (int)decoder.Instruction.Operand; break;  				case OpCode.Stloc_0: index = 0; break;  				case OpCode.Stloc_1: index = 1; break;  				case OpCode.Stloc_2: index = 2; break;  				case OpCode.Stloc_3: index = 3; break;  				default: throw new NotImplementCompilerException();  			}
Magic Number,Mosa.Compiler.Framework.CIL,StlocInstruction,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CIL\StlocInstruction.cs,Decode,The following statement contains a magic number: switch (opcode)  			{  				case OpCode.Stloc:  				case OpCode.Stloc_s: index = (int)decoder.Instruction.Operand; break;  				case OpCode.Stloc_0: index = 0; break;  				case OpCode.Stloc_1: index = 1; break;  				case OpCode.Stloc_2: index = 2; break;  				case OpCode.Stloc_3: index = 3; break;  				default: throw new NotImplementCompilerException();  			}
Magic Number,Mosa.Compiler.Framework.CompilerStages,ExceptionTableStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\ExceptionTableStage.cs,Initialization,The following statement contains a magic number: NativePatchType = (TypeLayout.NativePointerSize == 4) ? PatchType.I32 : NativePatchType = PatchType.I64;
Magic Number,Mosa.Compiler.Framework.CompilerStages,MapFileStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MapFileStage.cs,EmitSections,The following statement contains a magic number: writer.WriteLine("{0:x16} {1:x16} {2:x16} {3} {4}"' linkerSection.FileOffset' linkerSection.VirtualAddress' linkerSection.Size' linkerSection.Name.PadRight(32)' linkerSection.SectionKind);
Magic Number,Mosa.Compiler.Framework.CompilerStages,MapFileStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MapFileStage.cs,EmitSymbols,The following statement contains a magic number: writer.WriteLine("{0:x16} {1:x16} {2:x16} {3} {4}"' symbol.VirtualAddress' symbol.SectionOffset' symbol.Size' symbol.SectionKind.ToString().PadRight(7)' symbol.Name);
Magic Number,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,Initialization,The following statement contains a magic number: NativePatchType = (TypeLayout.NativePointerSize == 4) ? PatchType.I32 : NativePatchType = PatchType.I64;
Magic Number,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,EmitStringWithLength,The following statement contains a magic number: writer.WriteZeroBytes(TypeLayout.NativePointerSize * 2);
Magic Number,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateAssemblyDefinition,The following statement contains a magic number: writer.WriteZeroBytes(4);
Magic Number,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateAssemblyDefinition,The following statement contains a magic number: writer.SetPosition(3 * TypeLayout.NativePointerSize);
Magic Number,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateTypeDefinition,The following statement contains a magic number: writer.Write(((uint)type.TypeCode << 24) + (uint)type.TypeAttributes' TypeLayout.NativePointerSize);
Magic Number,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateInterfaceBitmap,The following statement contains a magic number: var bitmap = new byte[((Interfaces.Count - 1) / 8) + 1];
Magic Number,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateInterfaceBitmap,The following statement contains a magic number: bit == 8
Magic Number,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateMethodDefinition,The following statement contains a magic number: methodTableSymbol = Linker.DefineSymbol(symbolName' SectionKind.ROData' TypeLayout.NativePointerAlignment' (method.Signature.Parameters.Count + 9) * TypeLayout.NativePointerSize);
Magic Number,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,CreateMethodDefinition,The following statement contains a magic number: writer.Write(targetMethodData.LocalMethodStackSize | (targetMethodData.ParameterStackSize << 16)' TypeLayout.NativePointerSize);
Magic Number,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,ComputeArgumentSize,The following statement contains a magic number: switch (type.TypeCode)  			{  				// 1 byte  				case MosaTypeCode.Boolean:  				case MosaTypeCode.U1:  				case MosaTypeCode.I1:  					return 1;    				// 2 bytes  				case MosaTypeCode.Char:  				case MosaTypeCode.U2:  				case MosaTypeCode.I2:  					return 2;    				// 4 bytes  				case MosaTypeCode.U4:  				case MosaTypeCode.I4:  				case MosaTypeCode.R4:  					return 4;    				// 8 bytes  				case MosaTypeCode.U8:  				case MosaTypeCode.I8:  				case MosaTypeCode.R8:  					return 8;    				// SZArray  				case MosaTypeCode.SZArray:  					Debug.Assert(value is MosaCustomAttribute.Argument[]);  					var arr = (MosaCustomAttribute.Argument[])value;  					int size = 0;  					foreach (var elem in arr)  						size += ComputeArgumentSize(elem.Type' elem.Value);  					return size;    				// String  				case MosaTypeCode.String:  					return TypeLayout.NativePointerSize;    				default:  					if (type.FullName == "System.Type")  					{  						return TypeLayout.NativePointerSize;  					}  					else  					{  						throw new NotSupportedException();  					}  			}
Magic Number,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,ComputeArgumentSize,The following statement contains a magic number: switch (type.TypeCode)  			{  				// 1 byte  				case MosaTypeCode.Boolean:  				case MosaTypeCode.U1:  				case MosaTypeCode.I1:  					return 1;    				// 2 bytes  				case MosaTypeCode.Char:  				case MosaTypeCode.U2:  				case MosaTypeCode.I2:  					return 2;    				// 4 bytes  				case MosaTypeCode.U4:  				case MosaTypeCode.I4:  				case MosaTypeCode.R4:  					return 4;    				// 8 bytes  				case MosaTypeCode.U8:  				case MosaTypeCode.I8:  				case MosaTypeCode.R8:  					return 8;    				// SZArray  				case MosaTypeCode.SZArray:  					Debug.Assert(value is MosaCustomAttribute.Argument[]);  					var arr = (MosaCustomAttribute.Argument[])value;  					int size = 0;  					foreach (var elem in arr)  						size += ComputeArgumentSize(elem.Type' elem.Value);  					return size;    				// String  				case MosaTypeCode.String:  					return TypeLayout.NativePointerSize;    				default:  					if (type.FullName == "System.Type")  					{  						return TypeLayout.NativePointerSize;  					}  					else  					{  						throw new NotSupportedException();  					}  			}
Magic Number,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,ComputeArgumentSize,The following statement contains a magic number: switch (type.TypeCode)  			{  				// 1 byte  				case MosaTypeCode.Boolean:  				case MosaTypeCode.U1:  				case MosaTypeCode.I1:  					return 1;    				// 2 bytes  				case MosaTypeCode.Char:  				case MosaTypeCode.U2:  				case MosaTypeCode.I2:  					return 2;    				// 4 bytes  				case MosaTypeCode.U4:  				case MosaTypeCode.I4:  				case MosaTypeCode.R4:  					return 4;    				// 8 bytes  				case MosaTypeCode.U8:  				case MosaTypeCode.I8:  				case MosaTypeCode.R8:  					return 8;    				// SZArray  				case MosaTypeCode.SZArray:  					Debug.Assert(value is MosaCustomAttribute.Argument[]);  					var arr = (MosaCustomAttribute.Argument[])value;  					int size = 0;  					foreach (var elem in arr)  						size += ComputeArgumentSize(elem.Type' elem.Value);  					return size;    				// String  				case MosaTypeCode.String:  					return TypeLayout.NativePointerSize;    				default:  					if (type.FullName == "System.Type")  					{  						return TypeLayout.NativePointerSize;  					}  					else  					{  						throw new NotSupportedException();  					}  			}
Magic Number,Mosa.Compiler.Framework.CompilerStages,MetadataStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MetadataStage.cs,WriteArgument,The following statement contains a magic number: switch (type.TypeCode)  			{  				// 1 byte  				case MosaTypeCode.Boolean:  					writer.Write((bool)value);  					break;    				case MosaTypeCode.U1:  					writer.Write((byte)value);  					break;    				case MosaTypeCode.I1:  					writer.Write((sbyte)value);  					break;    				// 2 bytes  				case MosaTypeCode.Char:  					writer.Write((char)value);  					break;    				case MosaTypeCode.U2:  					writer.Write((ushort)value);  					break;    				case MosaTypeCode.I2:  					writer.Write((short)value);  					break;    				// 4 bytes  				case MosaTypeCode.U4:  					writer.Write((uint)value);  					break;    				case MosaTypeCode.I4:  					writer.Write((int)value);  					break;    				case MosaTypeCode.R4:  					writer.Write((float)value);  					break;    				// 8 bytes  				case MosaTypeCode.U8:  					writer.Write((ulong)value);  					break;    				case MosaTypeCode.I8:  					writer.Write((long)value);  					break;    				case MosaTypeCode.R8:  					writer.Write((double)value);  					break;    				// SZArray  				case MosaTypeCode.SZArray:  					Debug.Assert(value is MosaCustomAttribute.Argument[]);  					var arr = (MosaCustomAttribute.Argument[])value;  					writer.Write(arr.Length' TypeLayout.NativePointerSize);  					foreach (var elem in arr)  						WriteArgument(writer' symbol' elem.Type' elem.Value);  					break;    				// String  				case MosaTypeCode.String:    					// Since strings are immutable' make it an object that we can just use  					var str = (string)value;  					Linker.Link(LinkType.AbsoluteAddress' NativePatchType' symbol' writer.GetPosition()' $"{Metadata.TypeDefinition}System.String"' 0);  					writer.WriteZeroBytes(TypeLayout.NativePointerSize * 2);  					writer.Write(str.Length' TypeLayout.NativePointerSize);  					writer.Write(Encoding.Unicode.GetBytes(str));  					break;    				default:  					if (type.FullName == "System.Type")  					{  						var valueType = (MosaType)value;  						Linker.Link(LinkType.AbsoluteAddress' NativePatchType' symbol' writer.GetPosition()' Metadata.TypeDefinition + valueType.FullName' 0);  						writer.WriteZeroBytes(TypeLayout.NativePointerSize);  					}  					else  					{  						throw new NotSupportedException();  					}    					break;  			}
Magic Number,Mosa.Compiler.Framework.CompilerStages,MethodTableStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\CompilerStages\MethodTableStage.cs,Initialization,The following statement contains a magic number: NativePatchType = (TypeLayout.NativePointerSize == 4) ? PatchType.I32 : NativePatchType = PatchType.I64;
Magic Number,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,GetDelegateMethodAddress,The following statement contains a magic number: context.SetInstruction(load' context.Result' context.Operand1' methodCompiler.CreateConstant(2 * methodCompiler.Architecture.NativePointerSize));
Magic Number,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,GetDelegateTargetAddress,The following statement contains a magic number: context.SetInstruction(load' context.Result' context.Operand1' methodCompiler.CreateConstant(3 * methodCompiler.Architecture.NativePointerSize));
Magic Number,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,Store,The following statement contains a magic number: context.OperandCount == 2
Magic Number,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,Store16,The following statement contains a magic number: context.OperandCount == 2
Magic Number,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,Store32,The following statement contains a magic number: context.OperandCount == 2
Magic Number,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,Store64,The following statement contains a magic number: context.OperandCount == 2
Magic Number,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,Store8,The following statement contains a magic number: context.OperandCount == 2
Magic Number,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,StorePointer,The following statement contains a magic number: context.OperandCount == 2
Magic Number,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,StoreR4,The following statement contains a magic number: context.OperandCount == 2
Magic Number,Mosa.Compiler.Framework.Intrinsics,IntrinsicMethods,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Intrinsics\CreateInstanceSimple.cs,StoreR8,The following statement contains a magic number: context.OperandCount == 2
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,Read32,The following statement contains a magic number: Ident = reader.ReadBytes(16);
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,Read32,The following statement contains a magic number: Ident[0] != MagicNumber[0] || Ident[1] != MagicNumber[1] || Ident[2] != MagicNumber[2] || Ident[3] != MagicNumber[3]
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,Read32,The following statement contains a magic number: Ident[0] != MagicNumber[0] || Ident[1] != MagicNumber[1] || Ident[2] != MagicNumber[2] || Ident[3] != MagicNumber[3]
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,Read32,The following statement contains a magic number: Ident[0] != MagicNumber[0] || Ident[1] != MagicNumber[1] || Ident[2] != MagicNumber[2] || Ident[3] != MagicNumber[3]
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,Read32,The following statement contains a magic number: Ident[0] != MagicNumber[0] || Ident[1] != MagicNumber[1] || Ident[2] != MagicNumber[2] || Ident[3] != MagicNumber[3]
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[2] = MagicNumber[2];
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[2] = MagicNumber[2];
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[3] = MagicNumber[3];
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[3] = MagicNumber[3];
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[4] = (byte)identClass;
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[5] = (byte)data;
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[6] = (byte)Version.Current;
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[7] = 0x00;
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: i < 16
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,PrintInfo,The following statement contains a magic number: Console.WriteLine("Ident class:                    {0} ({1})"' (IdentClass)Ident[4]' ((IdentClass)Ident[4]).ToString("x"));
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,PrintInfo,The following statement contains a magic number: Console.WriteLine("Ident class:                    {0} ({1})"' (IdentClass)Ident[4]' ((IdentClass)Ident[4]).ToString("x"));
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,PrintInfo,The following statement contains a magic number: Console.WriteLine("Ident data:                     {0} ({1})"' (IdentData)Ident[4]' ((IdentData)Ident[4]).ToString("x"));
Magic Number,Mosa.Compiler.Framework.Linker.Elf,ElfHeader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfHeader.cs,PrintInfo,The following statement contains a magic number: Console.WriteLine("Ident data:                     {0} ({1})"' (IdentData)Ident[4]' ((IdentData)Ident[4]).ToString("x"));
Magic Number,Mosa.Compiler.Framework.Linker,LinkerSymbol,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\LinkerSymbol.cs,ApplyPatch,The following statement contains a magic number: switch (patchSize)  			{  				case 8: Stream.WriteByte((byte)value); break;  				case 16: Stream.Write((ushort)value); break;  				case 32: Stream.Write((uint)value); break;  				case 64: Stream.Write(value); break;  			}
Magic Number,Mosa.Compiler.Framework.Linker,LinkerSymbol,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\LinkerSymbol.cs,ApplyPatch,The following statement contains a magic number: switch (patchSize)  			{  				case 8: Stream.WriteByte((byte)value); break;  				case 16: Stream.Write((ushort)value); break;  				case 32: Stream.Write((uint)value); break;  				case 64: Stream.Write(value); break;  			}
Magic Number,Mosa.Compiler.Framework.Linker,LinkerSymbol,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\LinkerSymbol.cs,ApplyPatch,The following statement contains a magic number: switch (patchSize)  			{  				case 8: Stream.WriteByte((byte)value); break;  				case 16: Stream.Write((ushort)value); break;  				case 32: Stream.Write((uint)value); break;  				case 64: Stream.Write(value); break;  			}
Magic Number,Mosa.Compiler.Framework.Linker,LinkerSymbol,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\LinkerSymbol.cs,ApplyPatch,The following statement contains a magic number: switch (patchSize)  			{  				case 8: Stream.WriteByte((byte)value); break;  				case 16: Stream.Write((ushort)value); break;  				case 32: Stream.Write((uint)value); break;  				case 64: Stream.Write(value); break;  			}
Magic Number,Mosa.Compiler.Framework.Linker,MosaLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\MosaLinker.cs,GetPatchTypeSize,The following statement contains a magic number: switch (patchType)  			{  				case PatchType.I32: return 32;  				case PatchType.I64: return 64;  			}
Magic Number,Mosa.Compiler.Framework.Linker,MosaLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\MosaLinker.cs,GetPatchTypeSize,The following statement contains a magic number: switch (patchType)  			{  				case PatchType.I32: return 32;  				case PatchType.I64: return 64;  			}
Magic Number,Mosa.Compiler.Framework.Linker,MosaLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\MosaLinker.cs,GetConstantSymbol,The following statement contains a magic number: var symbol = DefineSymbol(name' SectionKind.ROData' 1' 8);
Magic Number,Mosa.Compiler.Framework.Linker,MosaLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\MosaLinker.cs,GetConstantSymbol,The following statement contains a magic number: var symbol = DefineSymbol(name' SectionKind.ROData' 1' 4);
Magic Number,Mosa.Compiler.Framework.Linker,MosaLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\MosaLinker.cs,GetConstantSymbol,The following statement contains a magic number: var symbol = DefineSymbol(name' SectionKind.ROData' 1' 4);
Magic Number,Mosa.Compiler.Framework.Linker,MosaLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\MosaLinker.cs,GetConstantSymbol,The following statement contains a magic number: var symbol = DefineSymbol(name' SectionKind.ROData' 1' 8);
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,GetByte,The following statement contains a magic number: int shift = 56 - (8 * index);
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,GetByte,The following statement contains a magic number: int shift = 56 - (8 * index);
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,GetByte,The following statement contains a magic number: index < 8
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,WriteTo,The following statement contains a magic number: Debug.Assert(Size % 8 == 0);
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,WriteTo,The following statement contains a magic number: i < Size / 8
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,SetBit,The following statement contains a magic number: offset = 63 - offset;
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,SetBit,The following statement contains a magic number: offset < 64
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,AppendNibble,The following statement contains a magic number: AppendBit((value >> 3) & 0x1);
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,AppendNibble,The following statement contains a magic number: AppendBit((value >> 2) & 0x1);
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,Append3Bits,The following statement contains a magic number: AppendBit((value >> 2) & 0x1);
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,AppendByte,The following statement contains a magic number: return AppendBits(value' 8);
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,Append8Bits,The following statement contains a magic number: return AppendBits(value' 8);
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,Append16Bits,The following statement contains a magic number: return AppendBits(value' 16);
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,Append32Bits,The following statement contains a magic number: return AppendBits(value' 32);
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,AppendIntegerValue,The following statement contains a magic number: AppendByteValue((byte)((value >> 8) & 0xFF));
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,AppendIntegerValue,The following statement contains a magic number: AppendByteValue((byte)((value >> 16) & 0xFF));
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,AppendIntegerValue,The following statement contains a magic number: AppendByteValue((byte)((value >> 24) & 0xFF));
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,AppendShortValue,The following statement contains a magic number: AppendByteValue((byte)((value >> 8) & 0xFF));
Magic Number,Mosa.Compiler.Framework.Platform,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Platform\OpcodeEncoder.cs,AppendConditionalPatchPlaceholder,The following statement contains a magic number: position = (Size / 8);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,BaseRegisterAllocator,The following statement contains a magic number: Trace = CreateTraceLog("Main"' 7);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,BaseRegisterAllocator,The following statement contains a magic number: SlotsToNodes = new List<InstructionNode>(512);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,TraceBlocks,The following statement contains a magic number: var extendedBlockTrace = CreateTraceLog("Extended Blocks"' 9);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,TraceLiveIntervals,The following statement contains a magic number: var registerTrace = CreateTraceLog(stage' 9);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,TraceNumberInstructions,The following statement contains a magic number: var numberTrace = CreateTraceLog("InstructionNumber"' 9);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,TraceDefAndUseLocations,The following statement contains a magic number: var locationTrace = CreateTraceLog("DefAndUseLocations"' 9);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,TraceUsageMap,The following statement contains a magic number: var usageMap = CreateTraceLog("TraceUsageMap-" + stage' 9);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,TraceUsageMap,The following statement contains a magic number: step < 2
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,ComputeLocalLiveSets,The following statement contains a magic number: var liveSetTrace = CreateTraceLog("ComputeLocalLiveSets"' 9);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,BuildLiveIntervals,The following statement contains a magic number: var intervalTrace = CreateTraceLog("BuildLiveIntervals"' 9);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,ProcessLiveInterval,The following statement contains a magic number: TrySplitInterval(liveInterval' 2)
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,ProcessLiveInterval,The following statement contains a magic number: TrySplitInterval(liveInterval' 3)
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,ResolveDataFlow,The following statement contains a magic number: var resolverTrace = CreateTraceLog("ResolveDataFlow"' 9);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,ResolveDataFlow,The following statement contains a magic number: var moveResolvers = new MoveResolver[2' BasicBlocks.Count];
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,ResolveDataFlow,The following statement contains a magic number: resolverTrace?.Log($"    FROM: {from.ToString().PadRight(7)} {fromLiveInterval.AssignedOperand}");
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,ResolveDataFlow,The following statement contains a magic number: resolverTrace?.Log($"      TO: {to.ToString().PadRight(7)} {toLiveInterval.AssignedOperand}");
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,ResolveDataFlow,The following statement contains a magic number: fromTag < 2
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BaseRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BaseRegisterAllocator.cs,InsertRegisterMoves,The following statement contains a magic number: var insertTrace = CreateTraceLog("InsertRegisterMoves"' 9);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BasicRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BasicRegisterAllocator.cs,GetSpillCost,The following statement contains a magic number: return factor * GetLoopDepth(use) * 100;
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BasicRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BasicRegisterAllocator.cs,CalculateSpillCost,The following statement contains a magic number: spillvalue += GetSpillCost(use' 100);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BasicRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BasicRegisterAllocator.cs,CalculateSpillCost,The following statement contains a magic number: spillvalue += GetSpillCost(use' 115);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,BasicRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\BasicRegisterAllocator.cs,CalculatePriorityValue,The following statement contains a magic number: var value = liveInterval.Length | ((int)((int)LiveInterval.AllocationStage.Max - liveInterval.Stage) << 20);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,GreedyRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\GreedyRegisterAllocator.cs,CollectMoveHints,The following statement contains a magic number: int factor = (from.IsPhysicalRegister || to.IsPhysicalRegister) ? 150 : 125;
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,GreedyRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\GreedyRegisterAllocator.cs,CollectMoveHints,The following statement contains a magic number: int factor = (from.IsPhysicalRegister || to.IsPhysicalRegister) ? 150 : 125;
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,GreedyRegisterAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\GreedyRegisterAllocator.cs,TraceMoveHints,The following statement contains a magic number: var moveHintTrace = CreateTraceLog("MoveHints"' 9);
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,LiveIntervalTrack,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\LiveIntervalTrack.cs,ToString2,The following statement contains a magic number: sb.Length -= 2;
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,LiveRange,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\LiveRange.cs,SplitAt,The following statement contains a magic number: return new List<LiveRange>(2)  			{  				new LiveRange(Start' at' VirtualRegister' StartIndex' EndIndex)'  				new LiveRange(at' End' VirtualRegister' StartIndex' EndIndex)  			};
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,LiveRange,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\LiveRange.cs,SplitAt,The following statement contains a magic number: return new List<LiveRange>(3)  			{  				new LiveRange(Start' low'  VirtualRegister' StartIndex' EndIndex)'  				new LiveRange(low' high'  VirtualRegister' StartIndex' EndIndex)'  				new LiveRange(high' End'  VirtualRegister' StartIndex' EndIndex)  			};
Magic Number,Mosa.Compiler.Framework.RegisterAllocator,SlotIndex,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\SlotIndex.cs,SlotIndex,The following statement contains a magic number: Value = (index << 2) | 0b01;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,Run,The following statement contains a magic number: trace = CreateTraceLog(5);
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,DumpValues,The following statement contains a magic number: var valueTrace = CreateTraceLog("Values"' 5);
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,DumpValues,The following statement contains a magic number: valueTrace?.Log($"  BitsSet:   {Convert.ToString((long)value.BitsSet' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,DumpValues,The following statement contains a magic number: valueTrace?.Log($"  BitsSet:   {Convert.ToString((long)value.BitsSet' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,DumpValues,The following statement contains a magic number: valueTrace?.Log($"  BitsClear: {Convert.ToString((long)value.BitsClear' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,DumpValues,The following statement contains a magic number: valueTrace?.Log($"  BitsClear: {Convert.ToString((long)value.BitsClear' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,DumpValues,The following statement contains a magic number: valueTrace?.Log($"  BitsKnown: {Convert.ToString((long)value.BitsKnown' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,DumpValues,The following statement contains a magic number: valueTrace?.Log($"  BitsKnown: {Convert.ToString((long)value.BitsKnown' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,UpdateInstruction,The following statement contains a magic number: trace?.Log($"  BitsSet:   {Convert.ToString((long)value.BitsSet' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,UpdateInstruction,The following statement contains a magic number: trace?.Log($"  BitsSet:   {Convert.ToString((long)value.BitsSet' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,UpdateInstruction,The following statement contains a magic number: trace?.Log($"  BitsClear: {Convert.ToString((long)value.BitsClear' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,UpdateInstruction,The following statement contains a magic number: trace?.Log($"  BitsClear: {Convert.ToString((long)value.BitsClear' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,UpdateInstruction,The following statement contains a magic number: trace?.Log($"  BitsKnown: {Convert.ToString((long)value.BitsKnown' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,UpdateInstruction,The following statement contains a magic number: trace?.Log($"  BitsKnown: {Convert.ToString((long)value.BitsKnown' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,UpdateBranchInstructions,The following statement contains a magic number: block.NextBlocks.Count != 2
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ArithShiftRight32,The following statement contains a magic number: bool knownSignedBit = ((value1.BitsKnown >> 31) & 1) == 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ArithShiftRight32,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 31) & 1) == 1 || ((value1.BitsClear >> 31) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ArithShiftRight32,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 31) & 1) == 1 || ((value1.BitsClear >> 31) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ArithShiftRight64,The following statement contains a magic number: bool knownSignedBit = ((value1.BitsKnown >> 63) & 1) == 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ArithShiftRight64,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 63) & 1) == 1 || ((value1.BitsClear >> 63) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ArithShiftRight64,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 63) & 1) == 1 || ((value1.BitsClear >> 63) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,GetHigh64,The following statement contains a magic number: return new Value(value1.BitsSet >> 32' true);
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,GetHigh64,The following statement contains a magic number: return new Value()  			{  				MaxValue = value1.MaxValue >> 32'  				MinValue = value1.MinValue >> 32'  				AreRangeValuesDeterminate = value1.AreRangeValuesDeterminate'  				BitsSet = value1.BitsSet >> 32'  				BitsClear = (value1.BitsClear >> 32) | Upper32BitsSet'  				Is32Bit = true  			};
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,GetHigh64,The following statement contains a magic number: return new Value()  			{  				MaxValue = value1.MaxValue >> 32'  				MinValue = value1.MinValue >> 32'  				AreRangeValuesDeterminate = value1.AreRangeValuesDeterminate'  				BitsSet = value1.BitsSet >> 32'  				BitsClear = (value1.BitsClear >> 32) | Upper32BitsSet'  				Is32Bit = true  			};
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,GetHigh64,The following statement contains a magic number: return new Value()  			{  				MaxValue = value1.MaxValue >> 32'  				MinValue = value1.MinValue >> 32'  				AreRangeValuesDeterminate = value1.AreRangeValuesDeterminate'  				BitsSet = value1.BitsSet >> 32'  				BitsClear = (value1.BitsClear >> 32) | Upper32BitsSet'  				Is32Bit = true  			};
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,GetHigh64,The following statement contains a magic number: return new Value()  			{  				MaxValue = value1.MaxValue >> 32'  				MinValue = value1.MinValue >> 32'  				AreRangeValuesDeterminate = value1.AreRangeValuesDeterminate'  				BitsSet = value1.BitsSet >> 32'  				BitsClear = (value1.BitsClear >> 32) | Upper32BitsSet'  				Is32Bit = true  			};
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ShiftRight64,The following statement contains a magic number: value1.AreUpper32BitsKnown && ((value1.BitsSet >> 32) == 0)
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend16x32,The following statement contains a magic number: return new Value(value1.BitsSet16 | ((((value1.BitsSet >> 15) & 1) == 1) ? Upper48BitsSet : 0)' true);
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend16x32,The following statement contains a magic number: bool knownSignedBit = ((value1.BitsKnown >> 15) & 1) == 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend16x32,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 15) & 1) == 1 || ((value1.BitsClear >> 15) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend16x32,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 15) & 1) == 1 || ((value1.BitsClear >> 15) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend16x64,The following statement contains a magic number: return new Value(value1.BitsSet16 | ((((value1.BitsSet >> 15) & 1) == 1) ? Upper48BitsSet : 0)' true);
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend16x64,The following statement contains a magic number: bool knownSignedBit = ((value1.BitsKnown >> 15) & 1) == 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend16x64,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 15) & 1) == 1 || ((value1.BitsClear >> 15) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend16x64,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 15) & 1) == 1 || ((value1.BitsClear >> 15) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend32x64,The following statement contains a magic number: return new Value(value1.BitsSet32 | ((((value1.BitsSet >> 31) & 1) == 1) ? Upper32BitsSet : 0)' false);
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend32x64,The following statement contains a magic number: bool knownSignedBit = ((value1.BitsKnown >> 31) & 1) == 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend32x64,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 31) & 1) == 1 || ((value1.BitsClear >> 31) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend32x64,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 31) & 1) == 1 || ((value1.BitsClear >> 31) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend8x32,The following statement contains a magic number: return new Value(value1.BitsSet16 | ((((value1.BitsSet >> 7) & 1) == 1) ? Upper56BitsSet : 0)' true);
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend8x32,The following statement contains a magic number: bool knownSignedBit = ((value1.BitsKnown >> 7) & 1) == 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend8x32,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 7) & 1) == 1 || ((value1.BitsClear >> 7) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend8x32,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 7) & 1) == 1 || ((value1.BitsClear >> 7) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend8x64,The following statement contains a magic number: return new Value(value1.BitsSet16 | ((((value1.BitsSet >> 7) & 1) == 1) ? Upper56BitsSet : 0)' false);
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend8x64,The following statement contains a magic number: bool knownSignedBit = ((value1.BitsKnown >> 7) & 1) == 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend8x64,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 7) & 1) == 1 || ((value1.BitsClear >> 7) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,SignExtend8x64,The following statement contains a magic number: bool signed = ((value1.BitsSet >> 7) & 1) == 1 || ((value1.BitsClear >> 7) & 1) != 1;
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,To64,The following statement contains a magic number: return new Value(value2.MaxValue << 32 | (value1.MaxValue & uint.MaxValue)' false);
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,To64,The following statement contains a magic number: return new Value()  			{  				MaxValue = (value2.MaxValue << 32) | (value1.MaxValue & uint.MaxValue)'  				MinValue = (value2.MinValue << 32) | (value1.MinValue & uint.MaxValue)'  				AreRangeValuesDeterminate = value1.AreRangeValuesDeterminate && value2.AreRangeValuesDeterminate'  				BitsSet = (value2.BitsSet << 32) | value1.BitsSet32'  				BitsClear = (value2.BitsClear << 32) | (value1.BitsClear32)'  				Is64Bit = true  			};
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,To64,The following statement contains a magic number: return new Value()  			{  				MaxValue = (value2.MaxValue << 32) | (value1.MaxValue & uint.MaxValue)'  				MinValue = (value2.MinValue << 32) | (value1.MinValue & uint.MaxValue)'  				AreRangeValuesDeterminate = value1.AreRangeValuesDeterminate && value2.AreRangeValuesDeterminate'  				BitsSet = (value2.BitsSet << 32) | value1.BitsSet32'  				BitsClear = (value2.BitsClear << 32) | (value1.BitsClear32)'  				Is64Bit = true  			};
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,To64,The following statement contains a magic number: return new Value()  			{  				MaxValue = (value2.MaxValue << 32) | (value1.MaxValue & uint.MaxValue)'  				MinValue = (value2.MinValue << 32) | (value1.MinValue & uint.MaxValue)'  				AreRangeValuesDeterminate = value1.AreRangeValuesDeterminate && value2.AreRangeValuesDeterminate'  				BitsSet = (value2.BitsSet << 32) | value1.BitsSet32'  				BitsClear = (value2.BitsClear << 32) | (value1.BitsClear32)'  				Is64Bit = true  			};
Magic Number,Mosa.Compiler.Framework.Stages,BitTrackerStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,To64,The following statement contains a magic number: return new Value()  			{  				MaxValue = (value2.MaxValue << 32) | (value1.MaxValue & uint.MaxValue)'  				MinValue = (value2.MinValue << 32) | (value1.MinValue & uint.MaxValue)'  				AreRangeValuesDeterminate = value1.AreRangeValuesDeterminate && value2.AreRangeValuesDeterminate'  				BitsSet = (value2.BitsSet << 32) | value1.BitsSet32'  				BitsClear = (value2.BitsClear << 32) | (value1.BitsClear32)'  				Is64Bit = true  			};
Magic Number,Mosa.Compiler.Framework.Stages,Value,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ToString,The following statement contains a magic number: sb.Append($" BitsSet: {Convert.ToString((long)BitsSet' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,Value,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ToString,The following statement contains a magic number: sb.Append($" BitsSet: {Convert.ToString((long)BitsSet' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,Value,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ToString,The following statement contains a magic number: sb.Append($" BitsClear: {Convert.ToString((long)BitsClear' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,Value,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ToString,The following statement contains a magic number: sb.Append($" BitsClear: {Convert.ToString((long)BitsClear' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,Value,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ToString,The following statement contains a magic number: sb.Append($" BitsKnown: {Convert.ToString((long)BitsKnown' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,Value,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\BitTrackerStage.cs,ToString,The following statement contains a magic number: sb.Append($" BitsKnown: {Convert.ToString((long)BitsKnown' 2).PadLeft(64' '0')}");
Magic Number,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,CallVirtual,The following statement contains a magic number: int methodPointerOffset = CalculateMethodTableOffset(method) + (NativePointerSize * 14);
Magic Number,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,CallInterface,The following statement contains a magic number: int interfaceSlotTableOffset = (NativePointerSize * 11);
Magic Number,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,CallInterface,The following statement contains a magic number: int methodDefinitionOffset = (NativePointerSize * 2) + CalculateMethodTableOffset(method);
Magic Number,Mosa.Compiler.Framework.Stages,CallStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CallStage.cs,CallInterface,The following statement contains a magic number: int methodPointerOffset = (NativePointerSize * 4);
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Box,The following statement contains a magic number: typeSize <= 8 || type.IsR
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Call,The following statement contains a magic number: before.SetInstruction(Select(context.Operand1' IRInstruction.Sub32' IRInstruction.Sub64)' context.Operand1' context.Operand1' CreateConstant(NativePointerSize * 2));
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Callvirt,The following statement contains a magic number: before.SetInstruction(Select(context.Operand1' IRInstruction.Sub32' IRInstruction.Sub64)' context.Operand1' context.Operand1' CreateConstant(NativePointerSize * 2));
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldlen,The following statement contains a magic number: var offset = CreateConstant(NativePointerSize * 2);
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldstr,The following statement contains a magic number: var symbol = Linker.DefineSymbol(symbolName' SectionKind.ROData' NativeAlignment' (NativePointerSize * 2) + 4 + (stringdata.Length * 2));
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldstr,The following statement contains a magic number: var symbol = Linker.DefineSymbol(symbolName' SectionKind.ROData' NativeAlignment' (NativePointerSize * 2) + 4 + (stringdata.Length * 2));
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldstr,The following statement contains a magic number: var symbol = Linker.DefineSymbol(symbolName' SectionKind.ROData' NativeAlignment' (NativePointerSize * 2) + 4 + (stringdata.Length * 2));
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldstr,The following statement contains a magic number: stream.WriteZeroBytes(NativePointerSize * 2);
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldstr,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(stringdata.Length)' 0' 4);
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Ldstr,The following statement contains a magic number: Debug.Assert(stringData.Length == stringdata.Length * 2' "Byte array of string data doesn't match expected string data length");
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Unbox,The following statement contains a magic number: context.SetInstruction(typeSize != 8 ? (BaseIRInstruction)IRInstruction.Unbox32 : IRInstruction.Unbox64' tmp' value);
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,Unbox,The following statement contains a magic number: typeSize <= 8
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,AddArrayBoundsCheck,The following statement contains a magic number: var fixedOffset = CreateConstant(NativePointerSize * 2);
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,CalculateTotalArrayOffset,The following statement contains a magic number: var fixedOffset = CreateConstant(NativePointerSize * 3);
Magic Number,Mosa.Compiler.Framework.Stages,CILTransformationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CILTransformationStage.cs,GetIndex,The following statement contains a magic number: return 5;
Magic Number,Mosa.Compiler.Framework.Stages,CodeGenerationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CodeGenerationStage.cs,EmitInstructions,The following statement contains a magic number: var trace = CreateTraceLog(9);
Magic Number,Mosa.Compiler.Framework.Stages,CompoundStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CompoundStage.cs,CopyCompound,The following statement contains a magic number: var tmpLarge = Is32BitPlatform && size >= 8 ? null : AllocateVirtualRegister(destinationBase.Type.TypeSystem.BuiltIn.I8);
Magic Number,Mosa.Compiler.Framework.Stages,CompoundStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CompoundStage.cs,CopyCompound,The following statement contains a magic number: i += 8;
Magic Number,Mosa.Compiler.Framework.Stages,CompoundStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\CompoundStage.cs,CopyCompound,The following statement contains a magic number: left >= 8 & !Is32BitPlatform
Magic Number,Mosa.Compiler.Framework.Stages,EnterSSAStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\EnterSSAStage.cs,Run,The following statement contains a magic number: trace = CreateTraceLog(8);
Magic Number,Mosa.Compiler.Framework.Stages,EnterSSAStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\EnterSSAStage.cs,PlacePhiFunctionsMinimal,The following statement contains a magic number: blocks.Count < 2
Magic Number,Mosa.Compiler.Framework.Stages,InlineEvaluationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\InlineEvaluationStage.cs,CopyInstructions,The following statement contains a magic number: var trace = CreateTraceLog("InlineMap"' 9);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Setup,The following statement contains a magic number: Constant4 = CreateConstant(4);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,SetGetHigh64,The following statement contains a magic number: context.SetInstruction(IRInstruction.Move32' operand1' CreateConstant(operand2.ConstantUnsigned64 >> 32));
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,AppendGetHigh64,The following statement contains a magic number: context.AppendInstruction(IRInstruction.Move32' operand1' CreateConstant(operand2.ConstantUnsigned64 >> 32));
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,CompareBranch64,The following statement contains a magic number: var newBlocks = CreateNewBlockContexts(3' context.Label);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,CompareBranch64,The following statement contains a magic number: UpdatePhiInstructionTargets(nextBlock.Block.NextBlocks' context.Block' newBlocks[2].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,CompareBranch64,The following statement contains a magic number: newBlocks[0].AppendInstruction(IRInstruction.CompareBranch32' branch' null' op0High' op1High' newBlocks[2].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,CompareBranch64,The following statement contains a magic number: newBlocks[1].AppendInstruction(IRInstruction.CompareBranch32' branchUnsigned' null' op0Low' op1Low' newBlocks[2].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,CompareBranch64,The following statement contains a magic number: newBlocks[2].AppendInstruction(IRInstruction.Jmp' target);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: var newBlocks = CreateNewBlockContexts(5' context.Label);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: newBlocks[0].AppendInstruction(IRInstruction.Jmp' newBlocks[3].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: newBlocks[1].AppendInstruction(IRInstruction.CompareBranch32' branchUnsigned' null' op0Low' op1Low' newBlocks[2].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: newBlocks[1].AppendInstruction(IRInstruction.Jmp' newBlocks[3].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: newBlocks[2].AppendInstruction(IRInstruction.Jmp' newBlocks[4].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: newBlocks[2].AppendInstruction(IRInstruction.Jmp' newBlocks[4].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: newBlocks[3].AppendInstruction(IRInstruction.Jmp' newBlocks[4].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: newBlocks[3].AppendInstruction(IRInstruction.Jmp' newBlocks[4].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: newBlocks[4].AppendInstruction(IRInstruction.Phi32' result' CreateConstant((uint)1)' CreateConstant((uint)0));
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: newBlocks[4].PhiBlocks = new List<BasicBlock>(2) { newBlocks[2].Block' newBlocks[3].Block };
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: newBlocks[4].PhiBlocks = new List<BasicBlock>(2) { newBlocks[2].Block' newBlocks[3].Block };
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: newBlocks[4].PhiBlocks = new List<BasicBlock>(2) { newBlocks[2].Block' newBlocks[3].Block };
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: newBlocks[4].PhiBlocks = new List<BasicBlock>(2) { newBlocks[2].Block' newBlocks[3].Block };
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32SSA,The following statement contains a magic number: newBlocks[4].AppendInstruction(IRInstruction.Jmp' nextBlock.Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The following statement contains a magic number: var newBlocks = CreateNewBlockContexts(5' context.Label);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The following statement contains a magic number: newBlocks[0].AppendInstruction(IRInstruction.Jmp' newBlocks[3].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The following statement contains a magic number: newBlocks[1].AppendInstruction(IRInstruction.CompareBranch32' branchUnsigned' null' op0Low' op1Low' newBlocks[2].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The following statement contains a magic number: newBlocks[1].AppendInstruction(IRInstruction.Jmp' newBlocks[3].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The following statement contains a magic number: newBlocks[2].AppendInstruction(IRInstruction.Move32' resultLow' CreateConstant((uint)1));
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The following statement contains a magic number: newBlocks[2].AppendInstruction(IRInstruction.Jmp' newBlocks[4].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The following statement contains a magic number: newBlocks[2].AppendInstruction(IRInstruction.Jmp' newBlocks[4].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The following statement contains a magic number: newBlocks[3].AppendInstruction(IRInstruction.Move32' resultLow' CreateConstant((uint)0));
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The following statement contains a magic number: newBlocks[3].AppendInstruction(IRInstruction.Jmp' newBlocks[4].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The following statement contains a magic number: newBlocks[3].AppendInstruction(IRInstruction.Jmp' newBlocks[4].Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The following statement contains a magic number: newBlocks[4].AppendInstruction(IRInstruction.Move32' result' resultLow);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,Compareeger64x32NonSSA,The following statement contains a magic number: newBlocks[4].AppendInstruction(IRInstruction.Jmp' nextBlock.Block);
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,LoadParamSignExtend16x64,The following statement contains a magic number: context.AppendInstruction(IRInstruction.ArithShiftRight32' resultHigh' resultLow' CreateConstant((byte)31));
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,LoadParamSignExtend32x64,The following statement contains a magic number: context.AppendInstruction(IRInstruction.ArithShiftRight32' resultHigh' resultLow' CreateConstant((byte)31));
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,LoadParamSignExtend8x64,The following statement contains a magic number: context.AppendInstruction(IRInstruction.ArithShiftRight32' resultHigh' resultLow' CreateConstant((byte)31));
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,SignExtend16x64,The following statement contains a magic number: context.AppendInstruction(IRInstruction.ArithShiftRight32' resultHigh' resultLow' CreateConstant((byte)31));
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,SignExtend32x64,The following statement contains a magic number: context.AppendInstruction(IRInstruction.ArithShiftRight32' resultHigh' resultLow' CreateConstant((byte)31));
Magic Number,Mosa.Compiler.Framework.Stages,LongExpansionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LongExpansionStage.cs,SignExtend8x64,The following statement contains a magic number: context.AppendInstruction(IRInstruction.ArithShiftRight32' resultHigh' resultLow' CreateConstant((byte)31));
Magic Number,Mosa.Compiler.Framework.Stages,LoopInvariantCodeMotionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LoopInvariantCodeMotionStage.cs,Run,The following statement contains a magic number: trace = CreateTraceLog(5);
Magic Number,Mosa.Compiler.Framework.Stages,LoopInvariantCodeMotionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LoopInvariantCodeMotionStage.cs,DumpLoops,The following statement contains a magic number: sb.Length -= 2;
Magic Number,Mosa.Compiler.Framework.Stages,LoopInvariantCodeMotionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LoopInvariantCodeMotionStage.cs,FindLoopInvariantInstructions,The following statement contains a magic number: node.ResultCount != 1  							|| node.OperandCount == 0  							|| node.OperandCount > 2  							|| node.Instruction.IsMemoryWrite  							|| node.Instruction.IsMemoryRead  							|| node.Instruction.IsIOOperation  							|| node.Instruction.HasUnspecifiedSideEffect  							|| node.Instruction.VariableOperands  							|| node.Instruction.FlowControl != FlowControl.Next  							|| node.Instruction.IgnoreDuringCodeGeneration  							|| node.Operand1.IsUnresolvedConstant  							|| (node.OperandCount == 2 && node.Operand2.IsUnresolvedConstant)
Magic Number,Mosa.Compiler.Framework.Stages,LoopInvariantCodeMotionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LoopInvariantCodeMotionStage.cs,FindLoopInvariantInstructions,The following statement contains a magic number: node.ResultCount != 1  							|| node.OperandCount == 0  							|| node.OperandCount > 2  							|| node.Instruction.IsMemoryWrite  							|| node.Instruction.IsMemoryRead  							|| node.Instruction.IsIOOperation  							|| node.Instruction.HasUnspecifiedSideEffect  							|| node.Instruction.VariableOperands  							|| node.Instruction.FlowControl != FlowControl.Next  							|| node.Instruction.IgnoreDuringCodeGeneration  							|| node.Operand1.IsUnresolvedConstant  							|| (node.OperandCount == 2 && node.Operand2.IsUnresolvedConstant)
Magic Number,Mosa.Compiler.Framework.Stages,LoopInvariantCodeMotionStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\LoopInvariantCodeMotionStage.cs,FindLoopInvariantInstructions,The following statement contains a magic number: node.OperandCount == 2 && !IsInvariant(node.Operand2' loop' invariantsSet)
Magic Number,Mosa.Compiler.Framework.Stages,OptimizationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\OptimizationStage.cs,Run,The following statement contains a magic number: trace = CreateTraceLog(5);
Magic Number,Mosa.Compiler.Framework.Stages,PromoteTemporaryVariables,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\PromoteTemporaryVariables.cs,Setup,The following statement contains a magic number: trace = CreateTraceLog(5);
Magic Number,Mosa.Compiler.Framework.Stages,ProtectedRegionLayoutStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ProtectedRegionLayoutStage.cs,Initialize,The following statement contains a magic number: TypeLayout.NativePointerSize == 4
Magic Number,Mosa.Compiler.Framework.Stages,SparseConditionalConstantPropagationStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\SparseConditionalConstantPropagationStage.cs,RemoveBranchesToDeadBlocks,The following statement contains a magic number: previous.NextBlocks.Count != 2
Magic Number,Mosa.Compiler.Framework.Stages,StackLayoutStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\StackLayoutStage.cs,LayoutVariables,The following statement contains a magic number: local.High.Offset = offset + 4;
Magic Number,Mosa.Compiler.Framework.Stages,UnboxValueTypeStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\UnboxValueTypeStage.cs,Run,The following statement contains a magic number: context.AppendInstruction(Select(v1' IRInstruction.Add32' IRInstruction.Add64)' v1' v1' CreateConstant(NativePointerSize * 2));
Magic Number,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,Run,The following statement contains a magic number: trace = CreateTraceLog(5);
Magic Number,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,DetermineReadOnlyParameters,The following statement contains a magic number: var traceParameters = CreateTraceLog("Parameters"' 5);
Magic Number,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,CanAssignValueNumberToExpression,The following statement contains a magic number: node.ResultCount != 1  				|| node.OperandCount == 0  				|| node.OperandCount > 2  				|| node.Instruction.IsMemoryWrite  				|| node.Instruction.IsMemoryRead  				|| node.Instruction.IsIOOperation  				|| node.Instruction.HasUnspecifiedSideEffect  				|| node.Instruction.VariableOperands  				|| node.Instruction.FlowControl != FlowControl.Next  				|| node.Instruction.IgnoreDuringCodeGeneration  				|| node.Operand1.IsUnresolvedConstant  				|| (node.OperandCount == 2 && node.Operand2.IsUnresolvedConstant)
Magic Number,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,CanAssignValueNumberToExpression,The following statement contains a magic number: node.ResultCount != 1  				|| node.OperandCount == 0  				|| node.OperandCount > 2  				|| node.Instruction.IsMemoryWrite  				|| node.Instruction.IsMemoryRead  				|| node.Instruction.IsIOOperation  				|| node.Instruction.HasUnspecifiedSideEffect  				|| node.Instruction.VariableOperands  				|| node.Instruction.FlowControl != FlowControl.Next  				|| node.Instruction.IgnoreDuringCodeGeneration  				|| node.Operand1.IsUnresolvedConstant  				|| (node.OperandCount == 2 && node.Operand2.IsUnresolvedConstant)
Magic Number,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,UpdateHash,The following statement contains a magic number: return (hash << 8) + addition;
Magic Number,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,ComputeExpressionHash,The following statement contains a magic number: node.OperandCount >= 2
Magic Number,Mosa.Compiler.Framework.Stages,ValueNumberingStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Stages\ValueNumberingStage.cs,FindMatch,The following statement contains a magic number: node.Instruction == expression.Instruction  					&& IsEqual(node.Operand1' expression.Operand1' node.Instruction)  					&& (node.OperandCount == 1 || (node.OperandCount == 2 && IsEqual(node.Operand2' expression.Operand2)))
Magic Number,Mosa.Compiler.Framework.Transform.Auto.IR.Simplification,GetHigh64FromRightLeftAndTo64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Simplification\GetHigh64FromRightLeftAndTo64.cs,Match,The following statement contains a magic number: context.Operand1.Definitions[0].Operand2.ConstantUnsigned32 != 32u
Magic Number,Mosa.Compiler.Framework.Transform.Auto.IR.Simplification,GetHigh64FromShiftedMore32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Simplification\GetHigh64FromShiftedMore32.cs,Match,The following statement contains a magic number: !IsGreaterThanOrEqual(And32(To32(context.Operand1.Definitions[0].Operand2)' 63u)' 32u)
Magic Number,Mosa.Compiler.Framework.Transform.Auto.IR.Simplification,GetHigh64FromShiftedMore32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Simplification\GetHigh64FromShiftedMore32.cs,Match,The following statement contains a magic number: !IsGreaterThanOrEqual(And32(To32(context.Operand1.Definitions[0].Operand2)' 63u)' 32u)
Magic Number,Mosa.Compiler.Framework.Transform.Auto.IR.Simplification,GetLow64FromRightShiftAndTo64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Simplification\GetLow64FromRightShiftAndTo64.cs,Match,The following statement contains a magic number: context.Operand1.Definitions[0].Operand2.ConstantUnsigned32 != 32u
Magic Number,Mosa.Compiler.Framework.Transform.Auto.IR.Simplification,GetLow64FromShiftedMore32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Simplification\GetLow64FromShiftedMore32.cs,Match,The following statement contains a magic number: !IsGreaterThanOrEqual(And32(To32(context.Operand1.Definitions[0].Operand2)' 63u)' 32u)
Magic Number,Mosa.Compiler.Framework.Transform.Auto.IR.Simplification,GetLow64FromShiftedMore32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\Simplification\GetLow64FromShiftedMore32.cs,Match,The following statement contains a magic number: !IsGreaterThanOrEqual(And32(To32(context.Operand1.Definitions[0].Operand2)' 63u)' 32u)
Magic Number,Mosa.Compiler.Framework.Transform.Auto.IR.StrengthReduction,RemUnsigned32ByPowerOfTwo,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\StrengthReduction\RemUnsigned32ByPowerOfTwo.cs,Transform,The following statement contains a magic number: var e1 = transformContext.CreateConstant(Sub32(ShiftLeft32(1u' And32(GetPowerOfTwo(To32(t2))' 31u))' 1u));
Magic Number,Mosa.Compiler.Framework.Transform.Auto.IR.StrengthReduction,RemUnsigned64ByPowerOfTwo,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Auto\IR\StrengthReduction\RemUnsigned64ByPowerOfTwo.cs,Transform,The following statement contains a magic number: var e1 = transformContext.CreateConstant(Sub64(ShiftLeft64(1u' And32(GetPowerOfTwo(To32(t2))' 63u))' 1u));
Magic Number,Mosa.Compiler.Framework.Transform,BaseTransformation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\BaseTransformation.cs,GetHigh64,The following statement contains a magic number: return (uint)(a >> 32);
Magic Number,Mosa.Compiler.Framework.Transform,BaseTransformation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\BaseTransformation.cs,To64,The following statement contains a magic number: return ((ulong)high << 32) | (ulong)low;
Magic Number,Mosa.Compiler.Framework.Transform,TransformContext,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\TransformContext.cs,SetGetHigh64,The following statement contains a magic number: context.SetInstruction(IRInstruction.Move32' operand1' CreateConstant(operand2.ConstantUnsigned64 >> 32));
Magic Number,Mosa.Compiler.Framework.Transform,TransformContext,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\TransformContext.cs,AppendGetHigh64,The following statement contains a magic number: context.AppendInstruction(IRInstruction.Move32' operand1' CreateConstant(operand2.ConstantUnsigned64 >> 32));
Magic Number,Mosa.Compiler.Framework.Transform.IR.Special,Deadcode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Special\Deadcode.cs,Match,The following statement contains a magic number: context.ResultCount == 0 || context.ResultCount > 2
Magic Number,Mosa.Compiler.Framework.Transform.IR.Special,Deadcode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Special\Deadcode.cs,Match,The following statement contains a magic number: context.ResultCount == 2 && !IsSSAForm(context.Result2)
Magic Number,Mosa.Compiler.Framework.Transform.IR.Special,Deadcode,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\Special\Deadcode.cs,Match,The following statement contains a magic number: context.ResultCount == 2 && context.Result2.Uses.Count != 0
Missing Default,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetTypeFromTypeCode,The following switch statement is missing a default case: switch (code)  			{  				case MosaTypeCode.Void: return TypeSystem.BuiltIn.Void;  				case MosaTypeCode.Boolean: return TypeSystem.BuiltIn.Boolean;  				case MosaTypeCode.Char: return TypeSystem.BuiltIn.Char;  				case MosaTypeCode.I1: return TypeSystem.BuiltIn.I1;  				case MosaTypeCode.U1: return TypeSystem.BuiltIn.U1;  				case MosaTypeCode.I2: return TypeSystem.BuiltIn.I2;  				case MosaTypeCode.U2: return TypeSystem.BuiltIn.U2;  				case MosaTypeCode.I4: return TypeSystem.BuiltIn.I4;  				case MosaTypeCode.U4: return TypeSystem.BuiltIn.U4;  				case MosaTypeCode.I8: return TypeSystem.BuiltIn.I8;  				case MosaTypeCode.U8: return TypeSystem.BuiltIn.U8;  				case MosaTypeCode.R4: return TypeSystem.BuiltIn.R4;  				case MosaTypeCode.R8: return TypeSystem.BuiltIn.R8;  				case MosaTypeCode.I: return TypeSystem.BuiltIn.I;  				case MosaTypeCode.U: return TypeSystem.BuiltIn.U;  				case MosaTypeCode.String: return TypeSystem.BuiltIn.String;  				case MosaTypeCode.TypedRef: return TypeSystem.BuiltIn.TypedRef;  				case MosaTypeCode.Object: return TypeSystem.BuiltIn.Object;  			}
Missing Default,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetStackTypeCode,The following switch statement is missing a default case: switch (type.IsEnum ? type.GetEnumUnderlyingType().TypeCode : type.TypeCode)  			{  				case MosaTypeCode.Boolean:  				case MosaTypeCode.Char:  				case MosaTypeCode.I1:  				case MosaTypeCode.U1:  				case MosaTypeCode.I2:  				case MosaTypeCode.U2:  				case MosaTypeCode.I4:  				case MosaTypeCode.U4:  					if (Architecture.Is32BitPlatform)  						return StackTypeCode.Int32;  					else  						return StackTypeCode.Int64;    				case MosaTypeCode.I8:  				case MosaTypeCode.U8:  					return StackTypeCode.Int64;    				case MosaTypeCode.R4:  				case MosaTypeCode.R8:  					return StackTypeCode.F;    				case MosaTypeCode.I:  				case MosaTypeCode.U:  					if (Architecture.Is32BitPlatform)  						return StackTypeCode.Int32;  					else  						return StackTypeCode.Int64;    				case MosaTypeCode.ManagedPointer:  					return StackTypeCode.ManagedPointer;    				case MosaTypeCode.UnmanagedPointer:  				case MosaTypeCode.FunctionPointer:  					return StackTypeCode.UnmanagedPointer;    				case MosaTypeCode.String:  				case MosaTypeCode.ValueType:  				case MosaTypeCode.ReferenceType:  				case MosaTypeCode.Array:  				case MosaTypeCode.Object:  				case MosaTypeCode.SZArray:  				case MosaTypeCode.Var:  				case MosaTypeCode.MVar:  					return StackTypeCode.O;    				case MosaTypeCode.Void:  					return StackTypeCode.Unknown;  			}
Missing Default,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetStackType,The following switch statement is missing a default case: switch (GetStackTypeCode(type))  			{  				case StackTypeCode.Int32:  					return type.TypeSystem.BuiltIn.I4;    				case StackTypeCode.Int64:  					return type.TypeSystem.BuiltIn.I8;    				case StackTypeCode.N:  					return type.TypeSystem.BuiltIn.I;    				case StackTypeCode.F:  					if (type.IsR4)  						return type.TypeSystem.BuiltIn.R4;  					else  						return type.TypeSystem.BuiltIn.R8;    				case StackTypeCode.O:  					return type;    				case StackTypeCode.UnmanagedPointer:  				case StackTypeCode.ManagedPointer:  					return type;  			}
Missing Default,Mosa.Compiler.Framework,Compiler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Compiler.cs,GetStackTypeFromCode,The following switch statement is missing a default case: switch (code)  			{  				case StackTypeCode.Int32:  					return TypeSystem.BuiltIn.I4;    				case StackTypeCode.Int64:  					return TypeSystem.BuiltIn.I8;    				case StackTypeCode.N:  					return TypeSystem.BuiltIn.I;    				case StackTypeCode.F:  					return TypeSystem.BuiltIn.R8;    				case StackTypeCode.O:  					return TypeSystem.BuiltIn.Object;    				case StackTypeCode.UnmanagedPointer:  					return TypeSystem.BuiltIn.Pointer;    				case StackTypeCode.ManagedPointer:  					return TypeSystem.BuiltIn.Object.ToManagedPointer();  			}
Missing Default,Mosa.Compiler.Framework,Operand,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Operand.cs,ShortenTypeName2,The following switch statement is missing a default case: switch (value)  			{  				case "System.Object": return "O";  				case "System.Char": return "C";  				case "System.Void": return "V";  				case "System.String": return "String";  				case "System.Byte": return "U1";  				case "System.SByte": return "I1";  				case "System.Boolean": return "B";  				case "System.Int8": return "I1";  				case "System.UInt8": return "U1";  				case "System.Int16": return "I2";  				case "System.UInt16": return "U2";  				case "System.Int32": return "I4";  				case "System.UInt32": return "U4";  				case "System.Int64": return "I8";  				case "System.UInt64": return "U8";  				case "System.Single": return "R4";  				case "System.Double": return "R8";  			}
Missing Default,Mosa.Compiler.Framework.Linker.Elf,ElfLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\Elf\ElfLinker.cs,CreateSections,The following switch statement is missing a default case: switch (linkerSection.SectionKind)  				{  					case SectionKind.Text:  						section.Type = SectionType.ProgBits;  						section.Flags = SectionAttribute.AllocExecute;  						break;    					case SectionKind.Data:  						section.Type = SectionType.ProgBits;  						section.Flags = SectionAttribute.Alloc | SectionAttribute.Write;  						break;    					case SectionKind.ROData:  						section.Type = SectionType.ProgBits;  						section.Flags = SectionAttribute.Alloc;  						break;    					case SectionKind.BSS:  						section.Type = SectionType.NoBits;  						section.Flags = SectionAttribute.Alloc | SectionAttribute.Write;  						break;  				}
Missing Default,Mosa.Compiler.Framework.Linker,LinkerSymbol,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\LinkerSymbol.cs,ApplyPatch,The following switch statement is missing a default case: switch (patchSize)  			{  				case 8: Stream.WriteByte((byte)value); break;  				case 16: Stream.Write((ushort)value); break;  				case 32: Stream.Write((uint)value); break;  				case 64: Stream.Write(value); break;  			}
Missing Default,Mosa.Compiler.Framework.Linker,MosaLinker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Linker\MosaLinker.cs,GetPatchTypeSize,The following switch statement is missing a default case: switch (patchType)  			{  				case PatchType.I32: return 32;  				case PatchType.I64: return 64;  			}
Missing Default,Mosa.Compiler.Framework.RegisterAllocator,MoveResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\RegisterAllocator\MoveResolver.cs,InsertResolvingMoves,The following switch statement is missing a default case: switch (move.Value)  				{  					case ResolvedMoveType.Move: architecture.InsertMoveInstruction(context' move.Destination' move.Source); break;  					case ResolvedMoveType.Exchange: architecture.InsertExchangeInstruction(context' move.Destination' move.Source); break;  					case ResolvedMoveType.Load: architecture.InsertLoadInstruction(context' move.Destination' stackFrame' move.Source); break;  				}
Missing Default,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x32.cs,Transform,The following switch statement is missing a default case: switch (context.ConditionCode)  			{  				case ConditionCode.Equal: compare = context.Operand1.ConstantUnsigned32 == context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.NotEqual: compare = context.Operand1.ConstantUnsigned32 != context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.GreaterOrEqual: compare = context.Operand1.ConstantUnsigned32 >= context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.GreaterThan: compare = context.Operand1.ConstantUnsigned32 > context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.LessOrEqual: compare = context.Operand1.ConstantUnsigned32 <= context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.LessThan: compare = context.Operand1.ConstantUnsigned32 < context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.UnsignedGreaterThan: compare = context.Operand1.ConstantUnsigned32 > context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.UnsignedGreaterOrEqual: compare = context.Operand1.ConstantUnsigned32 >= context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.UnsignedLessThan: compare = context.Operand1.ConstantUnsigned32 < context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.UnsignedLessOrEqual: compare = context.Operand1.ConstantUnsigned32 <= context.Operand2.ConstantUnsigned32; break;  			}
Missing Default,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare32x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare32x64.cs,Transform,The following switch statement is missing a default case: switch (context.ConditionCode)  			{  				case ConditionCode.Equal: compare = context.Operand1.ConstantUnsigned32 == context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.NotEqual: compare = context.Operand1.ConstantUnsigned32 != context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.GreaterOrEqual: compare = context.Operand1.ConstantUnsigned32 >= context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.GreaterThan: compare = context.Operand1.ConstantUnsigned32 > context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.LessOrEqual: compare = context.Operand1.ConstantUnsigned32 <= context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.LessThan: compare = context.Operand1.ConstantUnsigned32 < context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.UnsignedGreaterThan: compare = context.Operand1.ConstantUnsigned32 > context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.UnsignedGreaterOrEqual: compare = context.Operand1.ConstantUnsigned32 >= context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.UnsignedLessThan: compare = context.Operand1.ConstantUnsigned32 < context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.UnsignedLessOrEqual: compare = context.Operand1.ConstantUnsigned32 <= context.Operand2.ConstantUnsigned32; break;  			}
Missing Default,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x32.cs,Transform,The following switch statement is missing a default case: switch (context.ConditionCode)  			{  				case ConditionCode.Equal: compare = context.Operand1.ConstantUnsigned64 == context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.NotEqual: compare = context.Operand1.ConstantUnsigned64 != context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.GreaterOrEqual: compare = context.Operand1.ConstantUnsigned64 >= context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.GreaterThan: compare = context.Operand1.ConstantUnsigned64 > context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.LessOrEqual: compare = context.Operand1.ConstantUnsigned64 <= context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.LessThan: compare = context.Operand1.ConstantUnsigned64 < context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.UnsignedGreaterThan: compare = context.Operand1.ConstantUnsigned64 > context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.UnsignedGreaterOrEqual: compare = context.Operand1.ConstantUnsigned64 >= context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.UnsignedLessThan: compare = context.Operand1.ConstantUnsigned64 < context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.UnsignedLessOrEqual: compare = context.Operand1.ConstantUnsigned64 <= context.Operand2.ConstantUnsigned64; break;  			}
Missing Default,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,Compare64x64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\Compare64x64.cs,Transform,The following switch statement is missing a default case: switch (context.ConditionCode)  			{  				case ConditionCode.Equal: compare = context.Operand1.ConstantUnsigned64 == context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.NotEqual: compare = context.Operand1.ConstantUnsigned64 != context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.GreaterOrEqual: compare = context.Operand1.ConstantUnsigned64 >= context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.GreaterThan: compare = context.Operand1.ConstantUnsigned64 > context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.LessOrEqual: compare = context.Operand1.ConstantUnsigned64 <= context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.LessThan: compare = context.Operand1.ConstantUnsigned64 < context.Operand2.ConstantUnsigned64; break;    				case ConditionCode.UnsignedGreaterThan: compare = context.Operand1.ConstantUnsigned64 > context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.UnsignedGreaterOrEqual: compare = context.Operand1.ConstantUnsigned64 >= context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.UnsignedLessThan: compare = context.Operand1.ConstantUnsigned64 < context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.UnsignedLessOrEqual: compare = context.Operand1.ConstantUnsigned64 <= context.Operand2.ConstantUnsigned64; break;  			}
Missing Default,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch32,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch32.cs,Transform,The following switch statement is missing a default case: switch (context.ConditionCode)  			{  				case ConditionCode.Equal: compare = context.Operand1.ConstantUnsigned32 == context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.NotEqual: compare = context.Operand1.ConstantUnsigned32 != context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.GreaterOrEqual: compare = context.Operand1.ConstantUnsigned32 >= context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.GreaterThan: compare = context.Operand1.ConstantUnsigned32 > context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.LessOrEqual: compare = context.Operand1.ConstantUnsigned32 <= context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.LessThan: compare = context.Operand1.ConstantUnsigned32 < context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.UnsignedGreaterThan: compare = context.Operand1.ConstantUnsigned32 > context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.UnsignedGreaterOrEqual: compare = context.Operand1.ConstantUnsigned32 >= context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.UnsignedLessThan: compare = context.Operand1.ConstantUnsigned32 < context.Operand2.ConstantUnsigned32; break;  				case ConditionCode.UnsignedLessOrEqual: compare = context.Operand1.ConstantUnsigned32 <= context.Operand2.ConstantUnsigned32; break;  			}
Missing Default,Mosa.Compiler.Framework.Transform.Manual.IR.ConstantFolding,CompareBranch64,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Framework\Transform\Manual\IR\ConstantFolding\CompareIntBranch64.cs,Transform,The following switch statement is missing a default case: switch (context.ConditionCode)  			{  				case ConditionCode.Equal: compare = context.Operand1.ConstantUnsigned64 == context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.NotEqual: compare = context.Operand1.ConstantUnsigned64 != context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.GreaterOrEqual: compare = context.Operand1.ConstantUnsigned64 >= context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.GreaterThan: compare = context.Operand1.ConstantUnsigned64 > context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.LessOrEqual: compare = context.Operand1.ConstantUnsigned64 <= context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.LessThan: compare = context.Operand1.ConstantUnsigned64 < context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.UnsignedGreaterThan: compare = context.Operand1.ConstantUnsigned64 > context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.UnsignedGreaterOrEqual: compare = context.Operand1.ConstantUnsigned64 >= context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.UnsignedLessThan: compare = context.Operand1.ConstantUnsigned64 < context.Operand2.ConstantUnsigned64; break;  				case ConditionCode.UnsignedLessOrEqual: compare = context.Operand1.ConstantUnsigned64 <= context.Operand2.ConstantUnsigned64; break;  			}
