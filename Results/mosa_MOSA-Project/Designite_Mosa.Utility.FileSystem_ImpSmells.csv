Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The method has 188 lines of code.
Complex Method,Mosa.FileSystem.FAT,FatFileStream,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileStream.cs,NextClusterExpand,Cyclomatic complexity of the method is 8
Complex Method,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,Cyclomatic complexity of the method is 10
Complex Method,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,Cyclomatic complexity of the method is 25
Complex Method,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,Cyclomatic complexity of the method is 23
Complex Method,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,Cyclomatic complexity of the method is 10
Complex Method,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,FindEntry,Cyclomatic complexity of the method is 11
Complex Method,Mosa.FileSystem.VFS,PathResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\VFS\PathResolver.cs,Resolve,Cyclomatic complexity of the method is 10
Complex Method,Mosa.FileSystem.VFS,PathSplitter,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\VFS\PathSplitter.cs,MarkSeperators,Cyclomatic complexity of the method is 8
Long Parameter List,Mosa.FileSystem.VFS,VirtualFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\VFS\VirtualFileSystem.cs,Create,The method has 5 parameters. Parameters: path' type' settings' access' share
Long Statement,Mosa.DeviceSystem,MasterBootBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\MasterBootBlock.cs,Write,The length of the statement  "					masterboot.SetByte(offset + PartitionRecord.FirstCRS + 1' (byte)((chsStart.Sector & 0x3F) | ((chsStart.Cylinder >> 8) & 0x03))); " is 128.
Long Statement,Mosa.DeviceSystem,MasterBootBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\MasterBootBlock.cs,Write,The length of the statement  "					masterboot.SetByte(offset + PartitionRecord.LastCRS + 1' (byte)((chsEnd.Sector & 0x3F) | ((chsEnd.Cylinder >> 8) & 0x03))); " is 123.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The length of the statement  "			SerialNumber = bootSector.GetBytes(fatType != FatType.FAT32 ? BootSector.IDSerialNumber : BootSector.FAT32_IDSerialNumber' 4); " is 126.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "				bootSector.SetByte(BootSector.MediaDescriptor' 0xF0); // 0xF0 = 3.5" Double Sided' 80 tracks per side' 18 sectors per track (1.44MB). " is 133.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "				bootSector.SetBytes(BootSector.IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length)); " is 120.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "					bootSector.SetString(BootSector.VolumeLabel' fatSettings.VolumeLabel' (uint)Math.Min(11' fatSettings.VolumeLabel.Length)); " is 122.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "					bootSector.SetBytes(BootSector.OSBootCode' fatSettings.OSBootCode' BootSector.OSBootCode' (uint)Math.Min(448' fatSettings.OSBootCode.Length)); " is 142.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "				bootSector.SetBytes(BootSector.FAT32_IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length)); " is 126.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "				bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11)); " is 160.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' 0' (uint)Math.Min(420' fatSettings.OSBootCode.Length)); " is 128.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,IsClusterReserved,The length of the statement  "			return ((cluster & fatMask) == 0x00) || (((cluster & fatMask) >= reservedClusterMark) && ((cluster & fatMask) < badClusterMark)); " is 129.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,FindEntry,The length of the statement  "						return new FatFileLocation(GetClusterEntry(directory.Data' index' fatType)' activeSector' index' (attribute & FatFileAttributes.SubDirectory) != 0); " is 148.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,FindEntry,The length of the statement  "					if ((IsClusterLast(nextCluster)) || (IsClusterBad(nextCluster)) || (IsClusterFree(nextCluster)) || (IsClusterReserved(nextCluster))) " is 132.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetVolumeName,The length of the statement  "			directory.SetByte(Entry.FileAttributes + (location.DirectorySectorIndex * Entry.EntrySize)' (byte)FatFileAttributes.VolumeLabel); " is 129.
Long Statement,Mosa.FileSystem.VFS,PathResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\VFS\PathResolver.cs,Resolve,The length of the statement  "			// FIXME: Remove the root argument. The file system root should be unique for a process as part of a security model similar to jails' e.g. give apps from " is 153.
Long Statement,Mosa.FileSystem.VFS,PathResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\VFS\PathResolver.cs,Resolve,The length of the statement  "				if ((entry == null) && (PathResolutionFlags.DoNotThrowNotFoundException != (PathResolutionFlags.DoNotThrowNotFoundException & flags))) " is 134.
Complex Conditional,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The conditional expression  "(nbrFats == 0) || (nbrFats > 2) || (totalSectors == 0) || (sectorsPerFat == 0)"  is complex.
Complex Conditional,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,FindEntry,The conditional expression  "(IsClusterLast(nextCluster)) || (IsClusterBad(nextCluster)) || (IsClusterFree(nextCluster)) || (IsClusterReserved(nextCluster))"  is complex.
Magic Number,Mosa.DeviceSystem,CHS,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\CHS.cs,SetCHS,The following statement contains a magic number: lba = (uint)diskGeometry.Heads * diskGeometry.SectorsPerTrack * 1024 - 1;
Magic Number,Mosa.DeviceSystem,CHS,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\CHS.cs,SetCHS,The following statement contains a magic number: (lba / (uint)(diskGeometry.SectorsPerTrack * diskGeometry.Heads) > 1023)
Magic Number,Mosa.DeviceSystem,CHS,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\CHS.cs,SetCHS,The following statement contains a magic number: Sector |= (ushort)((lba >> 2) & 0xC0);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,GetUInt,The following statement contains a magic number: value += (uint)(Data[offset++] << 8);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,GetUInt,The following statement contains a magic number: value += (uint)(Data[offset++] << 16);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,GetUInt,The following statement contains a magic number: value += (uint)(Data[offset] << 24);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetUInt,The following statement contains a magic number: Data[offset++] = (byte)((value >> 8) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetUInt,The following statement contains a magic number: Data[offset++] = (byte)((value >> 16) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetUInt,The following statement contains a magic number: Data[offset] = (byte)((value >> 24) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetUIntReversed,The following statement contains a magic number: Data[offset++] = (byte)((value >> 24) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetUIntReversed,The following statement contains a magic number: Data[offset++] = (byte)((value >> 16) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetUIntReversed,The following statement contains a magic number: Data[offset++] = (byte)((value >> 8) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset++] = (byte)((value >> 8) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset++] = (byte)((value >> 16) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset++] = (byte)((value >> 24) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset++] = (byte)((value >> 32) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset++] = (byte)((value >> 40) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset++] = (byte)((value >> 48) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset] = (byte)((value >> 56) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULongReversed,The following statement contains a magic number: Data[offset++] = (byte)((value >> 56) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULongReversed,The following statement contains a magic number: Data[offset++] = (byte)((value >> 48) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULongReversed,The following statement contains a magic number: Data[offset++] = (byte)((value >> 40) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULongReversed,The following statement contains a magic number: Data[offset++] = (byte)((value >> 32) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULongReversed,The following statement contains a magic number: Data[offset++] = (byte)((value >> 24) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULongReversed,The following statement contains a magic number: Data[offset++] = (byte)((value >> 16) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULongReversed,The following statement contains a magic number: Data[offset++] = (byte)((value >> 8) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,GetUShort,The following statement contains a magic number: value += (ushort)(Data[offset] << 8);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetUShort,The following statement contains a magic number: Data[offset] = (byte)((value >> 8) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetUShortReversed,The following statement contains a magic number: Data[offset++] = (byte)((value >> 8) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,GetULong,The following statement contains a magic number: value += (uint)(Data[offset++] << 8);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,GetULong,The following statement contains a magic number: value += (uint)(Data[offset++] << 16);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,GetULong,The following statement contains a magic number: value += (uint)(Data[offset++] << 24);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,GetULong,The following statement contains a magic number: value += (uint)(Data[offset++] << 32);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,GetULong,The following statement contains a magic number: value += (uint)(Data[offset++] << 40);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,GetULong,The following statement contains a magic number: value += (uint)(Data[offset++] << 48);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,GetULong,The following statement contains a magic number: value += (uint)(Data[offset] << 56);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset++] = (byte)((value >> 8) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset++] = (byte)((value >> 16) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset++] = (byte)((value >> 24) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset++] = (byte)((value >> 32) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset++] = (byte)((value >> 40) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset++] = (byte)((value >> 48) & 0xFF);
Magic Number,Mosa.DeviceSystem,DataBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DataBlock.cs,SetULong,The following statement contains a magic number: Data[offset] = (byte)((value >> 56) & 0xFF);
Magic Number,Mosa.DeviceSystem,DiskGeometry,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DiskGeometry.cs,GuessGeometry,The following statement contains a magic number: lba = 65535 * 16 * 255;
Magic Number,Mosa.DeviceSystem,DiskGeometry,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DiskGeometry.cs,GuessGeometry,The following statement contains a magic number: lba = 65535 * 16 * 255;
Magic Number,Mosa.DeviceSystem,DiskGeometry,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DiskGeometry.cs,GuessGeometry,The following statement contains a magic number: lba = 65535 * 16 * 255;
Magic Number,Mosa.DeviceSystem,DiskGeometry,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DiskGeometry.cs,GuessGeometry,The following statement contains a magic number: lba > 65535 * 16 * 255
Magic Number,Mosa.DeviceSystem,DiskGeometry,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DiskGeometry.cs,GuessGeometry,The following statement contains a magic number: lba > 65535 * 16 * 255
Magic Number,Mosa.DeviceSystem,DiskGeometry,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DiskGeometry.cs,GuessGeometry,The following statement contains a magic number: lba > 65535 * 16 * 255
Magic Number,Mosa.DeviceSystem,DiskGeometry,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DiskGeometry.cs,GuessGeometry,The following statement contains a magic number: SectorsPerTrack = 255;
Magic Number,Mosa.DeviceSystem,DiskGeometry,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DiskGeometry.cs,GuessGeometry,The following statement contains a magic number: Heads = 16;
Magic Number,Mosa.DeviceSystem,DiskGeometry,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DiskGeometry.cs,GuessGeometry,The following statement contains a magic number: lba >= 65535 * 16 * 63
Magic Number,Mosa.DeviceSystem,DiskGeometry,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DiskGeometry.cs,GuessGeometry,The following statement contains a magic number: lba >= 65535 * 16 * 63
Magic Number,Mosa.DeviceSystem,DiskGeometry,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\DiskGeometry.cs,GuessGeometry,The following statement contains a magic number: lba >= 65535 * 16 * 63
Magic Number,Mosa.DeviceSystem,MasterBootBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\MasterBootBlock.cs,Read,The following statement contains a magic number: diskDevice.BlockSize != 512 || diskDevice.TotalBlocks < 3
Magic Number,Mosa.DeviceSystem,MasterBootBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\MasterBootBlock.cs,Read,The following statement contains a magic number: diskDevice.BlockSize != 512 || diskDevice.TotalBlocks < 3
Magic Number,Mosa.DeviceSystem,MasterBootBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\MasterBootBlock.cs,Write,The following statement contains a magic number: var masterboot = new DataBlock(512);
Magic Number,Mosa.DeviceSystem,MasterBootBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\MasterBootBlock.cs,Write,The following statement contains a magic number: uint offset = MBR.FirstPartition + (index * 16);
Magic Number,Mosa.DeviceSystem,MasterBootBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\MasterBootBlock.cs,Write,The following statement contains a magic number: masterboot.SetByte(offset + PartitionRecord.FirstCRS + 1' (byte)((chsStart.Sector & 0x3F) | ((chsStart.Cylinder >> 8) & 0x03)));
Magic Number,Mosa.DeviceSystem,MasterBootBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\MasterBootBlock.cs,Write,The following statement contains a magic number: masterboot.SetByte(offset + PartitionRecord.FirstCRS + 2' (byte)(chsStart.Cylinder & 0xFF));
Magic Number,Mosa.DeviceSystem,MasterBootBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\MasterBootBlock.cs,Write,The following statement contains a magic number: masterboot.SetByte(offset + PartitionRecord.LastCRS + 1' (byte)((chsEnd.Sector & 0x3F) | ((chsEnd.Cylinder >> 8) & 0x03)));
Magic Number,Mosa.DeviceSystem,MasterBootBlock,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.DeviceSystem\MasterBootBlock.cs,Write,The following statement contains a magic number: masterboot.SetByte(offset + PartitionRecord.LastCRS + 2' (byte)(chsEnd.Cylinder & 0xFF));
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadCluster,The following statement contains a magic number: return partition.ReadBlock(dataAreaStart + ((cluster - 2) * sectorsPerCluster)' sectorsPerCluster);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadCluster,The following statement contains a magic number: return partition.ReadBlock(dataAreaStart + ((cluster - 2) * sectorsPerCluster)' sectorsPerCluster' block);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,WriteCluster,The following statement contains a magic number: return partition.WriteBlock(dataAreaStart + ((cluster - 2) * sectorsPerCluster)' sectorsPerCluster' block);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: BlockSize != 512
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: VolumeLabel = bootSector.GetString(BootSector.VolumeLabel' 8).TrimEnd();
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: rootDirSectors = (((rootEntries * 32) + (bytesPerSector - 1)) / bytesPerSector);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: entriesPerSector = (bytesPerSector / 32);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: (nbrFats == 0) || (nbrFats > 2) || (totalSectors == 0) || (sectorsPerFat == 0)
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: totalClusters < 4085
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: fatEntries = sectorsPerFat * 3 * BlockSize / 2;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: fatEntries = sectorsPerFat * 3 * BlockSize / 2;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: SerialNumber = bootSector.GetBytes(fatType != FatType.FAT32 ? BootSector.IDSerialNumber : BootSector.FAT32_IDSerialNumber' 4);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: bytesPerSector = 512;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: nbrFats = 2;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: reservedSectors = 32;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: rootDirSectors = (((rootEntries * 32) + (bytesPerSector - 1)) / bytesPerSector);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: uint val2 = (uint)((sectorsPerCluster * 256) + nbrFats);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: val2 /= 2;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: var bootSector = new DataBlock(512);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: bootSector.SetBytes(BootSector.IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: bootSector.SetBytes(BootSector.OSBootCode' fatSettings.OSBootCode' BootSector.OSBootCode' (uint)Math.Min(448' fatSettings.OSBootCode.Length));
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: bootSector.SetUInt(BootSector.FAT32_ClusterNumberOfRoot' 2);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: bootSector.SetUShort(BootSector.FAT32_SecondBootSector' 6);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: bootSector.SetBytes(BootSector.FAT32_IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11));
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11));
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' BootSector.FAT32_OSBootCode' 420);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: fatSettings.OSBootCode.Length == 512
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: partition.WriteBlock(6' 1' bootSector.Data);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: var infoSector = new DataBlock(512);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: partition.WriteBlock(7' 1' infoSector.Data);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: var secondSector = new DataBlock(512);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: partition.WriteBlock(2' 1' secondSector.Data);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: partition.WriteBlock(8' 1' secondSector.Data);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: var emptyFat = new DataBlock(512);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: nbrFats == 2
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: var firstFat = new DataBlock(512);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: firstFat.SetByte(2' 0xFF);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: nbrFats == 2
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorByCluster,The following statement contains a magic number: return dataAreaStart + ((cluster - 2) * sectorsPerCluster);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetClusterEntryValue,The following statement contains a magic number: fatoffset = (cluster + (cluster / 2));
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetClusterEntryValue,The following statement contains a magic number: nbrSectors = 2;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetClusterEntryValue,The following statement contains a magic number: clusterValue >>= 4;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetClusterEntryValue,The following statement contains a magic number: cluster % 2 == 1
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetClusterEntryValue,The following statement contains a magic number: fatOffset = (cluster + (cluster / 2));
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetClusterEntryValue,The following statement contains a magic number: nbrSectors = 2;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetClusterEntryValue,The following statement contains a magic number: switch (fatType)  			{  				case FatType.FAT12:  					{  						uint clustervalue = fat.GetUShort(sectorOffset);    						if (cluster % 2 == 1)  							clustervalue = ((clustervalue & 0x000F) | (nextcluster << 4));  						else  							clustervalue = ((clustervalue & 0xF000) | (nextcluster & 0x0FFF));    						fat.SetUShort(sectorOffset' (ushort)clustervalue);  						break;  					}  				case FatType.FAT16:  					{  						fat.SetUShort(sectorOffset' (ushort)(nextcluster & 0xFFFF));  						break;  					}  				default:  					{  						fat.SetUInt(sectorOffset' nextcluster);  						break;  					}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetClusterEntryValue,The following statement contains a magic number: switch (fatType)  			{  				case FatType.FAT12:  					{  						uint clustervalue = fat.GetUShort(sectorOffset);    						if (cluster % 2 == 1)  							clustervalue = ((clustervalue & 0x000F) | (nextcluster << 4));  						else  							clustervalue = ((clustervalue & 0xF000) | (nextcluster & 0x0FFF));    						fat.SetUShort(sectorOffset' (ushort)clustervalue);  						break;  					}  				case FatType.FAT16:  					{  						fat.SetUShort(sectorOffset' (ushort)(nextcluster & 0xFFFF));  						break;  					}  				default:  					{  						fat.SetUInt(sectorOffset' nextcluster);  						break;  					}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: var name = new char[12];
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: i < 8
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: int len = 8;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: i < 3
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: len += 3;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: spaces = 4;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: spaces == 3
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,IsValidFatCharacter,The following statement contains a magic number: (c >= 128) || (c <= 255)
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,IsValidFatCharacter,The following statement contains a magic number: (c >= 128) || (c <= 255)
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetClusterEntry,The following statement contains a magic number: cluster |= ((uint)entry.GetUShort(Entry.EAIndex + (index * Entry.EntrySize))) << 16;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,FindEntry,The following statement contains a magic number: compare.Compare(directory.Data' index * 32' fatType)
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,CreateFile,The following statement contains a magic number: filename = filename.Substring(0' 11);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,CreateFile,The following statement contains a magic number: filename.Length > 11
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,CreateFile,The following statement contains a magic number: directory.SetString(Entry.DOSName + (location.DirectorySectorIndex * Entry.EntrySize)' "            "' 11);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetVolumeName,The following statement contains a magic number: VolumeLabel = VolumeLabel.Substring(0' 8);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetVolumeName,The following statement contains a magic number: VolumeLabel.Length > 8
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetVolumeName,The following statement contains a magic number: volumeName = volumeName.Substring(0' 8);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetVolumeName,The following statement contains a magic number: volumeName.Length > 8
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetVolumeName,The following statement contains a magic number: directory.SetString(Entry.DOSName + (location.DirectorySectorIndex * Entry.EntrySize)' "            "' 11);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,AllocateCluster,The following statement contains a magic number: at = 2;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,AllocateCluster,The following statement contains a magic number: at < 2
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,AllocateCluster,The following statement contains a magic number: at = 2;
Missing Default,Mosa.FileSystem.FAT,FatFileStream,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileStream.cs,Seek,The following switch statement is missing a default case: switch (origin)  			{  				case SeekOrigin.Begin: newposition = offset; break;  				case SeekOrigin.Current: newposition = position + offset; break;  				case SeekOrigin.End: newposition = length + offset; break;  			}
Missing Default,Mosa.FileSystem.VFS,VirtualFileSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\VFS\VirtualFileSystem.cs,Open,The following switch statement is missing a default case: switch (access)  			{  				case System.IO.FileAccess.Read:  					modeFlags = AccessMode.Read;  					break;    				case System.IO.FileAccess.Write:  					modeFlags = AccessMode.Write;  					break;    				case System.IO.FileAccess.ReadWrite:  					modeFlags = AccessMode.Read | AccessMode.Write;  					break;  			}
