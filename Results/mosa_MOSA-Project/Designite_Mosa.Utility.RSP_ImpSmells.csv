Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mosa.Utility.RSP,GDBClient,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBClient.cs,IncomingPatcket,Cyclomatic complexity of the method is 9
Complex Conditional,Mosa.Utility.RSP,Rle,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\Rle.cs,Decode,The conditional expression  "!(len >= 4 && len <= 97 && len != 6 && len != 7)"  is complex.
Magic Number,Mosa.Utility.RSP,Checksum,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\Checksum.cs,Calculate,The following statement contains a magic number: return (byte)(sum % 256);
Magic Number,Mosa.Utility.RSP,GDBCommand,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBCommand.cs,GetByte,The following statement contains a magic number: return GDBClient.HexToDecimal(ResponseData[i * 2]' ResponseData[(i * 2) + 1]);
Magic Number,Mosa.Utility.RSP,GDBCommand,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBCommand.cs,GetByte,The following statement contains a magic number: return GDBClient.HexToDecimal(ResponseData[i * 2]' ResponseData[(i * 2) + 1]);
Magic Number,Mosa.Utility.RSP,GDBCommand,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBCommand.cs,GetInteger,The following statement contains a magic number: index *= 2;
Magic Number,Mosa.Utility.RSP,GDBCommand,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBCommand.cs,GetInteger,The following statement contains a magic number: for (int i = index + ((int)size * 2) - 2; i >= index; i -= 2)  			{  				var b = GDBClient.HexToDecimal(ResponseData[i]' ResponseData[i + 1]);  				value <<= 8;  				value |= b;  			}
Magic Number,Mosa.Utility.RSP,GDBCommand,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBCommand.cs,GetInteger,The following statement contains a magic number: for (int i = index + ((int)size * 2) - 2; i >= index; i -= 2)  			{  				var b = GDBClient.HexToDecimal(ResponseData[i]' ResponseData[i + 1]);  				value <<= 8;  				value |= b;  			}
Magic Number,Mosa.Utility.RSP,GDBCommand,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBCommand.cs,GetInteger,The following statement contains a magic number: for (int i = index + ((int)size * 2) - 2; i >= index; i -= 2)  			{  				var b = GDBClient.HexToDecimal(ResponseData[i]' ResponseData[i + 1]);  				value <<= 8;  				value |= b;  			}
Magic Number,Mosa.Utility.RSP,GDBCommand,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBCommand.cs,GetInteger,The following statement contains a magic number: for (int i = index + ((int)size * 2) - 2; i >= index; i -= 2)  			{  				var b = GDBClient.HexToDecimal(ResponseData[i]' ResponseData[i + 1]);  				value <<= 8;  				value |= b;  			}
Magic Number,Mosa.Utility.RSP,GDBCommand,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBCommand.cs,GetAllBytes,The following statement contains a magic number: var bytes = new byte[ResponseData.Length / 2];
Magic Number,Mosa.Utility.RSP,GDBClient,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBClient.cs,IncomingPatcket,The following statement contains a magic number: if (len >= 4 && receivedData[0] == '$' && receivedData[len - 3] == '#')  			{  				Debug.WriteLine("RECEIVED: " + Encoding.UTF8.GetString(receivedData.ToArray()));    				if (currentCommand == null)  				{  					receivedData.Clear();  					return;  				}    				var data = Rle.Decode(receivedData' 1' receivedData.Count - 3).ToArray();    				bool ok = false;    				if (data != null)  				{  					// Compare checksum  					byte receivedChecksum = HexToDecimal(receivedData[len - 2]' receivedData[len - 1]);  					uint calculatedChecksum = Checksum.Calculate(data);    					if (receivedChecksum == calculatedChecksum)  					{  						ok = true;  					}  				}    				currentCommand.IsResponseOk = ok;  				currentCommand.ResponseData = data;    				if (ok)  				{  					currentCommand.Decode();  				}    				var cmd = currentCommand;  				currentCommand = null;  				receivedData.Clear();    				cmd.Callback?.Invoke(cmd);    				return;  			}
Magic Number,Mosa.Utility.RSP,GDBClient,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBClient.cs,IncomingPatcket,The following statement contains a magic number: if (len >= 4 && receivedData[0] == '$' && receivedData[len - 3] == '#')  			{  				Debug.WriteLine("RECEIVED: " + Encoding.UTF8.GetString(receivedData.ToArray()));    				if (currentCommand == null)  				{  					receivedData.Clear();  					return;  				}    				var data = Rle.Decode(receivedData' 1' receivedData.Count - 3).ToArray();    				bool ok = false;    				if (data != null)  				{  					// Compare checksum  					byte receivedChecksum = HexToDecimal(receivedData[len - 2]' receivedData[len - 1]);  					uint calculatedChecksum = Checksum.Calculate(data);    					if (receivedChecksum == calculatedChecksum)  					{  						ok = true;  					}  				}    				currentCommand.IsResponseOk = ok;  				currentCommand.ResponseData = data;    				if (ok)  				{  					currentCommand.Decode();  				}    				var cmd = currentCommand;  				currentCommand = null;  				receivedData.Clear();    				cmd.Callback?.Invoke(cmd);    				return;  			}
Magic Number,Mosa.Utility.RSP,GDBClient,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBClient.cs,IncomingPatcket,The following statement contains a magic number: if (len >= 4 && receivedData[0] == '$' && receivedData[len - 3] == '#')  			{  				Debug.WriteLine("RECEIVED: " + Encoding.UTF8.GetString(receivedData.ToArray()));    				if (currentCommand == null)  				{  					receivedData.Clear();  					return;  				}    				var data = Rle.Decode(receivedData' 1' receivedData.Count - 3).ToArray();    				bool ok = false;    				if (data != null)  				{  					// Compare checksum  					byte receivedChecksum = HexToDecimal(receivedData[len - 2]' receivedData[len - 1]);  					uint calculatedChecksum = Checksum.Calculate(data);    					if (receivedChecksum == calculatedChecksum)  					{  						ok = true;  					}  				}    				currentCommand.IsResponseOk = ok;  				currentCommand.ResponseData = data;    				if (ok)  				{  					currentCommand.Decode();  				}    				var cmd = currentCommand;  				currentCommand = null;  				receivedData.Clear();    				cmd.Callback?.Invoke(cmd);    				return;  			}
Magic Number,Mosa.Utility.RSP,GDBClient,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBClient.cs,IncomingPatcket,The following statement contains a magic number: if (len >= 4 && receivedData[0] == '$' && receivedData[len - 3] == '#')  			{  				Debug.WriteLine("RECEIVED: " + Encoding.UTF8.GetString(receivedData.ToArray()));    				if (currentCommand == null)  				{  					receivedData.Clear();  					return;  				}    				var data = Rle.Decode(receivedData' 1' receivedData.Count - 3).ToArray();    				bool ok = false;    				if (data != null)  				{  					// Compare checksum  					byte receivedChecksum = HexToDecimal(receivedData[len - 2]' receivedData[len - 1]);  					uint calculatedChecksum = Checksum.Calculate(data);    					if (receivedChecksum == calculatedChecksum)  					{  						ok = true;  					}  				}    				currentCommand.IsResponseOk = ok;  				currentCommand.ResponseData = data;    				if (ok)  				{  					currentCommand.Decode();  				}    				var cmd = currentCommand;  				currentCommand = null;  				receivedData.Clear();    				cmd.Callback?.Invoke(cmd);    				return;  			}
Magic Number,Mosa.Utility.RSP,GDBClient,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBClient.cs,HexToDecimal,The following statement contains a magic number: if (v >= '0' && v <= '9')  				return (byte)(v - (byte)'0');  			else  				return (byte)(v - (byte)'a' + 10);
Magic Number,Mosa.Utility.RSP,GDBClient,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\GDBClient.cs,HexToDecimal,The following statement contains a magic number: return (byte)((h * 16) + l);
Magic Number,Mosa.Utility.RSP,Rle,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\Rle.cs,Decode,The following statement contains a magic number: for (int i = start; i < length; i++)  			{  				var c = data[i];    				if (c != '*')  				{  					decoded.Add(c);  					continue;  				}    				if (i == 0)  					return null; // error --- repeat character can not at the start    				var repeated = data[i - 1];  				int len = ((byte)data[i + 1]) - 28;    				if (!(len >= 4 && len <= 97 && len != 6 && len != 7))  					return null; // error --- invalid length    				for (int j = 0; j < len - 1; j++)  				{  					decoded.Add(repeated);  				}    				i++;  			}
Magic Number,Mosa.Utility.RSP,Rle,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\Rle.cs,Decode,The following statement contains a magic number: for (int i = start; i < length; i++)  			{  				var c = data[i];    				if (c != '*')  				{  					decoded.Add(c);  					continue;  				}    				if (i == 0)  					return null; // error --- repeat character can not at the start    				var repeated = data[i - 1];  				int len = ((byte)data[i + 1]) - 28;    				if (!(len >= 4 && len <= 97 && len != 6 && len != 7))  					return null; // error --- invalid length    				for (int j = 0; j < len - 1; j++)  				{  					decoded.Add(repeated);  				}    				i++;  			}
Magic Number,Mosa.Utility.RSP,Rle,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\Rle.cs,Decode,The following statement contains a magic number: for (int i = start; i < length; i++)  			{  				var c = data[i];    				if (c != '*')  				{  					decoded.Add(c);  					continue;  				}    				if (i == 0)  					return null; // error --- repeat character can not at the start    				var repeated = data[i - 1];  				int len = ((byte)data[i + 1]) - 28;    				if (!(len >= 4 && len <= 97 && len != 6 && len != 7))  					return null; // error --- invalid length    				for (int j = 0; j < len - 1; j++)  				{  					decoded.Add(repeated);  				}    				i++;  			}
Magic Number,Mosa.Utility.RSP,Rle,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\Rle.cs,Decode,The following statement contains a magic number: for (int i = start; i < length; i++)  			{  				var c = data[i];    				if (c != '*')  				{  					decoded.Add(c);  					continue;  				}    				if (i == 0)  					return null; // error --- repeat character can not at the start    				var repeated = data[i - 1];  				int len = ((byte)data[i + 1]) - 28;    				if (!(len >= 4 && len <= 97 && len != 6 && len != 7))  					return null; // error --- invalid length    				for (int j = 0; j < len - 1; j++)  				{  					decoded.Add(repeated);  				}    				i++;  			}
Magic Number,Mosa.Utility.RSP,Rle,C:\repos\mosa_MOSA-Project\Source\Mosa.Utility.RSP\Rle.cs,Decode,The following statement contains a magic number: for (int i = start; i < length; i++)  			{  				var c = data[i];    				if (c != '*')  				{  					decoded.Add(c);  					continue;  				}    				if (i == 0)  					return null; // error --- repeat character can not at the start    				var repeated = data[i - 1];  				int len = ((byte)data[i + 1]) - 28;    				if (!(len >= 4 && len <= 97 && len != 6 && len != 7))  					return null; // error --- invalid length    				for (int j = 0; j < len - 1; j++)  				{  					decoded.Add(repeated);  				}    				i++;  			}
