Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,Body,The method has 290 lines of code.
Long Method,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,EmitBits,The method has 107 lines of code.
Long Method,Mosa.Utility.SourceCodeGenerator,BuildTransformations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildTransformations.cs,ProcessResultInstructionTree,The method has 140 lines of code.
Long Method,Mosa.Utility.SourceCodeGenerator,Program,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\Program.cs,Main,The method has 114 lines of code.
Long Method,Mosa.Utility.SourceCodeGenerator.TransformExpressions,Tokenizer,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\TransformExpressions\Tokenizer.cs,Parse,The method has 113 lines of code.
Complex Method,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,Body,Cyclomatic complexity of the method is 52
Complex Method,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,ReduceEncoding,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,DecodeExperimentalCondition,Cyclomatic complexity of the method is 31
Complex Method,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,EmitBits,Cyclomatic complexity of the method is 23
Complex Method,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,GetCodes,Cyclomatic complexity of the method is 37
Complex Method,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,GetOperand,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Utility.SourceCodeGenerator,BuildIRInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildIRInstructionFiles.cs,Body,Cyclomatic complexity of the method is 16
Complex Method,Mosa.Utility.SourceCodeGenerator,BuildTransformations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildTransformations.cs,ProcessResultInstructionTree,Cyclomatic complexity of the method is 27
Complex Method,Mosa.Utility.SourceCodeGenerator,BuildTransformations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildTransformations.cs,CreateExpression,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Utility.SourceCodeGenerator,BuildTransformations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildTransformations.cs,ProcessFilters,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Utility.SourceCodeGenerator,BuildTransformations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildTransformations.cs,ProcessConditions,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Utility.SourceCodeGenerator.TransformExpressions,FilterParser,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\TransformExpressions\FilterParser.cs,ParseMethod,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Utility.SourceCodeGenerator.TransformExpressions,InstructionParser,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\TransformExpressions\InstructionParser.cs,ParseInstructionNode,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Utility.SourceCodeGenerator.TransformExpressions,ResultParser,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\TransformExpressions\ResultParser.cs,ParseInstructionNode,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Utility.SourceCodeGenerator.TransformExpressions,ResultParser,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\TransformExpressions\ResultParser.cs,ParseExpression,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Utility.SourceCodeGenerator.TransformExpressions,Tokenizer,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\TransformExpressions\Tokenizer.cs,Parse,Cyclomatic complexity of the method is 24
Complex Method,Mosa.Utility.SourceCodeGenerator.TransformExpressions,Transformation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\TransformExpressions\Transformation.cs,GetPostorder,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Utility.SourceCodeGenerator.TransformExpressions,Transformation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\TransformExpressions\Transformation.cs,GetPostorder,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Utility.SourceCodeGenerator.TransformExpressions,Transformation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\TransformExpressions\Transformation.cs,GetAllOperands,Cyclomatic complexity of the method is 10
Long Parameter List,Mosa.Utility.SourceCodeGenerator,BuildTransformationFile,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildTransformationFile.cs,BuildTransformationFile,The method has 5 parameters. Parameters: destinationPath' destinationFile' namespace' classname' filters
Long Parameter List,Mosa.Utility.SourceCodeGenerator,BuildTransformationListFile,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildTransformationListFile.cs,BuildTransformationListFile,The method has 5 parameters. Parameters: destinationPath' destinationFile' namespace' classname' filters
Long Statement,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,Body,The length of the statement  "				Lines.AppendLine("\t\tpublic override FlowControl FlowControl { get { return FlowControl." + node.FlowControl + "; } }"); " is 121.
Long Statement,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,Body,The length of the statement  "				Lines.AppendLine("\t\tpublic override BuiltInType ResultType2 { get { return BuiltInType." + node.ResultType2 + "; } }"); " is 121.
Long Statement,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,DecodeExperimentalCondition,The length of the statement  "						case "signedbyte": cond1 = ".IsConstant"; cond2 = ".ConstantSigned32 >= " + sbyte.MinValue.ToString(); cond3 = ".ConstantSigned32 <= " + sbyte.MaxValue.ToString(); break; " is 170.
Long Statement,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,DecodeExperimentalCondition,The length of the statement  "						case "signedshort": cond1 = ".IsConstant"; cond2 = ".ConstantSigned32 >= " + short.MinValue.ToString(); cond3 = ".ConstantSigned32 <= " + short.MaxValue.ToString(); break; " is 171.
Long Statement,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,DecodeExperimentalCondition,The length of the statement  "						case "signint": cond1 = ".IsConstant"; cond2 = ".ConstantSigned32 >= " + int.MinValue.ToString(); cond3 = ".ConstantSigned32 <= " + int.MaxValue.ToString(); break; " is 163.
Long Statement,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,GetCodes,The length of the statement  "						postcode = ".Register.RegisterCode >> " + start.ToString() + ") & 0x" + ("111111111111111111111111111111".Substring(0' length)); " is 128.
Long Statement,Mosa.Utility.SourceCodeGenerator,BuildIRInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildIRInstructionFiles.cs,Body,The length of the statement  "				Lines.AppendLine("\t\tpublic override FlowControl FlowControl { get { return FlowControl." + node.FlowControl + "; } }"); " is 121.
Long Statement,Mosa.Utility.SourceCodeGenerator,BuildIRInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildIRInstructionFiles.cs,Body,The length of the statement  "				Lines.AppendLine("\t\tpublic override BuiltInType ResultType2 { get { return BuiltInType." + node.ResultType2 + "; } }"); " is 121.
Long Statement,Mosa.Utility.SourceCodeGenerator,BuildTransformations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildTransformations.cs,ProcessResultInstructionTree,The length of the statement  "				Lines.AppendLine($"\t\t\tvar v{virtualRegisterNbr} = transformContext.AllocateVirtualRegister(transformContext.{resultType});"); " is 128.
Complex Conditional,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,Body,The conditional expression  "FlagsModified.Contains("S") || FlagsSet.Contains("S") || FlagsCleared.Contains("S")  				|| FlagsModified.Contains("N") || FlagsSet.Contains("N") || FlagsCleared.Contains("N")"  is complex.
Complex Conditional,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,Body,The conditional expression  "FlagsModified.Contains("O") || FlagsSet.Contains("O") || FlagsCleared.Contains("O")  				|| FlagsModified.Contains("V") || FlagsSet.Contains("V") || FlagsCleared.Contains("V")"  is complex.
Complex Conditional,Mosa.Utility.SourceCodeGenerator,BuildTransformations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildTransformations.cs,ProcessConditions,The conditional expression  "operand.IsLong || operand.IsDouble || operand.IsFloat || operand.IsInteger"  is complex.
Complex Conditional,Mosa.Utility.SourceCodeGenerator.TransformExpressions,Tokenizer,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\TransformExpressions\Tokenizer.cs,Parse,The conditional expression  "IsDigit(c) || IsHexDigit(c) || c == '.' || c == 'l' || c == 'f' || c == 'd' || c == 'b' || c == 'u' || c == 'i'"  is complex.
Complex Conditional,Mosa.Utility.SourceCodeGenerator.TransformExpressions,Tokenizer,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\TransformExpressions\Tokenizer.cs,GetNumberToken,The conditional expression  "last == 'd' || last == 'f' || last == 'l' || last == 'i' || last == 'u'"  is complex.
Complex Conditional,Mosa.Utility.SourceCodeGenerator.TransformExpressions,Transformation,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\TransformExpressions\Transformation.cs,GetAllOperands,The conditional expression  "!(operand.IsInteger || operand.IsLong || operand.IsFloat || operand.IsDouble)"  is complex.
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,DecodeExperimentalCondition,The following statement contains a magic number: switch (i)  					{  						case 0: operand = "Operand1"; break;  						case 1: operand = "Operand2"; break;  						case 2: operand = "Operand3"; break;  						default: operand = "GetOperand(" + i.ToString() + ")"; break;  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,EmitCondition,The following statement contains a magic number: var tabs = "\t\t\t\t\t\t\t\t\t\t".Substring(0' index + 3);
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,EmitBits,The following statement contains a magic number: var tabs = "\t\t\t\t\t\t\t\t\t\t".Substring(0' index + 3);
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,EmitBits,The following statement contains a magic number: string hex = s.StartsWith("x") ? s.Substring(1) : s.Substring(2);
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,EmitBits,The following statement contains a magic number: switch (hex.Length)  					{  						case 1:  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex + ");");  							break;    						case 2:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex + ");");  							break;    						case 3:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex.Substring(0' 2) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(1) + ");");  							break;    						case 4:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex + ");");  							break;    						case 5:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex.Substring(0' 4) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(5) + ");");  							break;    						case 8:  							Lines.AppendLine("emitter.OpcodeEncoder.Append32Bits(0x" + hex + ");");  							break;    						default: throw new Exception("ERROR!");  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,EmitBits,The following statement contains a magic number: switch (hex.Length)  					{  						case 1:  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex + ");");  							break;    						case 2:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex + ");");  							break;    						case 3:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex.Substring(0' 2) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(1) + ");");  							break;    						case 4:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex + ");");  							break;    						case 5:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex.Substring(0' 4) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(5) + ");");  							break;    						case 8:  							Lines.AppendLine("emitter.OpcodeEncoder.Append32Bits(0x" + hex + ");");  							break;    						default: throw new Exception("ERROR!");  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,EmitBits,The following statement contains a magic number: switch (hex.Length)  					{  						case 1:  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex + ");");  							break;    						case 2:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex + ");");  							break;    						case 3:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex.Substring(0' 2) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(1) + ");");  							break;    						case 4:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex + ");");  							break;    						case 5:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex.Substring(0' 4) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(5) + ");");  							break;    						case 8:  							Lines.AppendLine("emitter.OpcodeEncoder.Append32Bits(0x" + hex + ");");  							break;    						default: throw new Exception("ERROR!");  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,EmitBits,The following statement contains a magic number: switch (hex.Length)  					{  						case 1:  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex + ");");  							break;    						case 2:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex + ");");  							break;    						case 3:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex.Substring(0' 2) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(1) + ");");  							break;    						case 4:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex + ");");  							break;    						case 5:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex.Substring(0' 4) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(5) + ");");  							break;    						case 8:  							Lines.AppendLine("emitter.OpcodeEncoder.Append32Bits(0x" + hex + ");");  							break;    						default: throw new Exception("ERROR!");  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,EmitBits,The following statement contains a magic number: switch (hex.Length)  					{  						case 1:  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex + ");");  							break;    						case 2:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex + ");");  							break;    						case 3:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex.Substring(0' 2) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(1) + ");");  							break;    						case 4:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex + ");");  							break;    						case 5:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex.Substring(0' 4) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(5) + ");");  							break;    						case 8:  							Lines.AppendLine("emitter.OpcodeEncoder.Append32Bits(0x" + hex + ");");  							break;    						default: throw new Exception("ERROR!");  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,EmitBits,The following statement contains a magic number: switch (hex.Length)  					{  						case 1:  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex + ");");  							break;    						case 2:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex + ");");  							break;    						case 3:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex.Substring(0' 2) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(1) + ");");  							break;    						case 4:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex + ");");  							break;    						case 5:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex.Substring(0' 4) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(5) + ");");  							break;    						case 8:  							Lines.AppendLine("emitter.OpcodeEncoder.Append32Bits(0x" + hex + ");");  							break;    						default: throw new Exception("ERROR!");  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,EmitBits,The following statement contains a magic number: switch (hex.Length)  					{  						case 1:  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex + ");");  							break;    						case 2:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex + ");");  							break;    						case 3:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex.Substring(0' 2) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(1) + ");");  							break;    						case 4:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex + ");");  							break;    						case 5:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex.Substring(0' 4) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(5) + ");");  							break;    						case 8:  							Lines.AppendLine("emitter.OpcodeEncoder.Append32Bits(0x" + hex + ");");  							break;    						default: throw new Exception("ERROR!");  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,EmitBits,The following statement contains a magic number: switch (hex.Length)  					{  						case 1:  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex + ");");  							break;    						case 2:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex + ");");  							break;    						case 3:  							Lines.AppendLine("emitter.OpcodeEncoder.Append8Bits(0x" + hex.Substring(0' 2) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(1) + ");");  							break;    						case 4:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex + ");");  							break;    						case 5:  							Lines.AppendLine("emitter.OpcodeEncoder.AppendShort(0x" + hex.Substring(0' 4) + ");");  							Lines.Append(tabs);  							Lines.AppendLine("emitter.OpcodeEncoder.Append4Bits(0x" + hex.Substring(5) + ");");  							break;    						case 8:  							Lines.AppendLine("emitter.OpcodeEncoder.Append32Bits(0x" + hex + ");");  							break;    						default: throw new Exception("ERROR!");  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,GetCodes,The following statement contains a magic number: switch (length)  					{  						case 1: code = "Append1Bit("; break;  						case 2: code = "Append2Bits("; break;  						case 3: code = "Append3Bits("; break;  						case 4: code = "Append4Bits("; break;  						case 5: code = "Append5Bits("; break;  						case 6: code = "Append6Bits("; break;  						case 7: code = "Append7Bits("; break;  						case 8: code = "Append8Bits("; break;  						default: code = "AppendBits("; postcode += "' " + length.ToString(); break;  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,GetCodes,The following statement contains a magic number: switch (length)  					{  						case 1: code = "Append1Bit("; break;  						case 2: code = "Append2Bits("; break;  						case 3: code = "Append3Bits("; break;  						case 4: code = "Append4Bits("; break;  						case 5: code = "Append5Bits("; break;  						case 6: code = "Append6Bits("; break;  						case 7: code = "Append7Bits("; break;  						case 8: code = "Append8Bits("; break;  						default: code = "AppendBits("; postcode += "' " + length.ToString(); break;  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,GetCodes,The following statement contains a magic number: switch (length)  					{  						case 1: code = "Append1Bit("; break;  						case 2: code = "Append2Bits("; break;  						case 3: code = "Append3Bits("; break;  						case 4: code = "Append4Bits("; break;  						case 5: code = "Append5Bits("; break;  						case 6: code = "Append6Bits("; break;  						case 7: code = "Append7Bits("; break;  						case 8: code = "Append8Bits("; break;  						default: code = "AppendBits("; postcode += "' " + length.ToString(); break;  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,GetCodes,The following statement contains a magic number: switch (length)  					{  						case 1: code = "Append1Bit("; break;  						case 2: code = "Append2Bits("; break;  						case 3: code = "Append3Bits("; break;  						case 4: code = "Append4Bits("; break;  						case 5: code = "Append5Bits("; break;  						case 6: code = "Append6Bits("; break;  						case 7: code = "Append7Bits("; break;  						case 8: code = "Append8Bits("; break;  						default: code = "AppendBits("; postcode += "' " + length.ToString(); break;  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,GetCodes,The following statement contains a magic number: switch (length)  					{  						case 1: code = "Append1Bit("; break;  						case 2: code = "Append2Bits("; break;  						case 3: code = "Append3Bits("; break;  						case 4: code = "Append4Bits("; break;  						case 5: code = "Append5Bits("; break;  						case 6: code = "Append6Bits("; break;  						case 7: code = "Append7Bits("; break;  						case 8: code = "Append8Bits("; break;  						default: code = "AppendBits("; postcode += "' " + length.ToString(); break;  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,GetCodes,The following statement contains a magic number: switch (length)  					{  						case 1: code = "Append1Bit("; break;  						case 2: code = "Append2Bits("; break;  						case 3: code = "Append3Bits("; break;  						case 4: code = "Append4Bits("; break;  						case 5: code = "Append5Bits("; break;  						case 6: code = "Append6Bits("; break;  						case 7: code = "Append7Bits("; break;  						case 8: code = "Append8Bits("; break;  						default: code = "AppendBits("; postcode += "' " + length.ToString(); break;  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,GetCodes,The following statement contains a magic number: switch (length)  					{  						case 1: code = "Append1Bit("; break;  						case 2: code = "Append2Bits("; break;  						case 3: code = "Append3Bits("; break;  						case 4: code = "Append4Bits("; break;  						case 5: code = "Append5Bits("; break;  						case 6: code = "Append6Bits("; break;  						case 7: code = "Append7Bits("; break;  						case 8: code = "Append8Bits("; break;  						default: code = "AppendBits("; postcode += "' " + length.ToString(); break;  					}
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildTransformations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildTransformations.cs,ProcessResultInstructionTree,The following statement contains a magic number: sb.Length -= 2;
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildTransformations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildTransformations.cs,CreateExpression,The following statement contains a magic number: sb.Length -= 2;
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildTransformations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildTransformations.cs,ProcessFilters,The following statement contains a magic number: sb.Length -= 2;
Magic Number,Mosa.Utility.SourceCodeGenerator,BuildTransformations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildTransformations.cs,GetOperandName,The following statement contains a magic number: index < 3
Magic Number,Mosa.Utility.SourceCodeGenerator.TransformExpressions,Tokenizer,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\TransformExpressions\Tokenizer.cs,ParseHex,The following statement contains a magic number: l <<= 4;
Missing Default,Mosa.Utility.SourceCodeGenerator,BuildCommonInstructionFiles,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.SourceCodeGenerator\BuildCommonInstructionFiles.cs,DecodeExperimentalCondition,The following switch statement is missing a default case: switch (subpart2.ToLower())  					{  						case "skip": continue;  						case "ignore": continue;  						case "register": cond1 = ".IsCPURegister"; break;  						case "constant": cond1 = ".IsConstant"; break;  						case "eax": cond1 = ".IsCPURegister"; cond2 = ".Register.RegisterCode == 0"; break;  						case "ecx": cond1 = ".IsCPURegister"; cond2 = ".Register.RegisterCode == 1"; break;  						case "edx": cond1 = ".IsCPURegister"; cond2 = ".Register.RegisterCode == 2"; break;  						case "ebx": cond1 = ".IsCPURegister"; cond2 = ".Register.RegisterCode == 3"; break;  						case "esp": cond1 = ".IsCPURegister"; cond2 = ".Register.RegisterCode == 4"; break;  						case "ebp": cond1 = ".IsCPURegister"; cond2 = ".Register.RegisterCode == 5"; break;  						case "esi": cond1 = ".IsCPURegister"; cond2 = ".Register.RegisterCode == 6"; break;  						case "edi": cond1 = ".IsCPURegister"; cond2 = ".Register.RegisterCode == 7"; break;  						case "zero":  						case "0": cond1 = ".IsConstantZero"; break;  						case "one":  						case "1": cond1 = ".IsConstantOne"; break;  						case "sbyte":  						case "signedbyte": cond1 = ".IsConstant"; cond2 = ".ConstantSigned32 >= " + sbyte.MinValue.ToString(); cond3 = ".ConstantSigned32 <= " + sbyte.MaxValue.ToString(); break;  						case "signedshort": cond1 = ".IsConstant"; cond2 = ".ConstantSigned32 >= " + short.MinValue.ToString(); cond3 = ".ConstantSigned32 <= " + short.MaxValue.ToString(); break;  						case "signint": cond1 = ".IsConstant"; cond2 = ".ConstantSigned32 >= " + int.MinValue.ToString(); cond3 = ".ConstantSigned32 <= " + int.MaxValue.ToString(); break;  					}
