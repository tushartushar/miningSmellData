Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The method has 189 lines of code.
Complex Method,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,Cyclomatic complexity of the method is 8
Complex Method,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,Cyclomatic complexity of the method is 23
Complex Method,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,Cyclomatic complexity of the method is 10
Complex Method,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,FindEntry,Cyclomatic complexity of the method is 8
Complex Method,Mosa.FileSystem.VFS,PathSplitter,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\VFS\PathSplitter.cs,MarkSeperators,Cyclomatic complexity of the method is 8
Long Parameter List,Mosa.FileSystem.VFS,VirtualFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\VFS\VirtualFileSystem.cs,Create,The method has 5 parameters. Parameters: path' type' settings' access' share
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The length of the statement  "			SerialNumber = bootSector.GetBytes(fatType != FatType.FAT32 ? BootSector.IDSerialNumber : BootSector.FAT32_IDSerialNumber' 4); " is 126.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "				bootSector.SetByte(BootSector.MediaDescriptor' 0xF0); // 0xF0 = 3.5" Double Sided' 80 tracks per side' 18 sectors per track (1.44MB). " is 133.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "				bootSector.SetBytes(BootSector.IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length)); " is 120.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "					bootSector.SetString(BootSector.VolumeLabel' fatSettings.VolumeLabel' (uint)Math.Min(11' fatSettings.VolumeLabel.Length)); " is 122.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "					bootSector.SetBytes(BootSector.OSBootCode' fatSettings.OSBootCode' BootSector.OSBootCode' (uint)Math.Min(448' fatSettings.OSBootCode.Length)); " is 142.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "				bootSector.SetBytes(BootSector.FAT32_IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length)); " is 126.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "				bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11)); " is 160.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The length of the statement  "					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' 0' (uint)Math.Min(420' fatSettings.OSBootCode.Length)); " is 128.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,IsClusterReserved,The length of the statement  "			return ((cluster & fatMask) == 0x00) || (((cluster & fatMask) >= reservedClusterMark) && ((cluster & fatMask) < badClusterMark)); " is 129.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,FindEntry,The length of the statement  "						return new FatFileLocation(GetClusterEntry(directory.Data' index' fatType)' activeSector' index' (attribute & FatFileAttributes.SubDirectory) != 0); " is 148.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,FindEntry,The length of the statement  "					if ((IsClusterLast(nextCluster)) || (IsClusterBad(nextCluster)) || (IsClusterFree(nextCluster)) || (IsClusterReserved(nextCluster))) " is 132.
Long Statement,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetVolumeName,The length of the statement  "			directory.SetByte(Entry.FileAttributes + (location.DirectorySectorIndex * Entry.EntrySize)' (byte)FatFileAttributes.VolumeLabel); " is 129.
Long Statement,Mosa.FileSystem.VFS,PathResolver,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\VFS\PathResolver.cs,Resolve,The length of the statement  "			// FIXME: Remove the root argument. The file system root should be unique for a process as part of a security model similar to jails' e.g. give apps from " is 153.
Long Statement,Mosa.FileSystem.VFS,PathResolver,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\VFS\PathResolver.cs,Resolve,The length of the statement  "				if ((entry == null) && (PathResolutionFlags.DoNotThrowNotFoundException != (PathResolutionFlags.DoNotThrowNotFoundException & flags))) " is 134.
Complex Conditional,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The conditional expression  "(nbrFats == 0) || (nbrFats > 2) || (totalSectors == 0) || (sectorsPerFat == 0)"  is complex.
Complex Conditional,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,FindEntry,The conditional expression  "(IsClusterLast(nextCluster)) || (IsClusterBad(nextCluster)) || (IsClusterFree(nextCluster)) || (IsClusterReserved(nextCluster))"  is complex.
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadCluster,The following statement contains a magic number: return partition.ReadBlock(dataAreaStart + ((cluster - 2) * sectorsPerCluster)' sectorsPerCluster);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadCluster,The following statement contains a magic number: return partition.ReadBlock(dataAreaStart + ((cluster - 2) * sectorsPerCluster)' sectorsPerCluster' block);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,WriteCluster,The following statement contains a magic number: return partition.WriteBlock(dataAreaStart + ((cluster - 2) * sectorsPerCluster)' sectorsPerCluster' block);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: if (BlockSize != 512)   // only going to work with 512 sector sizes (for now)  				return false;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: VolumeLabel = bootSector.GetString(BootSector.VolumeLabel' 8).TrimEnd();
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: try  			{  				fatSectors = nbrFats * sectorsPerFat;  				clusterSizeInBytes = sectorsPerCluster * BlockSize;  				rootDirSectors = (((rootEntries * 32) + (bytesPerSector - 1)) / bytesPerSector);  				firstDataSector = reservedSectors + (nbrFats * sectorsPerFat) + rootDirSectors;  				totalSectors = (totalSectors16 != 0) ? totalSectors16 : totalSectors32;  				dataSectors = totalSectors - (reservedSectors + (nbrFats * sectorsPerFat) + rootDirSectors);  				totalClusters = dataSectors / sectorsPerCluster;  				entriesPerSector = (bytesPerSector / 32);  				firstRootDirectorySector = reservedSectors + fatSectors;  				dataAreaStart = firstRootDirectorySector + rootDirSectors;  			}  			catch  			{  				return false;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: try  			{  				fatSectors = nbrFats * sectorsPerFat;  				clusterSizeInBytes = sectorsPerCluster * BlockSize;  				rootDirSectors = (((rootEntries * 32) + (bytesPerSector - 1)) / bytesPerSector);  				firstDataSector = reservedSectors + (nbrFats * sectorsPerFat) + rootDirSectors;  				totalSectors = (totalSectors16 != 0) ? totalSectors16 : totalSectors32;  				dataSectors = totalSectors - (reservedSectors + (nbrFats * sectorsPerFat) + rootDirSectors);  				totalClusters = dataSectors / sectorsPerCluster;  				entriesPerSector = (bytesPerSector / 32);  				firstRootDirectorySector = reservedSectors + fatSectors;  				dataAreaStart = firstRootDirectorySector + rootDirSectors;  			}  			catch  			{  				return false;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: if ((nbrFats == 0) || (nbrFats > 2) || (totalSectors == 0) || (sectorsPerFat == 0))  				return false;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: if (totalClusters < 4085)  				fatType = FatType.FAT12;  			else if (totalClusters < 65525)  				fatType = FatType.FAT16;  			else  				fatType = FatType.FAT32;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: if (totalClusters < 4085)  				fatType = FatType.FAT12;  			else if (totalClusters < 65525)  				fatType = FatType.FAT16;  			else  				fatType = FatType.FAT32;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: if (fatType == FatType.FAT12)  			{  				reservedClusterMark = 0xFF0;  				endOfClusterMark = 0x0FF8;  				badClusterMark = 0x0FF7;  				fatMask = 0xFFFFFFFF;  				fatEntries = sectorsPerFat * 3 * BlockSize / 2;  			}  			else if (fatType == FatType.FAT16)  			{  				reservedClusterMark = 0xFFF0;  				endOfClusterMark = 0xFFF8;  				badClusterMark = 0xFFF7;  				fatMask = 0xFFFFFFFF;  				fatEntries = sectorsPerFat * BlockSize / 2;  			}  			else  			{ //  if (type == FatType.FAT32) {  				reservedClusterMark = 0xFFF0;  				endOfClusterMark = 0x0FFFFFF8;  				badClusterMark = 0x0FFFFFF7;  				fatMask = 0x0FFFFFFF;  				fatEntries = sectorsPerFat * BlockSize / 4;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: if (fatType == FatType.FAT12)  			{  				reservedClusterMark = 0xFF0;  				endOfClusterMark = 0x0FF8;  				badClusterMark = 0x0FF7;  				fatMask = 0xFFFFFFFF;  				fatEntries = sectorsPerFat * 3 * BlockSize / 2;  			}  			else if (fatType == FatType.FAT16)  			{  				reservedClusterMark = 0xFFF0;  				endOfClusterMark = 0xFFF8;  				badClusterMark = 0xFFF7;  				fatMask = 0xFFFFFFFF;  				fatEntries = sectorsPerFat * BlockSize / 2;  			}  			else  			{ //  if (type == FatType.FAT32) {  				reservedClusterMark = 0xFFF0;  				endOfClusterMark = 0x0FFFFFF8;  				badClusterMark = 0x0FFFFFF7;  				fatMask = 0x0FFFFFFF;  				fatEntries = sectorsPerFat * BlockSize / 4;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: if (fatType == FatType.FAT12)  			{  				reservedClusterMark = 0xFF0;  				endOfClusterMark = 0x0FF8;  				badClusterMark = 0x0FF7;  				fatMask = 0xFFFFFFFF;  				fatEntries = sectorsPerFat * 3 * BlockSize / 2;  			}  			else if (fatType == FatType.FAT16)  			{  				reservedClusterMark = 0xFFF0;  				endOfClusterMark = 0xFFF8;  				badClusterMark = 0xFFF7;  				fatMask = 0xFFFFFFFF;  				fatEntries = sectorsPerFat * BlockSize / 2;  			}  			else  			{ //  if (type == FatType.FAT32) {  				reservedClusterMark = 0xFFF0;  				endOfClusterMark = 0x0FFFFFF8;  				badClusterMark = 0x0FFFFFF7;  				fatMask = 0x0FFFFFFF;  				fatEntries = sectorsPerFat * BlockSize / 4;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: if (fatType == FatType.FAT12)  			{  				reservedClusterMark = 0xFF0;  				endOfClusterMark = 0x0FF8;  				badClusterMark = 0x0FF7;  				fatMask = 0xFFFFFFFF;  				fatEntries = sectorsPerFat * 3 * BlockSize / 2;  			}  			else if (fatType == FatType.FAT16)  			{  				reservedClusterMark = 0xFFF0;  				endOfClusterMark = 0xFFF8;  				badClusterMark = 0xFFF7;  				fatMask = 0xFFFFFFFF;  				fatEntries = sectorsPerFat * BlockSize / 2;  			}  			else  			{ //  if (type == FatType.FAT32) {  				reservedClusterMark = 0xFFF0;  				endOfClusterMark = 0x0FFFFFF8;  				badClusterMark = 0x0FFFFFF7;  				fatMask = 0x0FFFFFFF;  				fatEntries = sectorsPerFat * BlockSize / 4;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ReadBootSector,The following statement contains a magic number: SerialNumber = bootSector.GetBytes(fatType != FatType.FAT32 ? BootSector.IDSerialNumber : BootSector.FAT32_IDSerialNumber' 4);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: bytesPerSector = 512;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: nbrFats = 2;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				reservedSectors = 32;  				rootEntries = 0;  			}  			else  			{  				reservedSectors = 1;  				rootEntries = 512;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				reservedSectors = 32;  				rootEntries = 0;  			}  			else  			{  				reservedSectors = 1;  				rootEntries = 512;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: rootDirSectors = (((rootEntries * 32) + (bytesPerSector - 1)) / bytesPerSector);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: uint val2 = (uint)((sectorsPerCluster * 256) + nbrFats);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  				val2 /= 2;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: var bootSector = new DataBlock(512);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType != FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' (ushort)sectorsPerFat);  				if (fatSettings.FloppyMedia)  					bootSector.SetByte(BootSector.PhysicalDriveNbr' 0x00);  				else  					bootSector.SetByte(BootSector.PhysicalDriveNbr' 0x80);    				bootSector.SetByte(BootSector.ReservedCurrentHead' 0);  				bootSector.SetByte(BootSector.ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));    				if (string.IsNullOrEmpty(fatSettings.VolumeLabel))  				{  					bootSector.SetString(BootSector.VolumeLabel' "NO NAME    ");  				}  				else  				{  					bootSector.SetString(BootSector.VolumeLabel' "           ");  // 11 blank spaces  					bootSector.SetString(BootSector.VolumeLabel' fatSettings.VolumeLabel' (uint)Math.Min(11' fatSettings.VolumeLabel.Length));  				}    				if (fatSettings.OSBootCode != null)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.OSBootCode' fatSettings.OSBootCode' BootSector.OSBootCode' (uint)Math.Min(448' fatSettings.OSBootCode.Length));  				}    				if (fatType == FatType.FAT12)  					bootSector.SetString(BootSector.FATType' "FAT12   ");  				else  					bootSector.SetString(BootSector.FATType' "FAT16   ");  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType != FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' (ushort)sectorsPerFat);  				if (fatSettings.FloppyMedia)  					bootSector.SetByte(BootSector.PhysicalDriveNbr' 0x00);  				else  					bootSector.SetByte(BootSector.PhysicalDriveNbr' 0x80);    				bootSector.SetByte(BootSector.ReservedCurrentHead' 0);  				bootSector.SetByte(BootSector.ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));    				if (string.IsNullOrEmpty(fatSettings.VolumeLabel))  				{  					bootSector.SetString(BootSector.VolumeLabel' "NO NAME    ");  				}  				else  				{  					bootSector.SetString(BootSector.VolumeLabel' "           ");  // 11 blank spaces  					bootSector.SetString(BootSector.VolumeLabel' fatSettings.VolumeLabel' (uint)Math.Min(11' fatSettings.VolumeLabel.Length));  				}    				if (fatSettings.OSBootCode != null)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.OSBootCode' fatSettings.OSBootCode' BootSector.OSBootCode' (uint)Math.Min(448' fatSettings.OSBootCode.Length));  				}    				if (fatType == FatType.FAT12)  					bootSector.SetString(BootSector.FATType' "FAT12   ");  				else  					bootSector.SetString(BootSector.FATType' "FAT16   ");  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType != FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' (ushort)sectorsPerFat);  				if (fatSettings.FloppyMedia)  					bootSector.SetByte(BootSector.PhysicalDriveNbr' 0x00);  				else  					bootSector.SetByte(BootSector.PhysicalDriveNbr' 0x80);    				bootSector.SetByte(BootSector.ReservedCurrentHead' 0);  				bootSector.SetByte(BootSector.ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));    				if (string.IsNullOrEmpty(fatSettings.VolumeLabel))  				{  					bootSector.SetString(BootSector.VolumeLabel' "NO NAME    ");  				}  				else  				{  					bootSector.SetString(BootSector.VolumeLabel' "           ");  // 11 blank spaces  					bootSector.SetString(BootSector.VolumeLabel' fatSettings.VolumeLabel' (uint)Math.Min(11' fatSettings.VolumeLabel.Length));  				}    				if (fatSettings.OSBootCode != null)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.OSBootCode' fatSettings.OSBootCode' BootSector.OSBootCode' (uint)Math.Min(448' fatSettings.OSBootCode.Length));  				}    				if (fatType == FatType.FAT12)  					bootSector.SetString(BootSector.FATType' "FAT12   ");  				else  					bootSector.SetString(BootSector.FATType' "FAT16   ");  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType != FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' (ushort)sectorsPerFat);  				if (fatSettings.FloppyMedia)  					bootSector.SetByte(BootSector.PhysicalDriveNbr' 0x00);  				else  					bootSector.SetByte(BootSector.PhysicalDriveNbr' 0x80);    				bootSector.SetByte(BootSector.ReservedCurrentHead' 0);  				bootSector.SetByte(BootSector.ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));    				if (string.IsNullOrEmpty(fatSettings.VolumeLabel))  				{  					bootSector.SetString(BootSector.VolumeLabel' "NO NAME    ");  				}  				else  				{  					bootSector.SetString(BootSector.VolumeLabel' "           ");  // 11 blank spaces  					bootSector.SetString(BootSector.VolumeLabel' fatSettings.VolumeLabel' (uint)Math.Min(11' fatSettings.VolumeLabel.Length));  				}    				if (fatSettings.OSBootCode != null)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.OSBootCode' fatSettings.OSBootCode' BootSector.OSBootCode' (uint)Math.Min(448' fatSettings.OSBootCode.Length));  				}    				if (fatType == FatType.FAT12)  					bootSector.SetString(BootSector.FATType' "FAT12   ");  				else  					bootSector.SetString(BootSector.FATType' "FAT16   ");  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' 0);  				bootSector.SetUInt(BootSector.FAT32_SectorPerFAT' sectorsPerFat);  				bootSector.SetByte(BootSector.FAT32_Flags' 0);  				bootSector.SetUShort(BootSector.FAT32_Version' 0);  				bootSector.SetUInt(BootSector.FAT32_ClusterNumberOfRoot' 2);  				bootSector.SetUShort(BootSector.FAT32_SectorFSInformation' 1);  				bootSector.SetUShort(BootSector.FAT32_SecondBootSector' 6);  				bootSector.SetByte(BootSector.FAT32_PhysicalDriveNbr' 0x80);  				bootSector.SetByte(BootSector.FAT32_Reserved2' 0);  				bootSector.SetByte(BootSector.FAT32_ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.FAT32_IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));  				bootSector.SetString(BootSector.FAT32_VolumeLabel' "           ");  // 11 blank spaces  				bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11));  				bootSector.SetString(BootSector.FAT32_FATType' "FAT32   ");    				if (fatSettings.OSBootCode.Length == 512)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' BootSector.FAT32_OSBootCode' 420);  				}  				else  				{  					bootSector.SetByte(BootSector.JumpInstruction' 0xEB);  // 0xEB = JMP Instruction  					bootSector.SetByte(BootSector.JumpInstruction + 1' 0x58);  					bootSector.SetByte(BootSector.JumpInstruction + 2' 0x90);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' 0' (uint)Math.Min(420' fatSettings.OSBootCode.Length));  				}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' 0);  				bootSector.SetUInt(BootSector.FAT32_SectorPerFAT' sectorsPerFat);  				bootSector.SetByte(BootSector.FAT32_Flags' 0);  				bootSector.SetUShort(BootSector.FAT32_Version' 0);  				bootSector.SetUInt(BootSector.FAT32_ClusterNumberOfRoot' 2);  				bootSector.SetUShort(BootSector.FAT32_SectorFSInformation' 1);  				bootSector.SetUShort(BootSector.FAT32_SecondBootSector' 6);  				bootSector.SetByte(BootSector.FAT32_PhysicalDriveNbr' 0x80);  				bootSector.SetByte(BootSector.FAT32_Reserved2' 0);  				bootSector.SetByte(BootSector.FAT32_ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.FAT32_IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));  				bootSector.SetString(BootSector.FAT32_VolumeLabel' "           ");  // 11 blank spaces  				bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11));  				bootSector.SetString(BootSector.FAT32_FATType' "FAT32   ");    				if (fatSettings.OSBootCode.Length == 512)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' BootSector.FAT32_OSBootCode' 420);  				}  				else  				{  					bootSector.SetByte(BootSector.JumpInstruction' 0xEB);  // 0xEB = JMP Instruction  					bootSector.SetByte(BootSector.JumpInstruction + 1' 0x58);  					bootSector.SetByte(BootSector.JumpInstruction + 2' 0x90);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' 0' (uint)Math.Min(420' fatSettings.OSBootCode.Length));  				}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' 0);  				bootSector.SetUInt(BootSector.FAT32_SectorPerFAT' sectorsPerFat);  				bootSector.SetByte(BootSector.FAT32_Flags' 0);  				bootSector.SetUShort(BootSector.FAT32_Version' 0);  				bootSector.SetUInt(BootSector.FAT32_ClusterNumberOfRoot' 2);  				bootSector.SetUShort(BootSector.FAT32_SectorFSInformation' 1);  				bootSector.SetUShort(BootSector.FAT32_SecondBootSector' 6);  				bootSector.SetByte(BootSector.FAT32_PhysicalDriveNbr' 0x80);  				bootSector.SetByte(BootSector.FAT32_Reserved2' 0);  				bootSector.SetByte(BootSector.FAT32_ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.FAT32_IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));  				bootSector.SetString(BootSector.FAT32_VolumeLabel' "           ");  // 11 blank spaces  				bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11));  				bootSector.SetString(BootSector.FAT32_FATType' "FAT32   ");    				if (fatSettings.OSBootCode.Length == 512)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' BootSector.FAT32_OSBootCode' 420);  				}  				else  				{  					bootSector.SetByte(BootSector.JumpInstruction' 0xEB);  // 0xEB = JMP Instruction  					bootSector.SetByte(BootSector.JumpInstruction + 1' 0x58);  					bootSector.SetByte(BootSector.JumpInstruction + 2' 0x90);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' 0' (uint)Math.Min(420' fatSettings.OSBootCode.Length));  				}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' 0);  				bootSector.SetUInt(BootSector.FAT32_SectorPerFAT' sectorsPerFat);  				bootSector.SetByte(BootSector.FAT32_Flags' 0);  				bootSector.SetUShort(BootSector.FAT32_Version' 0);  				bootSector.SetUInt(BootSector.FAT32_ClusterNumberOfRoot' 2);  				bootSector.SetUShort(BootSector.FAT32_SectorFSInformation' 1);  				bootSector.SetUShort(BootSector.FAT32_SecondBootSector' 6);  				bootSector.SetByte(BootSector.FAT32_PhysicalDriveNbr' 0x80);  				bootSector.SetByte(BootSector.FAT32_Reserved2' 0);  				bootSector.SetByte(BootSector.FAT32_ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.FAT32_IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));  				bootSector.SetString(BootSector.FAT32_VolumeLabel' "           ");  // 11 blank spaces  				bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11));  				bootSector.SetString(BootSector.FAT32_FATType' "FAT32   ");    				if (fatSettings.OSBootCode.Length == 512)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' BootSector.FAT32_OSBootCode' 420);  				}  				else  				{  					bootSector.SetByte(BootSector.JumpInstruction' 0xEB);  // 0xEB = JMP Instruction  					bootSector.SetByte(BootSector.JumpInstruction + 1' 0x58);  					bootSector.SetByte(BootSector.JumpInstruction + 2' 0x90);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' 0' (uint)Math.Min(420' fatSettings.OSBootCode.Length));  				}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' 0);  				bootSector.SetUInt(BootSector.FAT32_SectorPerFAT' sectorsPerFat);  				bootSector.SetByte(BootSector.FAT32_Flags' 0);  				bootSector.SetUShort(BootSector.FAT32_Version' 0);  				bootSector.SetUInt(BootSector.FAT32_ClusterNumberOfRoot' 2);  				bootSector.SetUShort(BootSector.FAT32_SectorFSInformation' 1);  				bootSector.SetUShort(BootSector.FAT32_SecondBootSector' 6);  				bootSector.SetByte(BootSector.FAT32_PhysicalDriveNbr' 0x80);  				bootSector.SetByte(BootSector.FAT32_Reserved2' 0);  				bootSector.SetByte(BootSector.FAT32_ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.FAT32_IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));  				bootSector.SetString(BootSector.FAT32_VolumeLabel' "           ");  // 11 blank spaces  				bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11));  				bootSector.SetString(BootSector.FAT32_FATType' "FAT32   ");    				if (fatSettings.OSBootCode.Length == 512)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' BootSector.FAT32_OSBootCode' 420);  				}  				else  				{  					bootSector.SetByte(BootSector.JumpInstruction' 0xEB);  // 0xEB = JMP Instruction  					bootSector.SetByte(BootSector.JumpInstruction + 1' 0x58);  					bootSector.SetByte(BootSector.JumpInstruction + 2' 0x90);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' 0' (uint)Math.Min(420' fatSettings.OSBootCode.Length));  				}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' 0);  				bootSector.SetUInt(BootSector.FAT32_SectorPerFAT' sectorsPerFat);  				bootSector.SetByte(BootSector.FAT32_Flags' 0);  				bootSector.SetUShort(BootSector.FAT32_Version' 0);  				bootSector.SetUInt(BootSector.FAT32_ClusterNumberOfRoot' 2);  				bootSector.SetUShort(BootSector.FAT32_SectorFSInformation' 1);  				bootSector.SetUShort(BootSector.FAT32_SecondBootSector' 6);  				bootSector.SetByte(BootSector.FAT32_PhysicalDriveNbr' 0x80);  				bootSector.SetByte(BootSector.FAT32_Reserved2' 0);  				bootSector.SetByte(BootSector.FAT32_ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.FAT32_IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));  				bootSector.SetString(BootSector.FAT32_VolumeLabel' "           ");  // 11 blank spaces  				bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11));  				bootSector.SetString(BootSector.FAT32_FATType' "FAT32   ");    				if (fatSettings.OSBootCode.Length == 512)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' BootSector.FAT32_OSBootCode' 420);  				}  				else  				{  					bootSector.SetByte(BootSector.JumpInstruction' 0xEB);  // 0xEB = JMP Instruction  					bootSector.SetByte(BootSector.JumpInstruction + 1' 0x58);  					bootSector.SetByte(BootSector.JumpInstruction + 2' 0x90);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' 0' (uint)Math.Min(420' fatSettings.OSBootCode.Length));  				}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' 0);  				bootSector.SetUInt(BootSector.FAT32_SectorPerFAT' sectorsPerFat);  				bootSector.SetByte(BootSector.FAT32_Flags' 0);  				bootSector.SetUShort(BootSector.FAT32_Version' 0);  				bootSector.SetUInt(BootSector.FAT32_ClusterNumberOfRoot' 2);  				bootSector.SetUShort(BootSector.FAT32_SectorFSInformation' 1);  				bootSector.SetUShort(BootSector.FAT32_SecondBootSector' 6);  				bootSector.SetByte(BootSector.FAT32_PhysicalDriveNbr' 0x80);  				bootSector.SetByte(BootSector.FAT32_Reserved2' 0);  				bootSector.SetByte(BootSector.FAT32_ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.FAT32_IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));  				bootSector.SetString(BootSector.FAT32_VolumeLabel' "           ");  // 11 blank spaces  				bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11));  				bootSector.SetString(BootSector.FAT32_FATType' "FAT32   ");    				if (fatSettings.OSBootCode.Length == 512)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' BootSector.FAT32_OSBootCode' 420);  				}  				else  				{  					bootSector.SetByte(BootSector.JumpInstruction' 0xEB);  // 0xEB = JMP Instruction  					bootSector.SetByte(BootSector.JumpInstruction + 1' 0x58);  					bootSector.SetByte(BootSector.JumpInstruction + 2' 0x90);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' 0' (uint)Math.Min(420' fatSettings.OSBootCode.Length));  				}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' 0);  				bootSector.SetUInt(BootSector.FAT32_SectorPerFAT' sectorsPerFat);  				bootSector.SetByte(BootSector.FAT32_Flags' 0);  				bootSector.SetUShort(BootSector.FAT32_Version' 0);  				bootSector.SetUInt(BootSector.FAT32_ClusterNumberOfRoot' 2);  				bootSector.SetUShort(BootSector.FAT32_SectorFSInformation' 1);  				bootSector.SetUShort(BootSector.FAT32_SecondBootSector' 6);  				bootSector.SetByte(BootSector.FAT32_PhysicalDriveNbr' 0x80);  				bootSector.SetByte(BootSector.FAT32_Reserved2' 0);  				bootSector.SetByte(BootSector.FAT32_ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.FAT32_IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));  				bootSector.SetString(BootSector.FAT32_VolumeLabel' "           ");  // 11 blank spaces  				bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11));  				bootSector.SetString(BootSector.FAT32_FATType' "FAT32   ");    				if (fatSettings.OSBootCode.Length == 512)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' BootSector.FAT32_OSBootCode' 420);  				}  				else  				{  					bootSector.SetByte(BootSector.JumpInstruction' 0xEB);  // 0xEB = JMP Instruction  					bootSector.SetByte(BootSector.JumpInstruction + 1' 0x58);  					bootSector.SetByte(BootSector.JumpInstruction + 2' 0x90);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' 0' (uint)Math.Min(420' fatSettings.OSBootCode.Length));  				}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' 0);  				bootSector.SetUInt(BootSector.FAT32_SectorPerFAT' sectorsPerFat);  				bootSector.SetByte(BootSector.FAT32_Flags' 0);  				bootSector.SetUShort(BootSector.FAT32_Version' 0);  				bootSector.SetUInt(BootSector.FAT32_ClusterNumberOfRoot' 2);  				bootSector.SetUShort(BootSector.FAT32_SectorFSInformation' 1);  				bootSector.SetUShort(BootSector.FAT32_SecondBootSector' 6);  				bootSector.SetByte(BootSector.FAT32_PhysicalDriveNbr' 0x80);  				bootSector.SetByte(BootSector.FAT32_Reserved2' 0);  				bootSector.SetByte(BootSector.FAT32_ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.FAT32_IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));  				bootSector.SetString(BootSector.FAT32_VolumeLabel' "           ");  // 11 blank spaces  				bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11));  				bootSector.SetString(BootSector.FAT32_FATType' "FAT32   ");    				if (fatSettings.OSBootCode.Length == 512)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' BootSector.FAT32_OSBootCode' 420);  				}  				else  				{  					bootSector.SetByte(BootSector.JumpInstruction' 0xEB);  // 0xEB = JMP Instruction  					bootSector.SetByte(BootSector.JumpInstruction + 1' 0x58);  					bootSector.SetByte(BootSector.JumpInstruction + 2' 0x90);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' 0' (uint)Math.Min(420' fatSettings.OSBootCode.Length));  				}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				bootSector.SetUShort(BootSector.SectorsPerFAT' 0);  				bootSector.SetUInt(BootSector.FAT32_SectorPerFAT' sectorsPerFat);  				bootSector.SetByte(BootSector.FAT32_Flags' 0);  				bootSector.SetUShort(BootSector.FAT32_Version' 0);  				bootSector.SetUInt(BootSector.FAT32_ClusterNumberOfRoot' 2);  				bootSector.SetUShort(BootSector.FAT32_SectorFSInformation' 1);  				bootSector.SetUShort(BootSector.FAT32_SecondBootSector' 6);  				bootSector.SetByte(BootSector.FAT32_PhysicalDriveNbr' 0x80);  				bootSector.SetByte(BootSector.FAT32_Reserved2' 0);  				bootSector.SetByte(BootSector.FAT32_ExtendedBootSignature' 0x29);  				bootSector.SetBytes(BootSector.FAT32_IDSerialNumber' fatSettings.SerialID' 0' (uint)Math.Min(4' fatSettings.SerialID.Length));  				bootSector.SetString(BootSector.FAT32_VolumeLabel' "           ");  // 11 blank spaces  				bootSector.SetString(BootSector.FAT32_VolumeLabel' fatSettings.VolumeLabel' (uint)(fatSettings.VolumeLabel.Length <= 11 ? fatSettings.VolumeLabel.Length : 11));  				bootSector.SetString(BootSector.FAT32_FATType' "FAT32   ");    				if (fatSettings.OSBootCode.Length == 512)  				{  					bootSector.SetBytes(BootSector.JumpInstruction' fatSettings.OSBootCode' BootSector.JumpInstruction' 3);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' BootSector.FAT32_OSBootCode' 420);  				}  				else  				{  					bootSector.SetByte(BootSector.JumpInstruction' 0xEB);  // 0xEB = JMP Instruction  					bootSector.SetByte(BootSector.JumpInstruction + 1' 0x58);  					bootSector.SetByte(BootSector.JumpInstruction + 2' 0x90);  					bootSector.SetBytes(BootSector.FAT32_OSBootCode' fatSettings.OSBootCode' 0' (uint)Math.Min(420' fatSettings.OSBootCode.Length));  				}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				// Write backup Boot Sector  				if (fatType == FatType.FAT32)  					partition.WriteBlock(6' 1' bootSector.Data);    				// Create FSInfo Structure  				var infoSector = new DataBlock(512);    				infoSector.SetUInt(FSInfo.FSI_LeadSignature' 0x41615252);    				//FSInfo.FSI_Reserved1  				infoSector.SetUInt(FSInfo.FSI_StructureSigature' 0x61417272);  				infoSector.SetUInt(FSInfo.FSI_FreeCount' 0xFFFFFFFF);  				infoSector.SetUInt(FSInfo.FSI_NextFree' 0xFFFFFFFF);    				//FSInfo.FSI_Reserved2  				bootSector.SetUInt(FSInfo.FSI_TrailSignature' 0xAA550000);    				// Write FSInfo Structure  				partition.WriteBlock(1' 1' infoSector.Data);  				partition.WriteBlock(7' 1' infoSector.Data);    				// Create 2nd sector  				var secondSector = new DataBlock(512);    				secondSector.SetUShort(FSInfo.FSI_TrailSignature2' 0xAA55);    				partition.WriteBlock(2' 1' secondSector.Data);  				partition.WriteBlock(8' 1' secondSector.Data);  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				// Write backup Boot Sector  				if (fatType == FatType.FAT32)  					partition.WriteBlock(6' 1' bootSector.Data);    				// Create FSInfo Structure  				var infoSector = new DataBlock(512);    				infoSector.SetUInt(FSInfo.FSI_LeadSignature' 0x41615252);    				//FSInfo.FSI_Reserved1  				infoSector.SetUInt(FSInfo.FSI_StructureSigature' 0x61417272);  				infoSector.SetUInt(FSInfo.FSI_FreeCount' 0xFFFFFFFF);  				infoSector.SetUInt(FSInfo.FSI_NextFree' 0xFFFFFFFF);    				//FSInfo.FSI_Reserved2  				bootSector.SetUInt(FSInfo.FSI_TrailSignature' 0xAA550000);    				// Write FSInfo Structure  				partition.WriteBlock(1' 1' infoSector.Data);  				partition.WriteBlock(7' 1' infoSector.Data);    				// Create 2nd sector  				var secondSector = new DataBlock(512);    				secondSector.SetUShort(FSInfo.FSI_TrailSignature2' 0xAA55);    				partition.WriteBlock(2' 1' secondSector.Data);  				partition.WriteBlock(8' 1' secondSector.Data);  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				// Write backup Boot Sector  				if (fatType == FatType.FAT32)  					partition.WriteBlock(6' 1' bootSector.Data);    				// Create FSInfo Structure  				var infoSector = new DataBlock(512);    				infoSector.SetUInt(FSInfo.FSI_LeadSignature' 0x41615252);    				//FSInfo.FSI_Reserved1  				infoSector.SetUInt(FSInfo.FSI_StructureSigature' 0x61417272);  				infoSector.SetUInt(FSInfo.FSI_FreeCount' 0xFFFFFFFF);  				infoSector.SetUInt(FSInfo.FSI_NextFree' 0xFFFFFFFF);    				//FSInfo.FSI_Reserved2  				bootSector.SetUInt(FSInfo.FSI_TrailSignature' 0xAA550000);    				// Write FSInfo Structure  				partition.WriteBlock(1' 1' infoSector.Data);  				partition.WriteBlock(7' 1' infoSector.Data);    				// Create 2nd sector  				var secondSector = new DataBlock(512);    				secondSector.SetUShort(FSInfo.FSI_TrailSignature2' 0xAA55);    				partition.WriteBlock(2' 1' secondSector.Data);  				partition.WriteBlock(8' 1' secondSector.Data);  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				// Write backup Boot Sector  				if (fatType == FatType.FAT32)  					partition.WriteBlock(6' 1' bootSector.Data);    				// Create FSInfo Structure  				var infoSector = new DataBlock(512);    				infoSector.SetUInt(FSInfo.FSI_LeadSignature' 0x41615252);    				//FSInfo.FSI_Reserved1  				infoSector.SetUInt(FSInfo.FSI_StructureSigature' 0x61417272);  				infoSector.SetUInt(FSInfo.FSI_FreeCount' 0xFFFFFFFF);  				infoSector.SetUInt(FSInfo.FSI_NextFree' 0xFFFFFFFF);    				//FSInfo.FSI_Reserved2  				bootSector.SetUInt(FSInfo.FSI_TrailSignature' 0xAA550000);    				// Write FSInfo Structure  				partition.WriteBlock(1' 1' infoSector.Data);  				partition.WriteBlock(7' 1' infoSector.Data);    				// Create 2nd sector  				var secondSector = new DataBlock(512);    				secondSector.SetUShort(FSInfo.FSI_TrailSignature2' 0xAA55);    				partition.WriteBlock(2' 1' secondSector.Data);  				partition.WriteBlock(8' 1' secondSector.Data);  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				// Write backup Boot Sector  				if (fatType == FatType.FAT32)  					partition.WriteBlock(6' 1' bootSector.Data);    				// Create FSInfo Structure  				var infoSector = new DataBlock(512);    				infoSector.SetUInt(FSInfo.FSI_LeadSignature' 0x41615252);    				//FSInfo.FSI_Reserved1  				infoSector.SetUInt(FSInfo.FSI_StructureSigature' 0x61417272);  				infoSector.SetUInt(FSInfo.FSI_FreeCount' 0xFFFFFFFF);  				infoSector.SetUInt(FSInfo.FSI_NextFree' 0xFFFFFFFF);    				//FSInfo.FSI_Reserved2  				bootSector.SetUInt(FSInfo.FSI_TrailSignature' 0xAA550000);    				// Write FSInfo Structure  				partition.WriteBlock(1' 1' infoSector.Data);  				partition.WriteBlock(7' 1' infoSector.Data);    				// Create 2nd sector  				var secondSector = new DataBlock(512);    				secondSector.SetUShort(FSInfo.FSI_TrailSignature2' 0xAA55);    				partition.WriteBlock(2' 1' secondSector.Data);  				partition.WriteBlock(8' 1' secondSector.Data);  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT32)  			{  				// Write backup Boot Sector  				if (fatType == FatType.FAT32)  					partition.WriteBlock(6' 1' bootSector.Data);    				// Create FSInfo Structure  				var infoSector = new DataBlock(512);    				infoSector.SetUInt(FSInfo.FSI_LeadSignature' 0x41615252);    				//FSInfo.FSI_Reserved1  				infoSector.SetUInt(FSInfo.FSI_StructureSigature' 0x61417272);  				infoSector.SetUInt(FSInfo.FSI_FreeCount' 0xFFFFFFFF);  				infoSector.SetUInt(FSInfo.FSI_NextFree' 0xFFFFFFFF);    				//FSInfo.FSI_Reserved2  				bootSector.SetUInt(FSInfo.FSI_TrailSignature' 0xAA550000);    				// Write FSInfo Structure  				partition.WriteBlock(1' 1' infoSector.Data);  				partition.WriteBlock(7' 1' infoSector.Data);    				// Create 2nd sector  				var secondSector = new DataBlock(512);    				secondSector.SetUShort(FSInfo.FSI_TrailSignature2' 0xAA55);    				partition.WriteBlock(2' 1' secondSector.Data);  				partition.WriteBlock(8' 1' secondSector.Data);  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: var emptyFat = new DataBlock(512);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (nbrFats == 2)  			{  				for (uint i = 1; i < sectorsPerFat; i++)  				{  					partition.WriteBlock(reservedSectors + sectorsPerFat + i' 1' emptyFat.Data);  				}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: var firstFat = new DataBlock(512);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT12)  			{  				firstFat.SetByte(1' 0xFF);  				firstFat.SetByte(2' 0xFF); // 0xF8  			}  			else if (fatType == FatType.FAT16)  			{  				firstFat.SetUShort(0' 0xFFFF);  				firstFat.SetUShort(2' 0xFFFF); // 0xFFF8  			}  			else // if (type == FatType.FAT32)  			{  				firstFat.SetUInt(0' 0x0FFFFFFF);  				firstFat.SetUInt(4' 0x0FFFFFFF); // 0x0FFFFFF8  				firstFat.SetUInt(8' 0x0FFFFFFF); // Also reserve the 2nd cluster for root directory  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT12)  			{  				firstFat.SetByte(1' 0xFF);  				firstFat.SetByte(2' 0xFF); // 0xF8  			}  			else if (fatType == FatType.FAT16)  			{  				firstFat.SetUShort(0' 0xFFFF);  				firstFat.SetUShort(2' 0xFFFF); // 0xFFF8  			}  			else // if (type == FatType.FAT32)  			{  				firstFat.SetUInt(0' 0x0FFFFFFF);  				firstFat.SetUInt(4' 0x0FFFFFFF); // 0x0FFFFFF8  				firstFat.SetUInt(8' 0x0FFFFFFF); // Also reserve the 2nd cluster for root directory  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT12)  			{  				firstFat.SetByte(1' 0xFF);  				firstFat.SetByte(2' 0xFF); // 0xF8  			}  			else if (fatType == FatType.FAT16)  			{  				firstFat.SetUShort(0' 0xFFFF);  				firstFat.SetUShort(2' 0xFFFF); // 0xFFF8  			}  			else // if (type == FatType.FAT32)  			{  				firstFat.SetUInt(0' 0x0FFFFFFF);  				firstFat.SetUInt(4' 0x0FFFFFFF); // 0x0FFFFFF8  				firstFat.SetUInt(8' 0x0FFFFFFF); // Also reserve the 2nd cluster for root directory  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (fatType == FatType.FAT12)  			{  				firstFat.SetByte(1' 0xFF);  				firstFat.SetByte(2' 0xFF); // 0xF8  			}  			else if (fatType == FatType.FAT16)  			{  				firstFat.SetUShort(0' 0xFFFF);  				firstFat.SetUShort(2' 0xFFFF); // 0xFFF8  			}  			else // if (type == FatType.FAT32)  			{  				firstFat.SetUInt(0' 0x0FFFFFFF);  				firstFat.SetUInt(4' 0x0FFFFFFF); // 0x0FFFFFF8  				firstFat.SetUInt(8' 0x0FFFFFFF); // Also reserve the 2nd cluster for root directory  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,Format,The following statement contains a magic number: if (nbrFats == 2)  				partition.WriteBlock(reservedSectors + sectorsPerFat' 1' firstFat.Data);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorByCluster,The following statement contains a magic number: return dataAreaStart + ((cluster - 2) * sectorsPerCluster);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetClusterEntryValue,The following statement contains a magic number: if (fatType == FatType.FAT12)  				fatoffset = (cluster + (cluster / 2));  			else if (fatType == FatType.FAT16)  				fatoffset = cluster * 2;  			else //if (type == FatType.FAT32)  				fatoffset = cluster * 4;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetClusterEntryValue,The following statement contains a magic number: if (fatType == FatType.FAT12)  				fatoffset = (cluster + (cluster / 2));  			else if (fatType == FatType.FAT16)  				fatoffset = cluster * 2;  			else //if (type == FatType.FAT32)  				fatoffset = cluster * 4;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetClusterEntryValue,The following statement contains a magic number: if (fatType == FatType.FAT12)  				fatoffset = (cluster + (cluster / 2));  			else if (fatType == FatType.FAT16)  				fatoffset = cluster * 2;  			else //if (type == FatType.FAT32)  				fatoffset = cluster * 4;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetClusterEntryValue,The following statement contains a magic number: if ((fatType == FatType.FAT12) && (sectorOffset == bytesPerSector - 1))  				nbrSectors = 2;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetClusterEntryValue,The following statement contains a magic number: if (fatType == FatType.FAT12)  			{  				clusterValue = fat.GetUShort(sectorOffset);  				if (cluster % 2 == 1)  					clusterValue >>= 4;  				else  					clusterValue &= 0x0FFF;  			}  			else if (fatType == FatType.FAT16)  			{  				clusterValue = fat.GetUShort(sectorOffset);  			}  			else //if (type == FatType.FAT32)  			{  				clusterValue = fat.GetUInt(sectorOffset) & 0x0FFFFFFF;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetClusterEntryValue,The following statement contains a magic number: if (fatType == FatType.FAT12)  			{  				clusterValue = fat.GetUShort(sectorOffset);  				if (cluster % 2 == 1)  					clusterValue >>= 4;  				else  					clusterValue &= 0x0FFF;  			}  			else if (fatType == FatType.FAT16)  			{  				clusterValue = fat.GetUShort(sectorOffset);  			}  			else //if (type == FatType.FAT32)  			{  				clusterValue = fat.GetUInt(sectorOffset) & 0x0FFFFFFF;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetClusterEntryValue,The following statement contains a magic number: if (fatType == FatType.FAT12)  				fatOffset = (cluster + (cluster / 2));  			else if (fatType == FatType.FAT16)  				fatOffset = cluster * 2;  			else //if (type == FatType.FAT32)  				fatOffset = cluster * 4;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetClusterEntryValue,The following statement contains a magic number: if (fatType == FatType.FAT12)  				fatOffset = (cluster + (cluster / 2));  			else if (fatType == FatType.FAT16)  				fatOffset = cluster * 2;  			else //if (type == FatType.FAT32)  				fatOffset = cluster * 4;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetClusterEntryValue,The following statement contains a magic number: if (fatType == FatType.FAT12)  				fatOffset = (cluster + (cluster / 2));  			else if (fatType == FatType.FAT16)  				fatOffset = cluster * 2;  			else //if (type == FatType.FAT32)  				fatOffset = cluster * 4;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetClusterEntryValue,The following statement contains a magic number: if ((fatType == FatType.FAT12) && (sectorOffset == bytesPerSector - 1))  				nbrSectors = 2;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetClusterEntryValue,The following statement contains a magic number: switch (fatType)  			{  				case FatType.FAT12:  					{  						uint clustervalue = fat.GetUShort(sectorOffset);    						if (cluster % 2 == 1)  							clustervalue = ((clustervalue & 0x000F) | (nextcluster << 4));  						else  							clustervalue = ((clustervalue & 0xF000) | (nextcluster & 0x0FFF));    						fat.SetUShort(sectorOffset' (ushort)clustervalue);  						break;  					}  				case FatType.FAT16:  					{  						fat.SetUShort(sectorOffset' (ushort)(nextcluster & 0xFFFF));  						break;  					}  				default:  					{  						fat.SetUInt(sectorOffset' nextcluster);  						break;  					}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetClusterEntryValue,The following statement contains a magic number: switch (fatType)  			{  				case FatType.FAT12:  					{  						uint clustervalue = fat.GetUShort(sectorOffset);    						if (cluster % 2 == 1)  							clustervalue = ((clustervalue & 0x000F) | (nextcluster << 4));  						else  							clustervalue = ((clustervalue & 0xF000) | (nextcluster & 0x0FFF));    						fat.SetUShort(sectorOffset' (ushort)clustervalue);  						break;  					}  				case FatType.FAT16:  					{  						fat.SetUShort(sectorOffset' (ushort)(nextcluster & 0xFFFF));  						break;  					}  				default:  					{  						fat.SetUInt(sectorOffset' nextcluster);  						break;  					}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetSectorsPerClusterByTotalSectors,The following statement contains a magic number: switch (type)  			{  				case FatType.FAT12:  					{  						if (sectors < 512) return 1;  						else if (sectors == 720) return 2;  						else if (sectors == 1440) return 2;  						else if (sectors <= 2880) return 1;  						else if (sectors <= 5760) return 2;  						else if (sectors <= 16384) return 4;  						else if (sectors <= 32768) return 8;  						else return 0;  					}  				case FatType.FAT16:  					{  						if (sectors < 8400) return 0;  						else if (sectors < 32680) return 2;  						else if (sectors < 262144) return 4;  						else if (sectors < 524288) return 8;  						else if (sectors < 1048576) return 16;  						else if (sectors < 2097152) return 32;  						else if (sectors < 4194304) return 64;  						else return 0;  					}  				case FatType.FAT32:  					{  						if (sectors < 66600) return 0;  						else if (sectors < 532480) return 1;  						else if (sectors < 16777216) return 8;  						else if (sectors < 33554432) return 16;  						else if (sectors < 67108864) return 32;  						else return 64;  					}  				default: return 0;  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: var name = new char[12];
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: for (uint i = 0; i < 8; i++)  				name[i] = (char)entry.GetByte(index + i + Entry.DOSName);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: int len = 8;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: for (int i = 7; i > 0; i--)  			{  				if (name[i] == ' ')  				{  					len--;  				}  				else  				{  					break;  				}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: for (uint i = 0; i < 3; i++)  				name[len + i] = (char)entry.GetByte(index + i + Entry.DOSExtension);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: len += 3;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: if (spaces == 3)  				spaces = 4;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,ExtractFileName,The following statement contains a magic number: if (spaces == 3)  				spaces = 4;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,IsValidFatCharacter,The following statement contains a magic number: if ((c >= 128) || (c <= 255))  				return true;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,IsValidFatCharacter,The following statement contains a magic number: if ((c >= 128) || (c <= 255))  				return true;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,GetClusterEntry,The following statement contains a magic number: if (type == FatType.FAT32)  				cluster |= ((uint)entry.GetUShort(Entry.EAIndex + (index * Entry.EntrySize))) << 16;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,FindEntry,The following statement contains a magic number: for (; ; )  			{  				var directory = new DataBlock(partition.ReadBlock(activeSector' 1));    				for (uint index = 0; index < entriesPerSector; index++)  				{  					if (compare.Compare(directory.Data' index * 32' fatType))  					{  						var attribute = (FatFileAttributes)directory.GetByte((index * Entry.EntrySize) + Entry.FileAttributes);  						return new FatFileLocation(GetClusterEntry(directory.Data' index' fatType)' activeSector' index' (attribute & FatFileAttributes.SubDirectory) != 0);  					}    					if (directory.GetByte(Entry.DOSName + (index * Entry.EntrySize)) == FileNameAttribute.LastEntry)  						return new FatFileLocation();  				}    				++increment;    				if ((startCluster == 0) && (fatType != FatType.FAT32))  				{  					// FAT12/16 Root directory  					if (increment >= rootDirSectors)  						return new FatFileLocation();    					activeSector = startCluster + increment;  					continue;  				}  				else  				{  					// subdirectory  					if (increment < sectorsPerCluster)  					{  						// still within cluster  						activeSector = startCluster + increment;  						continue;  					}    					// exiting cluster    					// goto next cluster (if any)  					uint cluster = GetClusterBySector(startCluster);    					if (cluster == 0)  						return new FatFileLocation();    					uint nextCluster = GetClusterEntryValue(cluster);    					if ((IsClusterLast(nextCluster)) || (IsClusterBad(nextCluster)) || (IsClusterFree(nextCluster)) || (IsClusterReserved(nextCluster)))  						return new FatFileLocation();    					activeSector = (uint)(dataAreaStart + (nextCluster - (1 * sectorsPerCluster)));    					continue;  				}  			}
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,CreateFile,The following statement contains a magic number: if (filename.Length > 11)  				filename = filename.Substring(0' 11);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,CreateFile,The following statement contains a magic number: if (filename.Length > 11)  				filename = filename.Substring(0' 11);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,CreateFile,The following statement contains a magic number: directory.SetString(Entry.DOSName + (location.DirectorySectorIndex * Entry.EntrySize)' "            "' 11);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetVolumeName,The following statement contains a magic number: if (VolumeLabel.Length > 8)  				VolumeLabel = VolumeLabel.Substring(0' 8);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetVolumeName,The following statement contains a magic number: if (VolumeLabel.Length > 8)  				VolumeLabel = VolumeLabel.Substring(0' 8);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetVolumeName,The following statement contains a magic number: if (volumeName.Length > 8)  				volumeName = volumeName.Substring(0' 8);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetVolumeName,The following statement contains a magic number: if (volumeName.Length > 8)  				volumeName = volumeName.Substring(0' 8);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,SetVolumeName,The following statement contains a magic number: directory.SetString(Entry.DOSName + (location.DirectorySectorIndex * Entry.EntrySize)' "            "' 11);
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,AllocateCluster,The following statement contains a magic number: if (at < 2)  				at = 2;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,AllocateCluster,The following statement contains a magic number: if (at < 2)  				at = 2;
Magic Number,Mosa.FileSystem.FAT,FatFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileSystem.cs,AllocateCluster,The following statement contains a magic number: while (at != last)  			{  				uint value = GetClusterEntryValue(at);    				if (IsClusterFree(value))  				{  					SetClusterEntryValue(at' 0xFFFFFFFF /*endOfClusterMark*/);  					lastFreeHint = at;  					return at;  				}    				at++;    				if (at >= fatEntries)  					at = 2;  			}
Missing Default,Mosa.FileSystem.FAT,FatFileStream,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\FAT\FatFileStream.cs,Seek,The following switch statement is missing a default case: switch (origin)  			{  				case SeekOrigin.Begin: newposition = offset; break;  				case SeekOrigin.Current: newposition = position + offset; break;  				case SeekOrigin.End: newposition = length + offset; break;  			}
Missing Default,Mosa.FileSystem.VFS,VirtualFileSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.FileSystem\VFS\VirtualFileSystem.cs,Open,The following switch statement is missing a default case: switch (access)  			{  				case System.IO.FileAccess.Read:  					modeFlags = AccessMode.Read;  					break;    				case System.IO.FileAccess.Write:  					modeFlags = AccessMode.Write;  					break;    				case System.IO.FileAccess.ReadWrite:  					modeFlags = AccessMode.Read | AccessMode.Write;  					break;  			}
