Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,ToString,Cyclomatic complexity of the method is 16
Long Statement,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,GetInt32,The length of the statement  "			return (ResponseData[index + 3] << 24) | (ResponseData[index + 2] << 16) | (ResponseData[index + 1] << 8) | ResponseData[index]; " is 128.
Long Statement,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,ToString,The length of the statement  "				case DebugCode.UnknownData: return "Unknown Data: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData)); " is 121.
Long Statement,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,ToString,The length of the statement  "				case DebugCode.InformationalMessage: return "Informational Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData)); " is 139.
Long Statement,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,ToString,The length of the statement  "				case DebugCode.ErrorMessage: return "Error Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData)); " is 123.
Long Statement,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,ToString,The length of the statement  "				case DebugCode.WarningMessage: return "Warning Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData)); " is 127.
Long Statement,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,ToString,The length of the statement  "				case DebugCode.SendNumber: return "#: " + ((ResponseData[0] << 24) | (ResponseData[1] << 16) | (ResponseData[2] << 8) | ResponseData[3]).ToString(); " is 148.
Empty Catch Block,Mosa.Utility.DebugEngine,DebugServerEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugServerEngine.cs,ReadAsyncCallback,The method has an empty catch block.
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,DebugMessage,The following statement contains a magic number: CommandData = new List<byte>(data.Count * 4);
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,DebugMessage,The following statement contains a magic number: CommandData.Add((byte)((i >> 8) & 0xFF));
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,DebugMessage,The following statement contains a magic number: CommandData.Add((byte)((i >> 16) & 0xFF));
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,DebugMessage,The following statement contains a magic number: CommandData.Add((byte)((i >> 24) & 0xFF));
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,GetInt32,The following statement contains a magic number: return (ResponseData[index + 3] << 24) | (ResponseData[index + 2] << 16) | (ResponseData[index + 1] << 8) | ResponseData[index];
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,GetInt32,The following statement contains a magic number: return (ResponseData[index + 3] << 24) | (ResponseData[index + 2] << 16) | (ResponseData[index + 1] << 8) | ResponseData[index];
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,GetInt32,The following statement contains a magic number: return (ResponseData[index + 3] << 24) | (ResponseData[index + 2] << 16) | (ResponseData[index + 1] << 8) | ResponseData[index];
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,GetInt32,The following statement contains a magic number: return (ResponseData[index + 3] << 24) | (ResponseData[index + 2] << 16) | (ResponseData[index + 1] << 8) | ResponseData[index];
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,GetInt32,The following statement contains a magic number: return (ResponseData[index + 3] << 24) | (ResponseData[index + 2] << 16) | (ResponseData[index + 1] << 8) | ResponseData[index];
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,ToString,The following statement contains a magic number: switch (Code)  			{  				case DebugCode.Connected: return "Connected";  				case DebugCode.Connecting: return "Connecting";  				case DebugCode.Disconnected: return "Disconnected";  				case DebugCode.UnknownData: return "Unknown Data: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.InformationalMessage: return "Informational Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.ErrorMessage: return "Error Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.WarningMessage: return "Warning Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.Ping: return "Ping ACK";  				case DebugCode.Alive: return "Alive";  				case DebugCode.ReadCR3: return "ReadCR3";  				case DebugCode.ReadMemory: return "ReadMemory";  				case DebugCode.Scattered32BitReadMemory: return "Scattered32BitReadMemory";  				case DebugCode.WriteMemory: return "WriteMemory";  				case DebugCode.CompressedWriteMemory: return "CompressedWriteMemory";  				case DebugCode.SendNumber: return "#: " + ((ResponseData[0] << 24) | (ResponseData[1] << 16) | (ResponseData[2] << 8) | ResponseData[3]).ToString();  				default: return "Code: " + Code.ToString();  			}
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,ToString,The following statement contains a magic number: switch (Code)  			{  				case DebugCode.Connected: return "Connected";  				case DebugCode.Connecting: return "Connecting";  				case DebugCode.Disconnected: return "Disconnected";  				case DebugCode.UnknownData: return "Unknown Data: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.InformationalMessage: return "Informational Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.ErrorMessage: return "Error Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.WarningMessage: return "Warning Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.Ping: return "Ping ACK";  				case DebugCode.Alive: return "Alive";  				case DebugCode.ReadCR3: return "ReadCR3";  				case DebugCode.ReadMemory: return "ReadMemory";  				case DebugCode.Scattered32BitReadMemory: return "Scattered32BitReadMemory";  				case DebugCode.WriteMemory: return "WriteMemory";  				case DebugCode.CompressedWriteMemory: return "CompressedWriteMemory";  				case DebugCode.SendNumber: return "#: " + ((ResponseData[0] << 24) | (ResponseData[1] << 16) | (ResponseData[2] << 8) | ResponseData[3]).ToString();  				default: return "Code: " + Code.ToString();  			}
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,ToString,The following statement contains a magic number: switch (Code)  			{  				case DebugCode.Connected: return "Connected";  				case DebugCode.Connecting: return "Connecting";  				case DebugCode.Disconnected: return "Disconnected";  				case DebugCode.UnknownData: return "Unknown Data: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.InformationalMessage: return "Informational Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.ErrorMessage: return "Error Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.WarningMessage: return "Warning Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.Ping: return "Ping ACK";  				case DebugCode.Alive: return "Alive";  				case DebugCode.ReadCR3: return "ReadCR3";  				case DebugCode.ReadMemory: return "ReadMemory";  				case DebugCode.Scattered32BitReadMemory: return "Scattered32BitReadMemory";  				case DebugCode.WriteMemory: return "WriteMemory";  				case DebugCode.CompressedWriteMemory: return "CompressedWriteMemory";  				case DebugCode.SendNumber: return "#: " + ((ResponseData[0] << 24) | (ResponseData[1] << 16) | (ResponseData[2] << 8) | ResponseData[3]).ToString();  				default: return "Code: " + Code.ToString();  			}
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,ToString,The following statement contains a magic number: switch (Code)  			{  				case DebugCode.Connected: return "Connected";  				case DebugCode.Connecting: return "Connecting";  				case DebugCode.Disconnected: return "Disconnected";  				case DebugCode.UnknownData: return "Unknown Data: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.InformationalMessage: return "Informational Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.ErrorMessage: return "Error Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.WarningMessage: return "Warning Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.Ping: return "Ping ACK";  				case DebugCode.Alive: return "Alive";  				case DebugCode.ReadCR3: return "ReadCR3";  				case DebugCode.ReadMemory: return "ReadMemory";  				case DebugCode.Scattered32BitReadMemory: return "Scattered32BitReadMemory";  				case DebugCode.WriteMemory: return "WriteMemory";  				case DebugCode.CompressedWriteMemory: return "CompressedWriteMemory";  				case DebugCode.SendNumber: return "#: " + ((ResponseData[0] << 24) | (ResponseData[1] << 16) | (ResponseData[2] << 8) | ResponseData[3]).ToString();  				default: return "Code: " + Code.ToString();  			}
Magic Number,Mosa.Utility.DebugEngine,DebugMessage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugMessage.cs,ToString,The following statement contains a magic number: switch (Code)  			{  				case DebugCode.Connected: return "Connected";  				case DebugCode.Connecting: return "Connecting";  				case DebugCode.Disconnected: return "Disconnected";  				case DebugCode.UnknownData: return "Unknown Data: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.InformationalMessage: return "Informational Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.ErrorMessage: return "Error Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.WarningMessage: return "Warning Message: " + System.Text.Encoding.UTF8.GetString(CreateByteArray(ResponseData));  				case DebugCode.Ping: return "Ping ACK";  				case DebugCode.Alive: return "Alive";  				case DebugCode.ReadCR3: return "ReadCR3";  				case DebugCode.ReadMemory: return "ReadMemory";  				case DebugCode.Scattered32BitReadMemory: return "Scattered32BitReadMemory";  				case DebugCode.WriteMemory: return "WriteMemory";  				case DebugCode.CompressedWriteMemory: return "CompressedWriteMemory";  				case DebugCode.SendNumber: return "#: " + ((ResponseData[0] << 24) | (ResponseData[1] << 16) | (ResponseData[2] << 8) | ResponseData[3]).ToString();  				default: return "Code: " + Code.ToString();  			}
Magic Number,Mosa.Utility.DebugEngine,DebugServerEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugServerEngine.cs,GetInteger,The following statement contains a magic number: return (buffer[index + 3] << 24) | (buffer[index + 2] << 16) | (buffer[index + 1] << 8) | buffer[index];
Magic Number,Mosa.Utility.DebugEngine,DebugServerEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugServerEngine.cs,GetInteger,The following statement contains a magic number: return (buffer[index + 3] << 24) | (buffer[index + 2] << 16) | (buffer[index + 1] << 8) | buffer[index];
Magic Number,Mosa.Utility.DebugEngine,DebugServerEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugServerEngine.cs,GetInteger,The following statement contains a magic number: return (buffer[index + 3] << 24) | (buffer[index + 2] << 16) | (buffer[index + 1] << 8) | buffer[index];
Magic Number,Mosa.Utility.DebugEngine,DebugServerEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugServerEngine.cs,GetInteger,The following statement contains a magic number: return (buffer[index + 3] << 24) | (buffer[index + 2] << 16) | (buffer[index + 1] << 8) | buffer[index];
Magic Number,Mosa.Utility.DebugEngine,DebugServerEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugServerEngine.cs,GetInteger,The following statement contains a magic number: return (buffer[index + 3] << 24) | (buffer[index + 2] << 16) | (buffer[index + 1] << 8) | buffer[index];
Magic Number,Mosa.Utility.DebugEngine,DebugServerEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugServerEngine.cs,ParseResponse,The following statement contains a magic number: byte code = GetByte(5);
Magic Number,Mosa.Utility.DebugEngine,DebugServerEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugServerEngine.cs,ParseResponse,The following statement contains a magic number: int len = GetInteger(6);
Magic Number,Mosa.Utility.DebugEngine,DebugServerEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugServerEngine.cs,ParseResponse,The following statement contains a magic number: data.Add(buffer[i + 10]);
Magic Number,Mosa.Utility.DebugEngine,DebugServerEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugServerEngine.cs,Push,The following statement contains a magic number: int length = GetInteger(6);
Magic Number,Mosa.Utility.DebugEngine,DebugServerEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugServerEngine.cs,Push,The following statement contains a magic number: buffer.Count == length + 10
Magic Number,Mosa.Utility.DebugEngine,DebugServerEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\DebugServerEngine.cs,Push,The following statement contains a magic number: buffer.Count >= 10
Magic Number,Mosa.Utility.DebugEngine,Packet,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\Packet.cs,Packet,The following statement contains a magic number: Data = new List<byte>(64);
Magic Number,Mosa.Utility.DebugEngine,Packet,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\Packet.cs,Add,The following statement contains a magic number: Add((byte)(i >> 8 & 0xFF));
Magic Number,Mosa.Utility.DebugEngine,Packet,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\Packet.cs,Add,The following statement contains a magic number: Add((byte)(i >> 16 & 0xFF));
Magic Number,Mosa.Utility.DebugEngine,Packet,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.DebugEngine\Packet.cs,Add,The following statement contains a magic number: Add((byte)(i >> 24 & 0xFF));
