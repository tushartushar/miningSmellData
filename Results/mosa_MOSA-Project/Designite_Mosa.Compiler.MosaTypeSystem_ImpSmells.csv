Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mosa.Compiler.MosaTypeSystem,MosaTypeExtension,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\MosaTypeExtension.cs,AddArrayMethods,The method has 117 lines of code.
Long Method,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataLoader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataLoader.cs,Load,The method has 101 lines of code.
Complex Method,Mosa.Compiler.MosaTypeSystem,MosaCustomAttributeList,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Units\MosaCustomAttribute.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,Resolve,Cyclomatic complexity of the method is 12
Complex Method,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataLoader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataLoader.cs,LoadGenericMethodInstance,Cyclomatic complexity of the method is 9
Long Parameter List,Mosa.Compiler.MosaTypeSystem,MosaInstruction,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Units\MosaInstruction.cs,MosaInstruction,The method has 5 parameters. Parameters: offset' opCode' operand' prev' next
Long Parameter List,Mosa.Compiler.MosaTypeSystem,MosaExceptionHandler,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Units\MosaExceptionHandler.cs,MosaExceptionHandler,The method has 7 parameters. Parameters: ehType' tryStart' tryEnd' handlerStart' handlerEnd' type' filterOffset
Long Parameter List,Mosa.Compiler.MosaTypeSystem,TypeSystem,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\TypeSystem.cs,CreateLinkerMethod,The method has 5 parameters. Parameters: type' methodName' returnType' hasThis' parameters
Long Statement,Mosa.Compiler.MosaTypeSystem,GenericArgumentResolver,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\GenericArgumentResolver.cs,ResolveGenericArgs,The length of the statement  "				case ElementType.ValueArray: result = new ValueArraySig(ResolveGenericArgs(typeSig.Next)' (typeSig as ValueArraySig).Size); break; " is 130.
Long Statement,Mosa.Compiler.MosaTypeSystem,GenericArgumentResolver,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\GenericArgumentResolver.cs,ResolveGenericArgs,The length of the statement  "				case ElementType.CModReqd: result = new CModReqdSig((typeSig as ModifierSig).Modifier' ResolveGenericArgs(typeSig.Next)); break; " is 128.
Long Statement,Mosa.Compiler.MosaTypeSystem,GenericArgumentResolver,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\GenericArgumentResolver.cs,ResolveGenericArgs,The length of the statement  "				case ElementType.CModOpt: result = new CModOptSig((typeSig as ModifierSig).Modifier' ResolveGenericArgs(typeSig.Next)); break; " is 126.
Long Statement,Mosa.Compiler.MosaTypeSystem,Mutator,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Units\MosaModule.cs,Dispose,The length of the statement  "					property.FullName = string.Concat(property.PropertyType.FullName' " "' property.DeclaringType.FullName' "::"' property.Name); " is 125.
Long Statement,Mosa.Compiler.MosaTypeSystem,Mutator,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Units\MosaModule.cs,Dispose,The length of the statement  "					method.FullName = SignatureName.GetSignature(method.DeclaringType.FullName + "::" + methodName' method.Signature' false' true); " is 127.
Long Statement,Mosa.Compiler.MosaTypeSystem,MosaMethod,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Units\MosaMethod.cs,Equals,The length of the statement  "			//return SignatureEquals(other) && this.DeclaringType.FullName == other.DeclaringType.FullName && this.Name == other.Name; " is 122.
Long Statement,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,ResolveCustomAttributes,The length of the statement  "					namedArgs[i] = new MosaCustomAttribute.NamedArgument(namedArg.Name' namedArg.IsField' ToMosaCAArgument(namedArg.Argument)); " is 123.
Long Statement,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,ResolveSZArray,The length of the statement  "						// HACK: the normal Equals for methods only compares signatures which causes issues with wrong methods being removed from the list " is 130.
Long Statement,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,ResolveSZArray,The length of the statement  "					list.AddLast(typeSystem.GetTypeByName(typeSystem.CorLib' "System.Collections.Generic"' "IList`1<" + arrayType.ElementType.FullName + ">")); " is 139.
Long Statement,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,ResolveSZArray,The length of the statement  "					list.AddLast(typeSystem.GetTypeByName(typeSystem.CorLib' "System.Collections.Generic"' "ICollection`1<" + arrayType.ElementType.FullName + ">")); " is 145.
Long Statement,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,ResolveSZArray,The length of the statement  "					list.AddLast(typeSystem.GetTypeByName(typeSystem.CorLib' "System.Collections.Generic"' "IEnumerable`1<" + arrayType.ElementType.FullName + ">")); " is 145.
Complex Conditional,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,Resolve,The conditional expression  "unit is MosaField || unit is MosaMethod || unit is MosaModule || unit is MosaProperty"  is complex.
Magic Number,Mosa.Compiler.MosaTypeSystem,MosaTypeExtension,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\MosaTypeExtension.cs,GetPrimitiveSize,The following statement contains a magic number: if (type.IsPointer || type.IsN)  				return nativeSize;  			else if (type.IsUI1 || type.IsBoolean)  				return 1;  			else if (type.IsUI2 || type.IsChar)  				return 2;  			else if (type.IsUI4 || type.IsR4)  				return 4;  			else if (type.IsUI8 || type.IsR8)  				return 8;  			else  				return null;
Magic Number,Mosa.Compiler.MosaTypeSystem,MosaTypeExtension,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\MosaTypeExtension.cs,GetPrimitiveSize,The following statement contains a magic number: if (type.IsPointer || type.IsN)  				return nativeSize;  			else if (type.IsUI1 || type.IsBoolean)  				return 1;  			else if (type.IsUI2 || type.IsChar)  				return 2;  			else if (type.IsUI4 || type.IsR4)  				return 4;  			else if (type.IsUI8 || type.IsR8)  				return 8;  			else  				return null;
Magic Number,Mosa.Compiler.MosaTypeSystem,MosaTypeExtension,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\MosaTypeExtension.cs,GetPrimitiveSize,The following statement contains a magic number: if (type.IsPointer || type.IsN)  				return nativeSize;  			else if (type.IsUI1 || type.IsBoolean)  				return 1;  			else if (type.IsUI2 || type.IsChar)  				return 2;  			else if (type.IsUI4 || type.IsR4)  				return 4;  			else if (type.IsUI8 || type.IsR8)  				return 8;  			else  				return null;
Magic Number,Mosa.Compiler.MosaTypeSystem,ScopedToken,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\ScopedToken.cs,GetHashCode,The following statement contains a magic number: return Module.GetHashCode() * 7 + (int)Token.Raw;
Magic Number,Mosa.Compiler.MosaTypeSystem,SignatureComparer,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\SignatureComparer.cs,GetHashCode,The following statement contains a magic number: int result = (int)type.TypeCode * 7;
Magic Number,Mosa.Compiler.MosaTypeSystem,SignatureComparer,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\SignatureComparer.cs,GetHashCode,The following statement contains a magic number: foreach (var genericArg in type.GenericArguments)  			{  				result += result * 7 + GetHashCode(genericArg);  			}
Magic Number,Mosa.Compiler.MosaTypeSystem,SignatureComparer,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\SignatureComparer.cs,GetHashCode,The following statement contains a magic number: switch (type.TypeCode)  			{  				case MosaTypeCode.UnmanagedPointer:  				case MosaTypeCode.ManagedPointer:  				case MosaTypeCode.SZArray:    				// Hash code DOES not need to be unique' so to save time ArrayInfo is not hashed  				case MosaTypeCode.Array:  					result += result * 7 + GetHashCode(type.ElementType);  					break;    				case MosaTypeCode.FunctionPointer:  					result += GetHashCode(type.FunctionPtrSig);  					break;    				default:  					result += result * 7 + type.Name.GetHashCode() + type.Namespace.GetHashCode();  					break;  			}
Magic Number,Mosa.Compiler.MosaTypeSystem,SignatureComparer,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\SignatureComparer.cs,GetHashCode,The following statement contains a magic number: switch (type.TypeCode)  			{  				case MosaTypeCode.UnmanagedPointer:  				case MosaTypeCode.ManagedPointer:  				case MosaTypeCode.SZArray:    				// Hash code DOES not need to be unique' so to save time ArrayInfo is not hashed  				case MosaTypeCode.Array:  					result += result * 7 + GetHashCode(type.ElementType);  					break;    				case MosaTypeCode.FunctionPointer:  					result += GetHashCode(type.FunctionPtrSig);  					break;    				default:  					result += result * 7 + type.Name.GetHashCode() + type.Namespace.GetHashCode();  					break;  			}
Magic Number,Mosa.Compiler.MosaTypeSystem,SignatureComparer,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\SignatureComparer.cs,GetHashCode,The following statement contains a magic number: foreach (var param in method.Parameters)  			{  				result += result * 7 + GetHashCode(param.ParameterType);  			}
Missing Default,Mosa.Compiler.MosaTypeSystem,TypeSystemExtensions,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\TypeSystemExtensions.cs,GetStackTypeCode,The following switch statement is missing a default case: switch (type.IsEnum ? type.GetEnumUnderlyingType().TypeCode : type.TypeCode)  			{  				case MosaTypeCode.Boolean:  				case MosaTypeCode.Char:  				case MosaTypeCode.I1:  				case MosaTypeCode.U1:  				case MosaTypeCode.I2:  				case MosaTypeCode.U2:  				case MosaTypeCode.I4:  				case MosaTypeCode.U4:  					return StackTypeCode.Int32;    				case MosaTypeCode.I8:  				case MosaTypeCode.U8:  					return StackTypeCode.Int64;    				case MosaTypeCode.R4:  				case MosaTypeCode.R8:  					return StackTypeCode.F;    				case MosaTypeCode.I:  				case MosaTypeCode.U:  					return StackTypeCode.N;    				case MosaTypeCode.ManagedPointer:  					return StackTypeCode.ManagedPointer;    				case MosaTypeCode.UnmanagedPointer:  				case MosaTypeCode.FunctionPointer:  					return StackTypeCode.UnmanagedPointer;    				case MosaTypeCode.String:  				case MosaTypeCode.ValueType:  				case MosaTypeCode.ReferenceType:  				case MosaTypeCode.Array:  				case MosaTypeCode.Object:  				case MosaTypeCode.SZArray:  				case MosaTypeCode.Var:  				case MosaTypeCode.MVar:  					return StackTypeCode.O;    				case MosaTypeCode.Void:  					return StackTypeCode.Unknown;  			}
Missing Default,Mosa.Compiler.MosaTypeSystem,TypeSystemExtensions,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\TypeSystemExtensions.cs,GetStackType,The following switch statement is missing a default case: switch (type.GetStackTypeCode())  			{  				case StackTypeCode.Int32:  					return type.TypeSystem.BuiltIn.I4;    				case StackTypeCode.Int64:  					return type.TypeSystem.BuiltIn.I8;    				case StackTypeCode.N:  					return type.TypeSystem.BuiltIn.I;    				case StackTypeCode.F:  					if (type.IsR4)  						return type.TypeSystem.BuiltIn.R4;  					return type.TypeSystem.BuiltIn.R8;    				case StackTypeCode.O:  					return type;    				case StackTypeCode.UnmanagedPointer:  				case StackTypeCode.ManagedPointer:  					return type;  			}
Missing Default,Mosa.Compiler.MosaTypeSystem,TypeSystemExtensions,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\TypeSystemExtensions.cs,GetStackTypeFromCode,The following switch statement is missing a default case: switch (code)  			{  				case StackTypeCode.Int32:  					return typeSystem.BuiltIn.I4;    				case StackTypeCode.Int64:  					return typeSystem.BuiltIn.I8;    				case StackTypeCode.N:  					return typeSystem.BuiltIn.I;    				case StackTypeCode.F:  					return typeSystem.BuiltIn.R8;    				case StackTypeCode.O:  					return typeSystem.BuiltIn.Object;    				case StackTypeCode.UnmanagedPointer:  					return typeSystem.BuiltIn.Pointer;    				case StackTypeCode.ManagedPointer:  					return typeSystem.BuiltIn.Object.ToManagedPointer();  			}
Missing Default,Mosa.Compiler.MosaTypeSystem,TypeSystemExtensions,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\TypeSystemExtensions.cs,GetTypeFromTypeCode,The following switch statement is missing a default case: switch (code)  			{  				case MosaTypeCode.Void: return typeSystem.BuiltIn.Void;  				case MosaTypeCode.Boolean: return typeSystem.BuiltIn.Boolean;  				case MosaTypeCode.Char: return typeSystem.BuiltIn.Char;  				case MosaTypeCode.I1: return typeSystem.BuiltIn.I1;  				case MosaTypeCode.U1: return typeSystem.BuiltIn.U1;  				case MosaTypeCode.I2: return typeSystem.BuiltIn.I2;  				case MosaTypeCode.U2: return typeSystem.BuiltIn.U2;  				case MosaTypeCode.I4: return typeSystem.BuiltIn.I4;  				case MosaTypeCode.U4: return typeSystem.BuiltIn.U4;  				case MosaTypeCode.I8: return typeSystem.BuiltIn.I8;  				case MosaTypeCode.U8: return typeSystem.BuiltIn.U8;  				case MosaTypeCode.R4: return typeSystem.BuiltIn.R4;  				case MosaTypeCode.R8: return typeSystem.BuiltIn.R8;  				case MosaTypeCode.I: return typeSystem.BuiltIn.I;  				case MosaTypeCode.U: return typeSystem.BuiltIn.U;  				case MosaTypeCode.String: return typeSystem.BuiltIn.String;  				case MosaTypeCode.TypedRef: return typeSystem.BuiltIn.TypedRef;  				case MosaTypeCode.Object: return typeSystem.BuiltIn.Object;  			}
