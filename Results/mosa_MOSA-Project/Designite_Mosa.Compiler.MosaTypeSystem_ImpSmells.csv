Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mosa.Compiler.MosaTypeSystem,MosaTypeExtension,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\MosaTypeExtension.cs,AddArrayMethods,The method has 117 lines of code.
Long Method,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataLoader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataLoader.cs,Load,The method has 101 lines of code.
Complex Method,Mosa.Compiler.MosaTypeSystem,BuiltInTypes,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\BuiltInTypes.cs,GetType,Cyclomatic complexity of the method is 19
Complex Method,Mosa.Compiler.MosaTypeSystem,BuiltInTypes,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\BuiltInTypes.cs,GetType,Cyclomatic complexity of the method is 19
Complex Method,Mosa.Compiler.MosaTypeSystem,SignatureComparer,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\SignatureComparer.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.MosaTypeSystem,SignatureName,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\SignatureName.cs,UpdateType,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.MosaTypeSystem,MosaCustomAttributeList,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Units\MosaCustomAttribute.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Compiler.MosaTypeSystem.Metadata,DnlibExtension,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\DnlibExtension.cs,HasOpenGenericParameter,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Compiler.MosaTypeSystem.Metadata,GenericArgumentResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\GenericArgumentResolver.cs,ResolveGenericArgs,Cyclomatic complexity of the method is 17
Complex Method,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataLoader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataLoader.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataLoader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataLoader.cs,Load,Cyclomatic complexity of the method is 16
Complex Method,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataLoader,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataLoader.cs,LoadGenericMethodInstance,Cyclomatic complexity of the method is 15
Complex Method,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,Resolve,Cyclomatic complexity of the method is 18
Complex Method,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,ResolveMethod,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,ResolveInstruction,Cyclomatic complexity of the method is 14
Long Parameter List,Mosa.Compiler.MosaTypeSystem,TypeSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\TypeSystem.cs,CreateLinkerMethod,The method has 5 parameters. Parameters: type' methodName' returnType' hasThis' parameters
Long Parameter List,Mosa.Compiler.MosaTypeSystem,MosaExceptionHandler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Units\MosaExceptionHandler.cs,MosaExceptionHandler,The method has 7 parameters. Parameters: ehType' tryStart' tryEnd' handlerStart' handlerEnd' type' filterOffset
Long Statement,Mosa.Compiler.MosaTypeSystem,Mutator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Units\MosaField.cs,Dispose,The length of the statement  "					method.FullName = SignatureName.GetSignature(method.DeclaringType.FullName + "::" + methodName' method.Signature' false); " is 121.
Long Statement,Mosa.Compiler.MosaTypeSystem,Mutator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Units\MosaField.cs,Dispose,The length of the statement  "					property.FullName = string.Concat(property.DeclaringType.FullName' "::"' property.Name' " "' property.PropertyType.FullName); " is 125.
Long Statement,Mosa.Compiler.MosaTypeSystem,MosaMethod,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Units\MosaMethod.cs,Equals,The length of the statement  "			//return SignatureEquals(other) && this.DeclaringType.FullName == other.DeclaringType.FullName && this.Name == other.Name; " is 122.
Long Statement,Mosa.Compiler.MosaTypeSystem.Metadata,GenericArgumentResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\GenericArgumentResolver.cs,ResolveGenericArgs,The length of the statement  "				case ElementType.ValueArray: result = new ValueArraySig(ResolveGenericArgs(typeSig.Next)' (typeSig as ValueArraySig).Size); break; " is 130.
Long Statement,Mosa.Compiler.MosaTypeSystem.Metadata,GenericArgumentResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\GenericArgumentResolver.cs,ResolveGenericArgs,The length of the statement  "				case ElementType.CModReqd: result = new CModReqdSig((typeSig as ModifierSig).Modifier' ResolveGenericArgs(typeSig.Next)); break; " is 128.
Long Statement,Mosa.Compiler.MosaTypeSystem.Metadata,GenericArgumentResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\GenericArgumentResolver.cs,ResolveGenericArgs,The length of the statement  "				case ElementType.CModOpt: result = new CModOptSig((typeSig as ModifierSig).Modifier' ResolveGenericArgs(typeSig.Next)); break; " is 126.
Long Statement,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,ResolveCustomAttributes,The length of the statement  "					namedArgs[i] = new MosaCustomAttribute.NamedArgument(namedArg.Name' namedArg.IsField' ToMosaCAArgument(namedArg.Argument)); " is 123.
Long Statement,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,ResolveSZArray,The length of the statement  "						// HACK: the normal Equals for methods only compares signatures which causes issues with wrong methods being removed from the list " is 130.
Long Statement,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,ResolveSZArray,The length of the statement  "					list.AddLast(typeSystem.GetTypeByName(typeSystem.CorLib' "System.Collections.Generic"' "IList`1<" + arrayType.ElementType.FullName + ">")); " is 139.
Long Statement,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,ResolveSZArray,The length of the statement  "					list.AddLast(typeSystem.GetTypeByName(typeSystem.CorLib' "System.Collections.Generic"' "ICollection`1<" + arrayType.ElementType.FullName + ">")); " is 145.
Long Statement,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,ResolveSZArray,The length of the statement  "					list.AddLast(typeSystem.GetTypeByName(typeSystem.CorLib' "System.Collections.Generic"' "IEnumerable`1<" + arrayType.ElementType.FullName + ">")); " is 145.
Complex Conditional,Mosa.Compiler.MosaTypeSystem.Metadata,MetadataResolver,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\MetadataResolver.cs,Resolve,The conditional expression  "unit is MosaField || unit is MosaMethod || unit is MosaModule || unit is MosaProperty"  is complex.
Magic Number,Mosa.Compiler.MosaTypeSystem,ScopedToken,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\Metadata\ScopedToken.cs,GetHashCode,The following statement contains a magic number: return Module.GetHashCode() * 7 + (int)Token.Raw;
Magic Number,Mosa.Compiler.MosaTypeSystem,SignatureComparer,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\SignatureComparer.cs,GetHashCode,The following statement contains a magic number: int result = (int)type.TypeCode * 7;
Magic Number,Mosa.Compiler.MosaTypeSystem,SignatureComparer,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\SignatureComparer.cs,GetHashCode,The following statement contains a magic number: result += (result * 7) + GetHashCode(genericArg);
Magic Number,Mosa.Compiler.MosaTypeSystem,SignatureComparer,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\SignatureComparer.cs,GetHashCode,The following statement contains a magic number: switch (type.TypeCode)  			{  				case MosaTypeCode.UnmanagedPointer:  				case MosaTypeCode.ManagedPointer:  				case MosaTypeCode.SZArray:    				// Hash code DOES not need to be unique' so to save time ArrayInfo is not hashed  				case MosaTypeCode.Array:  					result += (result * 7) + GetHashCode(type.ElementType);  					break;    				case MosaTypeCode.FunctionPointer:  					result += GetHashCode(type.FunctionPtrSig);  					break;    				default:  					result += (result * 7) + type.Name.GetHashCode() + type.Namespace.GetHashCode();  					break;  			}
Magic Number,Mosa.Compiler.MosaTypeSystem,SignatureComparer,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\SignatureComparer.cs,GetHashCode,The following statement contains a magic number: switch (type.TypeCode)  			{  				case MosaTypeCode.UnmanagedPointer:  				case MosaTypeCode.ManagedPointer:  				case MosaTypeCode.SZArray:    				// Hash code DOES not need to be unique' so to save time ArrayInfo is not hashed  				case MosaTypeCode.Array:  					result += (result * 7) + GetHashCode(type.ElementType);  					break;    				case MosaTypeCode.FunctionPointer:  					result += GetHashCode(type.FunctionPtrSig);  					break;    				default:  					result += (result * 7) + type.Name.GetHashCode() + type.Namespace.GetHashCode();  					break;  			}
Magic Number,Mosa.Compiler.MosaTypeSystem,SignatureComparer,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Compiler.MosaTypeSystem\SignatureComparer.cs,GetHashCode,The following statement contains a magic number: result += (result * 7) + GetHashCode(param.ParameterType);
