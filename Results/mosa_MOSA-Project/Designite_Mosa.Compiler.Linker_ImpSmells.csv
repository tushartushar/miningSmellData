Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mosa.Compiler.Linker.Elf,ElfLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfLinker.cs,CreateRelocationSections,Cyclomatic complexity of the method is 10
Long Parameter List,Mosa.Compiler.Linker,BaseLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\BaseLinker.cs,BaseLinker,The method has 5 parameters. Parameters: baseAddress' endianness' machineType' emitSymbols' linkerFormatType
Long Parameter List,Mosa.Compiler.Linker,BaseLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\BaseLinker.cs,Link,The method has 6 parameters. Parameters: linkType' patchType' patchSymbol' patchOffset' referenceSymbol' referenceOffset
Long Parameter List,Mosa.Compiler.Linker,BaseLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\BaseLinker.cs,Link,The method has 8 parameters. Parameters: linkType' patchType' patchKind' patchSymbolName' patchOffset' referenceKind' referenceSymbolName' referenceOffset
Long Parameter List,Mosa.Compiler.Linker,BaseLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\BaseLinker.cs,Link,The method has 7 parameters. Parameters: linkType' patchType' patchKind' patchSymbolName' patchOffset' referenceSymbol' referenceOffset
Long Parameter List,Mosa.Compiler.Linker,BaseLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\BaseLinker.cs,Link,The method has 7 parameters. Parameters: linkType' patchType' patchSymbol' patchOffset' referenceKind' referenceSymbolName' referenceOffset
Long Parameter List,Mosa.Compiler.Linker,LinkRequest,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\LinkRequest.cs,LinkRequest,The method has 6 parameters. Parameters: linkType' patchType' patchSymbol' patchOffset' referenceSymbol' referenceOffset
Long Statement,Mosa.Compiler.Linker.Elf,ElfLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfLinker.cs,WriteElfHeader,The length of the statement  "			elfheader.CreateIdent((linkerFormatType == LinkerFormatType.Elf32) ? IdentClass.Class32 : IdentClass.Class64' linker.Endianness == Endianness.Little ? IdentData.Data2LSB : IdentData.Data2MSB); " is 192.
Long Statement,Mosa.Compiler.Linker.Elf,ElfLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfLinker.cs,WriteProgramHeaders,The length of the statement  "						(section.SectionKind == SectionKind.ROData) ? ProgramHeaderFlags.Read : ProgramHeaderFlags.Read | ProgramHeaderFlags.Write " is 122.
Long Statement,Mosa.Compiler.Linker.Elf,ElfLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfLinker.cs,WriteSectionHeaders,The length of the statement  "			elfheader.SectionHeaderOffset = elfheader.ProgramHeaderOffset + (ProgramHeader.GetEntrySize(linkerFormatType) * elfheader.ProgramHeaderNumber); " is 143.
Long Statement,Mosa.Compiler.Linker.Elf,ElfLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfLinker.cs,CreateRelocationSection,The length of the statement  "				EntrySize = addend ? RelocationAddendEntry.GetEntrySize(linkerFormatType) : RelocationEntry.GetEntrySize(linkerFormatType)' " is 123.
Long Statement,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,Read32,The length of the statement  "			if (Ident[0] != MagicNumber[0] || Ident[1] != MagicNumber[1] || Ident[2] != MagicNumber[2] || Ident[3] != MagicNumber[3]) " is 121.
Long Statement,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,PrintInfo,The length of the statement  "			Console.WriteLine("Ident class:                    {0} ({1})"' (IdentClass)Ident[4]' ((IdentClass)Ident[4]).ToString("x")); " is 123.
Long Statement,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,PrintInfo,The length of the statement  "			Console.WriteLine("Ident data:                     {0} ({1})"' (IdentData)Ident[4]' ((IdentData)Ident[4]).ToString("x")); " is 121.
Complex Conditional,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,Read32,The conditional expression  "Ident[0] != MagicNumber[0] || Ident[1] != MagicNumber[1] || Ident[2] != MagicNumber[2] || Ident[3] != MagicNumber[3]"  is complex.
Magic Number,Mosa.Compiler.Linker,BaseLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\BaseLinker.cs,BaseLinker,The following statement contains a magic number: LinkerSections = new LinkerSection[4];
Magic Number,Mosa.Compiler.Linker,BaseLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\BaseLinker.cs,GetPatchTypeSize,The following statement contains a magic number: switch (patchType)  			{  				case PatchType.I4: return 32;  				case PatchType.I8: return 64;  				default:  					throw new CompilerException("unknown patch type: " + patchType.ToString());  			}
Magic Number,Mosa.Compiler.Linker,BaseLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\BaseLinker.cs,GetPatchTypeSize,The following statement contains a magic number: switch (patchType)  			{  				case PatchType.I4: return 32;  				case PatchType.I8: return 64;  				default:  					throw new CompilerException("unknown patch type: " + patchType.ToString());  			}
Magic Number,Mosa.Compiler.Linker,LinkerSymbol,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\LinkerSymbol.cs,ApplyPatch,The following statement contains a magic number: switch (patchSize)  			{  				case 8: Stream.WriteByte((byte)value); break;  				case 16: Stream.Write((ushort)value' endianness); break;  				case 32: Stream.Write((uint)value' endianness); break;  				case 64: Stream.Write(value' endianness); break;  			}
Magic Number,Mosa.Compiler.Linker,LinkerSymbol,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\LinkerSymbol.cs,ApplyPatch,The following statement contains a magic number: switch (patchSize)  			{  				case 8: Stream.WriteByte((byte)value); break;  				case 16: Stream.Write((ushort)value' endianness); break;  				case 32: Stream.Write((uint)value' endianness); break;  				case 64: Stream.Write(value' endianness); break;  			}
Magic Number,Mosa.Compiler.Linker,LinkerSymbol,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\LinkerSymbol.cs,ApplyPatch,The following statement contains a magic number: switch (patchSize)  			{  				case 8: Stream.WriteByte((byte)value); break;  				case 16: Stream.Write((ushort)value' endianness); break;  				case 32: Stream.Write((uint)value' endianness); break;  				case 64: Stream.Write(value' endianness); break;  			}
Magic Number,Mosa.Compiler.Linker,LinkerSymbol,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\LinkerSymbol.cs,ApplyPatch,The following statement contains a magic number: switch (patchSize)  			{  				case 8: Stream.WriteByte((byte)value); break;  				case 16: Stream.Write((ushort)value' endianness); break;  				case 32: Stream.Write((uint)value' endianness); break;  				case 64: Stream.Write(value' endianness); break;  			}
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,Read32,The following statement contains a magic number: Ident = reader.ReadBytes(16);
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,Read32,The following statement contains a magic number: if (Ident[0] != MagicNumber[0] || Ident[1] != MagicNumber[1] || Ident[2] != MagicNumber[2] || Ident[3] != MagicNumber[3])  			{  				// Magic number not present' so it seems to be an invalid ELF file  				throw new NotSupportedException("This is not a valid ELF file");  			}
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,Read32,The following statement contains a magic number: if (Ident[0] != MagicNumber[0] || Ident[1] != MagicNumber[1] || Ident[2] != MagicNumber[2] || Ident[3] != MagicNumber[3])  			{  				// Magic number not present' so it seems to be an invalid ELF file  				throw new NotSupportedException("This is not a valid ELF file");  			}
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,Read32,The following statement contains a magic number: if (Ident[0] != MagicNumber[0] || Ident[1] != MagicNumber[1] || Ident[2] != MagicNumber[2] || Ident[3] != MagicNumber[3])  			{  				// Magic number not present' so it seems to be an invalid ELF file  				throw new NotSupportedException("This is not a valid ELF file");  			}
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,Read32,The following statement contains a magic number: if (Ident[0] != MagicNumber[0] || Ident[1] != MagicNumber[1] || Ident[2] != MagicNumber[2] || Ident[3] != MagicNumber[3])  			{  				// Magic number not present' so it seems to be an invalid ELF file  				throw new NotSupportedException("This is not a valid ELF file");  			}
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[2] = MagicNumber[2];
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[2] = MagicNumber[2];
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[3] = MagicNumber[3];
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[3] = MagicNumber[3];
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[4] = (byte)identClass;
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[5] = (byte)data;
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[6] = (byte)Version.Current;
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: Ident[7] = 0x00;
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: for (int i = 8; i < 16; ++i)  				Ident[i] = 0x00;
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,CreateIdent,The following statement contains a magic number: for (int i = 8; i < 16; ++i)  				Ident[i] = 0x00;
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,PrintInfo,The following statement contains a magic number: Console.WriteLine("Ident class:                    {0} ({1})"' (IdentClass)Ident[4]' ((IdentClass)Ident[4]).ToString("x"));
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,PrintInfo,The following statement contains a magic number: Console.WriteLine("Ident class:                    {0} ({1})"' (IdentClass)Ident[4]' ((IdentClass)Ident[4]).ToString("x"));
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,PrintInfo,The following statement contains a magic number: Console.WriteLine("Ident data:                     {0} ({1})"' (IdentData)Ident[4]' ((IdentData)Ident[4]).ToString("x"));
Magic Number,Mosa.Compiler.Linker.Elf,ElfHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfHeader.cs,PrintInfo,The following statement contains a magic number: Console.WriteLine("Ident data:                     {0} ({1})"' (IdentData)Ident[4]' ((IdentData)Ident[4]).ToString("x"));
Missing Default,Mosa.Compiler.Linker,LinkerSymbol,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\LinkerSymbol.cs,ApplyPatch,The following switch statement is missing a default case: switch (patchSize)  			{  				case 8: Stream.WriteByte((byte)value); break;  				case 16: Stream.Write((ushort)value' endianness); break;  				case 32: Stream.Write((uint)value' endianness); break;  				case 64: Stream.Write(value' endianness); break;  			}
Missing Default,Mosa.Compiler.Linker.Elf,ElfLinker,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Linker\Elf\ElfLinker.cs,CreateSections,The following switch statement is missing a default case: switch (linkerSection.SectionKind)  				{  					case SectionKind.Text:  						section.Type = SectionType.ProgBits;  						section.Flags = SectionAttribute.AllocExecute;  						break;    					case SectionKind.Data:  						section.Type = SectionType.ProgBits;  						section.Flags = SectionAttribute.Alloc | SectionAttribute.Write;  						break;    					case SectionKind.ROData:  						section.Type = SectionType.ProgBits;  						section.Flags = SectionAttribute.Alloc;  						break;    					case SectionKind.BSS:  						section.Type = SectionType.NoBits;  						section.Flags = SectionAttribute.Alloc | SectionAttribute.Write;  						break;  				}
