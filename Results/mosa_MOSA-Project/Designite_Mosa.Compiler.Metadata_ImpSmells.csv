Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Mosa.Compiler.Metadata,Heap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Heap.cs,CreateHeap,The method has 5 parameters. Parameters: provider' type' metadata' offset' size
Long Parameter List,Mosa.Compiler.Metadata.Tables,AssemblyRefRow,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Tables\AssemblyRefRow.cs,AssemblyRefRow,The method has 9 parameters. Parameters: majorVersion' minorVersion' buildNumber' revisionNumber' flags' publicKeyOrToken' name' culture' hashValue
Long Parameter List,Mosa.Compiler.Metadata.Tables,AssemblyRow,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Tables\AssemblyRow.cs,AssemblyRow,The method has 9 parameters. Parameters: hashAlgId' majorVersion' minorVersion' buildNumber' revision' flags' publicKey' name' culture
Long Parameter List,Mosa.Compiler.Metadata.Tables,ExportedTypeRow,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Tables\ExportedTypeRow.cs,ExportedTypeRow,The method has 5 parameters. Parameters: flags' typeDef' typeName' typeNamespace' implementation
Long Parameter List,Mosa.Compiler.Metadata.Tables,MethodDefRow,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Tables\MethodDefRow.cs,MethodDefRow,The method has 6 parameters. Parameters: rva' implFlags' flags' nameString' signatureBlob' paramList
Long Parameter List,Mosa.Compiler.Metadata.Tables,ModuleRow,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Tables\ModuleRow.cs,ModuleRow,The method has 5 parameters. Parameters: generation' nameString' mvidGuid' encIdGuid' encBaseIdGuid
Long Parameter List,Mosa.Compiler.Metadata.Tables,TypeDefRow,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Tables\TypeDefRow.cs,TypeDefRow,The method has 6 parameters. Parameters: flags' typeName' typeNamespace' extends' fieldList' methodList
Long Statement,Mosa.Compiler.Metadata,GuidHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\GuidHeap.cs,ReadGuid,The length of the statement  "			return new Guid(BitConverter.ToInt32(buffer' realOffset)' BitConverter.ToInt16(buffer' realOffset + 4)' BitConverter.ToInt16(buffer' realOffset + 6)' buffer[realOffset + 8]' buffer[realOffset + 9]' buffer[realOffset + 10]' buffer[realOffset + 11]' buffer[realOffset + 12]' buffer[realOffset + 13]' buffer[realOffset + 14]' buffer[realOffset + 8]); " is 347.
Long Statement,Mosa.Compiler.Metadata,Heap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Heap.cs,CalculatePrefixLength,The length of the statement  "				result = ((Metadata[offset] & 0x1F) << 24) + (Metadata[offset + 1] << 16) + (Metadata[offset + 2] << 8) + Metadata[offset + 3]; " is 127.
Long Statement,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The length of the statement  "			sizes[(int)TableType.TypeDef >> 24] = (4 + 2 * sheapIdx + GetIndexSize(IndexType.TypeDefOrRef) + GetIndexSize(TableType.Field) + GetIndexSize(TableType.MethodDef)); " is 164.
Long Statement,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The length of the statement  "			sizes[(int)TableType.CustomAttribute >> 24] = (GetIndexSize(IndexType.HasCustomAttribute) + GetIndexSize(IndexType.CustomAttributeType) + bheapIdx); " is 148.
Long Statement,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The length of the statement  "			sizes[(int)TableType.MethodSemantics >> 24] = (2 + GetIndexSize(TableType.MethodDef) + GetIndexSize(IndexType.HasSemantics)); " is 125.
Long Statement,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The length of the statement  "			sizes[(int)TableType.MethodImpl >> 24] = (GetIndexSize(TableType.TypeDef) + 2 * GetIndexSize(IndexType.MethodDefOrRef)); " is 120.
Long Statement,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The length of the statement  "			sizes[(int)TableType.ImplMap >> 24] = (2 + GetIndexSize(IndexType.MemberForwarded) + sheapIdx + GetIndexSize(TableType.ModuleRef)); " is 131.
Long Statement,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The length of the statement  "			sizes[(int)TableType.GenericParamConstraint >> 24] = (GetIndexSize(TableType.GenericParam) + GetIndexSize(IndexType.TypeDefOrRef)); " is 131.
Long Statement,Mosa.Compiler.Metadata.Signatures,SigType,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Signatures\SigType.cs,ToSymbolPart,The length of the statement  "			// Otherwise' call the virtual method ToSymbolPart() and hope that it is overridden so that it doesn't throw a NotImplementedException " is 134.
Long Statement,Mosa.Compiler.Metadata.Loader,PortableExecutableImage,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Loader\PortableExecutableImage.cs,ResolveVirtualAddress,The length of the statement  "				return ((address / ntHeader.OptionalHeader.SectionAlignment) * ntHeader.OptionalHeader.FileAlignment) + (address % ntHeader.OptionalHeader.SectionAlignment); " is 157.
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The constructor "MethodHeader" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The constructor "MethodHeader" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The constructor "MethodHeader" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The constructor "MethodHeader" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The constructor "MethodHeader" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The constructor "MethodHeader" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The constructor "MethodHeader" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The constructor "MethodHeader" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The constructor "MethodHeader" calls a virtual method "ReadInt16".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,TableHeap,The constructor "TableHeap" calls a virtual method "ReadUInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,TableHeap,The constructor "TableHeap" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,TableHeap,The constructor "TableHeap" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,TableHeap,The constructor "TableHeap" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,TableHeap,The constructor "TableHeap" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,TableHeap,The constructor "TableHeap" calls a virtual method "ReadInt64".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,TableHeap,The constructor "TableHeap" calls a virtual method "ReadInt64".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata.Signatures,Signature,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Signatures\Signature.cs,Signature,The constructor "Signature" calls a virtual method "ParseSignature".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata.Signatures,Signature,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Signatures\Signature.cs,Signature,The constructor "Signature" calls a virtual method "ParseSignature".
Virtual Method Call from Constructor,Mosa.Compiler.Metadata.Loader,PortableExecutableImage,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Loader\PortableExecutableImage.cs,PortableExecutableImage,The constructor "PortableExecutableImage" calls a virtual method "Seek".
Magic Number,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The following statement contains a magic number: switch (Flags & MethodFlags.HeaderMask)  			{  				case MethodFlags.TinyFormat:  					CodeSize = ((int)(Flags & MethodFlags.TinyCodeSizeMask) >> 2);  					Flags &= MethodFlags.HeaderMask;  					break;    				case MethodFlags.FatFormat:  					// Read second byte of flags  					Flags = (MethodFlags)(reader.ReadByte() << 8 | (byte)Flags);    					if (MethodFlags.ValidHeader != (Flags & MethodFlags.HeaderSizeMask))  						throw new CompilerException("Invalid method ");    					MaxStack = reader.ReadUInt16();  					CodeSize = reader.ReadInt32();  					LocalVarSigTok = new Token(reader.ReadUInt32()); // ReadStandAloneSigRow  					break;    				default:  					throw new CompilerException("Invalid method header");  			}
Magic Number,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The following statement contains a magic number: switch (Flags & MethodFlags.HeaderMask)  			{  				case MethodFlags.TinyFormat:  					CodeSize = ((int)(Flags & MethodFlags.TinyCodeSizeMask) >> 2);  					Flags &= MethodFlags.HeaderMask;  					break;    				case MethodFlags.FatFormat:  					// Read second byte of flags  					Flags = (MethodFlags)(reader.ReadByte() << 8 | (byte)Flags);    					if (MethodFlags.ValidHeader != (Flags & MethodFlags.HeaderSizeMask))  						throw new CompilerException("Invalid method ");    					MaxStack = reader.ReadUInt16();  					CodeSize = reader.ReadInt32();  					LocalVarSigTok = new Token(reader.ReadUInt32()); // ReadStandAloneSigRow  					break;    				default:  					throw new CompilerException("Invalid method header");  			}
Magic Number,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The following statement contains a magic number: if (0 != (dataSectPos & 3))  				dataSectPos += (4 - (dataSectPos % 4));
Magic Number,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The following statement contains a magic number: if (0 != (dataSectPos & 3))  				dataSectPos += (4 - (dataSectPos % 4));
Magic Number,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The following statement contains a magic number: if (0 != (dataSectPos & 3))  				dataSectPos += (4 - (dataSectPos % 4));
Magic Number,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The following statement contains a magic number: do  			{  				flags = reader.ReadByte();  				bool isFat = (0x40 == (flags & 0x40));  				int length;  				int blocks;  				if (isFat)  				{  					byte a = reader.ReadByte();  					byte b = reader.ReadByte();  					byte c = reader.ReadByte();    					length = (c << 24) | (b << 16) | a;  					blocks = (length - 4) / 24;  				}  				else  				{  					length = reader.ReadByte();  					blocks = (length - 4) / 12;    					/* Read & skip the padding. */  					reader.ReadInt16();  				}    				Debug.Assert(0x01 == (flags & 0x3F)' "Unsupported method data section.");    				// Read the clause  				for (int i = 0; i < blocks; i++)  				{  					ExceptionHandlingClause clause = new ExceptionHandlingClause();  					clause.Read(reader' isFat);  					Clauses.Add(clause);  				}  			}  			while (0x80 == (flags & 0x80));
Magic Number,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The following statement contains a magic number: do  			{  				flags = reader.ReadByte();  				bool isFat = (0x40 == (flags & 0x40));  				int length;  				int blocks;  				if (isFat)  				{  					byte a = reader.ReadByte();  					byte b = reader.ReadByte();  					byte c = reader.ReadByte();    					length = (c << 24) | (b << 16) | a;  					blocks = (length - 4) / 24;  				}  				else  				{  					length = reader.ReadByte();  					blocks = (length - 4) / 12;    					/* Read & skip the padding. */  					reader.ReadInt16();  				}    				Debug.Assert(0x01 == (flags & 0x3F)' "Unsupported method data section.");    				// Read the clause  				for (int i = 0; i < blocks; i++)  				{  					ExceptionHandlingClause clause = new ExceptionHandlingClause();  					clause.Read(reader' isFat);  					Clauses.Add(clause);  				}  			}  			while (0x80 == (flags & 0x80));
Magic Number,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The following statement contains a magic number: do  			{  				flags = reader.ReadByte();  				bool isFat = (0x40 == (flags & 0x40));  				int length;  				int blocks;  				if (isFat)  				{  					byte a = reader.ReadByte();  					byte b = reader.ReadByte();  					byte c = reader.ReadByte();    					length = (c << 24) | (b << 16) | a;  					blocks = (length - 4) / 24;  				}  				else  				{  					length = reader.ReadByte();  					blocks = (length - 4) / 12;    					/* Read & skip the padding. */  					reader.ReadInt16();  				}    				Debug.Assert(0x01 == (flags & 0x3F)' "Unsupported method data section.");    				// Read the clause  				for (int i = 0; i < blocks; i++)  				{  					ExceptionHandlingClause clause = new ExceptionHandlingClause();  					clause.Read(reader' isFat);  					Clauses.Add(clause);  				}  			}  			while (0x80 == (flags & 0x80));
Magic Number,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The following statement contains a magic number: do  			{  				flags = reader.ReadByte();  				bool isFat = (0x40 == (flags & 0x40));  				int length;  				int blocks;  				if (isFat)  				{  					byte a = reader.ReadByte();  					byte b = reader.ReadByte();  					byte c = reader.ReadByte();    					length = (c << 24) | (b << 16) | a;  					blocks = (length - 4) / 24;  				}  				else  				{  					length = reader.ReadByte();  					blocks = (length - 4) / 12;    					/* Read & skip the padding. */  					reader.ReadInt16();  				}    				Debug.Assert(0x01 == (flags & 0x3F)' "Unsupported method data section.");    				// Read the clause  				for (int i = 0; i < blocks; i++)  				{  					ExceptionHandlingClause clause = new ExceptionHandlingClause();  					clause.Read(reader' isFat);  					Clauses.Add(clause);  				}  			}  			while (0x80 == (flags & 0x80));
Magic Number,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The following statement contains a magic number: do  			{  				flags = reader.ReadByte();  				bool isFat = (0x40 == (flags & 0x40));  				int length;  				int blocks;  				if (isFat)  				{  					byte a = reader.ReadByte();  					byte b = reader.ReadByte();  					byte c = reader.ReadByte();    					length = (c << 24) | (b << 16) | a;  					blocks = (length - 4) / 24;  				}  				else  				{  					length = reader.ReadByte();  					blocks = (length - 4) / 12;    					/* Read & skip the padding. */  					reader.ReadInt16();  				}    				Debug.Assert(0x01 == (flags & 0x3F)' "Unsupported method data section.");    				// Read the clause  				for (int i = 0; i < blocks; i++)  				{  					ExceptionHandlingClause clause = new ExceptionHandlingClause();  					clause.Read(reader' isFat);  					Clauses.Add(clause);  				}  			}  			while (0x80 == (flags & 0x80));
Magic Number,Mosa.Compiler.Metadata,MethodHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\MethodHeader.cs,MethodHeader,The following statement contains a magic number: do  			{  				flags = reader.ReadByte();  				bool isFat = (0x40 == (flags & 0x40));  				int length;  				int blocks;  				if (isFat)  				{  					byte a = reader.ReadByte();  					byte b = reader.ReadByte();  					byte c = reader.ReadByte();    					length = (c << 24) | (b << 16) | a;  					blocks = (length - 4) / 24;  				}  				else  				{  					length = reader.ReadByte();  					blocks = (length - 4) / 12;    					/* Read & skip the padding. */  					reader.ReadInt16();  				}    				Debug.Assert(0x01 == (flags & 0x3F)' "Unsupported method data section.");    				// Read the clause  				for (int i = 0; i < blocks; i++)  				{  					ExceptionHandlingClause clause = new ExceptionHandlingClause();  					clause.Read(reader' isFat);  					Clauses.Add(clause);  				}  			}  			while (0x80 == (flags & 0x80));
Magic Number,Mosa.Compiler.Metadata,GuidHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\GuidHeap.cs,ReadGuid,The following statement contains a magic number: int realOffset = ValidateOffset(index * 16);
Magic Number,Mosa.Compiler.Metadata,GuidHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\GuidHeap.cs,ReadGuid,The following statement contains a magic number: return new Guid(BitConverter.ToInt32(buffer' realOffset)' BitConverter.ToInt16(buffer' realOffset + 4)' BitConverter.ToInt16(buffer' realOffset + 6)' buffer[realOffset + 8]' buffer[realOffset + 9]' buffer[realOffset + 10]' buffer[realOffset + 11]' buffer[realOffset + 12]' buffer[realOffset + 13]' buffer[realOffset + 14]' buffer[realOffset + 8]);
Magic Number,Mosa.Compiler.Metadata,GuidHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\GuidHeap.cs,ReadGuid,The following statement contains a magic number: return new Guid(BitConverter.ToInt32(buffer' realOffset)' BitConverter.ToInt16(buffer' realOffset + 4)' BitConverter.ToInt16(buffer' realOffset + 6)' buffer[realOffset + 8]' buffer[realOffset + 9]' buffer[realOffset + 10]' buffer[realOffset + 11]' buffer[realOffset + 12]' buffer[realOffset + 13]' buffer[realOffset + 14]' buffer[realOffset + 8]);
Magic Number,Mosa.Compiler.Metadata,GuidHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\GuidHeap.cs,ReadGuid,The following statement contains a magic number: return new Guid(BitConverter.ToInt32(buffer' realOffset)' BitConverter.ToInt16(buffer' realOffset + 4)' BitConverter.ToInt16(buffer' realOffset + 6)' buffer[realOffset + 8]' buffer[realOffset + 9]' buffer[realOffset + 10]' buffer[realOffset + 11]' buffer[realOffset + 12]' buffer[realOffset + 13]' buffer[realOffset + 14]' buffer[realOffset + 8]);
Magic Number,Mosa.Compiler.Metadata,GuidHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\GuidHeap.cs,ReadGuid,The following statement contains a magic number: return new Guid(BitConverter.ToInt32(buffer' realOffset)' BitConverter.ToInt16(buffer' realOffset + 4)' BitConverter.ToInt16(buffer' realOffset + 6)' buffer[realOffset + 8]' buffer[realOffset + 9]' buffer[realOffset + 10]' buffer[realOffset + 11]' buffer[realOffset + 12]' buffer[realOffset + 13]' buffer[realOffset + 14]' buffer[realOffset + 8]);
Magic Number,Mosa.Compiler.Metadata,GuidHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\GuidHeap.cs,ReadGuid,The following statement contains a magic number: return new Guid(BitConverter.ToInt32(buffer' realOffset)' BitConverter.ToInt16(buffer' realOffset + 4)' BitConverter.ToInt16(buffer' realOffset + 6)' buffer[realOffset + 8]' buffer[realOffset + 9]' buffer[realOffset + 10]' buffer[realOffset + 11]' buffer[realOffset + 12]' buffer[realOffset + 13]' buffer[realOffset + 14]' buffer[realOffset + 8]);
Magic Number,Mosa.Compiler.Metadata,GuidHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\GuidHeap.cs,ReadGuid,The following statement contains a magic number: return new Guid(BitConverter.ToInt32(buffer' realOffset)' BitConverter.ToInt16(buffer' realOffset + 4)' BitConverter.ToInt16(buffer' realOffset + 6)' buffer[realOffset + 8]' buffer[realOffset + 9]' buffer[realOffset + 10]' buffer[realOffset + 11]' buffer[realOffset + 12]' buffer[realOffset + 13]' buffer[realOffset + 14]' buffer[realOffset + 8]);
Magic Number,Mosa.Compiler.Metadata,GuidHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\GuidHeap.cs,ReadGuid,The following statement contains a magic number: return new Guid(BitConverter.ToInt32(buffer' realOffset)' BitConverter.ToInt16(buffer' realOffset + 4)' BitConverter.ToInt16(buffer' realOffset + 6)' buffer[realOffset + 8]' buffer[realOffset + 9]' buffer[realOffset + 10]' buffer[realOffset + 11]' buffer[realOffset + 12]' buffer[realOffset + 13]' buffer[realOffset + 14]' buffer[realOffset + 8]);
Magic Number,Mosa.Compiler.Metadata,GuidHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\GuidHeap.cs,ReadGuid,The following statement contains a magic number: return new Guid(BitConverter.ToInt32(buffer' realOffset)' BitConverter.ToInt16(buffer' realOffset + 4)' BitConverter.ToInt16(buffer' realOffset + 6)' buffer[realOffset + 8]' buffer[realOffset + 9]' buffer[realOffset + 10]' buffer[realOffset + 11]' buffer[realOffset + 12]' buffer[realOffset + 13]' buffer[realOffset + 14]' buffer[realOffset + 8]);
Magic Number,Mosa.Compiler.Metadata,GuidHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\GuidHeap.cs,ReadGuid,The following statement contains a magic number: return new Guid(BitConverter.ToInt32(buffer' realOffset)' BitConverter.ToInt16(buffer' realOffset + 4)' BitConverter.ToInt16(buffer' realOffset + 6)' buffer[realOffset + 8]' buffer[realOffset + 9]' buffer[realOffset + 10]' buffer[realOffset + 11]' buffer[realOffset + 12]' buffer[realOffset + 13]' buffer[realOffset + 14]' buffer[realOffset + 8]);
Magic Number,Mosa.Compiler.Metadata,GuidHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\GuidHeap.cs,ReadGuid,The following statement contains a magic number: return new Guid(BitConverter.ToInt32(buffer' realOffset)' BitConverter.ToInt16(buffer' realOffset + 4)' BitConverter.ToInt16(buffer' realOffset + 6)' buffer[realOffset + 8]' buffer[realOffset + 9]' buffer[realOffset + 10]' buffer[realOffset + 11]' buffer[realOffset + 12]' buffer[realOffset + 13]' buffer[realOffset + 14]' buffer[realOffset + 8]);
Magic Number,Mosa.Compiler.Metadata,Heap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Heap.cs,CalculatePrefixLength,The following statement contains a magic number: if (0xC0 == (Metadata[offset] & 0xC0))  			{  				// A 4 byte length...  				result = ((Metadata[offset] & 0x1F) << 24) + (Metadata[offset + 1] << 16) + (Metadata[offset + 2] << 8) + Metadata[offset + 3];  				offset += 4;  			}  			else if (0x80 == (Metadata[offset] & 0x80))  			{  				// A 2 byte length...  				result = ((Metadata[offset] & 0x3F) << 8) + Metadata[offset + 1];  				offset += 2;  			}  			else  			{  				result = Metadata[offset] & 0x7F;  				offset += 1;  			}
Magic Number,Mosa.Compiler.Metadata,Heap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Heap.cs,CalculatePrefixLength,The following statement contains a magic number: if (0xC0 == (Metadata[offset] & 0xC0))  			{  				// A 4 byte length...  				result = ((Metadata[offset] & 0x1F) << 24) + (Metadata[offset + 1] << 16) + (Metadata[offset + 2] << 8) + Metadata[offset + 3];  				offset += 4;  			}  			else if (0x80 == (Metadata[offset] & 0x80))  			{  				// A 2 byte length...  				result = ((Metadata[offset] & 0x3F) << 8) + Metadata[offset + 1];  				offset += 2;  			}  			else  			{  				result = Metadata[offset] & 0x7F;  				offset += 1;  			}
Magic Number,Mosa.Compiler.Metadata,Heap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Heap.cs,CalculatePrefixLength,The following statement contains a magic number: if (0xC0 == (Metadata[offset] & 0xC0))  			{  				// A 4 byte length...  				result = ((Metadata[offset] & 0x1F) << 24) + (Metadata[offset + 1] << 16) + (Metadata[offset + 2] << 8) + Metadata[offset + 3];  				offset += 4;  			}  			else if (0x80 == (Metadata[offset] & 0x80))  			{  				// A 2 byte length...  				result = ((Metadata[offset] & 0x3F) << 8) + Metadata[offset + 1];  				offset += 2;  			}  			else  			{  				result = Metadata[offset] & 0x7F;  				offset += 1;  			}
Magic Number,Mosa.Compiler.Metadata,Heap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Heap.cs,CalculatePrefixLength,The following statement contains a magic number: if (0xC0 == (Metadata[offset] & 0xC0))  			{  				// A 4 byte length...  				result = ((Metadata[offset] & 0x1F) << 24) + (Metadata[offset + 1] << 16) + (Metadata[offset + 2] << 8) + Metadata[offset + 3];  				offset += 4;  			}  			else if (0x80 == (Metadata[offset] & 0x80))  			{  				// A 2 byte length...  				result = ((Metadata[offset] & 0x3F) << 8) + Metadata[offset + 1];  				offset += 2;  			}  			else  			{  				result = Metadata[offset] & 0x7F;  				offset += 1;  			}
Magic Number,Mosa.Compiler.Metadata,Heap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Heap.cs,CalculatePrefixLength,The following statement contains a magic number: if (0xC0 == (Metadata[offset] & 0xC0))  			{  				// A 4 byte length...  				result = ((Metadata[offset] & 0x1F) << 24) + (Metadata[offset + 1] << 16) + (Metadata[offset + 2] << 8) + Metadata[offset + 3];  				offset += 4;  			}  			else if (0x80 == (Metadata[offset] & 0x80))  			{  				// A 2 byte length...  				result = ((Metadata[offset] & 0x3F) << 8) + Metadata[offset + 1];  				offset += 2;  			}  			else  			{  				result = Metadata[offset] & 0x7F;  				offset += 1;  			}
Magic Number,Mosa.Compiler.Metadata,Heap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Heap.cs,CalculatePrefixLength,The following statement contains a magic number: if (0xC0 == (Metadata[offset] & 0xC0))  			{  				// A 4 byte length...  				result = ((Metadata[offset] & 0x1F) << 24) + (Metadata[offset + 1] << 16) + (Metadata[offset + 2] << 8) + Metadata[offset + 3];  				offset += 4;  			}  			else if (0x80 == (Metadata[offset] & 0x80))  			{  				// A 2 byte length...  				result = ((Metadata[offset] & 0x3F) << 8) + Metadata[offset + 1];  				offset += 2;  			}  			else  			{  				result = Metadata[offset] & 0x7F;  				offset += 1;  			}
Magic Number,Mosa.Compiler.Metadata,Heap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Heap.cs,CalculatePrefixLength,The following statement contains a magic number: if (0xC0 == (Metadata[offset] & 0xC0))  			{  				// A 4 byte length...  				result = ((Metadata[offset] & 0x1F) << 24) + (Metadata[offset + 1] << 16) + (Metadata[offset + 2] << 8) + Metadata[offset + 3];  				offset += 4;  			}  			else if (0x80 == (Metadata[offset] & 0x80))  			{  				// A 2 byte length...  				result = ((Metadata[offset] & 0x3F) << 8) + Metadata[offset + 1];  				offset += 2;  			}  			else  			{  				result = Metadata[offset] & 0x7F;  				offset += 1;  			}
Magic Number,Mosa.Compiler.Metadata,Heap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Heap.cs,CalculatePrefixLength,The following statement contains a magic number: if (0xC0 == (Metadata[offset] & 0xC0))  			{  				// A 4 byte length...  				result = ((Metadata[offset] & 0x1F) << 24) + (Metadata[offset + 1] << 16) + (Metadata[offset + 2] << 8) + Metadata[offset + 3];  				offset += 4;  			}  			else if (0x80 == (Metadata[offset] & 0x80))  			{  				// A 2 byte length...  				result = ((Metadata[offset] & 0x3F) << 8) + Metadata[offset + 1];  				offset += 2;  			}  			else  			{  				result = Metadata[offset] & 0x7F;  				offset += 1;  			}
Magic Number,Mosa.Compiler.Metadata,SignatureReader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\SignatureReader.cs,ReadCompressedInt32,The following statement contains a magic number: if (0xC0 == (0xE0 & buffer[Index]))  			{  				if (Index + 3 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x1F) << 24) | (buffer[Index + 1] << 16) | (buffer[Index + 2] << 8) | (buffer[Index + 3]);  				Index += 4;  			}  			else if (0x80 == (0xC0 & buffer[Index]))  			{  				if (Index + 1 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x3F) << 8) | (buffer[Index + 1]);  				Index += 2;  			}  			else  			{  				Debug.Assert(0x00 == (0x80 & buffer[Index]));  				result = buffer[Index++];  			}
Magic Number,Mosa.Compiler.Metadata,SignatureReader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\SignatureReader.cs,ReadCompressedInt32,The following statement contains a magic number: if (0xC0 == (0xE0 & buffer[Index]))  			{  				if (Index + 3 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x1F) << 24) | (buffer[Index + 1] << 16) | (buffer[Index + 2] << 8) | (buffer[Index + 3]);  				Index += 4;  			}  			else if (0x80 == (0xC0 & buffer[Index]))  			{  				if (Index + 1 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x3F) << 8) | (buffer[Index + 1]);  				Index += 2;  			}  			else  			{  				Debug.Assert(0x00 == (0x80 & buffer[Index]));  				result = buffer[Index++];  			}
Magic Number,Mosa.Compiler.Metadata,SignatureReader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\SignatureReader.cs,ReadCompressedInt32,The following statement contains a magic number: if (0xC0 == (0xE0 & buffer[Index]))  			{  				if (Index + 3 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x1F) << 24) | (buffer[Index + 1] << 16) | (buffer[Index + 2] << 8) | (buffer[Index + 3]);  				Index += 4;  			}  			else if (0x80 == (0xC0 & buffer[Index]))  			{  				if (Index + 1 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x3F) << 8) | (buffer[Index + 1]);  				Index += 2;  			}  			else  			{  				Debug.Assert(0x00 == (0x80 & buffer[Index]));  				result = buffer[Index++];  			}
Magic Number,Mosa.Compiler.Metadata,SignatureReader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\SignatureReader.cs,ReadCompressedInt32,The following statement contains a magic number: if (0xC0 == (0xE0 & buffer[Index]))  			{  				if (Index + 3 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x1F) << 24) | (buffer[Index + 1] << 16) | (buffer[Index + 2] << 8) | (buffer[Index + 3]);  				Index += 4;  			}  			else if (0x80 == (0xC0 & buffer[Index]))  			{  				if (Index + 1 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x3F) << 8) | (buffer[Index + 1]);  				Index += 2;  			}  			else  			{  				Debug.Assert(0x00 == (0x80 & buffer[Index]));  				result = buffer[Index++];  			}
Magic Number,Mosa.Compiler.Metadata,SignatureReader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\SignatureReader.cs,ReadCompressedInt32,The following statement contains a magic number: if (0xC0 == (0xE0 & buffer[Index]))  			{  				if (Index + 3 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x1F) << 24) | (buffer[Index + 1] << 16) | (buffer[Index + 2] << 8) | (buffer[Index + 3]);  				Index += 4;  			}  			else if (0x80 == (0xC0 & buffer[Index]))  			{  				if (Index + 1 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x3F) << 8) | (buffer[Index + 1]);  				Index += 2;  			}  			else  			{  				Debug.Assert(0x00 == (0x80 & buffer[Index]));  				result = buffer[Index++];  			}
Magic Number,Mosa.Compiler.Metadata,SignatureReader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\SignatureReader.cs,ReadCompressedInt32,The following statement contains a magic number: if (0xC0 == (0xE0 & buffer[Index]))  			{  				if (Index + 3 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x1F) << 24) | (buffer[Index + 1] << 16) | (buffer[Index + 2] << 8) | (buffer[Index + 3]);  				Index += 4;  			}  			else if (0x80 == (0xC0 & buffer[Index]))  			{  				if (Index + 1 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x3F) << 8) | (buffer[Index + 1]);  				Index += 2;  			}  			else  			{  				Debug.Assert(0x00 == (0x80 & buffer[Index]));  				result = buffer[Index++];  			}
Magic Number,Mosa.Compiler.Metadata,SignatureReader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\SignatureReader.cs,ReadCompressedInt32,The following statement contains a magic number: if (0xC0 == (0xE0 & buffer[Index]))  			{  				if (Index + 3 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x1F) << 24) | (buffer[Index + 1] << 16) | (buffer[Index + 2] << 8) | (buffer[Index + 3]);  				Index += 4;  			}  			else if (0x80 == (0xC0 & buffer[Index]))  			{  				if (Index + 1 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x3F) << 8) | (buffer[Index + 1]);  				Index += 2;  			}  			else  			{  				Debug.Assert(0x00 == (0x80 & buffer[Index]));  				result = buffer[Index++];  			}
Magic Number,Mosa.Compiler.Metadata,SignatureReader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\SignatureReader.cs,ReadCompressedInt32,The following statement contains a magic number: if (0xC0 == (0xE0 & buffer[Index]))  			{  				if (Index + 3 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x1F) << 24) | (buffer[Index + 1] << 16) | (buffer[Index + 2] << 8) | (buffer[Index + 3]);  				Index += 4;  			}  			else if (0x80 == (0xC0 & buffer[Index]))  			{  				if (Index + 1 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x3F) << 8) | (buffer[Index + 1]);  				Index += 2;  			}  			else  			{  				Debug.Assert(0x00 == (0x80 & buffer[Index]));  				result = buffer[Index++];  			}
Magic Number,Mosa.Compiler.Metadata,SignatureReader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\SignatureReader.cs,ReadCompressedInt32,The following statement contains a magic number: if (0xC0 == (0xE0 & buffer[Index]))  			{  				if (Index + 3 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x1F) << 24) | (buffer[Index + 1] << 16) | (buffer[Index + 2] << 8) | (buffer[Index + 3]);  				Index += 4;  			}  			else if (0x80 == (0xC0 & buffer[Index]))  			{  				if (Index + 1 >= buffer.Length)  					throw new ArgumentOutOfRangeException(@"index");    				result = ((buffer[Index] & 0x3F) << 8) | (buffer[Index + 1]);  				Index += 2;  			}  			else  			{  				Debug.Assert(0x00 == (0x80 & buffer[Index]));  				result = buffer[Index++];  			}
Magic Number,Mosa.Compiler.Metadata,SignatureReader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\SignatureReader.cs,ReadEncodedTypeDefOrRef,The following statement contains a magic number: Token token = new Token(typeDefOrRefEncodedTables2[value & 0x03]' value >> 2);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,TableHeap,The following statement contains a magic number: using (var reader = new BinaryReader(new MemoryStream(metadata)' Encoding.UTF8))  			{  				reader.BaseStream.Position = offset;  				reader.ReadUInt32();  				if (2 != reader.ReadByte() || 0 != reader.ReadByte())  					throw new BadImageFormatException();  				_heapSize = reader.ReadByte();  				reader.ReadByte();  				_valid = reader.ReadInt64();  				_sorted = reader.ReadInt64();    				// Adjust the table offset for the header so far  				nextTableOffset += 4 + 2 + 1 + 1 + 8 + 8;    				CreateRowCountArray(reader' ref nextTableOffset);  				CalculateIndexSizes();  				CalculateHeapIndexSizes();  				CalculateRecordSizes();  				CalculateTableOffsets(ref nextTableOffset);  			}
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,TableHeap,The following statement contains a magic number: using (var reader = new BinaryReader(new MemoryStream(metadata)' Encoding.UTF8))  			{  				reader.BaseStream.Position = offset;  				reader.ReadUInt32();  				if (2 != reader.ReadByte() || 0 != reader.ReadByte())  					throw new BadImageFormatException();  				_heapSize = reader.ReadByte();  				reader.ReadByte();  				_valid = reader.ReadInt64();  				_sorted = reader.ReadInt64();    				// Adjust the table offset for the header so far  				nextTableOffset += 4 + 2 + 1 + 1 + 8 + 8;    				CreateRowCountArray(reader' ref nextTableOffset);  				CalculateIndexSizes();  				CalculateHeapIndexSizes();  				CalculateRecordSizes();  				CalculateTableOffsets(ref nextTableOffset);  			}
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,TableHeap,The following statement contains a magic number: using (var reader = new BinaryReader(new MemoryStream(metadata)' Encoding.UTF8))  			{  				reader.BaseStream.Position = offset;  				reader.ReadUInt32();  				if (2 != reader.ReadByte() || 0 != reader.ReadByte())  					throw new BadImageFormatException();  				_heapSize = reader.ReadByte();  				reader.ReadByte();  				_valid = reader.ReadInt64();  				_sorted = reader.ReadInt64();    				// Adjust the table offset for the header so far  				nextTableOffset += 4 + 2 + 1 + 1 + 8 + 8;    				CreateRowCountArray(reader' ref nextTableOffset);  				CalculateIndexSizes();  				CalculateHeapIndexSizes();  				CalculateRecordSizes();  				CalculateTableOffsets(ref nextTableOffset);  			}
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,TableHeap,The following statement contains a magic number: using (var reader = new BinaryReader(new MemoryStream(metadata)' Encoding.UTF8))  			{  				reader.BaseStream.Position = offset;  				reader.ReadUInt32();  				if (2 != reader.ReadByte() || 0 != reader.ReadByte())  					throw new BadImageFormatException();  				_heapSize = reader.ReadByte();  				reader.ReadByte();  				_valid = reader.ReadInt64();  				_sorted = reader.ReadInt64();    				// Adjust the table offset for the header so far  				nextTableOffset += 4 + 2 + 1 + 1 + 8 + 8;    				CreateRowCountArray(reader' ref nextTableOffset);  				CalculateIndexSizes();  				CalculateHeapIndexSizes();  				CalculateRecordSizes();  				CalculateTableOffsets(ref nextTableOffset);  			}
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,TableHeap,The following statement contains a magic number: using (var reader = new BinaryReader(new MemoryStream(metadata)' Encoding.UTF8))  			{  				reader.BaseStream.Position = offset;  				reader.ReadUInt32();  				if (2 != reader.ReadByte() || 0 != reader.ReadByte())  					throw new BadImageFormatException();  				_heapSize = reader.ReadByte();  				reader.ReadByte();  				_valid = reader.ReadInt64();  				_sorted = reader.ReadInt64();    				// Adjust the table offset for the header so far  				nextTableOffset += 4 + 2 + 1 + 1 + 8 + 8;    				CreateRowCountArray(reader' ref nextTableOffset);  				CalculateIndexSizes();  				CalculateHeapIndexSizes();  				CalculateRecordSizes();  				CalculateTableOffsets(ref nextTableOffset);  			}
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CreateRowCountArray,The following statement contains a magic number: for (long valid = _valid' i = 0; 0 != valid; valid >>= 1' i++)  			{  				if (1 != (valid & 1))  					continue;    				_rowCounts[i] = reader.ReadInt32();  				nextTableOffset += 4;  			}
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateIndexSizes,The following statement contains a magic number: for (int i = 0; i < (int)IndexType.CodedIndexCount; i++)  			{  				int maxrows = 0;  				for (int table = 0; table < IndexTables[i].Length; table++)  				{  					if (-1 != IndexTables[i][table] && maxrows < _rowCounts[(IndexTables[i][table] >> 24)])  					{  						maxrows = _rowCounts[(IndexTables[i][table] >> 24)];  					}  				}    				_indexSize[i] = (maxrows < (1 << (16 - IndexBits[i])) ? 2 : 4);  			}
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateIndexSizes,The following statement contains a magic number: for (int i = 0; i < (int)IndexType.CodedIndexCount; i++)  			{  				int maxrows = 0;  				for (int table = 0; table < IndexTables[i].Length; table++)  				{  					if (-1 != IndexTables[i][table] && maxrows < _rowCounts[(IndexTables[i][table] >> 24)])  					{  						maxrows = _rowCounts[(IndexTables[i][table] >> 24)];  					}  				}    				_indexSize[i] = (maxrows < (1 << (16 - IndexBits[i])) ? 2 : 4);  			}
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateIndexSizes,The following statement contains a magic number: for (int i = 0; i < (int)IndexType.CodedIndexCount; i++)  			{  				int maxrows = 0;  				for (int table = 0; table < IndexTables[i].Length; table++)  				{  					if (-1 != IndexTables[i][table] && maxrows < _rowCounts[(IndexTables[i][table] >> 24)])  					{  						maxrows = _rowCounts[(IndexTables[i][table] >> 24)];  					}  				}    				_indexSize[i] = (maxrows < (1 << (16 - IndexBits[i])) ? 2 : 4);  			}
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateIndexSizes,The following statement contains a magic number: for (int i = 0; i < (int)IndexType.CodedIndexCount; i++)  			{  				int maxrows = 0;  				for (int table = 0; table < IndexTables[i].Length; table++)  				{  					if (-1 != IndexTables[i][table] && maxrows < _rowCounts[(IndexTables[i][table] >> 24)])  					{  						maxrows = _rowCounts[(IndexTables[i][table] >> 24)];  					}  				}    				_indexSize[i] = (maxrows < (1 << (16 - IndexBits[i])) ? 2 : 4);  			}
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateIndexSizes,The following statement contains a magic number: for (int i = 0; i < (int)IndexType.CodedIndexCount; i++)  			{  				int maxrows = 0;  				for (int table = 0; table < IndexTables[i].Length; table++)  				{  					if (-1 != IndexTables[i][table] && maxrows < _rowCounts[(IndexTables[i][table] >> 24)])  					{  						maxrows = _rowCounts[(IndexTables[i][table] >> 24)];  					}  				}    				_indexSize[i] = (maxrows < (1 << (16 - IndexBits[i])) ? 2 : 4);  			}
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateHeapIndexSizes,The following statement contains a magic number: _indexSize[(int)IndexType.StringHeap] = 2 + 2 * (_heapSize & 1);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateHeapIndexSizes,The following statement contains a magic number: _indexSize[(int)IndexType.StringHeap] = 2 + 2 * (_heapSize & 1);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateHeapIndexSizes,The following statement contains a magic number: _indexSize[(int)IndexType.GuidHeap] = 2 + (_heapSize & 2);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateHeapIndexSizes,The following statement contains a magic number: _indexSize[(int)IndexType.GuidHeap] = 2 + (_heapSize & 2);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateHeapIndexSizes,The following statement contains a magic number: _indexSize[(int)IndexType.BlobHeap] = (0 == (_heapSize & 4) ? 2 : 4);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateHeapIndexSizes,The following statement contains a magic number: _indexSize[(int)IndexType.BlobHeap] = (0 == (_heapSize & 4) ? 2 : 4);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateHeapIndexSizes,The following statement contains a magic number: _indexSize[(int)IndexType.BlobHeap] = (0 == (_heapSize & 4) ? 2 : 4);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Module >> 24] = (2 + sheapIdx + 3 * gheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Module >> 24] = (2 + sheapIdx + 3 * gheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Module >> 24] = (2 + sheapIdx + 3 * gheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.TypeRef >> 24] = (GetIndexSize(IndexType.ResolutionScope) + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.TypeRef >> 24] = (GetIndexSize(IndexType.ResolutionScope) + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.TypeDef >> 24] = (4 + 2 * sheapIdx + GetIndexSize(IndexType.TypeDefOrRef) + GetIndexSize(TableType.Field) + GetIndexSize(TableType.MethodDef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.TypeDef >> 24] = (4 + 2 * sheapIdx + GetIndexSize(IndexType.TypeDefOrRef) + GetIndexSize(TableType.Field) + GetIndexSize(TableType.MethodDef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.TypeDef >> 24] = (4 + 2 * sheapIdx + GetIndexSize(IndexType.TypeDefOrRef) + GetIndexSize(TableType.Field) + GetIndexSize(TableType.MethodDef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Field >> 24] = (2 + sheapIdx + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Field >> 24] = (2 + sheapIdx + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.MethodDef >> 24] = (4 + 2 + 2 + sheapIdx + bheapIdx + GetIndexSize(TableType.Param));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.MethodDef >> 24] = (4 + 2 + 2 + sheapIdx + bheapIdx + GetIndexSize(TableType.Param));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.MethodDef >> 24] = (4 + 2 + 2 + sheapIdx + bheapIdx + GetIndexSize(TableType.Param));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.MethodDef >> 24] = (4 + 2 + 2 + sheapIdx + bheapIdx + GetIndexSize(TableType.Param));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Param >> 24] = (2 + 2 + sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Param >> 24] = (2 + 2 + sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Param >> 24] = (2 + 2 + sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.InterfaceImpl >> 24] = (GetIndexSize(TableType.TypeDef) + GetIndexSize(IndexType.TypeDefOrRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.MemberRef >> 24] = (GetIndexSize(IndexType.MemberRefParent) + sheapIdx + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Constant >> 24] = (2 + GetIndexSize(IndexType.HasConstant) + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Constant >> 24] = (2 + GetIndexSize(IndexType.HasConstant) + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.CustomAttribute >> 24] = (GetIndexSize(IndexType.HasCustomAttribute) + GetIndexSize(IndexType.CustomAttributeType) + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.FieldMarshal >> 24] = (GetIndexSize(IndexType.HasFieldMarshal) + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.DeclSecurity >> 24] = (2 + GetIndexSize(IndexType.HasDeclSecurity) + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.DeclSecurity >> 24] = (2 + GetIndexSize(IndexType.HasDeclSecurity) + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.ClassLayout >> 24] = (2 + 4 + GetIndexSize(TableType.TypeDef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.ClassLayout >> 24] = (2 + 4 + GetIndexSize(TableType.TypeDef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.ClassLayout >> 24] = (2 + 4 + GetIndexSize(TableType.TypeDef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.FieldLayout >> 24] = (4 + GetIndexSize(TableType.Field));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.FieldLayout >> 24] = (4 + GetIndexSize(TableType.Field));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.StandAloneSig >> 24] = (bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.EventMap >> 24] = (GetIndexSize(TableType.TypeDef) + GetIndexSize(TableType.Event));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Event >> 24] = (2 + sheapIdx + GetIndexSize(IndexType.TypeDefOrRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Event >> 24] = (2 + sheapIdx + GetIndexSize(IndexType.TypeDefOrRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.PropertyMap >> 24] = (GetIndexSize(TableType.TypeDef) + GetIndexSize(TableType.Property));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Property >> 24] = (2 + sheapIdx + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Property >> 24] = (2 + sheapIdx + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.MethodSemantics >> 24] = (2 + GetIndexSize(TableType.MethodDef) + GetIndexSize(IndexType.HasSemantics));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.MethodSemantics >> 24] = (2 + GetIndexSize(TableType.MethodDef) + GetIndexSize(IndexType.HasSemantics));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.MethodImpl >> 24] = (GetIndexSize(TableType.TypeDef) + 2 * GetIndexSize(IndexType.MethodDefOrRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.MethodImpl >> 24] = (GetIndexSize(TableType.TypeDef) + 2 * GetIndexSize(IndexType.MethodDefOrRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.ModuleRef >> 24] = (sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.TypeSpec >> 24] = (bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.ImplMap >> 24] = (2 + GetIndexSize(IndexType.MemberForwarded) + sheapIdx + GetIndexSize(TableType.ModuleRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.ImplMap >> 24] = (2 + GetIndexSize(IndexType.MemberForwarded) + sheapIdx + GetIndexSize(TableType.ModuleRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.FieldRVA >> 24] = (4 + GetIndexSize(TableType.Field));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.FieldRVA >> 24] = (4 + GetIndexSize(TableType.Field));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Assembly >> 24] = (4 + 2 + 2 + 2 + 2 + 4 + bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Assembly >> 24] = (4 + 2 + 2 + 2 + 2 + 4 + bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Assembly >> 24] = (4 + 2 + 2 + 2 + 2 + 4 + bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Assembly >> 24] = (4 + 2 + 2 + 2 + 2 + 4 + bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Assembly >> 24] = (4 + 2 + 2 + 2 + 2 + 4 + bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Assembly >> 24] = (4 + 2 + 2 + 2 + 2 + 4 + bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Assembly >> 24] = (4 + 2 + 2 + 2 + 2 + 4 + bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.Assembly >> 24] = (4 + 2 + 2 + 2 + 2 + 4 + bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyProcessor >> 24] = (4);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyProcessor >> 24] = (4);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyOS >> 24] = (4 + 4 + 4);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyOS >> 24] = (4 + 4 + 4);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyOS >> 24] = (4 + 4 + 4);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyOS >> 24] = (4 + 4 + 4);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRef >> 24] = (2 + 2 + 2 + 2 + 4 + 2 * bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRef >> 24] = (2 + 2 + 2 + 2 + 4 + 2 * bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRef >> 24] = (2 + 2 + 2 + 2 + 4 + 2 * bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRef >> 24] = (2 + 2 + 2 + 2 + 4 + 2 * bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRef >> 24] = (2 + 2 + 2 + 2 + 4 + 2 * bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRef >> 24] = (2 + 2 + 2 + 2 + 4 + 2 * bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRef >> 24] = (2 + 2 + 2 + 2 + 4 + 2 * bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRef >> 24] = (2 + 2 + 2 + 2 + 4 + 2 * bheapIdx + 2 * sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRefProcessor >> 24] = (4 + GetIndexSize(TableType.AssemblyRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRefProcessor >> 24] = (4 + GetIndexSize(TableType.AssemblyRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRefOS >> 24] = (4 + 4 + 4 + GetIndexSize(TableType.AssemblyRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRefOS >> 24] = (4 + 4 + 4 + GetIndexSize(TableType.AssemblyRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRefOS >> 24] = (4 + 4 + 4 + GetIndexSize(TableType.AssemblyRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.AssemblyRefOS >> 24] = (4 + 4 + 4 + GetIndexSize(TableType.AssemblyRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.File >> 24] = (4 + sheapIdx + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.File >> 24] = (4 + sheapIdx + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.ExportedType >> 24] = (4 + 4 + 2 * sheapIdx + GetIndexSize(IndexType.Implementation));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.ExportedType >> 24] = (4 + 4 + 2 * sheapIdx + GetIndexSize(IndexType.Implementation));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.ExportedType >> 24] = (4 + 4 + 2 * sheapIdx + GetIndexSize(IndexType.Implementation));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.ExportedType >> 24] = (4 + 4 + 2 * sheapIdx + GetIndexSize(IndexType.Implementation));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.ManifestResource >> 24] = (4 + 4 + sheapIdx + GetIndexSize(IndexType.Implementation));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.ManifestResource >> 24] = (4 + 4 + sheapIdx + GetIndexSize(IndexType.Implementation));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.ManifestResource >> 24] = (4 + 4 + sheapIdx + GetIndexSize(IndexType.Implementation));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.NestedClass >> 24] = (2 * GetIndexSize(TableType.TypeDef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.NestedClass >> 24] = (2 * GetIndexSize(TableType.TypeDef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.GenericParam >> 24] = (2 + 2 + GetIndexSize(IndexType.TypeOrMethodDef) + sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.GenericParam >> 24] = (2 + 2 + GetIndexSize(IndexType.TypeOrMethodDef) + sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.GenericParam >> 24] = (2 + 2 + GetIndexSize(IndexType.TypeOrMethodDef) + sheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.MethodSpec >> 24] = (GetIndexSize(IndexType.MethodDefOrRef) + bheapIdx);
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CalculateRecordSizes,The following statement contains a magic number: sizes[(int)TableType.GenericParamConstraint >> 24] = (GetIndexSize(TableType.GenericParam) + GetIndexSize(IndexType.TypeDefOrRef));
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,GetIndexSize,The following statement contains a magic number: int _table = (int)table >> 24;
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,GetIndexSize,The following statement contains a magic number: if (_rowCounts[_table] > 65535)  				return 4;
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,GetIndexSize,The following statement contains a magic number: if (_rowCounts[_table] > 65535)  				return 4;
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,GetIndexSize,The following statement contains a magic number: return 2;
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,ReadHeapToken,The following statement contains a magic number: var value = (HeapIndexToken)(GetIndexSize(index) == 2 ? (0x0000FFFF & (int)reader.ReadInt16()) : reader.ReadInt32());
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,ReadMetadataToken,The following statement contains a magic number: int value = (GetIndexSize(index) == 2) ? (0x0000FFFF & (int)reader.ReadInt16()) : reader.ReadInt32();
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,ReadIndexValue,The following statement contains a magic number: return new Token(table' GetIndexSize(table) == 2 ? reader.ReadInt16() : reader.ReadInt32());
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,CreateReaderForToken,The following statement contains a magic number: int tableIdx = (int)(token.Table) >> 24;
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,GetRowCount,The following statement contains a magic number: return _rowCounts[((int)table >> 24)];
Magic Number,Mosa.Compiler.Metadata,TableHeap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\TableHeap.cs,GetMaxTokenValue,The following statement contains a magic number: return new Token(table' _rowCounts[((int)table >> 24)]);
Magic Number,Mosa.Compiler.Metadata.Signatures,GenericInstSigType,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Signatures\GenericInstSigType.cs,ToString,The following statement contains a magic number: if (GenericArguments.Length != 0)  			{  				sb.Append(" [ ");    				int index = 0;  				foreach (var type in GenericArguments)  				{  					sb.Append(index.ToString());  					sb.Append(":");  					sb.Append(type.ToString());  					sb.Append("' ");  					index++;  				}    				sb.Length = sb.Length - 2;    				sb.Append(" ]");  			}
Magic Number,Mosa.Compiler.Metadata.Signatures,LocalVariableSignature,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Signatures\LocalVariableSignature.cs,ToString,The following statement contains a magic number: if (Locals.Length != 0)  			{  				sb.Append(" [ ");    				foreach (var local in Locals)  				{  					sb.Append(local.ToString());  					sb.Append("' ");  				}    				sb.Length = sb.Length - 2;    				sb.Append(" ]");  			}
Magic Number,Mosa.Compiler.Metadata.Signatures,MethodSignature,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Signatures\MethodSignature.cs,ToString,The following statement contains a magic number: if (Parameters.Length != 0)  			{  				sb.Append(" [ ");    				foreach (var param in Parameters)  				{  					sb.Append(param.ToString());  					sb.Append("' ");  				}    				sb.Length = sb.Length - 2;    				sb.Append(" ]");  			}
Magic Number,Mosa.Compiler.Metadata.Signatures,MethodSpecSignature,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Signatures\MethodSpecSignature.cs,ToString,The following statement contains a magic number: if (Types.Length != 0)  			{  				sb.Append(" [ ");    				int index = 0;  				foreach (var type in Types)  				{  					sb.Append(index.ToString());  					sb.Append(":");  					sb.Append(type.ToString());  					sb.Append("' ");  					index++;  				}    				sb.Length = sb.Length - 2;    				sb.Append(" ]");  			}
Magic Number,Mosa.Compiler.Metadata.Loader,MetadataRoot,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Loader\MetadataRoot.cs,Initialize,The following statement contains a magic number: for (ushort i = 0; i < streamCnt; i++)  			{  				int offset = reader.ReadInt32();  				int size = reader.ReadInt32();  				int position = (int)reader.BaseStream.Position;  				length = Array.IndexOf<byte>(metadata' 0' position' 32);  				name = Encoding.ASCII.GetString(metadata' position' length - position);  				HeapType kind;  				if (name.Equals("#Strings"))  				{  					kind = HeapType.String;  				}  				else if (name.Equals("#US"))  				{  					kind = HeapType.UserString;  				}  				else if (name.Equals("#Blob"))  				{  					kind = HeapType.Blob;  				}  				else if (name.Equals("#GUID"))  				{  					kind = HeapType.Guid;  				}  				else if (name.Equals("#~"))  				{  					kind = HeapType.Tables;  				}  				else  				{  					throw new NotSupportedException();  				}    				streams[(int)kind] = Heap.CreateHeap(this' kind' metadata' offset' size);    				// Move to the next stream  				reader.BaseStream.Position = length + (4 - length % 4);  			}
Magic Number,Mosa.Compiler.Metadata.Loader,MetadataRoot,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Loader\MetadataRoot.cs,Initialize,The following statement contains a magic number: for (ushort i = 0; i < streamCnt; i++)  			{  				int offset = reader.ReadInt32();  				int size = reader.ReadInt32();  				int position = (int)reader.BaseStream.Position;  				length = Array.IndexOf<byte>(metadata' 0' position' 32);  				name = Encoding.ASCII.GetString(metadata' position' length - position);  				HeapType kind;  				if (name.Equals("#Strings"))  				{  					kind = HeapType.String;  				}  				else if (name.Equals("#US"))  				{  					kind = HeapType.UserString;  				}  				else if (name.Equals("#Blob"))  				{  					kind = HeapType.Blob;  				}  				else if (name.Equals("#GUID"))  				{  					kind = HeapType.Guid;  				}  				else if (name.Equals("#~"))  				{  					kind = HeapType.Tables;  				}  				else  				{  					throw new NotSupportedException();  				}    				streams[(int)kind] = Heap.CreateHeap(this' kind' metadata' offset' size);    				// Move to the next stream  				reader.BaseStream.Position = length + (4 - length % 4);  			}
Magic Number,Mosa.Compiler.Metadata.Loader,MetadataRoot,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Loader\MetadataRoot.cs,Initialize,The following statement contains a magic number: for (ushort i = 0; i < streamCnt; i++)  			{  				int offset = reader.ReadInt32();  				int size = reader.ReadInt32();  				int position = (int)reader.BaseStream.Position;  				length = Array.IndexOf<byte>(metadata' 0' position' 32);  				name = Encoding.ASCII.GetString(metadata' position' length - position);  				HeapType kind;  				if (name.Equals("#Strings"))  				{  					kind = HeapType.String;  				}  				else if (name.Equals("#US"))  				{  					kind = HeapType.UserString;  				}  				else if (name.Equals("#Blob"))  				{  					kind = HeapType.Blob;  				}  				else if (name.Equals("#GUID"))  				{  					kind = HeapType.Guid;  				}  				else if (name.Equals("#~"))  				{  					kind = HeapType.Tables;  				}  				else  				{  					throw new NotSupportedException();  				}    				streams[(int)kind] = Heap.CreateHeap(this' kind' metadata' offset' size);    				// Move to the next stream  				reader.BaseStream.Position = length + (4 - length % 4);  			}
Missing Default,Mosa.Compiler.Metadata,Heap,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Metadata\Heap.cs,CreateHeap,The following switch statement is missing a default case: switch (type)  			{  				case HeapType.String: return new StringHeap(metadata' offset' size);  				case HeapType.Guid: return new GuidHeap(metadata' offset' size);  				case HeapType.Blob: return new BlobHeap(metadata' offset' size);  				case HeapType.UserString: return new UserStringHeap(metadata' offset' size);  				case HeapType.Tables: return new TableHeap(provider' metadata' offset' size);  			}
