Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mosa.Runtime.x86,Division,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Division.cs,DivMod,Cyclomatic complexity of the method is 16
Long Statement,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,GetProtectedRegionEntryByAddress,The length of the statement  "					// If the handler is a exception clause' accept if the exception type is in the is within the inheritance chain of the exception object " is 135.
Complex Conditional,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,GetProtectedRegionEntryByAddress,The conditional expression  "(offset >= start) && (offset < end) && (start >= currentStart) && (end < currentEnd)"  is complex.
Magic Number,Mosa.Runtime.x86,Division,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Division.cs,DivUmod,The following statement contains a magic number: for (int i = 0; i < 65; i++)  			{  				remainder <<= 1;    				if (isFlipped)  				{  					remainder |= 1;  				}    				isFlipped = (quotient & 0x8000000000000000) != 0;    				quotient <<= 1;    				if (remainder >= divisor)  				{  					remainder -= divisor;  					quotient++;  				}  			}
Magic Number,Mosa.Runtime.x86,Division,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Division.cs,DivMod,The following statement contains a magic number: if (dividend < 0)  			{  				if (dividend == -9223372036854775808)  					uQuotient = (ulong)dividend;  				else  					uQuotient = (ulong)-dividend;  				remainderSign = -1;  			}
Magic Number,Mosa.Runtime.x86,Division,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Division.cs,DivMod,The following statement contains a magic number: if (divisor < 0)  			{  				if (divisor == -9223372036854775808)  					uDivisor = (ulong)divisor;  				else  					uDivisor = (ulong)-divisor;  				quotientSign = -1;  			}
Magic Number,Mosa.Runtime.x86,Division,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Division.cs,DivMod,The following statement contains a magic number: for (int i = 0; i < 65; i++)  			{  				uRemainder <<= 1;  				if (isFlipped)  				{  					uRemainder |= 1;  				}    				isFlipped = (uQuotient & 0x8000000000000000) != 0;    				uQuotient <<= 1;    				if (uRemainder >= uDivisor)  				{  					uRemainder -= uDivisor;  					uQuotient++;  				}  			}
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,IsInstanceOfInterfaceType,The following statement contains a magic number: int index = interfaceSlot / 32;
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,IsInstanceOfInterfaceType,The following statement contains a magic number: int bit = interfaceSlot % 32;
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,MemoryCopy,The following statement contains a magic number: uint byteCount = count & 7;
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,MemoryCopy,The following statement contains a magic number: count >>= 3;
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,MemoryCopy,The following statement contains a magic number: for (; count >= 4; count -= 4' _dest += 4' _src += 4)  				Native.Memcpy256(_dest' _src);
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,MemoryCopy,The following statement contains a magic number: for (; count >= 4; count -= 4' _dest += 4' _src += 4)  				Native.Memcpy256(_dest' _src);
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,MemoryCopy,The following statement contains a magic number: for (; count >= 4; count -= 4' _dest += 4' _src += 4)  				Native.Memcpy256(_dest' _src);
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,MemoryCopy,The following statement contains a magic number: for (; count >= 4; count -= 4' _dest += 4' _src += 4)  				Native.Memcpy256(_dest' _src);
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,MemorySet,The following statement contains a magic number: uint value4 = (uint)((val << 24) | (val << 16) | (val << 8) | val);
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,MemorySet,The following statement contains a magic number: uint value4 = (uint)((val << 24) | (val << 16) | (val << 8) | val);
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,MemorySet,The following statement contains a magic number: uint value4 = (uint)((val << 24) | (val << 16) | (val << 8) | val);
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,MemorySet,The following statement contains a magic number: for (; dst < e2; dst += 4)  			{  				Intrinsic.Store32(dst' value4);  			}
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,MemoryClear,The following statement contains a magic number: for (; dst < e2; dst += 4)  			{  				Intrinsic.Store32(dst' 0);  			}
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,DebugOutput,The following statement contains a magic number: Native.Out8(0xEB' (byte)((code >> 24) & 0xFF));
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,DebugOutput,The following statement contains a magic number: Native.Out8(0xEB' (byte)((code >> 16) & 0xFF));
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,DebugOutput,The following statement contains a magic number: Native.Out8(0xEB' (byte)((code >> 8) & 0xFF));
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,GetMethodDefinition,The following statement contains a magic number: table = table + 4;
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,GetMethodDefinition,The following statement contains a magic number: while (entries > 0)  			{  				uint addr = Intrinsic.Load32(table);  				uint size = Intrinsic.Load32(table' NativeIntSize);    				if (address >= addr && address < addr + size)  				{  					return (MDMethodDefinition*)Intrinsic.Load32(table' NativeIntSize * 2);  				}    				table = table + (NativeIntSize * 3);    				entries--;  			}
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,GetMethodDefinition,The following statement contains a magic number: while (entries > 0)  			{  				uint addr = Intrinsic.Load32(table);  				uint size = Intrinsic.Load32(table' NativeIntSize);    				if (address >= addr && address < addr + size)  				{  					return (MDMethodDefinition*)Intrinsic.Load32(table' NativeIntSize * 2);  				}    				table = table + (NativeIntSize * 3);    				entries--;  			}
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,GetMethodDefinitionViaMethodExceptionLookup,The following statement contains a magic number: while (entries > 0)  			{  				uint addr = Intrinsic.Load32(table);  				uint size = Intrinsic.Load32(table' NativeIntSize);    				if (address >= addr && address < addr + size)  				{  					return (MDMethodDefinition*)Intrinsic.Load32(table' NativeIntSize * 2);  				}    				table = table + (NativeIntSize * 3);    				entries--;  			}
Magic Number,Mosa.Runtime.x86,Internal,C:\repos\mosa_MOSA-Project\Source\Mosa.Runtime.x86\Internal.cs,GetMethodDefinitionViaMethodExceptionLookup,The following statement contains a magic number: while (entries > 0)  			{  				uint addr = Intrinsic.Load32(table);  				uint size = Intrinsic.Load32(table' NativeIntSize);    				if (address >= addr && address < addr + size)  				{  					return (MDMethodDefinition*)Intrinsic.Load32(table' NativeIntSize * 2);  				}    				table = table + (NativeIntSize * 3);    				entries--;  			}
