Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Mosa.Compiler.Pdb,CvLine,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvLine.cs,CvLine,The method has 5 parameters. Parameters: segment' offset' line' startCol' endCol
Long Statement,Mosa.Compiler.Pdb,CvLineEnumerator,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvLineEnumerator.cs,GetEnumerator,The length of the statement  "						Debug.WriteLine(String.Format("Line numbers table header: size={0}' fileOffset={1}' numberOfLines={2}' sizeOfLines={3}' address={4:x4}:{5:x8}"' size' fileOffset' numberOfLines' sizeOfLines' seg' start)); " is 203.
Long Statement,Mosa.Compiler.Pdb,PdbFileHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbFileHeader.cs,Read,The length of the statement  "				Debug.WriteLine(String.Format("PdbFileHeader:\n\tSignature={0}\n\tPageSize={1}\n\tBitmapPage={2} (at offset {3})\n\tFilePages={4}\n\tRootBytes={5}\n\tReserved={6}\n\tIndexPage={7} (at offset {8})"' sig' header.dwPageSize' header.dwBitmapPage' header.dwBitmapPage * header.dwPageSize' header.dwFilePages' header.dwRootBytes' header.dwReserved' header.dwIndexPage' header.dwIndexPage * header.dwPageSize)); " is 404.
Long Statement,Mosa.Compiler.Pdb,PdbReader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbReader.cs,LoadRootStream,The length of the statement  "				Debug.WriteLine(String.Format(@"PdbReader: Root stream page {0} (at offset {1})"' pages[i]' pages[i] * header.dwPageSize)); " is 123.
Long Statement,Mosa.Compiler.Pdb,PdbRootStream,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbRootStream.cs,Read,The length of the statement  "						Debug.WriteLine(String.Format("\t\tPage {0} (at offset {1})"' rootStream.streamPages[i][j]' rootStream.streamPages[i][j] * pageSize)); " is 134.
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,CvFunctionSymbol3,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvFunctionSymbol3.cs,CvFunctionSymbol3,The constructor "CvFunctionSymbol3" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,CvFunctionSymbol3,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvFunctionSymbol3.cs,CvFunctionSymbol3,The constructor "CvFunctionSymbol3" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,CvFunctionSymbol3,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvFunctionSymbol3.cs,CvFunctionSymbol3,The constructor "CvFunctionSymbol3" calls a virtual method "ReadInt16".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,CvPublicSymbol3,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvPublicSymbol3.cs,CvPublicSymbol3,The constructor "CvPublicSymbol3" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,CvPublicSymbol3,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvPublicSymbol3.cs,CvPublicSymbol3,The constructor "CvPublicSymbol3" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,CvPublicSymbol3,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvPublicSymbol3.cs,CvPublicSymbol3,The constructor "CvPublicSymbol3" calls a virtual method "ReadInt16".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbSymbolRangeEx,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbSymbolRangeEx.cs,PdbSymbolRangeEx,The constructor "PdbSymbolRangeEx" calls a virtual method "ReadInt16".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbSymbolRangeEx,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbSymbolRangeEx.cs,PdbSymbolRangeEx,The constructor "PdbSymbolRangeEx" calls a virtual method "ReadInt16".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbSymbolRangeEx,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbSymbolRangeEx.cs,PdbSymbolRangeEx,The constructor "PdbSymbolRangeEx" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbSymbolRangeEx,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbSymbolRangeEx.cs,PdbSymbolRangeEx,The constructor "PdbSymbolRangeEx" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbSymbolRangeEx,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbSymbolRangeEx.cs,PdbSymbolRangeEx,The constructor "PdbSymbolRangeEx" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbSymbolRangeEx,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbSymbolRangeEx.cs,PdbSymbolRangeEx,The constructor "PdbSymbolRangeEx" calls a virtual method "ReadInt16".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbSymbolRangeEx,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbSymbolRangeEx.cs,PdbSymbolRangeEx,The constructor "PdbSymbolRangeEx" calls a virtual method "ReadInt16".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbSymbolRangeEx,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbSymbolRangeEx.cs,PdbSymbolRangeEx,The constructor "PdbSymbolRangeEx" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbSymbolRangeEx,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbSymbolRangeEx.cs,PdbSymbolRangeEx,The constructor "PdbSymbolRangeEx" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbType,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbType.cs,PdbType,The constructor "PdbType" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbType,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbType.cs,PdbType,The constructor "PdbType" calls a virtual method "ReadInt16".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbType,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbType.cs,PdbType,The constructor "PdbType" calls a virtual method "ReadInt16".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbType,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbType.cs,PdbType,The constructor "PdbType" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbType,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbType.cs,PdbType,The constructor "PdbType" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbType,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbType.cs,PdbType,The constructor "PdbType" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbType,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbType.cs,PdbType,The constructor "PdbType" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbType,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbType.cs,PdbType,The constructor "PdbType" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbType,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbType.cs,PdbType,The constructor "PdbType" calls a virtual method "ReadInt32".
Virtual Method Call from Constructor,Mosa.Compiler.Pdb,PdbType,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbType.cs,PdbType,The constructor "PdbType" calls a virtual method "ReadInt32".
Magic Number,Mosa.Compiler.Pdb,CvLineEnumerator,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvLineEnumerator.cs,GetEnumerator,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(this.reader.GetStream(stream)))  			{  				reader.BaseStream.Position = offset;    				do  				{  					header = reader.ReadInt32();    					//Debug.Assert(header == 0x000000F2' @"CvLineEnumerator: Header magic invalid for PDB v7.00");  					if (header != 0x000000F2)    						// Skip this' assume no line numbers  						yield break;    					nextBlockOffset = reader.ReadInt32();  					start = reader.ReadInt32();  					seg = reader.ReadInt32() & 0xFFFF;    					// Is this the function we're looking for?  					if (true || start == functionAddress)  					{  						size = reader.ReadInt32();  						fileOffset = reader.ReadInt32();  						numberOfLines = reader.ReadInt32();  						sizeOfLines = reader.ReadInt32();  						Debug.WriteLine(String.Format("Line numbers table header: size={0}' fileOffset={1}' numberOfLines={2}' sizeOfLines={3}' address={4:x4}:{5:x8}"' size' fileOffset' numberOfLines' sizeOfLines' seg' start));    						int[] startCol = new int[numberOfLines]' endCol = new int[numberOfLines];  						long pos = reader.BaseStream.Position;    						// Skip ahead by numberOfLines*8 bytes  						reader.BaseStream.Position = pos + (8 * numberOfLines);    						// Start reading in the columns  						for (int i = 0; i < numberOfLines; i++)  						{  							startCol[i] = reader.ReadInt16();  							endCol[i] = reader.ReadInt16();  						}    						// Enumerate the lines  						reader.BaseStream.Position = pos;  						for (int i = 0; i < numberOfLines; i++)  						{  							int instructionOffset = reader.ReadInt32();  							int line = reader.ReadInt32() & 0x7FFFFFFF;    							yield return new CvLine(seg' start + instructionOffset' line' startCol[i]' endCol[i]);  						}    						// Skip over the lines  						reader.BaseStream.Position += (numberOfLines * 4);  					}  					else  					{  						// Skip to the next block  						reader.BaseStream.Position += (nextBlockOffset - 4);  					}  				}  				while (nextBlockOffset != 0);  			}
Magic Number,Mosa.Compiler.Pdb,CvLineEnumerator,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvLineEnumerator.cs,GetEnumerator,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(this.reader.GetStream(stream)))  			{  				reader.BaseStream.Position = offset;    				do  				{  					header = reader.ReadInt32();    					//Debug.Assert(header == 0x000000F2' @"CvLineEnumerator: Header magic invalid for PDB v7.00");  					if (header != 0x000000F2)    						// Skip this' assume no line numbers  						yield break;    					nextBlockOffset = reader.ReadInt32();  					start = reader.ReadInt32();  					seg = reader.ReadInt32() & 0xFFFF;    					// Is this the function we're looking for?  					if (true || start == functionAddress)  					{  						size = reader.ReadInt32();  						fileOffset = reader.ReadInt32();  						numberOfLines = reader.ReadInt32();  						sizeOfLines = reader.ReadInt32();  						Debug.WriteLine(String.Format("Line numbers table header: size={0}' fileOffset={1}' numberOfLines={2}' sizeOfLines={3}' address={4:x4}:{5:x8}"' size' fileOffset' numberOfLines' sizeOfLines' seg' start));    						int[] startCol = new int[numberOfLines]' endCol = new int[numberOfLines];  						long pos = reader.BaseStream.Position;    						// Skip ahead by numberOfLines*8 bytes  						reader.BaseStream.Position = pos + (8 * numberOfLines);    						// Start reading in the columns  						for (int i = 0; i < numberOfLines; i++)  						{  							startCol[i] = reader.ReadInt16();  							endCol[i] = reader.ReadInt16();  						}    						// Enumerate the lines  						reader.BaseStream.Position = pos;  						for (int i = 0; i < numberOfLines; i++)  						{  							int instructionOffset = reader.ReadInt32();  							int line = reader.ReadInt32() & 0x7FFFFFFF;    							yield return new CvLine(seg' start + instructionOffset' line' startCol[i]' endCol[i]);  						}    						// Skip over the lines  						reader.BaseStream.Position += (numberOfLines * 4);  					}  					else  					{  						// Skip to the next block  						reader.BaseStream.Position += (nextBlockOffset - 4);  					}  				}  				while (nextBlockOffset != 0);  			}
Magic Number,Mosa.Compiler.Pdb,CvLineEnumerator,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvLineEnumerator.cs,GetEnumerator,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(this.reader.GetStream(stream)))  			{  				reader.BaseStream.Position = offset;    				do  				{  					header = reader.ReadInt32();    					//Debug.Assert(header == 0x000000F2' @"CvLineEnumerator: Header magic invalid for PDB v7.00");  					if (header != 0x000000F2)    						// Skip this' assume no line numbers  						yield break;    					nextBlockOffset = reader.ReadInt32();  					start = reader.ReadInt32();  					seg = reader.ReadInt32() & 0xFFFF;    					// Is this the function we're looking for?  					if (true || start == functionAddress)  					{  						size = reader.ReadInt32();  						fileOffset = reader.ReadInt32();  						numberOfLines = reader.ReadInt32();  						sizeOfLines = reader.ReadInt32();  						Debug.WriteLine(String.Format("Line numbers table header: size={0}' fileOffset={1}' numberOfLines={2}' sizeOfLines={3}' address={4:x4}:{5:x8}"' size' fileOffset' numberOfLines' sizeOfLines' seg' start));    						int[] startCol = new int[numberOfLines]' endCol = new int[numberOfLines];  						long pos = reader.BaseStream.Position;    						// Skip ahead by numberOfLines*8 bytes  						reader.BaseStream.Position = pos + (8 * numberOfLines);    						// Start reading in the columns  						for (int i = 0; i < numberOfLines; i++)  						{  							startCol[i] = reader.ReadInt16();  							endCol[i] = reader.ReadInt16();  						}    						// Enumerate the lines  						reader.BaseStream.Position = pos;  						for (int i = 0; i < numberOfLines; i++)  						{  							int instructionOffset = reader.ReadInt32();  							int line = reader.ReadInt32() & 0x7FFFFFFF;    							yield return new CvLine(seg' start + instructionOffset' line' startCol[i]' endCol[i]);  						}    						// Skip over the lines  						reader.BaseStream.Position += (numberOfLines * 4);  					}  					else  					{  						// Skip to the next block  						reader.BaseStream.Position += (nextBlockOffset - 4);  					}  				}  				while (nextBlockOffset != 0);  			}
Magic Number,Mosa.Compiler.Pdb,CvSymbolEnumerator,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvSymbolEnumerator.cs,GetEnumerator,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(cvStream))  			{  				object state = Prepare(reader);    				do  				{  					// Read the len+id of the symbol  					long startPos = cvStream.Position;  					CvSymbol symbol = CvSymbol.Read(reader);  					yield return symbol;    					// Skip to the next 4 byte boundary  					CvUtil.PadToBoundary(reader' 4);    					long nextPos = startPos + symbol.Length + 2;  					if (nextPos < cvStream.Length)  					{  						// Move to the next symbol  						cvStream.Seek(nextPos' SeekOrigin.Begin);  					}  					else  					{  						break;  					}  				}  				while (IsComplete(state) == false);  			}
Magic Number,Mosa.Compiler.Pdb,CvSymbolEnumerator,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvSymbolEnumerator.cs,GetEnumerator,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(cvStream))  			{  				object state = Prepare(reader);    				do  				{  					// Read the len+id of the symbol  					long startPos = cvStream.Position;  					CvSymbol symbol = CvSymbol.Read(reader);  					yield return symbol;    					// Skip to the next 4 byte boundary  					CvUtil.PadToBoundary(reader' 4);    					long nextPos = startPos + symbol.Length + 2;  					if (nextPos < cvStream.Length)  					{  						// Move to the next symbol  						cvStream.Seek(nextPos' SeekOrigin.Begin);  					}  					else  					{  						break;  					}  				}  				while (IsComplete(state) == false);  			}
Magic Number,Mosa.Compiler.Pdb,CvUtil,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvUtil.cs,ReadString,The following statement contains a magic number: int size = 32' oldSize = 0' offset = 0' term;
Magic Number,Mosa.Compiler.Pdb,CvUtil,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\CvUtil.cs,ReadString,The following statement contains a magic number: do  			{  				// Read additional bytes from the buffer  				reader.Read(chars' offset' size - oldSize);    				// Determine the index of the \0  				term = Array.IndexOf(chars' (byte)0);  				if (term == -1)  				{  					// No terminator' extend the buffer  					oldSize = size;  					offset = size;  					size *= 2;  					Array.Resize(ref chars' size);  				}  			}  			while (term == -1);
Magic Number,Mosa.Compiler.Pdb,CvTypeSymbolEnumerator,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbReadType.cs,Prepare,The following statement contains a magic number: if (version != 4)  					throw new InvalidDataException(@"PDB symbol table has unsupported header.");
Magic Number,Mosa.Compiler.Pdb,PdbSymbolHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbSymbolHeader.cs,Read,The following statement contains a magic number: header.resvd = new int[5];
Magic Number,Mosa.Compiler.Pdb,PdbSymbolHeader,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbSymbolHeader.cs,Read,The following statement contains a magic number: for (int i = 0; i < 5; i++)  				header.resvd[i] = reader.ReadInt32();
Magic Number,Mosa.Compiler.Pdb,PdbType,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbType.cs,PdbType,The following statement contains a magic number: CvUtil.PadToBoundary(reader' 4);
Missing Default,Mosa.Compiler.Pdb,PdbStream,C:\repos\mosa_MOSA-Project\Source\Mosa.Compiler.Pdb\PdbStream.cs,Seek,The following switch statement is missing a default case: switch (origin)  			{  				case SeekOrigin.Begin:  					position = offset;  					break;    				case SeekOrigin.Current:  					position += offset;  					break;    				case SeekOrigin.End:  					position = length - offset;  					break;  			}
