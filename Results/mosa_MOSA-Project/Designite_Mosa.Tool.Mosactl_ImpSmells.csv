Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mosa.Utility.Launcher,AppLocations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.Launcher\AppLocations.cs,FindApplications,The method has 214 lines of code.
Complex Method,Mosa.Tool.Mosactl,MosaCtl,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Tool.Mosactl\MosaCtl.cs,GetEnv,Cyclomatic complexity of the method is 13
Complex Method,Mosa.Tool.Mosactl,MosaCtl,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Tool.Mosactl\MosaCtl.cs,Run,Cyclomatic complexity of the method is 18
Complex Method,Mosa.Tool.Mosactl,MosaCtl,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Tool.Mosactl\MosaCtl.cs,TaskRuntime,Cyclomatic complexity of the method is 8
Complex Method,Mosa.Utility.Launcher,AppLocations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.Launcher\AppLocations.cs,FindApplications,Cyclomatic complexity of the method is 14
Complex Method,Mosa.Utility.Launcher,AppLocations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.Launcher\AppLocations.cs,TryFind,Cyclomatic complexity of the method is 8
Long Statement,Mosa.Tool.Mosactl,MosaCtl,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Tool.Mosactl\MosaCtl.cs,PrintHelp,The length of the statement  "			using (var reader = new StreamReader(typeof(MosaCtl).Assembly.GetManifestResourceStream("Mosa.Tool.Mosactl.Help." + name + ".txt"))) " is 132.
Long Statement,Mosa.Tool.Mosactl,MosaCtl,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Tool.Mosactl\MosaCtl.cs,TaskUnitTest,The length of the statement  "			if (!CallProcess(SourceDir' GetEnv("MOSA_MSBUILD")' "Mosa.Utility.UnitTests/Mosa.Utility.UnitTests.csproj"' "/p:Configuration=Debug"' "/p:Platform=\"AnyCPU\""' "-verbosity:minimal")) " is 182.
Long Statement,Mosa.Tool.Mosactl,MosaCtl,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Tool.Mosactl\MosaCtl.cs,TaskDebug,The length of the statement  "				CallProcess(BinDir' GetEnv("${MOSA_BIN}/Mosa.Tool.GDBDebugger${MOSA_TOOL_EXT}")' "--image"' ExpandKernelBinPath(OsName) + ".bin"' "--autostart"' "--debugfile"' ExpandKernelBinPath(OsName) + ".debug"); " is 200.
Long Statement,Mosa.Tool.Mosactl,MosaCtl,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Tool.Mosactl\MosaCtl.cs,GenerateGDBFile,The length of the statement  "			sb.AppendLine($"gdb -x {ExpandKernelBinPath(OsName)}.gdb\t.script -x {GetEnv("${MOSA_ROOT}/Ressources/settings.gdb")}"); " is 120.
Long Statement,Mosa.Utility.Launcher,AppLocations,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.Launcher\AppLocations.cs,FindApplications,The length of the statement  "						CombineParameterAndDirectory("ProgramFiles(x86)"' @"Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64")' " is 120.
Magic Number,Mosa.Tool.Mosactl,MosaCtl,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Tool.Mosactl\MosaCtl.cs,CallQemu,The following statement contains a magic number: var th2 = new Thread(() =>  				{  					Thread.Sleep(5000);  					if (!p.HasExited)  					{  						Console.WriteLine("Test Timeout");  						p.Kill();  					}  				});
Magic Number,Mosa.Tool.Mosactl,MosaCtl,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Tool.Mosactl\MosaCtl.cs,CallQemu,The following statement contains a magic number: return p.ExitCode == 0 || p.ExitCode == 137 || p.ExitCode == -1;
Missing Default,Mosa.Tool.Mosactl,MosaCtl,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Tool.Mosactl\MosaCtl.cs,GetEnv,The following switch statement is missing a default case: switch (name)  				{  					case "MOSA_ROOT":  						value = Path.GetDirectoryName(Path.GetDirectoryName(new Uri(typeof(Program).Assembly.Location).AbsolutePath));  						break;    					case "MOSA_BIN":  						value = Path.Combine(GetEnv("MOSA_ROOT")' "bin");  						break;    					case "MOSA_SOURCE":  						value = Path.Combine(GetEnv("MOSA_ROOT")' "Source");  						break;    					case "MOSA_TOOLS":  						value = Path.Combine(GetEnv("MOSA_ROOT")' "Tools");  						break;    					case "MOSA_NUGET":  						value = Path.Combine(GetEnv("MOSA_TOOLS")' "nuget"' "nuget.exe");  						break;    					case "MOSA_MSBUILD":  						value = appLocations.MsBuild;  						break;    					case "MOSA_WIN_OSDIR":  						value = @"C:\Windows";  						break;    					case "MOSA_WIN_PROGRAMS":  						value = @"C:\Program Files"; // TODO  						break;    					case "MOSA_WIN_PROGRAMS_X86":  						value = @"C:\Program Files (x86)"; // TODO  						break;    					case "MOSA_TOOL_EXT":  						value = IsWin ? ".exe" : "";  						break;  				}
Missing Default,Mosa.Tool.Mosactl,MosaCtl,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Tool.Mosactl\MosaCtl.cs,Run,The following switch statement is missing a default case: switch (args[0])  			{  				case "tools":  					if (!TaskTools(CheckType.force))  						Environment.Exit(1);  					break;    				case "runtime":  					if (!TaskRuntime(CheckType.force))  						Environment.Exit(1);  					break;    				case "net":  				case "dotnet":  					if (!TaskCILBuild(CheckType.force' args))  						Environment.Exit(1);  					break;    				case "bin":  				case "binary":  					if (!TaskBinaryBuild(CheckType.force' args))  						Environment.Exit(1);  					break;    				case "run":  					if (!TaskRun(args))  						Environment.Exit(1);  					break;    				case "test":  					if (!TaskTest(args))  						Environment.Exit(1);  					break;    				case "unittest":  					if (!TaskUnitTest(args))  						Environment.Exit(1);  					break;    				case "debug":  					TaskDebug(args);  					break;    				case "help":  					PrintHelp("usage");  					break;  			}
Missing Default,Mosa.Tool.Mosactl,MosaCtl,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Tool.Mosactl\MosaCtl.cs,ExpandKernelName,The following switch statement is missing a default case: switch (name.ToLower())  			{  				case "helloworld":  					return "Mosa.HelloWorld.x86";    				case "coolworld":  					return "Mosa.CoolWorld.x86";    				case "testworld":  					return "Mosa.TestWorld.x86";    				case "unittests":  					return "Mosa.UnitTests.x86";  			}
