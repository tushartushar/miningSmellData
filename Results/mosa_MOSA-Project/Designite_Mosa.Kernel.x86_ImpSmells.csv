Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The method has 261 lines of code.
Complex Method,Mosa.Kernel.x86,CpuInfo,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintBrand,Cyclomatic complexity of the method is 9
Long Parameter List,Mosa.Kernel.x86,ConsoleManager,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\ConsoleManager.cs,RawWrite,The method has 5 parameters. Parameters: console' row' column' chr' color
Long Parameter List,Mosa.Kernel.x86,GDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Set,The method has 5 parameters. Parameters: index' address' limit' access' granularity
Long Statement,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetInt32,The length of the statement  "			return (Intrinsic.Load8(Address.DebuggerBuffer' offset + 3) << 24) | (Intrinsic.Load8(Address.DebuggerBuffer' offset + 2) << 16) | (Intrinsic.Load8(Address.DebuggerBuffer' offset + 1) << 8) | Intrinsic.Load8(Address.DebuggerBuffer' offset + 0); " is 244.
Long Statement,Mosa.Kernel.x86,PageTable,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The length of the statement  "				Intrinsic.Store32(Address.PageDirectory' (index << 2)' (uint)(Address.PageTable + (index * 4096) | 0x04 | 0x02 | 0x01)); " is 120.
Long Statement,Mosa.Kernel.x86,PageTable,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,MapVirtualAddressToPhysical,The length of the statement  "			//Native.Set32(Address.PageTable + ((virtualAddress & 0xFFC00000u) >> 10)' physicalAddress & 0xFFC00000u | 0x04u | 0x02u | (present ? 0x1u : 0x0u)); " is 148.
Long Statement,Mosa.Kernel.x86,PageTable,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,MapVirtualAddressToPhysical,The length of the statement  "			Intrinsic.Store32(Address.PageTable' ((virtualAddress & 0xFFFFF000u) >> 10)' physicalAddress & 0xFFFFF000u | 0x04u | 0x02u | (present ? 0x1u : 0x0u)); " is 150.
Complex Conditional,Mosa.Kernel.x86.Smbios,SmbiosManager,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Smbios\SmbiosManager.cs,LocateEntryPoint,The conditional expression  "a == '_' && s == 'S' && m == 'M' && b == '_'"  is complex.
Magic Number,Mosa.Kernel.x86,LZF,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\LZF.cs,Decompress,The following statement contains a magic number: do  			{  				//uint ctrl = input[iidx++];  				uint ctrl = Intrinsic.Load8(input' iidx);  				iidx++;    				if (ctrl < (1 << 5)) /* literal run */  				{  					ctrl++;    					if (oidx + ctrl > outputLength)  					{  						//SET_ERRNO (E2BIG);  						return false;  					}    					do  					{  						//output[oidx++] = input[iidx++];  						Intrinsic.Store8(output' oidx' Intrinsic.Load8(input' iidx));  						oidx++;  						iidx++;  					}  					while ((--ctrl) != 0);  				}  				else /* back reference */  				{  					uint len = ctrl >> 5;    					uint reference = (uint)(oidx - ((ctrl & 0x1f) << 8) - 1);    					if (len == 7)  					{  						//len += input[iidx++];  						len += Intrinsic.Load8(input' iidx);  						iidx++;  					}    					//reference -= input[iidx++];  					reference -= Intrinsic.Load8(input' iidx);  					iidx++;    					if (oidx + len + 2 > outputLength)  					{  						//SET_ERRNO (E2BIG);  						return false;  					}    					if (reference < 0)  					{  						//SET_ERRNO (EINVAL);  						return false;  					}    					//output[oidx++] = output[reference++];  					Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  					oidx++;  					reference++;    					//output[oidx++] = output[reference++];  					Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  					oidx++;  					reference++;    					do  					{  						//output[oidx++] = output[reference++];  						Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  						oidx++;  						reference++;  					}  					while ((--len) != 0);  				}  			}  			while (iidx < inputLength);
Magic Number,Mosa.Kernel.x86,LZF,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\LZF.cs,Decompress,The following statement contains a magic number: do  			{  				//uint ctrl = input[iidx++];  				uint ctrl = Intrinsic.Load8(input' iidx);  				iidx++;    				if (ctrl < (1 << 5)) /* literal run */  				{  					ctrl++;    					if (oidx + ctrl > outputLength)  					{  						//SET_ERRNO (E2BIG);  						return false;  					}    					do  					{  						//output[oidx++] = input[iidx++];  						Intrinsic.Store8(output' oidx' Intrinsic.Load8(input' iidx));  						oidx++;  						iidx++;  					}  					while ((--ctrl) != 0);  				}  				else /* back reference */  				{  					uint len = ctrl >> 5;    					uint reference = (uint)(oidx - ((ctrl & 0x1f) << 8) - 1);    					if (len == 7)  					{  						//len += input[iidx++];  						len += Intrinsic.Load8(input' iidx);  						iidx++;  					}    					//reference -= input[iidx++];  					reference -= Intrinsic.Load8(input' iidx);  					iidx++;    					if (oidx + len + 2 > outputLength)  					{  						//SET_ERRNO (E2BIG);  						return false;  					}    					if (reference < 0)  					{  						//SET_ERRNO (EINVAL);  						return false;  					}    					//output[oidx++] = output[reference++];  					Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  					oidx++;  					reference++;    					//output[oidx++] = output[reference++];  					Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  					oidx++;  					reference++;    					do  					{  						//output[oidx++] = output[reference++];  						Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  						oidx++;  						reference++;  					}  					while ((--len) != 0);  				}  			}  			while (iidx < inputLength);
Magic Number,Mosa.Kernel.x86,LZF,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\LZF.cs,Decompress,The following statement contains a magic number: do  			{  				//uint ctrl = input[iidx++];  				uint ctrl = Intrinsic.Load8(input' iidx);  				iidx++;    				if (ctrl < (1 << 5)) /* literal run */  				{  					ctrl++;    					if (oidx + ctrl > outputLength)  					{  						//SET_ERRNO (E2BIG);  						return false;  					}    					do  					{  						//output[oidx++] = input[iidx++];  						Intrinsic.Store8(output' oidx' Intrinsic.Load8(input' iidx));  						oidx++;  						iidx++;  					}  					while ((--ctrl) != 0);  				}  				else /* back reference */  				{  					uint len = ctrl >> 5;    					uint reference = (uint)(oidx - ((ctrl & 0x1f) << 8) - 1);    					if (len == 7)  					{  						//len += input[iidx++];  						len += Intrinsic.Load8(input' iidx);  						iidx++;  					}    					//reference -= input[iidx++];  					reference -= Intrinsic.Load8(input' iidx);  					iidx++;    					if (oidx + len + 2 > outputLength)  					{  						//SET_ERRNO (E2BIG);  						return false;  					}    					if (reference < 0)  					{  						//SET_ERRNO (EINVAL);  						return false;  					}    					//output[oidx++] = output[reference++];  					Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  					oidx++;  					reference++;    					//output[oidx++] = output[reference++];  					Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  					oidx++;  					reference++;    					do  					{  						//output[oidx++] = output[reference++];  						Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  						oidx++;  						reference++;  					}  					while ((--len) != 0);  				}  			}  			while (iidx < inputLength);
Magic Number,Mosa.Kernel.x86,LZF,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\LZF.cs,Decompress,The following statement contains a magic number: do  			{  				//uint ctrl = input[iidx++];  				uint ctrl = Intrinsic.Load8(input' iidx);  				iidx++;    				if (ctrl < (1 << 5)) /* literal run */  				{  					ctrl++;    					if (oidx + ctrl > outputLength)  					{  						//SET_ERRNO (E2BIG);  						return false;  					}    					do  					{  						//output[oidx++] = input[iidx++];  						Intrinsic.Store8(output' oidx' Intrinsic.Load8(input' iidx));  						oidx++;  						iidx++;  					}  					while ((--ctrl) != 0);  				}  				else /* back reference */  				{  					uint len = ctrl >> 5;    					uint reference = (uint)(oidx - ((ctrl & 0x1f) << 8) - 1);    					if (len == 7)  					{  						//len += input[iidx++];  						len += Intrinsic.Load8(input' iidx);  						iidx++;  					}    					//reference -= input[iidx++];  					reference -= Intrinsic.Load8(input' iidx);  					iidx++;    					if (oidx + len + 2 > outputLength)  					{  						//SET_ERRNO (E2BIG);  						return false;  					}    					if (reference < 0)  					{  						//SET_ERRNO (EINVAL);  						return false;  					}    					//output[oidx++] = output[reference++];  					Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  					oidx++;  					reference++;    					//output[oidx++] = output[reference++];  					Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  					oidx++;  					reference++;    					do  					{  						//output[oidx++] = output[reference++];  						Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  						oidx++;  						reference++;  					}  					while ((--len) != 0);  				}  			}  			while (iidx < inputLength);
Magic Number,Mosa.Kernel.x86,LZF,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\LZF.cs,Decompress,The following statement contains a magic number: do  			{  				//uint ctrl = input[iidx++];  				uint ctrl = Intrinsic.Load8(input' iidx);  				iidx++;    				if (ctrl < (1 << 5)) /* literal run */  				{  					ctrl++;    					if (oidx + ctrl > outputLength)  					{  						//SET_ERRNO (E2BIG);  						return false;  					}    					do  					{  						//output[oidx++] = input[iidx++];  						Intrinsic.Store8(output' oidx' Intrinsic.Load8(input' iidx));  						oidx++;  						iidx++;  					}  					while ((--ctrl) != 0);  				}  				else /* back reference */  				{  					uint len = ctrl >> 5;    					uint reference = (uint)(oidx - ((ctrl & 0x1f) << 8) - 1);    					if (len == 7)  					{  						//len += input[iidx++];  						len += Intrinsic.Load8(input' iidx);  						iidx++;  					}    					//reference -= input[iidx++];  					reference -= Intrinsic.Load8(input' iidx);  					iidx++;    					if (oidx + len + 2 > outputLength)  					{  						//SET_ERRNO (E2BIG);  						return false;  					}    					if (reference < 0)  					{  						//SET_ERRNO (EINVAL);  						return false;  					}    					//output[oidx++] = output[reference++];  					Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  					oidx++;  					reference++;    					//output[oidx++] = output[reference++];  					Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  					oidx++;  					reference++;    					do  					{  						//output[oidx++] = output[reference++];  						Intrinsic.Store8(output' oidx' Intrinsic.Load8(output' reference));  						oidx++;  						reference++;  					}  					while ((--len) != 0);  				}  			}  			while (iidx < inputLength);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,QueueUnitTest,The following statement contains a magic number: if (queueNext + len + 32 >= Address.UnitTestQueue + TestQueueSize)  			{  				if (Address.UnitTestQueue + len + 32 >= queueCurrent)  					return false; // no space    				Intrinsic.Store32(queueNext' uint.MaxValue); // mark jump to front    				// cycle to front  				queueNext = Address.UnitTestQueue;  			}
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,QueueUnitTest,The following statement contains a magic number: if (queueNext + len + 32 >= Address.UnitTestQueue + TestQueueSize)  			{  				if (Address.UnitTestQueue + len + 32 >= queueCurrent)  					return false; // no space    				Intrinsic.Store32(queueNext' uint.MaxValue); // mark jump to front    				// cycle to front  				queueNext = Address.UnitTestQueue;  			}
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,QueueUnitTest,The following statement contains a magic number: Intrinsic.Store32(queueNext' len + 4);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,QueueUnitTest,The following statement contains a magic number: queueNext = queueNext + 4;
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,QueueUnitTest,The following statement contains a magic number: queueNext = queueNext + 4;
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,QueueUnitTest,The following statement contains a magic number: for (uint i = start; i < end; i = i + 4)  			{  				uint value = Intrinsic.Load32(i);  				Intrinsic.Store32(queueNext' value);  				queueNext = queueNext + 4;  			}
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,QueueUnitTest,The following statement contains a magic number: for (uint i = start; i < end; i = i + 4)  			{  				uint value = Intrinsic.Load32(i);  				Intrinsic.Store32(queueNext' value);  				queueNext = queueNext + 4;  			}
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: uint id = Intrinsic.Load32(queueCurrent' 4);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: uint address = Intrinsic.Load32(queueCurrent' 8);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: uint type = Intrinsic.Load32(queueCurrent' 12);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: uint paramcnt = Intrinsic.Load32(queueCurrent' 16);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: for (uint index = 0; index < paramcnt; index++)  			{  				uint value = Intrinsic.Load32(queueCurrent' 20 + (index * 4));  				UnitTestRunner.SetUnitTestMethodParameter(index' value);  			}
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: for (uint index = 0; index < paramcnt; index++)  			{  				uint value = Intrinsic.Load32(queueCurrent' 20 + (index * 4));  				UnitTestRunner.SetUnitTestMethodParameter(index' value);  			}
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: queueCurrent = queueCurrent + len + 4;
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Goto(17' 0);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(id' 10' 5);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(id' 10' 5);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(paramcnt' 10' 2);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(paramcnt' 10' 2);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(len' 10' 4);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(len' 10' 4);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(count' 10' 4);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(count' 10' 4);
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: uint esp = Native.AllocateStackSpace(MaxParameters * 4);
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: Screen.Write((uint)esp' 16' 8);
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: Screen.Write((uint)esp' 16' 8);
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: while (true)  			{  				if (testReady == 1)  				{  					Screen.Goto(row' 0);  					Screen.ClearRow();    					Screen.Write("Test #: ");  					Screen.Write(++testCount' 10' 7);    					//Screen.Write(" [X  ]");  					//Screen.Column = Screen.Column - 3;    					testResult = 0;  					testResultReady = 0;  					testResultReported = 0;  					testReady = 0;    					// copy parameters into stack  					for (uint index = 0; index < testParameters; index++)  					{  						uint value = Intrinsic.Load32(Address.UnitTestStack' (index * 4));    						Intrinsic.Store32(esp' (index * 4)' value);  					}    					switch (testResultType)  					{  						case 0: Native.FrameCall(testMethodAddress); break;  						case 1: testResult = Native.FrameCallRetU4(testMethodAddress); break;  						case 2: testResult = Native.FrameCallRetU8(testMethodAddress); break;  						case 3: testResult = Native.FrameCallRetR8(testMethodAddress); break;  						default: break;  					}    					testResultReady = 1;    					//Screen.Write("X");    					Native.Int(255);    					//Screen.Write("X");  				}  			}
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: while (true)  			{  				if (testReady == 1)  				{  					Screen.Goto(row' 0);  					Screen.ClearRow();    					Screen.Write("Test #: ");  					Screen.Write(++testCount' 10' 7);    					//Screen.Write(" [X  ]");  					//Screen.Column = Screen.Column - 3;    					testResult = 0;  					testResultReady = 0;  					testResultReported = 0;  					testReady = 0;    					// copy parameters into stack  					for (uint index = 0; index < testParameters; index++)  					{  						uint value = Intrinsic.Load32(Address.UnitTestStack' (index * 4));    						Intrinsic.Store32(esp' (index * 4)' value);  					}    					switch (testResultType)  					{  						case 0: Native.FrameCall(testMethodAddress); break;  						case 1: testResult = Native.FrameCallRetU4(testMethodAddress); break;  						case 2: testResult = Native.FrameCallRetU8(testMethodAddress); break;  						case 3: testResult = Native.FrameCallRetR8(testMethodAddress); break;  						default: break;  					}    					testResultReady = 1;    					//Screen.Write("X");    					Native.Int(255);    					//Screen.Write("X");  				}  			}
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: while (true)  			{  				if (testReady == 1)  				{  					Screen.Goto(row' 0);  					Screen.ClearRow();    					Screen.Write("Test #: ");  					Screen.Write(++testCount' 10' 7);    					//Screen.Write(" [X  ]");  					//Screen.Column = Screen.Column - 3;    					testResult = 0;  					testResultReady = 0;  					testResultReported = 0;  					testReady = 0;    					// copy parameters into stack  					for (uint index = 0; index < testParameters; index++)  					{  						uint value = Intrinsic.Load32(Address.UnitTestStack' (index * 4));    						Intrinsic.Store32(esp' (index * 4)' value);  					}    					switch (testResultType)  					{  						case 0: Native.FrameCall(testMethodAddress); break;  						case 1: testResult = Native.FrameCallRetU4(testMethodAddress); break;  						case 2: testResult = Native.FrameCallRetU8(testMethodAddress); break;  						case 3: testResult = Native.FrameCallRetR8(testMethodAddress); break;  						default: break;  					}    					testResultReady = 1;    					//Screen.Write("X");    					Native.Int(255);    					//Screen.Write("X");  				}  			}
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: while (true)  			{  				if (testReady == 1)  				{  					Screen.Goto(row' 0);  					Screen.ClearRow();    					Screen.Write("Test #: ");  					Screen.Write(++testCount' 10' 7);    					//Screen.Write(" [X  ]");  					//Screen.Column = Screen.Column - 3;    					testResult = 0;  					testResultReady = 0;  					testResultReported = 0;  					testReady = 0;    					// copy parameters into stack  					for (uint index = 0; index < testParameters; index++)  					{  						uint value = Intrinsic.Load32(Address.UnitTestStack' (index * 4));    						Intrinsic.Store32(esp' (index * 4)' value);  					}    					switch (testResultType)  					{  						case 0: Native.FrameCall(testMethodAddress); break;  						case 1: testResult = Native.FrameCallRetU4(testMethodAddress); break;  						case 2: testResult = Native.FrameCallRetU8(testMethodAddress); break;  						case 3: testResult = Native.FrameCallRetR8(testMethodAddress); break;  						default: break;  					}    					testResultReady = 1;    					//Screen.Write("X");    					Native.Int(255);    					//Screen.Write("X");  				}  			}
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: while (true)  			{  				if (testReady == 1)  				{  					Screen.Goto(row' 0);  					Screen.ClearRow();    					Screen.Write("Test #: ");  					Screen.Write(++testCount' 10' 7);    					//Screen.Write(" [X  ]");  					//Screen.Column = Screen.Column - 3;    					testResult = 0;  					testResultReady = 0;  					testResultReported = 0;  					testReady = 0;    					// copy parameters into stack  					for (uint index = 0; index < testParameters; index++)  					{  						uint value = Intrinsic.Load32(Address.UnitTestStack' (index * 4));    						Intrinsic.Store32(esp' (index * 4)' value);  					}    					switch (testResultType)  					{  						case 0: Native.FrameCall(testMethodAddress); break;  						case 1: testResult = Native.FrameCallRetU4(testMethodAddress); break;  						case 2: testResult = Native.FrameCallRetU8(testMethodAddress); break;  						case 3: testResult = Native.FrameCallRetR8(testMethodAddress); break;  						default: break;  					}    					testResultReady = 1;    					//Screen.Write("X");    					Native.Int(255);    					//Screen.Write("X");  				}  			}
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: while (true)  			{  				if (testReady == 1)  				{  					Screen.Goto(row' 0);  					Screen.ClearRow();    					Screen.Write("Test #: ");  					Screen.Write(++testCount' 10' 7);    					//Screen.Write(" [X  ]");  					//Screen.Column = Screen.Column - 3;    					testResult = 0;  					testResultReady = 0;  					testResultReported = 0;  					testReady = 0;    					// copy parameters into stack  					for (uint index = 0; index < testParameters; index++)  					{  						uint value = Intrinsic.Load32(Address.UnitTestStack' (index * 4));    						Intrinsic.Store32(esp' (index * 4)' value);  					}    					switch (testResultType)  					{  						case 0: Native.FrameCall(testMethodAddress); break;  						case 1: testResult = Native.FrameCallRetU4(testMethodAddress); break;  						case 2: testResult = Native.FrameCallRetU8(testMethodAddress); break;  						case 3: testResult = Native.FrameCallRetR8(testMethodAddress); break;  						default: break;  					}    					testResultReady = 1;    					//Screen.Write("X");    					Native.Int(255);    					//Screen.Write("X");  				}  			}
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: while (true)  			{  				if (testReady == 1)  				{  					Screen.Goto(row' 0);  					Screen.ClearRow();    					Screen.Write("Test #: ");  					Screen.Write(++testCount' 10' 7);    					//Screen.Write(" [X  ]");  					//Screen.Column = Screen.Column - 3;    					testResult = 0;  					testResultReady = 0;  					testResultReported = 0;  					testReady = 0;    					// copy parameters into stack  					for (uint index = 0; index < testParameters; index++)  					{  						uint value = Intrinsic.Load32(Address.UnitTestStack' (index * 4));    						Intrinsic.Store32(esp' (index * 4)' value);  					}    					switch (testResultType)  					{  						case 0: Native.FrameCall(testMethodAddress); break;  						case 1: testResult = Native.FrameCallRetU4(testMethodAddress); break;  						case 2: testResult = Native.FrameCallRetU8(testMethodAddress); break;  						case 3: testResult = Native.FrameCallRetR8(testMethodAddress); break;  						default: break;  					}    					testResultReady = 1;    					//Screen.Write("X");    					Native.Int(255);    					//Screen.Write("X");  				}  			}
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,SetUnitTestMethodParameter,The following statement contains a magic number: Intrinsic.Store32(Address.UnitTestStack' (index * 4)' value);
Magic Number,Mosa.Kernel.x86,ConsoleManager,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\ConsoleManager.cs,Switch,The following statement contains a magic number: for (byte row = 0; row < 40; row++)  			{  				for (byte column = 0; column < 80; column++)  				{  					char chr = console.GetText(column' row);  					byte color = console.GetColor(column' row);    					Screen.RawWrite(row' column' chr' color);  				}  			}
Magic Number,Mosa.Kernel.x86,ConsoleManager,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\ConsoleManager.cs,Switch,The following statement contains a magic number: for (byte row = 0; row < 40; row++)  			{  				for (byte column = 0; column < 80; column++)  				{  					char chr = console.GetText(column' row);  					byte color = console.GetColor(column' row);    					Screen.RawWrite(row' column' chr' color);  				}  			}
Magic Number,Mosa.Kernel.x86,ConsoleSession,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\ConsoleSession.cs,Write,The following statement contains a magic number: Write(val' 10' -1);
Magic Number,Mosa.Kernel.x86,ConsoleSession,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\ConsoleSession.cs,Write,The following statement contains a magic number: for (uint i = 0; i < count; i++)  			{  				uint digit = val % digits;  				Column = x;  				Row = y;  				Skip(count - 1 - i);  				if (digit < 10)  					Write((char)('0' + digit));  				else  					Write((char)('A' + digit - 10));  				val /= digits;  			}
Magic Number,Mosa.Kernel.x86,ConsoleSession,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\ConsoleSession.cs,Write,The following statement contains a magic number: for (uint i = 0; i < count; i++)  			{  				uint digit = val % digits;  				Column = x;  				Row = y;  				Skip(count - 1 - i);  				if (digit < 10)  					Write((char)('0' + digit));  				else  					Write((char)('A' + digit - 10));  				val /= digits;  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,SendInteger,The following statement contains a magic number: SendByte(i >> 8 & 0xFF);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,SendInteger,The following statement contains a magic number: SendByte(i >> 16 & 0xFF);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,SendInteger,The following statement contains a magic number: SendByte(i >> 24 & 0xFF);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,SendInteger,The following statement contains a magic number: SendInteger((uint)((i >> 32) & 0xFFFFFFFF));
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,SendResponse,The following statement contains a magic number: SendResponseStart(id' code' 4);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,SendResponse,The following statement contains a magic number: SendResponseStart(id' code' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetInt32,The following statement contains a magic number: return (Intrinsic.Load8(Address.DebuggerBuffer' offset + 3) << 24) | (Intrinsic.Load8(Address.DebuggerBuffer' offset + 2) << 16) | (Intrinsic.Load8(Address.DebuggerBuffer' offset + 1) << 8) | Intrinsic.Load8(Address.DebuggerBuffer' offset + 0);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetInt32,The following statement contains a magic number: return (Intrinsic.Load8(Address.DebuggerBuffer' offset + 3) << 24) | (Intrinsic.Load8(Address.DebuggerBuffer' offset + 2) << 16) | (Intrinsic.Load8(Address.DebuggerBuffer' offset + 1) << 8) | Intrinsic.Load8(Address.DebuggerBuffer' offset + 0);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetInt32,The following statement contains a magic number: return (Intrinsic.Load8(Address.DebuggerBuffer' offset + 3) << 24) | (Intrinsic.Load8(Address.DebuggerBuffer' offset + 2) << 16) | (Intrinsic.Load8(Address.DebuggerBuffer' offset + 1) << 8) | Intrinsic.Load8(Address.DebuggerBuffer' offset + 0);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetInt32,The following statement contains a magic number: return (Intrinsic.Load8(Address.DebuggerBuffer' offset + 3) << 24) | (Intrinsic.Load8(Address.DebuggerBuffer' offset + 2) << 16) | (Intrinsic.Load8(Address.DebuggerBuffer' offset + 1) << 8) | Intrinsic.Load8(Address.DebuggerBuffer' offset + 0);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetInt32,The following statement contains a magic number: return (Intrinsic.Load8(Address.DebuggerBuffer' offset + 3) << 24) | (Intrinsic.Load8(Address.DebuggerBuffer' offset + 2) << 16) | (Intrinsic.Load8(Address.DebuggerBuffer' offset + 1) << 8) | Intrinsic.Load8(Address.DebuggerBuffer' offset + 0);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetID,The following statement contains a magic number: return GetUInt32(4);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetCode,The following statement contains a magic number: return GetInt32(8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetLength,The following statement contains a magic number: return GetUInt32(12);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetCRC,The following statement contains a magic number: return GetUInt32(16 + GetLength());
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ComputeCRC,The following statement contains a magic number: for (uint i = 4; i < index - 4; i++)  			{  				byte value = GetByte(i);    				crc = CRC.Update(crc' value);  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ComputeCRC,The following statement contains a magic number: for (uint i = 4; i < index - 4; i++)  			{  				byte value = GetByte(i);    				crc = CRC.Update(crc' value);  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Process,The following statement contains a magic number: if (second % 10 != 5 & last != second)  			{  				last = CMOS.Second;  				SendAlive();  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Process,The following statement contains a magic number: if (second % 10 != 5 & last != second)  			{  				last = CMOS.Second;  				SendAlive();  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessSerial,The following statement contains a magic number: if (index == 0 && b != (byte)'M')  				bad = true;  			else if (index == 1 && b != (byte)'O')  				bad = true;  			else if (index == 2 && b != (byte)'S')  				bad = true;  			else if (index == 3 && b != (byte)'A')  				bad = true;
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessSerial,The following statement contains a magic number: if (index == 0 && b != (byte)'M')  				bad = true;  			else if (index == 1 && b != (byte)'O')  				bad = true;  			else if (index == 2 && b != (byte)'S')  				bad = true;  			else if (index == 3 && b != (byte)'A')  				bad = true;
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessSerial,The following statement contains a magic number: if (index >= 16)  			{  				length = GetLength();    				if (length > MaxBuffer || index > MaxBuffer)  				{  					BadDataAbort();  					return true;  				}    				if (length + 20 == index)  				{  					ProcessCommand();  					ResetBuffer();  				}  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessSerial,The following statement contains a magic number: if (index >= 16)  			{  				length = GetLength();    				if (length > MaxBuffer || index > MaxBuffer)  				{  					BadDataAbort();  					return true;  				}    				if (length + 20 == index)  				{  					ProcessCommand();  					ResetBuffer();  				}  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Goto(13' 0);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write((uint)id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write((uint)id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write((uint)code' 10' 4);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write((uint)code' 10' 4);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write(len' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write(len' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write(receivedCRC' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write(receivedCRC' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ReadMemory,The following statement contains a magic number: uint start = (uint)GetInt32(16);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ReadMemory,The following statement contains a magic number: uint bytes = (uint)GetInt32(20);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ReadMemory,The following statement contains a magic number: SendResponseStart(id' DebugCode.ReadMemory' (int)(bytes + 8));
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Scattered32BitReadMemory,The following statement contains a magic number: int count = GetInt32(12) / 4;
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Scattered32BitReadMemory,The following statement contains a magic number: int count = GetInt32(12) / 4;
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Scattered32BitReadMemory,The following statement contains a magic number: SendResponseStart(id' DebugCode.Scattered32BitReadMemory' count * 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Scattered32BitReadMemory,The following statement contains a magic number: for (uint i = 0; i < count; i++)  			{  				uint address = GetUInt32((i * 4) + 16);  				SendInteger(address);  				SendInteger(Intrinsic.Load32(address));  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Scattered32BitReadMemory,The following statement contains a magic number: for (uint i = 0; i < count; i++)  			{  				uint address = GetUInt32((i * 4) + 16);  				SendInteger(address);  				SendInteger(Intrinsic.Load32(address));  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: uint address = GetUInt32(16);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: uint length = GetUInt32(20);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: while (at + 4 < length)  			{  				uint value = GetUInt32(24 + at);    				Intrinsic.Store32(address' at' value);    				at += 4;  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: while (at + 4 < length)  			{  				uint value = GetUInt32(24 + at);    				Intrinsic.Store32(address' at' value);    				at += 4;  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: while (at + 4 < length)  			{  				uint value = GetUInt32(24 + at);    				Intrinsic.Store32(address' at' value);    				at += 4;  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: while (at < length)  			{  				byte value = GetByte(24 + at);    				Intrinsic.Store8(address' at' value);    				at++;  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Goto(15' 0);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Write((uint)id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Write((uint)id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Write(length' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Write(length' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: uint address = GetUInt32(16);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: uint length = GetUInt32(20);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: uint size = GetUInt32(24);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: uint uncompresscrc = GetUInt32(28);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: LZF.Decompress(Address.DebuggerBuffer + 32' length' address' size);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Goto(15' 0);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write((uint)id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write((uint)id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(length' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(length' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(size' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(size' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(uncompresscrc' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(uncompresscrc' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ClearMemory,The following statement contains a magic number: uint start = GetUInt32(16);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ClearMemory,The following statement contains a magic number: uint bytes = GetUInt32(20);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ClearMemory,The following statement contains a magic number: while (at + 4 < bytes)  			{  				Intrinsic.Store32(start' at' 0);    				at = at + 4;  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ClearMemory,The following statement contains a magic number: while (at + 4 < bytes)  			{  				Intrinsic.Store32(start' at' 0);    				at = at + 4;  			}
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetMemoryCRC,The following statement contains a magic number: uint start = GetUInt32(16);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetMemoryCRC,The following statement contains a magic number: uint length = GetUInt32(20);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetMemoryCRC,The following statement contains a magic number: SendResponseStart(id' DebugCode.GetMemoryCRC' 4);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,QueueUnitTest,The following statement contains a magic number: var start = Address.DebuggerBuffer + 16;
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,HardJump,The following statement contains a magic number: uint address = GetUInt32(16);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,HardJump,The following statement contains a magic number: Screen.Goto(15' 0);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,HardJump,The following statement contains a magic number: Screen.Write((uint)id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,HardJump,The following statement contains a magic number: Screen.Write((uint)id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,HardJump,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,HardJump,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,KernelMemory,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\KernelMemory.cs,AllocateMemory,The following statement contains a magic number: if (heapStart == 0 || (heapSize - heapUsed) < size)  			{  				// Go allocate memory  				heapSize = 1024 * 1023 * 8; // 8Mb  				heapStart = VirtualPageAllocator.Reserve(heapSize);  				heapUsed = 0;  			}
Magic Number,Mosa.Kernel.x86,KernelMemory,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\KernelMemory.cs,AllocateMemory,The following statement contains a magic number: if (heapStart == 0 || (heapSize - heapUsed) < size)  			{  				// Go allocate memory  				heapSize = 1024 * 1023 * 8; // 8Mb  				heapStart = VirtualPageAllocator.Reserve(heapSize);  				heapUsed = 0;  			}
Magic Number,Mosa.Kernel.x86,KernelMemory,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\KernelMemory.cs,AllocateMemory,The following statement contains a magic number: if (heapStart == 0 || (heapSize - heapUsed) < size)  			{  				// Go allocate memory  				heapSize = 1024 * 1023 * 8; // 8Mb  				heapStart = VirtualPageAllocator.Reserve(heapSize);  				heapUsed = 0;  			}
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintVendorString,The following statement contains a magic number: for (int i = 0; i < 4; ++i)  				console.Write((char)((identifier >> (i * 8)) & 0xFF));
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintVendorString,The following statement contains a magic number: for (int i = 0; i < 4; ++i)  				console.Write((char)((identifier >> (i * 8)) & 0xFF));
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintVendorString,The following statement contains a magic number: for (int i = 0; i < 4; ++i)  				console.Write((char)((identifier >> (i * 8)) & 0xFF));
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintVendorString,The following statement contains a magic number: for (int i = 0; i < 4; ++i)  				console.Write((char)((identifier >> (i * 8)) & 0xFF));
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintVendorString,The following statement contains a magic number: for (int i = 0; i < 4; ++i)  				console.Write((char)((identifier >> (i * 8)) & 0xFF));
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintVendorString,The following statement contains a magic number: for (int i = 0; i < 4; ++i)  				console.Write((char)((identifier >> (i * 8)) & 0xFF));
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintBrand,The following statement contains a magic number: if (identifier != 0x20202020)  				for (int i = 0; i < 4; ++i)  					PrintBrandPart(console' identifier' i' ref whitespace);
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintBrand,The following statement contains a magic number: if (identifier != 0x20202020)  				for (int i = 0; i < 4; ++i)  					PrintBrandPart(console' identifier' i' ref whitespace);
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintBrand,The following statement contains a magic number: if (identifier != 0x20202020)  				for (int i = 0; i < 4; ++i)  					PrintBrandPart(console' identifier' i' ref whitespace);
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintBrand,The following statement contains a magic number: if (identifier != 0x20202020)  				for (int i = 0; i < 4; ++i)  					PrintBrandPart(console' identifier' i' ref whitespace);
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintBrandPart,The following statement contains a magic number: char character = (char)((identifier >> (i * 8)) & 0xFF);
Magic Number,Mosa.Kernel.x86,GDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Setup,The following statement contains a magic number: MemoryBlock.Clear(Address.GDTTable' 6);
Magic Number,Mosa.Kernel.x86,GDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Setup,The following statement contains a magic number: Intrinsic.Store16(Address.GDTTable' (Offset.TotalSize * 3) - 1);
Magic Number,Mosa.Kernel.x86,GDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Setup,The following statement contains a magic number: Intrinsic.Store32(Address.GDTTable' 2' Address.GDTTable + 6);
Magic Number,Mosa.Kernel.x86,GDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Setup,The following statement contains a magic number: Intrinsic.Store32(Address.GDTTable' 2' Address.GDTTable + 6);
Magic Number,Mosa.Kernel.x86,GDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Setup,The following statement contains a magic number: Set(2' 0' 0xFFFFFFFF' 0x92' 0xCF);
Magic Number,Mosa.Kernel.x86,GDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Set,The following statement contains a magic number: Intrinsic.Store8(entry' Offset.BaseMiddle' (byte)((address >> 16) & 0xFF));
Magic Number,Mosa.Kernel.x86,GDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Set,The following statement contains a magic number: Intrinsic.Store8(entry' Offset.BaseHigh' (byte)((address >> 24) & 0xFF));
Magic Number,Mosa.Kernel.x86,GDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Set,The following statement contains a magic number: Intrinsic.Store8(entry' Offset.Granularity' (byte)(((byte)(limit >> 16) & 0x0F) | (granularity & 0xF0)));
Magic Number,Mosa.Kernel.x86,GDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,GetEntryLocation,The following statement contains a magic number: return Address.GDTTable + 6 + (index * Offset.TotalSize);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,Setup,The following statement contains a magic number: MemoryBlock.Clear(Address.IDTTable' 6);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,Setup,The following statement contains a magic number: Intrinsic.Store16(Address.IDTTable' (Offset.TotalSize * 256) - 1);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,Setup,The following statement contains a magic number: Intrinsic.Store32(Address.IDTTable' 2' Address.IDTTable + 6);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,Setup,The following statement contains a magic number: Intrinsic.Store32(Address.IDTTable' 2' Address.IDTTable + 6);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,Set,The following statement contains a magic number: Intrinsic.Store16(entry' Offset.BaseHigh' (ushort)((address >> 16) & 0xFFFF));
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,GetEntryLocation,The following statement contains a magic number: return Address.IDTTable + 6 + (index * Offset.TotalSize);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: MemoryBlock.Clear(Address.IDTTable + 6' Offset.TotalSize * 256);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: MemoryBlock.Clear(Address.IDTTable + 6' Offset.TotalSize * 256);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(2' Native.GetIDTJumpLocation(2)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(2' Native.GetIDTJumpLocation(2)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(3' Native.GetIDTJumpLocation(3)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(3' Native.GetIDTJumpLocation(3)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(4' Native.GetIDTJumpLocation(4)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(4' Native.GetIDTJumpLocation(4)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(5' Native.GetIDTJumpLocation(5)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(5' Native.GetIDTJumpLocation(5)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(6' Native.GetIDTJumpLocation(6)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(6' Native.GetIDTJumpLocation(6)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(7' Native.GetIDTJumpLocation(7)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(7' Native.GetIDTJumpLocation(7)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(8' Native.GetIDTJumpLocation(8)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(8' Native.GetIDTJumpLocation(8)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(9' Native.GetIDTJumpLocation(9)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(9' Native.GetIDTJumpLocation(9)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(10' Native.GetIDTJumpLocation(10)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(10' Native.GetIDTJumpLocation(10)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(11' Native.GetIDTJumpLocation(11)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(11' Native.GetIDTJumpLocation(11)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(12' Native.GetIDTJumpLocation(12)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(12' Native.GetIDTJumpLocation(12)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(13' Native.GetIDTJumpLocation(13)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(13' Native.GetIDTJumpLocation(13)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(14' Native.GetIDTJumpLocation(14)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(14' Native.GetIDTJumpLocation(14)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(15' Native.GetIDTJumpLocation(15)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(15' Native.GetIDTJumpLocation(15)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(16' Native.GetIDTJumpLocation(16)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(16' Native.GetIDTJumpLocation(16)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(17' Native.GetIDTJumpLocation(17)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(17' Native.GetIDTJumpLocation(17)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(18' Native.GetIDTJumpLocation(18)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(18' Native.GetIDTJumpLocation(18)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(19' Native.GetIDTJumpLocation(19)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(19' Native.GetIDTJumpLocation(19)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(20' Native.GetIDTJumpLocation(20)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(20' Native.GetIDTJumpLocation(20)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(21' Native.GetIDTJumpLocation(21)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(21' Native.GetIDTJumpLocation(21)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(22' Native.GetIDTJumpLocation(22)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(22' Native.GetIDTJumpLocation(22)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(23' Native.GetIDTJumpLocation(23)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(23' Native.GetIDTJumpLocation(23)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(24' Native.GetIDTJumpLocation(24)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(24' Native.GetIDTJumpLocation(24)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(25' Native.GetIDTJumpLocation(25)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(25' Native.GetIDTJumpLocation(25)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(26' Native.GetIDTJumpLocation(26)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(26' Native.GetIDTJumpLocation(26)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(27' Native.GetIDTJumpLocation(27)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(27' Native.GetIDTJumpLocation(27)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(28' Native.GetIDTJumpLocation(28)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(28' Native.GetIDTJumpLocation(28)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(29' Native.GetIDTJumpLocation(29)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(29' Native.GetIDTJumpLocation(29)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(30' Native.GetIDTJumpLocation(30)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(30' Native.GetIDTJumpLocation(30)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(31' Native.GetIDTJumpLocation(31)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(31' Native.GetIDTJumpLocation(31)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(32' Native.GetIDTJumpLocation(32)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(32' Native.GetIDTJumpLocation(32)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(33' Native.GetIDTJumpLocation(33)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(33' Native.GetIDTJumpLocation(33)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(34' Native.GetIDTJumpLocation(34)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(34' Native.GetIDTJumpLocation(34)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(35' Native.GetIDTJumpLocation(35)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(35' Native.GetIDTJumpLocation(35)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(36' Native.GetIDTJumpLocation(36)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(36' Native.GetIDTJumpLocation(36)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(37' Native.GetIDTJumpLocation(37)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(37' Native.GetIDTJumpLocation(37)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(38' Native.GetIDTJumpLocation(38)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(38' Native.GetIDTJumpLocation(38)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(39' Native.GetIDTJumpLocation(39)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(39' Native.GetIDTJumpLocation(39)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(40' Native.GetIDTJumpLocation(40)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(40' Native.GetIDTJumpLocation(40)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(41' Native.GetIDTJumpLocation(41)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(41' Native.GetIDTJumpLocation(41)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(42' Native.GetIDTJumpLocation(42)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(42' Native.GetIDTJumpLocation(42)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(43' Native.GetIDTJumpLocation(43)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(43' Native.GetIDTJumpLocation(43)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(44' Native.GetIDTJumpLocation(44)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(44' Native.GetIDTJumpLocation(44)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(45' Native.GetIDTJumpLocation(45)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(45' Native.GetIDTJumpLocation(45)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(46' Native.GetIDTJumpLocation(46)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(46' Native.GetIDTJumpLocation(46)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(47' Native.GetIDTJumpLocation(47)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(47' Native.GetIDTJumpLocation(47)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(48' Native.GetIDTJumpLocation(48)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(48' Native.GetIDTJumpLocation(48)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(49' Native.GetIDTJumpLocation(49)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(49' Native.GetIDTJumpLocation(49)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(50' Native.GetIDTJumpLocation(50)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(50' Native.GetIDTJumpLocation(50)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(51' Native.GetIDTJumpLocation(51)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(51' Native.GetIDTJumpLocation(51)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(52' Native.GetIDTJumpLocation(52)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(52' Native.GetIDTJumpLocation(52)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(53' Native.GetIDTJumpLocation(53)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(53' Native.GetIDTJumpLocation(53)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(54' Native.GetIDTJumpLocation(54)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(54' Native.GetIDTJumpLocation(54)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(55' Native.GetIDTJumpLocation(55)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(55' Native.GetIDTJumpLocation(55)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(56' Native.GetIDTJumpLocation(56)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(56' Native.GetIDTJumpLocation(56)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(57' Native.GetIDTJumpLocation(57)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(57' Native.GetIDTJumpLocation(57)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(58' Native.GetIDTJumpLocation(58)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(58' Native.GetIDTJumpLocation(58)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(59' Native.GetIDTJumpLocation(59)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(59' Native.GetIDTJumpLocation(59)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(60' Native.GetIDTJumpLocation(60)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(60' Native.GetIDTJumpLocation(60)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(61' Native.GetIDTJumpLocation(61)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(61' Native.GetIDTJumpLocation(61)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(62' Native.GetIDTJumpLocation(62)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(62' Native.GetIDTJumpLocation(62)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(63' Native.GetIDTJumpLocation(63)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(63' Native.GetIDTJumpLocation(63)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(64' Native.GetIDTJumpLocation(64)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(64' Native.GetIDTJumpLocation(64)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(65' Native.GetIDTJumpLocation(65)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(65' Native.GetIDTJumpLocation(65)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(66' Native.GetIDTJumpLocation(66)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(66' Native.GetIDTJumpLocation(66)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(67' Native.GetIDTJumpLocation(67)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(67' Native.GetIDTJumpLocation(67)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(68' Native.GetIDTJumpLocation(68)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(68' Native.GetIDTJumpLocation(68)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(69' Native.GetIDTJumpLocation(69)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(69' Native.GetIDTJumpLocation(69)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(70' Native.GetIDTJumpLocation(70)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(70' Native.GetIDTJumpLocation(70)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(71' Native.GetIDTJumpLocation(71)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(71' Native.GetIDTJumpLocation(71)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(72' Native.GetIDTJumpLocation(72)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(72' Native.GetIDTJumpLocation(72)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(73' Native.GetIDTJumpLocation(73)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(73' Native.GetIDTJumpLocation(73)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(74' Native.GetIDTJumpLocation(74)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(74' Native.GetIDTJumpLocation(74)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(75' Native.GetIDTJumpLocation(75)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(75' Native.GetIDTJumpLocation(75)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(76' Native.GetIDTJumpLocation(76)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(76' Native.GetIDTJumpLocation(76)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(77' Native.GetIDTJumpLocation(77)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(77' Native.GetIDTJumpLocation(77)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(78' Native.GetIDTJumpLocation(78)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(78' Native.GetIDTJumpLocation(78)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(79' Native.GetIDTJumpLocation(79)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(79' Native.GetIDTJumpLocation(79)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(80' Native.GetIDTJumpLocation(80)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(80' Native.GetIDTJumpLocation(80)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(81' Native.GetIDTJumpLocation(81)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(81' Native.GetIDTJumpLocation(81)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(82' Native.GetIDTJumpLocation(82)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(82' Native.GetIDTJumpLocation(82)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(83' Native.GetIDTJumpLocation(83)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(83' Native.GetIDTJumpLocation(83)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(84' Native.GetIDTJumpLocation(84)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(84' Native.GetIDTJumpLocation(84)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(85' Native.GetIDTJumpLocation(85)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(85' Native.GetIDTJumpLocation(85)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(86' Native.GetIDTJumpLocation(86)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(86' Native.GetIDTJumpLocation(86)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(87' Native.GetIDTJumpLocation(87)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(87' Native.GetIDTJumpLocation(87)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(88' Native.GetIDTJumpLocation(88)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(88' Native.GetIDTJumpLocation(88)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(89' Native.GetIDTJumpLocation(89)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(89' Native.GetIDTJumpLocation(89)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(90' Native.GetIDTJumpLocation(90)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(90' Native.GetIDTJumpLocation(90)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(91' Native.GetIDTJumpLocation(91)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(91' Native.GetIDTJumpLocation(91)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(92' Native.GetIDTJumpLocation(92)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(92' Native.GetIDTJumpLocation(92)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(93' Native.GetIDTJumpLocation(93)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(93' Native.GetIDTJumpLocation(93)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(94' Native.GetIDTJumpLocation(94)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(94' Native.GetIDTJumpLocation(94)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(95' Native.GetIDTJumpLocation(95)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(95' Native.GetIDTJumpLocation(95)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(96' Native.GetIDTJumpLocation(96)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(96' Native.GetIDTJumpLocation(96)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(97' Native.GetIDTJumpLocation(97)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(97' Native.GetIDTJumpLocation(97)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(98' Native.GetIDTJumpLocation(98)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(98' Native.GetIDTJumpLocation(98)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(99' Native.GetIDTJumpLocation(99)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(99' Native.GetIDTJumpLocation(99)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(100' Native.GetIDTJumpLocation(100)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(100' Native.GetIDTJumpLocation(100)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(101' Native.GetIDTJumpLocation(101)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(101' Native.GetIDTJumpLocation(101)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(102' Native.GetIDTJumpLocation(102)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(102' Native.GetIDTJumpLocation(102)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(103' Native.GetIDTJumpLocation(103)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(103' Native.GetIDTJumpLocation(103)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(104' Native.GetIDTJumpLocation(104)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(104' Native.GetIDTJumpLocation(104)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(105' Native.GetIDTJumpLocation(105)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(105' Native.GetIDTJumpLocation(105)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(106' Native.GetIDTJumpLocation(106)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(106' Native.GetIDTJumpLocation(106)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(107' Native.GetIDTJumpLocation(107)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(107' Native.GetIDTJumpLocation(107)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(108' Native.GetIDTJumpLocation(108)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(108' Native.GetIDTJumpLocation(108)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(109' Native.GetIDTJumpLocation(109)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(109' Native.GetIDTJumpLocation(109)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(110' Native.GetIDTJumpLocation(110)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(110' Native.GetIDTJumpLocation(110)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(111' Native.GetIDTJumpLocation(111)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(111' Native.GetIDTJumpLocation(111)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(112' Native.GetIDTJumpLocation(112)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(112' Native.GetIDTJumpLocation(112)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(113' Native.GetIDTJumpLocation(113)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(113' Native.GetIDTJumpLocation(113)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(114' Native.GetIDTJumpLocation(114)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(114' Native.GetIDTJumpLocation(114)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(115' Native.GetIDTJumpLocation(115)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(115' Native.GetIDTJumpLocation(115)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(116' Native.GetIDTJumpLocation(116)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(116' Native.GetIDTJumpLocation(116)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(117' Native.GetIDTJumpLocation(117)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(117' Native.GetIDTJumpLocation(117)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(118' Native.GetIDTJumpLocation(118)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(118' Native.GetIDTJumpLocation(118)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(119' Native.GetIDTJumpLocation(119)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(119' Native.GetIDTJumpLocation(119)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(120' Native.GetIDTJumpLocation(120)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(120' Native.GetIDTJumpLocation(120)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(121' Native.GetIDTJumpLocation(121)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(121' Native.GetIDTJumpLocation(121)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(122' Native.GetIDTJumpLocation(122)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(122' Native.GetIDTJumpLocation(122)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(123' Native.GetIDTJumpLocation(123)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(123' Native.GetIDTJumpLocation(123)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(124' Native.GetIDTJumpLocation(124)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(124' Native.GetIDTJumpLocation(124)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(125' Native.GetIDTJumpLocation(125)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(125' Native.GetIDTJumpLocation(125)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(126' Native.GetIDTJumpLocation(126)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(126' Native.GetIDTJumpLocation(126)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(127' Native.GetIDTJumpLocation(127)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(127' Native.GetIDTJumpLocation(127)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(128' Native.GetIDTJumpLocation(128)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(128' Native.GetIDTJumpLocation(128)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(129' Native.GetIDTJumpLocation(129)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(129' Native.GetIDTJumpLocation(129)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(130' Native.GetIDTJumpLocation(130)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(130' Native.GetIDTJumpLocation(130)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(131' Native.GetIDTJumpLocation(131)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(131' Native.GetIDTJumpLocation(131)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(132' Native.GetIDTJumpLocation(132)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(132' Native.GetIDTJumpLocation(132)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(133' Native.GetIDTJumpLocation(133)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(133' Native.GetIDTJumpLocation(133)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(134' Native.GetIDTJumpLocation(134)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(134' Native.GetIDTJumpLocation(134)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(135' Native.GetIDTJumpLocation(135)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(135' Native.GetIDTJumpLocation(135)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(136' Native.GetIDTJumpLocation(136)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(136' Native.GetIDTJumpLocation(136)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(137' Native.GetIDTJumpLocation(137)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(137' Native.GetIDTJumpLocation(137)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(138' Native.GetIDTJumpLocation(138)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(138' Native.GetIDTJumpLocation(138)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(139' Native.GetIDTJumpLocation(139)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(139' Native.GetIDTJumpLocation(139)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(140' Native.GetIDTJumpLocation(140)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(140' Native.GetIDTJumpLocation(140)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(141' Native.GetIDTJumpLocation(141)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(141' Native.GetIDTJumpLocation(141)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(142' Native.GetIDTJumpLocation(142)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(142' Native.GetIDTJumpLocation(142)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(143' Native.GetIDTJumpLocation(143)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(143' Native.GetIDTJumpLocation(143)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(144' Native.GetIDTJumpLocation(144)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(144' Native.GetIDTJumpLocation(144)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(145' Native.GetIDTJumpLocation(145)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(145' Native.GetIDTJumpLocation(145)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(146' Native.GetIDTJumpLocation(146)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(146' Native.GetIDTJumpLocation(146)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(147' Native.GetIDTJumpLocation(147)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(147' Native.GetIDTJumpLocation(147)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(148' Native.GetIDTJumpLocation(148)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(148' Native.GetIDTJumpLocation(148)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(149' Native.GetIDTJumpLocation(149)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(149' Native.GetIDTJumpLocation(149)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(150' Native.GetIDTJumpLocation(150)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(150' Native.GetIDTJumpLocation(150)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(151' Native.GetIDTJumpLocation(151)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(151' Native.GetIDTJumpLocation(151)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(152' Native.GetIDTJumpLocation(152)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(152' Native.GetIDTJumpLocation(152)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(153' Native.GetIDTJumpLocation(153)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(153' Native.GetIDTJumpLocation(153)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(154' Native.GetIDTJumpLocation(154)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(154' Native.GetIDTJumpLocation(154)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(155' Native.GetIDTJumpLocation(155)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(155' Native.GetIDTJumpLocation(155)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(156' Native.GetIDTJumpLocation(156)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(156' Native.GetIDTJumpLocation(156)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(157' Native.GetIDTJumpLocation(157)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(157' Native.GetIDTJumpLocation(157)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(158' Native.GetIDTJumpLocation(158)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(158' Native.GetIDTJumpLocation(158)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(159' Native.GetIDTJumpLocation(159)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(159' Native.GetIDTJumpLocation(159)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(160' Native.GetIDTJumpLocation(160)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(160' Native.GetIDTJumpLocation(160)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(161' Native.GetIDTJumpLocation(161)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(161' Native.GetIDTJumpLocation(161)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(162' Native.GetIDTJumpLocation(162)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(162' Native.GetIDTJumpLocation(162)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(163' Native.GetIDTJumpLocation(163)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(163' Native.GetIDTJumpLocation(163)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(164' Native.GetIDTJumpLocation(164)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(164' Native.GetIDTJumpLocation(164)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(165' Native.GetIDTJumpLocation(165)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(165' Native.GetIDTJumpLocation(165)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(166' Native.GetIDTJumpLocation(166)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(166' Native.GetIDTJumpLocation(166)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(167' Native.GetIDTJumpLocation(167)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(167' Native.GetIDTJumpLocation(167)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(168' Native.GetIDTJumpLocation(168)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(168' Native.GetIDTJumpLocation(168)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(169' Native.GetIDTJumpLocation(169)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(169' Native.GetIDTJumpLocation(169)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(170' Native.GetIDTJumpLocation(170)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(170' Native.GetIDTJumpLocation(170)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(171' Native.GetIDTJumpLocation(171)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(171' Native.GetIDTJumpLocation(171)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(172' Native.GetIDTJumpLocation(172)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(172' Native.GetIDTJumpLocation(172)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(173' Native.GetIDTJumpLocation(173)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(173' Native.GetIDTJumpLocation(173)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(174' Native.GetIDTJumpLocation(174)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(174' Native.GetIDTJumpLocation(174)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(175' Native.GetIDTJumpLocation(175)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(175' Native.GetIDTJumpLocation(175)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(176' Native.GetIDTJumpLocation(176)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(176' Native.GetIDTJumpLocation(176)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(177' Native.GetIDTJumpLocation(177)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(177' Native.GetIDTJumpLocation(177)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(178' Native.GetIDTJumpLocation(178)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(178' Native.GetIDTJumpLocation(178)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(179' Native.GetIDTJumpLocation(179)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(179' Native.GetIDTJumpLocation(179)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(180' Native.GetIDTJumpLocation(180)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(180' Native.GetIDTJumpLocation(180)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(181' Native.GetIDTJumpLocation(181)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(181' Native.GetIDTJumpLocation(181)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(182' Native.GetIDTJumpLocation(182)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(182' Native.GetIDTJumpLocation(182)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(183' Native.GetIDTJumpLocation(183)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(183' Native.GetIDTJumpLocation(183)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(184' Native.GetIDTJumpLocation(184)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(184' Native.GetIDTJumpLocation(184)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(185' Native.GetIDTJumpLocation(185)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(185' Native.GetIDTJumpLocation(185)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(186' Native.GetIDTJumpLocation(186)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(186' Native.GetIDTJumpLocation(186)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(187' Native.GetIDTJumpLocation(187)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(187' Native.GetIDTJumpLocation(187)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(188' Native.GetIDTJumpLocation(188)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(188' Native.GetIDTJumpLocation(188)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(189' Native.GetIDTJumpLocation(189)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(189' Native.GetIDTJumpLocation(189)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(190' Native.GetIDTJumpLocation(190)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(190' Native.GetIDTJumpLocation(190)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(191' Native.GetIDTJumpLocation(191)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(191' Native.GetIDTJumpLocation(191)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(192' Native.GetIDTJumpLocation(192)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(192' Native.GetIDTJumpLocation(192)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(193' Native.GetIDTJumpLocation(193)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(193' Native.GetIDTJumpLocation(193)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(194' Native.GetIDTJumpLocation(194)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(194' Native.GetIDTJumpLocation(194)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(195' Native.GetIDTJumpLocation(195)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(195' Native.GetIDTJumpLocation(195)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(196' Native.GetIDTJumpLocation(196)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(196' Native.GetIDTJumpLocation(196)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(197' Native.GetIDTJumpLocation(197)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(197' Native.GetIDTJumpLocation(197)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(198' Native.GetIDTJumpLocation(198)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(198' Native.GetIDTJumpLocation(198)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(199' Native.GetIDTJumpLocation(199)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(199' Native.GetIDTJumpLocation(199)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(200' Native.GetIDTJumpLocation(200)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(200' Native.GetIDTJumpLocation(200)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(201' Native.GetIDTJumpLocation(201)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(201' Native.GetIDTJumpLocation(201)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(202' Native.GetIDTJumpLocation(202)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(202' Native.GetIDTJumpLocation(202)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(203' Native.GetIDTJumpLocation(203)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(203' Native.GetIDTJumpLocation(203)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(204' Native.GetIDTJumpLocation(204)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(204' Native.GetIDTJumpLocation(204)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(205' Native.GetIDTJumpLocation(205)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(205' Native.GetIDTJumpLocation(205)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(206' Native.GetIDTJumpLocation(206)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(206' Native.GetIDTJumpLocation(206)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(207' Native.GetIDTJumpLocation(207)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(207' Native.GetIDTJumpLocation(207)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(208' Native.GetIDTJumpLocation(208)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(208' Native.GetIDTJumpLocation(208)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(209' Native.GetIDTJumpLocation(209)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(209' Native.GetIDTJumpLocation(209)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(210' Native.GetIDTJumpLocation(210)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(210' Native.GetIDTJumpLocation(210)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(211' Native.GetIDTJumpLocation(211)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(211' Native.GetIDTJumpLocation(211)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(212' Native.GetIDTJumpLocation(212)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(212' Native.GetIDTJumpLocation(212)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(213' Native.GetIDTJumpLocation(213)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(213' Native.GetIDTJumpLocation(213)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(214' Native.GetIDTJumpLocation(214)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(214' Native.GetIDTJumpLocation(214)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(215' Native.GetIDTJumpLocation(215)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(215' Native.GetIDTJumpLocation(215)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(216' Native.GetIDTJumpLocation(216)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(216' Native.GetIDTJumpLocation(216)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(217' Native.GetIDTJumpLocation(217)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(217' Native.GetIDTJumpLocation(217)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(218' Native.GetIDTJumpLocation(218)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(218' Native.GetIDTJumpLocation(218)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(219' Native.GetIDTJumpLocation(219)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(219' Native.GetIDTJumpLocation(219)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(220' Native.GetIDTJumpLocation(220)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(220' Native.GetIDTJumpLocation(220)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(221' Native.GetIDTJumpLocation(221)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(221' Native.GetIDTJumpLocation(221)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(222' Native.GetIDTJumpLocation(222)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(222' Native.GetIDTJumpLocation(222)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(223' Native.GetIDTJumpLocation(223)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(223' Native.GetIDTJumpLocation(223)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(224' Native.GetIDTJumpLocation(224)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(224' Native.GetIDTJumpLocation(224)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(225' Native.GetIDTJumpLocation(225)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(225' Native.GetIDTJumpLocation(225)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(226' Native.GetIDTJumpLocation(226)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(226' Native.GetIDTJumpLocation(226)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(227' Native.GetIDTJumpLocation(227)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(227' Native.GetIDTJumpLocation(227)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(228' Native.GetIDTJumpLocation(228)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(228' Native.GetIDTJumpLocation(228)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(229' Native.GetIDTJumpLocation(229)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(229' Native.GetIDTJumpLocation(229)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(230' Native.GetIDTJumpLocation(230)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(230' Native.GetIDTJumpLocation(230)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(231' Native.GetIDTJumpLocation(231)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(231' Native.GetIDTJumpLocation(231)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(232' Native.GetIDTJumpLocation(232)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(232' Native.GetIDTJumpLocation(232)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(233' Native.GetIDTJumpLocation(233)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(233' Native.GetIDTJumpLocation(233)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(234' Native.GetIDTJumpLocation(234)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(234' Native.GetIDTJumpLocation(234)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(235' Native.GetIDTJumpLocation(235)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(235' Native.GetIDTJumpLocation(235)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(236' Native.GetIDTJumpLocation(236)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(236' Native.GetIDTJumpLocation(236)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(237' Native.GetIDTJumpLocation(237)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(237' Native.GetIDTJumpLocation(237)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(238' Native.GetIDTJumpLocation(238)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(238' Native.GetIDTJumpLocation(238)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(239' Native.GetIDTJumpLocation(239)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(239' Native.GetIDTJumpLocation(239)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(240' Native.GetIDTJumpLocation(240)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(240' Native.GetIDTJumpLocation(240)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(241' Native.GetIDTJumpLocation(241)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(241' Native.GetIDTJumpLocation(241)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(242' Native.GetIDTJumpLocation(242)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(242' Native.GetIDTJumpLocation(242)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(243' Native.GetIDTJumpLocation(243)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(243' Native.GetIDTJumpLocation(243)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(244' Native.GetIDTJumpLocation(244)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(244' Native.GetIDTJumpLocation(244)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(245' Native.GetIDTJumpLocation(245)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(245' Native.GetIDTJumpLocation(245)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(246' Native.GetIDTJumpLocation(246)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(246' Native.GetIDTJumpLocation(246)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(247' Native.GetIDTJumpLocation(247)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(247' Native.GetIDTJumpLocation(247)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(248' Native.GetIDTJumpLocation(248)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(248' Native.GetIDTJumpLocation(248)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(249' Native.GetIDTJumpLocation(249)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(249' Native.GetIDTJumpLocation(249)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(250' Native.GetIDTJumpLocation(250)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(250' Native.GetIDTJumpLocation(250)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(251' Native.GetIDTJumpLocation(251)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(251' Native.GetIDTJumpLocation(251)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(252' Native.GetIDTJumpLocation(252)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(252' Native.GetIDTJumpLocation(252)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(253' Native.GetIDTJumpLocation(253)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(253' Native.GetIDTJumpLocation(253)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(254' Native.GetIDTJumpLocation(254)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(254' Native.GetIDTJumpLocation(254)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(255' Native.GetIDTJumpLocation(255)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(255' Native.GetIDTJumpLocation(255)' 0x08' 0x8E);
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					uint r = Screen.Row;  					uint c = Screen.Column;  					Screen.Goto(10' 0);  					Screen.Write(stack->EIP' 16' 8);  					Screen.Write(' ');  					Screen.Write(cr2' 16' 8);    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					uint physicalpage = PageFrameAllocator.Allocate();    					Screen.Write(' ');  					Screen.Write(physicalpage' 16' 8);    					if (physicalpage == 0x0)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' physicalpage);    					uint pp = PageTable.GetPhysicalAddressFromVirtual(cr2);    					Screen.Write(' ');  					Screen.Write(pp' 16' 8);  					Screen.Goto(r' c);    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				default:  					interruptHandler?.Invoke(stack->Interrupt' stack->ErrorCode);  					break;  			}
Magic Number,Mosa.Kernel.x86,PageFrameAllocator,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageFrameAllocator.cs,AddFreeMemory,The following statement contains a magic number: for (uint mem = normstart; mem < normstart + normsize; mem = mem + PageSize' at = at + 4)  			{  				Intrinsic.Store32(at' mem);  			}
Magic Number,Mosa.Kernel.x86,PageFrameAllocator,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageFrameAllocator.cs,AddFreeMemory,The following statement contains a magic number: at = at - 4;
Magic Number,Mosa.Kernel.x86,PageFrameAllocator,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageFrameAllocator.cs,Allocate,The following statement contains a magic number: at -= 4;
Magic Number,Mosa.Kernel.x86,PageFrameAllocator,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageFrameAllocator.cs,Free,The following statement contains a magic number: at = at + 4;
Magic Number,Mosa.Kernel.x86,PageTable,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: for (int index = 0; index < 1024; index++)  			{  				Intrinsic.Store32(Address.PageDirectory' (index << 2)' (uint)(Address.PageTable + (index * 4096) | 0x04 | 0x02 | 0x01));  			}
Magic Number,Mosa.Kernel.x86,PageTable,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: for (int index = 0; index < 1024; index++)  			{  				Intrinsic.Store32(Address.PageDirectory' (index << 2)' (uint)(Address.PageTable + (index * 4096) | 0x04 | 0x02 | 0x01));  			}
Magic Number,Mosa.Kernel.x86,PageTable,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: for (int index = 0; index < 1024; index++)  			{  				Intrinsic.Store32(Address.PageDirectory' (index << 2)' (uint)(Address.PageTable + (index * 4096) | 0x04 | 0x02 | 0x01));  			}
Magic Number,Mosa.Kernel.x86,PageTable,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: for (int index = 0; index < 1024 * 32; index++)  			{  				Intrinsic.Store32(Address.PageTable' (index << 2)' (uint)(index * 4096) | 0x04 | 0x02 | 0x01);  			}
Magic Number,Mosa.Kernel.x86,PageTable,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: for (int index = 0; index < 1024 * 32; index++)  			{  				Intrinsic.Store32(Address.PageTable' (index << 2)' (uint)(index * 4096) | 0x04 | 0x02 | 0x01);  			}
Magic Number,Mosa.Kernel.x86,PageTable,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: for (int index = 0; index < 1024 * 32; index++)  			{  				Intrinsic.Store32(Address.PageTable' (index << 2)' (uint)(index * 4096) | 0x04 | 0x02 | 0x01);  			}
Magic Number,Mosa.Kernel.x86,PageTable,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: for (int index = 0; index < 1024 * 32; index++)  			{  				Intrinsic.Store32(Address.PageTable' (index << 2)' (uint)(index * 4096) | 0x04 | 0x02 | 0x01);  			}
Magic Number,Mosa.Kernel.x86,PageTable,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,MapVirtualAddressToPhysical,The following statement contains a magic number: Intrinsic.Store32(Address.PageTable' ((virtualAddress & 0xFFFFF000u) >> 10)' physicalAddress & 0xFFFFF000u | 0x04u | 0x02u | (present ? 0x1u : 0x0u));
Magic Number,Mosa.Kernel.x86,PageTable,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,GetPhysicalAddressFromVirtual,The following statement contains a magic number: return Intrinsic.Load32(Address.PageTable' ((virtualAddress & 0xFFFFF000u) >> 10)) + (virtualAddress & 0xFFFu);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EIP' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EIP' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ESP' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ESP' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EBP' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EBP' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EFLAGS' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EFLAGS' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(CR2' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(CR2' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EAX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EAX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EBX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EBX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ECX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ECX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(CS' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(CS' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EDX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EDX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EDI' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EDI' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ESI' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ESI' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ErrorCode' 16' 2);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ErrorCode' 16' 2);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(Interrupt' 16' 2);
Magic Number,Mosa.Kernel.x86,Panic,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(Interrupt' 16' 2);
Magic Number,Mosa.Kernel.x86,PIC,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PIC.cs,Setup,The following statement contains a magic number: Native.Out8(PIC1_Data' 4);
Magic Number,Mosa.Kernel.x86,PIC,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PIC.cs,Setup,The following statement contains a magic number: Native.Out8(PIC2_Data' 2);
Magic Number,Mosa.Kernel.x86,PIC,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PIC.cs,SendEndOfInterrupt,The following statement contains a magic number: if (irq >= 40) // or untranslated IRQ >= 8  				Native.Out8(PIC2_Command' EOI);
Magic Number,Mosa.Kernel.x86,Screen,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Screen.cs,RawWrite,The following statement contains a magic number: uint address = (0x0B8000 + ((row * Columns + column) * 2));
Magic Number,Mosa.Kernel.x86,Screen,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Screen.cs,Write,The following statement contains a magic number: uint address = (0x0B8000 + ((Row * Columns + Column) * 2));
Magic Number,Mosa.Kernel.x86,Screen,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Screen.cs,SetCursor,The following statement contains a magic number: Native.Out8(0x3D5' (byte)((location >> 8) & 0xFF));
Magic Number,Mosa.Kernel.x86,Screen,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Screen.cs,Write,The following statement contains a magic number: Write(val' 10' -1);
Magic Number,Mosa.Kernel.x86,Screen,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Screen.cs,Write,The following statement contains a magic number: for (uint i = 0; i < count; i++)  			{  				uint digit = val % digits;  				Column = x;  				Row = y;  				Skip(count - 1 - i);  				if (digit < 10)  					Write((char)('0' + digit));  				else  					Write((char)('A' + digit - 10));  				val /= digits;  			}
Magic Number,Mosa.Kernel.x86,Screen,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Screen.cs,Write,The following statement contains a magic number: for (uint i = 0; i < count; i++)  			{  				uint digit = val % digits;  				Column = x;  				Row = y;  				Skip(count - 1 - i);  				if (digit < 10)  					Write((char)('0' + digit));  				else  					Write((char)('A' + digit - 10));  				val /= digits;  			}
Magic Number,Mosa.Kernel.x86,VirtualPageAllocator,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\VirtualPageAllocator.cs,Setup,The following statement contains a magic number: MemoryBlock.Clear(Address.VirtualPageAllocator' pages / 8);
Magic Number,Mosa.Kernel.x86,VirtualPageAllocator,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\VirtualPageAllocator.cs,SetPageStatus,The following statement contains a magic number: uint at = Address.VirtualPageAllocator + (page / 32);
Magic Number,Mosa.Kernel.x86,VirtualPageAllocator,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\VirtualPageAllocator.cs,SetPageStatus,The following statement contains a magic number: byte bit = (byte)(page % 32);
Magic Number,Mosa.Kernel.x86,VirtualPageAllocator,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\VirtualPageAllocator.cs,GetPageStatus,The following statement contains a magic number: uint at = (Address.VirtualPageAllocator + (page / 8));
Magic Number,Mosa.Kernel.x86,VirtualPageAllocator,C:\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\VirtualPageAllocator.cs,GetPageStatus,The following statement contains a magic number: byte bit = (byte)(page % 8);
