Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The method has 260 lines of code.
Complex Method,Mosa.Kernel.x86,CpuInfo,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintBrand,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,Cyclomatic complexity of the method is 10
Complex Method,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,Cyclomatic complexity of the method is 20
Complex Method,Mosa.Kernel.x86,UnitTestRunner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,Cyclomatic complexity of the method is 8
Long Parameter List,Mosa.Kernel.x86,ConsoleManager,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\ConsoleManager.cs,RawWrite,The method has 5 parameters. Parameters: console' row' column' chr' color
Long Parameter List,Mosa.Kernel.x86,GDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Set,The method has 5 parameters. Parameters: index' address' limit' access' granularity
Long Identifier,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,,The length of the parameter SignalThreadTerminationMethodAddress is 36.
Long Statement,Mosa.Kernel.x86,PageTable,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The length of the statement  "				new Pointer(Address.PageDirectory).Store32(index << 2' (uint)(Address.PageTable + (index * 4096) | 0x04 | 0x02 | 0x01)); " is 120.
Long Statement,Mosa.Kernel.x86,PageTable,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,MapVirtualAddressToPhysical,The length of the statement  "			//Native.Set32(Address.PageTable + ((virtualAddress & 0xFFC00000u) >> 10)' physicalAddress & 0xFFC00000u | 0x04u | 0x02u | (present ? 0x1u : 0x0u)); " is 148.
Long Statement,Mosa.Kernel.x86,PageTable,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,MapVirtualAddressToPhysical,The length of the statement  "			new Pointer(Address.PageTable).Store32((virtualAddress & 0xFFFFF000u) >> 10' physicalAddress & 0xFFFFF000u | 0x04u | 0x02u | (present ? 0x1u : 0x0u)); " is 150.
Long Statement,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The length of the statement  "			//Assert.True(stackSize % PageFrameAllocator.PageSize == 0' "CreateThread(): invalid stack size % PageSize' stack size = " + stackSize.ToString()); " is 147.
Long Statement,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The length of the statement  "			stackTop.Store32(-8' SignalThreadTerminationMethodAddress.ToInt32());  // Address of method that will raise a interrupt signal to terminate thread " is 146.
Complex Conditional,Mosa.Kernel.x86.Smbios,SmbiosManager,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Smbios\SmbiosManager.cs,LocateEntryPoint,The conditional expression  "a == '_' && s == 'S' && m == 'M' && b == '_'"  is complex.
Magic Number,Mosa.Kernel.x86,ConsoleManager,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\ConsoleManager.cs,Switch,The following statement contains a magic number: column < 80
Magic Number,Mosa.Kernel.x86,ConsoleManager,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\ConsoleManager.cs,Switch,The following statement contains a magic number: row < 40
Magic Number,Mosa.Kernel.x86,ConsoleSession,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\ConsoleSession.cs,Write,The following statement contains a magic number: Write(val' 10' -1);
Magic Number,Mosa.Kernel.x86,ConsoleSession,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\ConsoleSession.cs,Write,The following statement contains a magic number: digit < 10
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintVendorString,The following statement contains a magic number: console.Write((char)((identifier >> (i * 8)) & 0xFF));
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintVendorString,The following statement contains a magic number: i < 4
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintVendorString,The following statement contains a magic number: console.Write((char)((identifier >> (i * 8)) & 0xFF));
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintVendorString,The following statement contains a magic number: i < 4
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintVendorString,The following statement contains a magic number: console.Write((char)((identifier >> (i * 8)) & 0xFF));
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintVendorString,The following statement contains a magic number: i < 4
Magic Number,Mosa.Kernel.x86,CpuInfo,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\CpuInfo.cs,PrintBrandPart,The following statement contains a magic number: char character = (char)((identifier >> (i * 8)) & 0xFF);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,SendInteger,The following statement contains a magic number: SendByte(i >> 8 & 0xFF);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,SendInteger,The following statement contains a magic number: SendByte(i >> 16 & 0xFF);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,SendInteger,The following statement contains a magic number: SendByte(i >> 24 & 0xFF);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,SendInteger,The following statement contains a magic number: SendInteger((uint)((i >> 32) & 0xFFFFFFFF));
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,SendResponse,The following statement contains a magic number: SendResponseStart(id' code' 4);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,SendResponse,The following statement contains a magic number: SendResponseStart(id' code' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetCode,The following statement contains a magic number: return GetByte(5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,GetLength,The following statement contains a magic number: return GetUInt32(6);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Process,The following statement contains a magic number: second % 10 != 5 & last != second
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Process,The following statement contains a magic number: second % 10 != 5 & last != second
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Process,The following statement contains a magic number: i < 75
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Process,The following statement contains a magic number: x < 5
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Goto(13' 0);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write(id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write(id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write((uint)code' 10' 4);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write((uint)code' 10' 4);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write(len' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ProcessCommand,The following statement contains a magic number: Screen.Write(len' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ReadMemory,The following statement contains a magic number: uint bytes = GetDataUInt32(4);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ReadMemory,The following statement contains a magic number: SendResponseStart(id' DebugCode.ReadMemory' bytes + 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Scattered32BitReadMemory,The following statement contains a magic number: uint count = GetLength() / 4;
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Scattered32BitReadMemory,The following statement contains a magic number: SendResponseStart(id' DebugCode.Scattered32BitReadMemory' count * 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,Scattered32BitReadMemory,The following statement contains a magic number: var address = GetDataPointer(i * 4);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: uint length = GetDataUInt32(4);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: uint value = GetDataUInt32(8 + at);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: at += 4;
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: at + 4 < length
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: byte value = GetDataByte(8 + at);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Goto(15' 0);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Write(id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Write(id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Write((uint)address.ToInt32()' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Write((uint)address.ToInt32()' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Write(length' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,WriteMemory,The following statement contains a magic number: Screen.Write(length' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: uint length = GetDataUInt32(4);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: uint size = GetDataUInt32(8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Goto(15' 0);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(length' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(length' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(size' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,CompressedWriteMemory,The following statement contains a magic number: Screen.Write(size' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ClearMemory,The following statement contains a magic number: uint bytes = GetDataUInt32(4);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ClearMemory,The following statement contains a magic number: at += 4;
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,ClearMemory,The following statement contains a magic number: at + 4 < bytes
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,HardJump,The following statement contains a magic number: Screen.Goto(15' 0);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,HardJump,The following statement contains a magic number: Screen.Write(id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,HardJump,The following statement contains a magic number: Screen.Write(id' 10' 5);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,HardJump,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,Debugger,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Debugger.cs,HardJump,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,GDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Setup,The following statement contains a magic number: Runtime.Internal.MemoryClear(gdt' 6);
Magic Number,Mosa.Kernel.x86,GDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Setup,The following statement contains a magic number: gdt.Store16((Offset.TotalSize * 3) - 1);
Magic Number,Mosa.Kernel.x86,GDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Setup,The following statement contains a magic number: gdt.Store32(2' Address.GDTTable + 6);
Magic Number,Mosa.Kernel.x86,GDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Setup,The following statement contains a magic number: gdt.Store32(2' Address.GDTTable + 6);
Magic Number,Mosa.Kernel.x86,GDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Setup,The following statement contains a magic number: Set(2' 0' 0xFFFFFFFF' 0x92' 0xCF);
Magic Number,Mosa.Kernel.x86,GDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,GetEntryLocation,The following statement contains a magic number: return new Pointer(Address.GDTTable + 6 + (index * Offset.TotalSize));
Magic Number,Mosa.Kernel.x86,GDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Set,The following statement contains a magic number: entry.Store8(Offset.BaseMiddle' (byte)((address >> 16) & 0xFF));
Magic Number,Mosa.Kernel.x86,GDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Set,The following statement contains a magic number: entry.Store8(Offset.BaseHigh' (byte)((address >> 24) & 0xFF));
Magic Number,Mosa.Kernel.x86,GDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\GDT.cs,Set,The following statement contains a magic number: entry.Store8(Offset.Granularity' (byte)(((byte)(limit >> 16) & 0x0F) | (granularity & 0xF0)));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,Setup,The following statement contains a magic number: Runtime.Internal.MemoryClear(new Pointer(Address.IDTTable)' 6);
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,Setup,The following statement contains a magic number: new Pointer(Address.IDTTable).Store16((IDTEntryOffset.TotalSize * 256) - 1);
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,Setup,The following statement contains a magic number: new Pointer(Address.IDTTable).Store32(2' Address.IDTTable + 6);
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,Setup,The following statement contains a magic number: new Pointer(Address.IDTTable).Store32(2' Address.IDTTable + 6);
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,Set,The following statement contains a magic number: var entry = new Pointer(Address.IDTTable + 6 + (index * IDTEntryOffset.TotalSize));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,Set,The following statement contains a magic number: entry.Store16(IDTEntryOffset.BaseHigh' (ushort)((address >> 16) & 0xFFFF));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Runtime.Internal.MemoryClear(new Pointer(Address.IDTTable) + 6' IDTEntryOffset.TotalSize * 256);
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Runtime.Internal.MemoryClear(new Pointer(Address.IDTTable) + 6' IDTEntryOffset.TotalSize * 256);
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(2' new Action(IRQ2));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(3' new Action(IRQ3));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(4' new Action(IRQ4));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(5' new Action(IRQ5));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(6' new Action(IRQ6));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(7' new Action(IRQ7));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(8' new Action(IRQ8));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(9' new Action(IRQ9));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(10' new Action(IRQ10));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(11' new Action(IRQ11));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(12' new Action(IRQ12));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(13' new Action(IRQ13));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(14' new Action(IRQ14));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(15' new Action(IRQ15));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(16' new Action(IRQ16));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(17' new Action(IRQ17));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(18' new Action(IRQ18));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(19' new Action(IRQ19));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(20' new Action(IRQ20));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(21' new Action(IRQ21));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(22' new Action(IRQ22));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(23' new Action(IRQ23));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(24' new Action(IRQ24));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(25' new Action(IRQ25));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(26' new Action(IRQ26));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(27' new Action(IRQ27));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(28' new Action(IRQ28));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(29' new Action(IRQ29));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(30' new Action(IRQ30));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(31' new Action(IRQ31));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(32' new Action(IRQ32));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(33' new Action(IRQ33));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(34' new Action(IRQ34));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(35' new Action(IRQ35));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(36' new Action(IRQ36));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(37' new Action(IRQ37));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(38' new Action(IRQ38));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(39' new Action(IRQ39));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(40' new Action(IRQ40));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(41' new Action(IRQ41));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(42' new Action(IRQ42));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(43' new Action(IRQ43));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(44' new Action(IRQ44));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(45' new Action(IRQ45));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(46' new Action(IRQ46));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(47' new Action(IRQ47));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(48' new Action(IRQ48));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(49' new Action(IRQ49));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(50' new Action(IRQ50));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(51' new Action(IRQ51));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(52' new Action(IRQ52));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(53' new Action(IRQ53));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(54' new Action(IRQ54));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(55' new Action(IRQ55));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(56' new Action(IRQ56));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(57' new Action(IRQ57));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(58' new Action(IRQ58));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(59' new Action(IRQ59));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(60' new Action(IRQ60));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(61' new Action(IRQ61));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(62' new Action(IRQ62));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(63' new Action(IRQ63));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(64' new Action(IRQ64));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(65' new Action(IRQ65));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(66' new Action(IRQ66));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(67' new Action(IRQ67));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(68' new Action(IRQ68));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(69' new Action(IRQ69));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(70' new Action(IRQ70));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(71' new Action(IRQ71));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(72' new Action(IRQ72));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(73' new Action(IRQ73));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(74' new Action(IRQ74));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(75' new Action(IRQ75));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(76' new Action(IRQ76));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(77' new Action(IRQ77));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(78' new Action(IRQ78));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(79' new Action(IRQ79));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(80' new Action(IRQ80));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(81' new Action(IRQ81));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(82' new Action(IRQ82));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(83' new Action(IRQ83));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(84' new Action(IRQ84));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(85' new Action(IRQ85));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(86' new Action(IRQ86));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(87' new Action(IRQ87));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(88' new Action(IRQ88));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(89' new Action(IRQ89));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(90' new Action(IRQ90));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(91' new Action(IRQ91));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(92' new Action(IRQ92));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(93' new Action(IRQ93));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(94' new Action(IRQ94));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(95' new Action(IRQ95));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(96' new Action(IRQ96));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(97' new Action(IRQ97));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(98' new Action(IRQ98));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(99' new Action(IRQ99));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(100' new Action(IRQ100));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(101' new Action(IRQ101));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(102' new Action(IRQ102));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(103' new Action(IRQ103));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(104' new Action(IRQ104));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(105' new Action(IRQ105));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(106' new Action(IRQ106));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(107' new Action(IRQ107));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(108' new Action(IRQ108));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(109' new Action(IRQ109));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(110' new Action(IRQ110));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(111' new Action(IRQ111));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(112' new Action(IRQ112));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(113' new Action(IRQ113));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(114' new Action(IRQ114));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(115' new Action(IRQ115));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(116' new Action(IRQ116));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(117' new Action(IRQ117));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(118' new Action(IRQ118));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(119' new Action(IRQ119));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(120' new Action(IRQ120));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(121' new Action(IRQ121));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(122' new Action(IRQ122));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(123' new Action(IRQ123));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(124' new Action(IRQ124));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(125' new Action(IRQ125));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(126' new Action(IRQ126));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(127' new Action(IRQ127));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(128' new Action(IRQ128));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(129' new Action(IRQ129));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(130' new Action(IRQ130));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(131' new Action(IRQ131));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(132' new Action(IRQ132));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(133' new Action(IRQ133));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(134' new Action(IRQ134));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(135' new Action(IRQ135));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(136' new Action(IRQ136));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(137' new Action(IRQ137));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(138' new Action(IRQ138));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(139' new Action(IRQ139));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(140' new Action(IRQ140));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(141' new Action(IRQ141));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(142' new Action(IRQ142));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(143' new Action(IRQ143));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(144' new Action(IRQ144));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(145' new Action(IRQ145));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(146' new Action(IRQ146));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(147' new Action(IRQ147));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(148' new Action(IRQ148));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(149' new Action(IRQ149));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(150' new Action(IRQ150));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(151' new Action(IRQ151));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(152' new Action(IRQ152));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(153' new Action(IRQ153));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(154' new Action(IRQ154));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(155' new Action(IRQ155));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(156' new Action(IRQ156));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(157' new Action(IRQ157));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(158' new Action(IRQ158));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(159' new Action(IRQ159));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(160' new Action(IRQ160));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(161' new Action(IRQ161));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(162' new Action(IRQ162));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(163' new Action(IRQ163));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(164' new Action(IRQ164));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(165' new Action(IRQ165));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(166' new Action(IRQ166));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(167' new Action(IRQ167));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(168' new Action(IRQ168));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(169' new Action(IRQ169));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(170' new Action(IRQ170));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(171' new Action(IRQ171));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(172' new Action(IRQ172));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(173' new Action(IRQ173));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(174' new Action(IRQ174));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(175' new Action(IRQ175));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(176' new Action(IRQ176));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(177' new Action(IRQ177));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(178' new Action(IRQ178));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(179' new Action(IRQ179));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(180' new Action(IRQ180));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(181' new Action(IRQ181));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(182' new Action(IRQ182));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(183' new Action(IRQ183));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(184' new Action(IRQ184));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(185' new Action(IRQ185));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(186' new Action(IRQ186));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(187' new Action(IRQ187));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(188' new Action(IRQ188));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(189' new Action(IRQ189));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(190' new Action(IRQ190));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(191' new Action(IRQ191));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(192' new Action(IRQ192));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(193' new Action(IRQ193));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(194' new Action(IRQ194));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(195' new Action(IRQ195));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(196' new Action(IRQ196));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(197' new Action(IRQ197));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(198' new Action(IRQ198));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(199' new Action(IRQ199));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(200' new Action(IRQ200));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(201' new Action(IRQ201));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(202' new Action(IRQ202));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(203' new Action(IRQ203));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(204' new Action(IRQ204));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(205' new Action(IRQ205));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(206' new Action(IRQ206));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(207' new Action(IRQ207));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(208' new Action(IRQ208));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(209' new Action(IRQ209));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(210' new Action(IRQ210));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(211' new Action(IRQ211));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(212' new Action(IRQ212));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(213' new Action(IRQ213));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(214' new Action(IRQ214));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(215' new Action(IRQ215));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(216' new Action(IRQ216));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(217' new Action(IRQ217));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(218' new Action(IRQ218));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(219' new Action(IRQ219));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(220' new Action(IRQ220));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(221' new Action(IRQ221));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(222' new Action(IRQ222));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(223' new Action(IRQ223));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(224' new Action(IRQ224));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(225' new Action(IRQ225));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(226' new Action(IRQ226));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(227' new Action(IRQ227));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(228' new Action(IRQ228));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(229' new Action(IRQ229));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(230' new Action(IRQ230));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(231' new Action(IRQ231));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(232' new Action(IRQ232));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(233' new Action(IRQ233));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(234' new Action(IRQ234));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(235' new Action(IRQ235));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(236' new Action(IRQ236));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(237' new Action(IRQ237));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(238' new Action(IRQ238));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(239' new Action(IRQ239));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(240' new Action(IRQ240));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(241' new Action(IRQ241));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(242' new Action(IRQ242));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(243' new Action(IRQ243));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(244' new Action(IRQ244));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(245' new Action(IRQ245));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(246' new Action(IRQ246));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(247' new Action(IRQ247));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(248' new Action(IRQ248));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(249' new Action(IRQ249));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(250' new Action(IRQ250));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(251' new Action(IRQ251));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(252' new Action(IRQ252));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(253' new Action(IRQ253));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(254' new Action(IRQ254));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,SetTableEntries,The following statement contains a magic number: Set(255' new Action(IRQ255));
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,IDT,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\IDT.cs,ProcessInterrupt,The following statement contains a magic number: switch (stack->Interrupt)  			{  				case 0:  					Error(stack' "Divide Error");  					break;    				case 4:  					Error(stack' "Arithmetic Overflow Exception");  					break;    				case 5:  					Error(stack' "Bound Check Error");  					break;    				case 6:  					Error(stack' "Invalid Opcode");  					break;    				case 7:  					Error(stack' "Co-processor Not Available");  					break;    				case 8:    					//TODO: Analyze the double fault  					Error(stack' "Double Fault");  					break;    				case 9:  					Error(stack' "Co-processor Segment Overrun");  					break;    				case 10:  					Error(stack' "Invalid TSS");  					break;    				case 11:  					Error(stack' "Segment Not Present");  					break;    				case 12:  					Error(stack' "Stack Exception");  					break;    				case 13:  					Error(stack' "General Protection Exception");  					break;    				case 14:    					// Check if Null Pointer Exception  					// Otherwise handle as Page Fault    					var cr2 = Native.GetCR2();    					if ((cr2 >> 5) < 0x1000)  					{  						Error(stack' "Null Pointer Exception");  					}    					if (cr2 >= 0xF0000000u)  					{  						Error(stack' "Invalid Access Above 0xF0000000");  						break;  					}    					var physicalpage = PageFrameAllocator.Allocate();    					if (physicalpage.IsNull)  					{  						Error(stack' "Out of Memory");  						break;  					}    					PageTable.MapVirtualAddressToPhysical(cr2' (uint)physicalpage.ToInt32());    					break;    				case 16:  					Error(stack' "Co-processor Error");  					break;    				case 19:  					Error(stack' "SIMD Floating-Point Exception");  					break;    				case Scheduler.ClockIRQ:  					Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  					Scheduler.ClockInterrupt(new Pointer(stackStatePointer));  					break;    				case Scheduler.ThreadTerminationSignalIRQ:  					Scheduler.TerminateCurrentThread();  					break;    				default:  					{  						Interrupt?.Invoke(stack->Interrupt' stack->ErrorCode);  						break;  					}  			}
Magic Number,Mosa.Kernel.x86,KernelMemory,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\KernelMemory.cs,AllocateVirtualMemory,The following statement contains a magic number: heapSize = 1024 * 1023 * 8;
Magic Number,Mosa.Kernel.x86,KernelMemory,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\KernelMemory.cs,AllocateVirtualMemory,The following statement contains a magic number: heapSize = 1024 * 1023 * 8;
Magic Number,Mosa.Kernel.x86,KernelMemory,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\KernelMemory.cs,AllocateVirtualMemory,The following statement contains a magic number: heapSize = 1024 * 1023 * 8;
Magic Number,Mosa.Kernel.x86,LZF,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\LZF.cs,Decompress,The following statement contains a magic number: ctrl < (1 << 5)
Magic Number,Mosa.Kernel.x86,Multiboot,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Multiboot.cs,CountMemoryMap,The following statement contains a magic number: var size = location.Load32(MultiBootMemoryMapOffset.Size) + 4;
Magic Number,Mosa.Kernel.x86,Multiboot,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Multiboot.cs,GetMemoryMapIndexLocation,The following statement contains a magic number: var size = location.Load32(MultiBootMemoryMapOffset.Size) + 4;
Magic Number,Mosa.Kernel.x86,PageFrameAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageFrameAllocator.cs,AddFreeMemory,The following statement contains a magic number: at -= 4;
Magic Number,Mosa.Kernel.x86,PageFrameAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageFrameAllocator.cs,Allocate,The following statement contains a magic number: at -= 4;
Magic Number,Mosa.Kernel.x86,PageFrameAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageFrameAllocator.cs,Free,The following statement contains a magic number: at += 4;
Magic Number,Mosa.Kernel.x86,PageTable,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: new Pointer(Address.PageDirectory).Store32(index << 2' (uint)(Address.PageTable + (index * 4096) | 0x04 | 0x02 | 0x01));
Magic Number,Mosa.Kernel.x86,PageTable,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: new Pointer(Address.PageDirectory).Store32(index << 2' (uint)(Address.PageTable + (index * 4096) | 0x04 | 0x02 | 0x01));
Magic Number,Mosa.Kernel.x86,PageTable,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: index < 1024
Magic Number,Mosa.Kernel.x86,PageTable,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: new Pointer(Address.PageTable).Store32(index << 2' (uint)(index * 4096) | 0x04 | 0x02 | 0x01);
Magic Number,Mosa.Kernel.x86,PageTable,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: new Pointer(Address.PageTable).Store32(index << 2' (uint)(index * 4096) | 0x04 | 0x02 | 0x01);
Magic Number,Mosa.Kernel.x86,PageTable,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: index < 1024 * 32
Magic Number,Mosa.Kernel.x86,PageTable,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,Setup,The following statement contains a magic number: index < 1024 * 32
Magic Number,Mosa.Kernel.x86,PageTable,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,MapVirtualAddressToPhysical,The following statement contains a magic number: new Pointer(Address.PageTable).Store32((virtualAddress & 0xFFFFF000u) >> 10' physicalAddress & 0xFFFFF000u | 0x04u | 0x02u | (present ? 0x1u : 0x0u));
Magic Number,Mosa.Kernel.x86,PageTable,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PageTable.cs,GetPhysicalAddressFromVirtual,The following statement contains a magic number: var offset = (((uint)virtualAddress.ToInt32() & 0xFFFFF000u) >> 10) + ((uint)virtualAddress.ToInt32() & 0xFFFu);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EIP' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EIP' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ESP' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ESP' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EBP' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EBP' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EFLAGS' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EFLAGS' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(CR2' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(CR2' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EAX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EAX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EBX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EBX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ECX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ECX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(CS' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(CS' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(FS' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(FS' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EDX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EDX' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EDI' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(EDI' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ESI' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ESI' 16' 8);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ErrorCode' 16' 2);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(ErrorCode' 16' 2);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(Interrupt' 16' 2);
Magic Number,Mosa.Kernel.x86,Panic,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Panic.cs,DumpRegisters,The following statement contains a magic number: Screen.Write(Interrupt' 16' 2);
Magic Number,Mosa.Kernel.x86,PIC,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PIC.cs,Setup,The following statement contains a magic number: Native.Out8(PIC1_Data' 4);
Magic Number,Mosa.Kernel.x86,PIC,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PIC.cs,Setup,The following statement contains a magic number: Native.Out8(PIC2_Data' 2);
Magic Number,Mosa.Kernel.x86,PIC,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\PIC.cs,SendEndOfInterrupt,The following statement contains a magic number: irq >= 40
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-4' 0);
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-8' SignalThreadTerminationMethodAddress.ToInt32());
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-12' 0x00000202);
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-16' 0x08);
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-20' methodAddress.ToInt32());
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-24' 0);
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-28' 0);
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-32' 0);
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-36' 0);
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-40' 0);
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-44' 0);
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-48' 0);
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-52' (stackTop - 8).ToInt32());
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-52' (stackTop - 8).ToInt32());
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-56' 0);
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: stackTop.Store32(-60' 0);
Magic Number,Mosa.Kernel.x86,Scheduler,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Scheduler.cs,CreateThread,The following statement contains a magic number: thread.StackStatePointer = stackTop - 60;
Magic Number,Mosa.Kernel.x86,Screen,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Screen.cs,RawWrite,The following statement contains a magic number: var address = new Pointer(0x0B8000 + ((row * Columns + column) * 2));
Magic Number,Mosa.Kernel.x86,Screen,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Screen.cs,Write,The following statement contains a magic number: var address = new Pointer(0x0B8000 + ((Row * Columns + Column) * 2));
Magic Number,Mosa.Kernel.x86,Screen,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Screen.cs,SetCursor,The following statement contains a magic number: Native.Out8(0x3D5' (byte)((location >> 8) & 0xFF));
Magic Number,Mosa.Kernel.x86,Screen,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Screen.cs,Write,The following statement contains a magic number: Write(val' 10' -1);
Magic Number,Mosa.Kernel.x86,Screen,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Screen.cs,Write,The following statement contains a magic number: digit < 10
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,QueueUnitTest,The following statement contains a magic number: new Pointer(Address.UnitTestQueue + len + 32) >= queueCurrent
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,QueueUnitTest,The following statement contains a magic number: (queueNext + len + 32) > (new Pointer(Address.UnitTestQueue) + TestQueueSize)
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,QueueUnitTest,The following statement contains a magic number: queueNext.Store32(len + 4);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,QueueUnitTest,The following statement contains a magic number: queueNext += 4;
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,QueueUnitTest,The following statement contains a magic number: queueNext += 4;
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,QueueUnitTest,The following statement contains a magic number: queueNext += 4;
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: uint id = queueCurrent.Load32(4);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: uint address = queueCurrent.Load32(8);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: uint type = queueCurrent.Load32(12);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: uint paramcnt = queueCurrent.Load32(16);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: uint value = queueCurrent.Load32(20 + (index * 4));
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: uint value = queueCurrent.Load32(20 + (index * 4));
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: queueCurrent = queueCurrent + len + 4;
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Goto(17' 0);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(id' 10' 5);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(id' 10' 5);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(address' 16' 8);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(paramcnt' 10' 2);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(paramcnt' 10' 2);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(len' 10' 4);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(len' 10' 4);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(count' 10' 4);
Magic Number,Mosa.Kernel.x86,UnitTestQueue,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestQueue.cs,ProcessQueue,The following statement contains a magic number: Screen.Write(count' 10' 4);
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: uint esp = Native.AllocateStackSpace(MaxParameters * 4);
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: Screen.Write((uint)esp' 16' 8);
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: Screen.Write((uint)esp' 16' 8);
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: Screen.Write(++testCount' 10' 7);
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: Screen.Write(++testCount' 10' 7);
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: uint value = new Pointer(Address.UnitTestStack).Load32(index * 4);
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: new Pointer(esp).Store32(index * 4' value);
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: switch (testResultType)  					{  						case 0: Native.FrameCall(testMethodAddress); break;  						case 1: testResult = Native.FrameCallRetU4(testMethodAddress); break;  						case 2: testResult = Native.FrameCallRetU8(testMethodAddress); break;  						case 3: testResult = Native.FrameCallRetR8(testMethodAddress); break;  						default: break;  					}
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: switch (testResultType)  					{  						case 0: Native.FrameCall(testMethodAddress); break;  						case 1: testResult = Native.FrameCallRetU4(testMethodAddress); break;  						case 2: testResult = Native.FrameCallRetU8(testMethodAddress); break;  						case 3: testResult = Native.FrameCallRetR8(testMethodAddress); break;  						default: break;  					}
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,EnterTestReadyLoop,The following statement contains a magic number: Native.Int(255);
Magic Number,Mosa.Kernel.x86,UnitTestRunner,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\UnitTestRunner.cs,SetUnitTestMethodParameter,The following statement contains a magic number: new Pointer(Address.UnitTestStack).Store32(index * 4' value);
Magic Number,Mosa.Kernel.x86,VirtualPageAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\VirtualPageAllocator.cs,Setup,The following statement contains a magic number: Internal.MemoryClear(new Pointer(Address.VirtualPageAllocator)' pages / 8);
Magic Number,Mosa.Kernel.x86,VirtualPageAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\VirtualPageAllocator.cs,SetPageStatus,The following statement contains a magic number: var at = new Pointer(Address.VirtualPageAllocator + (page / 32));
Magic Number,Mosa.Kernel.x86,VirtualPageAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\VirtualPageAllocator.cs,SetPageStatus,The following statement contains a magic number: byte bit = (byte)(page % 32);
Magic Number,Mosa.Kernel.x86,VirtualPageAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\VirtualPageAllocator.cs,GetPageStatus,The following statement contains a magic number: var at = new Pointer(Address.VirtualPageAllocator + (page / 8));
Magic Number,Mosa.Kernel.x86,VirtualPageAllocator,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\VirtualPageAllocator.cs,GetPageStatus,The following statement contains a magic number: byte bit = (byte)(page % 8);
Magic Number,Mosa.Kernel.x86.Smbios,SmbiosManager,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Smbios\SmbiosManager.cs,GetStructureOfType,The following statement contains a magic number: GetType(address) != 127u
Magic Number,Mosa.Kernel.x86.Smbios,SmbiosManager,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Smbios\SmbiosManager.cs,LocateEntryPoint,The following statement contains a magic number: char m = (char)memory.Load8(2u);
Magic Number,Mosa.Kernel.x86.Smbios,SmbiosManager,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Kernel.x86\Smbios\SmbiosManager.cs,LocateEntryPoint,The following statement contains a magic number: char b = (char)memory.Load8(3u);
