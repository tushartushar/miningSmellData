Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The method has 103 lines of code.
Long Method,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The method has 241 lines of code.
Long Parameter List,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA28,The method has 5 parameters. Parameters: operation' drive' lba' data' offset
Long Parameter List,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA48,The method has 5 parameters. Parameters: operation' drive' lba' data' offset
Long Parameter List,Mosa.DeviceDriver.ISA,PCIControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIControllerX.cs,WriteConfig32,The method has 5 parameters. Parameters: bus' slot' function' register' value
Long Parameter List,Mosa.DeviceDriver.ISA,PCIControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIControllerX.cs,WriteConfig16,The method has 5 parameters. Parameters: bus' slot' function' register' value
Long Parameter List,Mosa.DeviceDriver.ISA,PCIControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIControllerX.cs,WriteConfig8,The method has 5 parameters. Parameters: bus' slot' function' register' value
Long Parameter List,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA28,The method has 5 parameters. Parameters: operation' drive' lba' data' offset
Long Parameter List,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA48,The method has 5 parameters. Parameters: operation' drive' lba' data' offset
Long Parameter List,Mosa.DeviceDriver.ISA,PCIController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIController.cs,WriteConfig32,The method has 5 parameters. Parameters: bus' slot' function' register' value
Long Parameter List,Mosa.DeviceDriver.ISA,PCIController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIController.cs,WriteConfig16,The method has 5 parameters. Parameters: bus' slot' function' register' value
Long Parameter List,Mosa.DeviceDriver.ISA,PCIController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIController.cs,WriteConfig8,The method has 5 parameters. Parameters: bus' slot' function' register' value
Long Parameter List,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,WriteChar,The method has 5 parameters. Parameters: x' y' c' foreground' background
Long Parameter List,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,PerformLBA28,The method has 5 parameters. Parameters: operation' drive' lba' data' offset
Long Parameter List,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,ReadLBA48,The method has 5 parameters. Parameters: operation' drive' lba' data' offset
Long Statement,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,WaitForIdentifyData,The length of the statement  "			while ((status & StatusRegister.DataRequest) != StatusRegister.DataRequest && (status & StatusRegister.Error) != StatusRegister.Error); " is 135.
Long Statement,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA28,The length of the statement  "			CommandPort.Write8((operation == SectorOperation.Write) ? IDECommand.WriteSectorsWithRetry : IDECommand.ReadSectorsWithRetry); " is 126.
Long Statement,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA28,The length of the statement  "				//NOTE: Transfering 16bits at a time seems to fail(?) to write each second 16bits - transfering 32bits seems to fix this (???) " is 126.
Long Statement,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,DoIdentifyDrive,The length of the statement  "				if(lba28SectorCount == 0x0FFFFFFF) //Check the limit according to the d1699r3f-ata8-acs.pdf (4.10.4 IDENTIFY DEVICE data) " is 121.
Long Statement,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,WaitForIdentifyData,The length of the statement  "			while ((status & StatusRegister.DataRequest) != StatusRegister.DataRequest && (status & StatusRegister.Error) != StatusRegister.Error); " is 135.
Long Statement,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA28,The length of the statement  "			CommandPort.Write8((operation == SectorOperation.Write) ? IDECommand.WriteSectorsWithRetry : IDECommand.ReadSectorsWithRetry); " is 126.
Long Statement,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA28,The length of the statement  "				//NOTE: Transfering 16bits at a time seems to fail(?) to write each second 16bits - transfering 32bits seems to fix this (???) " is 126.
Long Statement,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA48,The length of the statement  "			//NOTE: There's no point in finding the upper 5-6 bytes in a 32bit number (which also fixes a bug: (lba >> 32) = lba -> addressing wrong blocks) " is 144.
Long Statement,Mosa.DeviceDriver.ISA,Serial,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\Serial.cs,Initialize,The length of the statement  "			scrBase = Device.Resources.GetIOPortReadWrite(0' 7); // Scratch Register (16450+ and some 8250s' special use with some boards) " is 126.
Long Statement,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The length of the statement  "					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make; " is 169.
Long Statement,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The length of the statement  "				case 4: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; } " is 126.
Long Statement,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The length of the statement  "				case 5: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; } " is 126.
Long Statement,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The length of the statement  "				//case 11: { WriteSettings(VGA640x480x2); width = 640; height = 480; colors = 2; writeMethod = WriteMethod.xxx; return true; } " is 126.
Long Statement,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The length of the statement  "				//case 12: { WriteSettings(VGA640x480x16); width = 640; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; } " is 128.
Long Statement,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The length of the statement  "				case 13: { WriteSettings(VGA320x200x256); width = 320; height = 200; colors = 256; writeMethod = WriteMethod.Pixel8; return true; } " is 131.
Long Statement,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The length of the statement  "				//case 99: { WriteSettings(VGA720x480x16); width = 720; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; } " is 128.
Magic Number,Mosa.DeviceDriver.ISA,CMOSX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\CMOSX.cs,Initialize,The following statement contains a magic number: dataPort = Device.Resources.GetIOPortReadWrite(0' 4);
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,Initialize,The following statement contains a magic number: SectorCountPort = Device.Resources.GetIOPortReadWrite(0' 2);
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,Initialize,The following statement contains a magic number: LBALowPort = Device.Resources.GetIOPortReadWrite(0' 3);
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,Initialize,The following statement contains a magic number: LBAMidPort = Device.Resources.GetIOPortReadWrite(0' 4);
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,Initialize,The following statement contains a magic number: LBAHighPort = Device.Resources.GetIOPortReadWrite(0' 5);
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,Initialize,The following statement contains a magic number: DeviceHeadPort = Device.Resources.GetIOPortReadWrite(0' 6);
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,Initialize,The following statement contains a magic number: CommandPort = Device.Resources.GetIOPortWrite(0' 7);
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,Initialize,The following statement contains a magic number: StatusPort = Device.Resources.GetIOPortReadWrite(0' 7);
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,Initialize,The following statement contains a magic number: AltStatusPort = Device.Resources.GetIOPortReadWrite(1' 6);
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,Initialize,The following statement contains a magic number: maximunDriveCount = 2;
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,DoIdentifyDrive,The following statement contains a magic number: var info = new DataBlock(512);
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,DoIdentifyDrive,The following statement contains a magic number: for (uint ix = 0; ix < 256; ix++)  			{  				info.SetUShort(ix * 2' DataPort.Read16());  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,DoIdentifyDrive,The following statement contains a magic number: for (uint ix = 0; ix < 256; ix++)  			{  				info.SetUShort(ix * 2' DataPort.Read16());  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA28,The following statement contains a magic number: DeviceHeadPort.Write8((byte)(0xE0 | (drive << 4) | ((lba >> 24) & 0x0F)));
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA28,The following statement contains a magic number: DeviceHeadPort.Write8((byte)(0xE0 | (drive << 4) | ((lba >> 24) & 0x0F)));
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA28,The following statement contains a magic number: LBAHighPort.Write8((byte)((lba >> 16) & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA28,The following statement contains a magic number: LBAMidPort.Write8((byte)((lba >> 8) & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA28,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				//NOTE: Transfering 16bits at a time seems to fail(?) to write each second 16bits - transfering 32bits seems to fix this (???)  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA28,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				//NOTE: Transfering 16bits at a time seems to fail(?) to write each second 16bits - transfering 32bits seems to fix this (???)  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA28,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				//NOTE: Transfering 16bits at a time seems to fail(?) to write each second 16bits - transfering 32bits seems to fix this (???)  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA28,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				//NOTE: Transfering 16bits at a time seems to fail(?) to write each second 16bits - transfering 32bits seems to fix this (???)  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA48,The following statement contains a magic number: DeviceHeadPort.Write8((byte)(0x40 | (drive << 4)));
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA48,The following statement contains a magic number: LBALowPort.Write8((byte)((lba >> 24) & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA48,The following statement contains a magic number: LBAMidPort.Write8((byte)((lba >> 32) & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA48,The following statement contains a magic number: LBAHighPort.Write8((byte)((lba >> 40) & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA48,The following statement contains a magic number: LBAMidPort.Write8((byte)((lba >> 8) & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA48,The following statement contains a magic number: LBAHighPort.Write8((byte)((lba >> 16) & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA48,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA48,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA48,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,PerformLBA48,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,ReadBlock,The following statement contains a magic number: if (data.Length < count * 512)  				return false;
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,ReadBlock,The following statement contains a magic number: try  			{  				spinLock.Enter();  				for (uint index = 0; index < count; index++)  				{  					switch (driveInfo[drive].AddressingMode)  					{  						case AddressingMode.LBA28:  							if (!PerformLBA28(SectorOperation.Read' drive' block + index' data' index * 512))  								return false;  							break;    						case AddressingMode.LBA48:  							if (!PerformLBA48(SectorOperation.Read' drive' block + index' data' index * 512))  								return false;  							break;  					}  				}  				return true;  			}  			finally  			{  				spinLock.Exit();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,ReadBlock,The following statement contains a magic number: try  			{  				spinLock.Enter();  				for (uint index = 0; index < count; index++)  				{  					switch (driveInfo[drive].AddressingMode)  					{  						case AddressingMode.LBA28:  							if (!PerformLBA28(SectorOperation.Read' drive' block + index' data' index * 512))  								return false;  							break;    						case AddressingMode.LBA48:  							if (!PerformLBA48(SectorOperation.Read' drive' block + index' data' index * 512))  								return false;  							break;  					}  				}  				return true;  			}  			finally  			{  				spinLock.Exit();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,WriteBlock,The following statement contains a magic number: if (data.Length < count * 512)  				return false;
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,WriteBlock,The following statement contains a magic number: try  			{  				spinLock.Enter();  				for (uint index = 0; index < count; index++)  				{  					switch (driveInfo[drive].AddressingMode)  					{  						case AddressingMode.LBA28:  							if (!PerformLBA28(SectorOperation.Write' drive' block + index' data' index * 512))  							{  								return false;  							}  							break;    						case AddressingMode.LBA48:  							if (!PerformLBA48(SectorOperation.Write' drive' block + index' data' index * 512))  							{  								return false;  							}  							break;  					}  				}  				return true;  			}  			finally  			{  				spinLock.Exit();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,WriteBlock,The following statement contains a magic number: try  			{  				spinLock.Enter();  				for (uint index = 0; index < count; index++)  				{  					switch (driveInfo[drive].AddressingMode)  					{  						case AddressingMode.LBA28:  							if (!PerformLBA28(SectorOperation.Write' drive' block + index' data' index * 512))  							{  								return false;  							}  							break;    						case AddressingMode.LBA48:  							if (!PerformLBA48(SectorOperation.Write' drive' block + index' data' index * 512))  							{  								return false;  							}  							break;  					}  				}  				return true;  			}  			finally  			{  				spinLock.Exit();  			}
Magic Number,Mosa.DeviceDriver.ISA,PCIControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIControllerX.cs,Initialize,The following statement contains a magic number: configData = Device.Resources.GetIOPortReadWrite(0' 4);
Magic Number,Mosa.DeviceDriver.ISA,PCIControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIControllerX.cs,GetIndex,The following statement contains a magic number: return BaseValue  				| (uint)((bus & 0xFF) << 16)  				| (uint)((slot & 0x0F) << 11)  				| (uint)((function & 0x07) << 8)  				| (uint)(register & 0xFC);
Magic Number,Mosa.DeviceDriver.ISA,PCIControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIControllerX.cs,GetIndex,The following statement contains a magic number: return BaseValue  				| (uint)((bus & 0xFF) << 16)  				| (uint)((slot & 0x0F) << 11)  				| (uint)((function & 0x07) << 8)  				| (uint)(register & 0xFC);
Magic Number,Mosa.DeviceDriver.ISA,PCIControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIControllerX.cs,GetIndex,The following statement contains a magic number: return BaseValue  				| (uint)((bus & 0xFF) << 16)  				| (uint)((slot & 0x0F) << 11)  				| (uint)((function & 0x07) << 8)  				| (uint)(register & 0xFC);
Magic Number,Mosa.DeviceDriver.ISA,PCIControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIControllerX.cs,ReadConfig16,The following statement contains a magic number: return (ushort)((configData.Read32() >> ((register % 4) * 8)) & 0xFFFF);
Magic Number,Mosa.DeviceDriver.ISA,PCIControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIControllerX.cs,ReadConfig16,The following statement contains a magic number: return (ushort)((configData.Read32() >> ((register % 4) * 8)) & 0xFFFF);
Magic Number,Mosa.DeviceDriver.ISA,PCIControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIControllerX.cs,ReadConfig8,The following statement contains a magic number: return (byte)((configData.Read32() >> ((register % 4) * 8)) & 0xFF);
Magic Number,Mosa.DeviceDriver.ISA,PCIControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIControllerX.cs,ReadConfig8,The following statement contains a magic number: return (byte)((configData.Read32() >> ((register % 4) * 8)) & 0xFF);
Magic Number,Mosa.DeviceDriver.ISA,CMOS,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\CMOS.cs,Setup,The following statement contains a magic number: dataPort = base.HardwareResources.GetIOPortReadWrite(0' 4);
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,Setup,The following statement contains a magic number: SectorCountPort = base.HardwareResources.GetIOPortReadWrite(0' 2);
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,Setup,The following statement contains a magic number: LBALowPort = base.HardwareResources.GetIOPortReadWrite(0' 3);
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,Setup,The following statement contains a magic number: LBAMidPort = base.HardwareResources.GetIOPortReadWrite(0' 4);
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,Setup,The following statement contains a magic number: LBAHighPort = base.HardwareResources.GetIOPortReadWrite(0' 5);
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,Setup,The following statement contains a magic number: DeviceHeadPort = base.HardwareResources.GetIOPortReadWrite(0' 6);
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,Setup,The following statement contains a magic number: CommandPort = base.HardwareResources.GetIOPortWrite(0' 7);
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,Setup,The following statement contains a magic number: StatusPort = base.HardwareResources.GetIOPortReadWrite(0' 7);
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,Setup,The following statement contains a magic number: AltStatusPort = base.HardwareResources.GetIOPortReadWrite(1' 6);
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,DoIdentifyDrive,The following statement contains a magic number: var info = new DataBlock(512);
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,DoIdentifyDrive,The following statement contains a magic number: for (uint ix = 0; ix < 256; ix++)  			{  				info.SetUShort(ix * 2' DataPort.Read16());  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,DoIdentifyDrive,The following statement contains a magic number: for (uint ix = 0; ix < 256; ix++)  			{  				info.SetUShort(ix * 2' DataPort.Read16());  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA28,The following statement contains a magic number: DeviceHeadPort.Write8((byte)(0xE0 | (drive << 4) | ((lba >> 24) & 0x0F)));
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA28,The following statement contains a magic number: DeviceHeadPort.Write8((byte)(0xE0 | (drive << 4) | ((lba >> 24) & 0x0F)));
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA28,The following statement contains a magic number: LBAHighPort.Write8((byte)((lba >> 16) & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA28,The following statement contains a magic number: LBAMidPort.Write8((byte)((lba >> 8) & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA28,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				//NOTE: Transfering 16bits at a time seems to fail(?) to write each second 16bits - transfering 32bits seems to fix this (???)  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA28,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				//NOTE: Transfering 16bits at a time seems to fail(?) to write each second 16bits - transfering 32bits seems to fix this (???)  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA28,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				//NOTE: Transfering 16bits at a time seems to fail(?) to write each second 16bits - transfering 32bits seems to fix this (???)  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA28,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				//NOTE: Transfering 16bits at a time seems to fail(?) to write each second 16bits - transfering 32bits seems to fix this (???)  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA48,The following statement contains a magic number: DeviceHeadPort.Write8((byte)(0x40 | (drive << 4)));
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA48,The following statement contains a magic number: LBALowPort.Write8((byte)((lba >> 24) & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA48,The following statement contains a magic number: LBAMidPort.Write8((byte)((lba >> 8) & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA48,The following statement contains a magic number: LBAHighPort.Write8((byte)((lba >> 16) & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA48,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA48,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA48,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,PerformLBA48,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 128; index++)  				{  					DataPort.Write32(sector.GetUInt(offset + (index * 4)));  				}    				//Cache flush  				DoCacheFlush();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,ReadBlock,The following statement contains a magic number: if (data.Length < count * 512)  				return false;
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,ReadBlock,The following statement contains a magic number: try  			{  				spinLock.Enter();  				for (uint index = 0; index < count; index++)  				{  					switch (driveInfo[drive].AddressingMode)  					{  						case AddressingMode.LBA28:  							if (!PerformLBA28(SectorOperation.Read' drive' block + index' data' index * 512))  								return false;  							break;    						case AddressingMode.LBA48:  							if (!PerformLBA48(SectorOperation.Read' drive' block + index' data' index * 512))  								return false;  							break;  					}  				}  				return true;  			}  			finally  			{  				spinLock.Exit();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,ReadBlock,The following statement contains a magic number: try  			{  				spinLock.Enter();  				for (uint index = 0; index < count; index++)  				{  					switch (driveInfo[drive].AddressingMode)  					{  						case AddressingMode.LBA28:  							if (!PerformLBA28(SectorOperation.Read' drive' block + index' data' index * 512))  								return false;  							break;    						case AddressingMode.LBA48:  							if (!PerformLBA48(SectorOperation.Read' drive' block + index' data' index * 512))  								return false;  							break;  					}  				}  				return true;  			}  			finally  			{  				spinLock.Exit();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,WriteBlock,The following statement contains a magic number: if (data.Length < count * 512)  				return false;
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,WriteBlock,The following statement contains a magic number: try  			{  				spinLock.Enter();  				for (uint index = 0; index < count; index++)  				{  					switch (driveInfo[drive].AddressingMode)  					{  						case AddressingMode.LBA28:  							if (!PerformLBA28(SectorOperation.Write' drive' block + index' data' index * 512))  								return false;  							break;    						case AddressingMode.LBA48:  							if (!PerformLBA48(SectorOperation.Write' drive' block + index' data' index * 512))  								return false;  							break;  					}  				}  				return true;  			}  			finally  			{  				spinLock.Exit();  			}
Magic Number,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,WriteBlock,The following statement contains a magic number: try  			{  				spinLock.Enter();  				for (uint index = 0; index < count; index++)  				{  					switch (driveInfo[drive].AddressingMode)  					{  						case AddressingMode.LBA28:  							if (!PerformLBA28(SectorOperation.Write' drive' block + index' data' index * 512))  								return false;  							break;    						case AddressingMode.LBA48:  							if (!PerformLBA48(SectorOperation.Write' drive' block + index' data' index * 512))  								return false;  							break;  					}  				}  				return true;  			}  			finally  			{  				spinLock.Exit();  			}
Magic Number,Mosa.DeviceDriver.ISA,PCIController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIController.cs,Setup,The following statement contains a magic number: configData = base.HardwareResources.GetIOPortReadWrite(0' 4);
Magic Number,Mosa.DeviceDriver.ISA,PCIController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIController.cs,GetIndex,The following statement contains a magic number: return BaseValue  				| (uint)((bus & 0xFF) << 16)  				| (uint)((slot & 0x0F) << 11)  				| (uint)((function & 0x07) << 8)  				| (uint)(register & 0xFC);
Magic Number,Mosa.DeviceDriver.ISA,PCIController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIController.cs,GetIndex,The following statement contains a magic number: return BaseValue  				| (uint)((bus & 0xFF) << 16)  				| (uint)((slot & 0x0F) << 11)  				| (uint)((function & 0x07) << 8)  				| (uint)(register & 0xFC);
Magic Number,Mosa.DeviceDriver.ISA,PCIController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIController.cs,GetIndex,The following statement contains a magic number: return BaseValue  				| (uint)((bus & 0xFF) << 16)  				| (uint)((slot & 0x0F) << 11)  				| (uint)((function & 0x07) << 8)  				| (uint)(register & 0xFC);
Magic Number,Mosa.DeviceDriver.ISA,PCIController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIController.cs,ReadConfig16,The following statement contains a magic number: return (ushort)((configData.Read32() >> ((register % 4) * 8)) & 0xFFFF);
Magic Number,Mosa.DeviceDriver.ISA,PCIController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIController.cs,ReadConfig16,The following statement contains a magic number: return (ushort)((configData.Read32() >> ((register % 4) * 8)) & 0xFFFF);
Magic Number,Mosa.DeviceDriver.ISA,PCIController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIController.cs,ReadConfig8,The following statement contains a magic number: return (byte)((configData.Read32() >> ((register % 4) * 8)) & 0xFF);
Magic Number,Mosa.DeviceDriver.ISA,PCIController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PCIController.cs,ReadConfig8,The following statement contains a magic number: return (byte)((configData.Read32() >> ((register % 4) * 8)) & 0xFF);
Magic Number,Mosa.DeviceDriver.ISA,PIC,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PIC.cs,SendEndOfInterrupt,The following statement contains a magic number: if (irq >= 8)  			{  				slaveCommandPort.Write8(EOI);  			}
Magic Number,Mosa.DeviceDriver.ISA,PIC,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PIC.cs,EnableMasterIRQ,The following statement contains a magic number: if (irq == 2)  				return;
Magic Number,Mosa.DeviceDriver.ISA,PIC,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PIC.cs,DisableMasterIRQ,The following statement contains a magic number: if (irq == 2)  				return;
Magic Number,Mosa.DeviceDriver.ISA,PIT,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PIT.cs,Initialize,The following statement contains a magic number: modeControlPort = Device.Resources.GetIOPortReadWrite(0' 3);
Magic Number,Mosa.DeviceDriver.ISA,PIT,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\PIT.cs,Start,The following statement contains a magic number: counter0Divisor.Write8((byte)((timerCount & 0xFF00) >> 8));
Magic Number,Mosa.DeviceDriver.ISA,Serial,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\Serial.cs,Initialize,The following statement contains a magic number: iirBase = Device.Resources.GetIOPortReadWrite(0' 2);
Magic Number,Mosa.DeviceDriver.ISA,Serial,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\Serial.cs,Initialize,The following statement contains a magic number: fcrBase = Device.Resources.GetIOPortWrite(0' 2);
Magic Number,Mosa.DeviceDriver.ISA,Serial,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\Serial.cs,Initialize,The following statement contains a magic number: lcrBase = Device.Resources.GetIOPortReadWrite(0' 3);
Magic Number,Mosa.DeviceDriver.ISA,Serial,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\Serial.cs,Initialize,The following statement contains a magic number: mcrBase = Device.Resources.GetIOPortReadWrite(0' 4);
Magic Number,Mosa.DeviceDriver.ISA,Serial,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\Serial.cs,Initialize,The following statement contains a magic number: lsrBase = Device.Resources.GetIOPortReadWrite(0' 5);
Magic Number,Mosa.DeviceDriver.ISA,Serial,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\Serial.cs,Initialize,The following statement contains a magic number: msrBase = Device.Resources.GetIOPortReadWrite(0' 6);
Magic Number,Mosa.DeviceDriver.ISA,Serial,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\Serial.cs,Initialize,The following statement contains a magic number: scrBase = Device.Resources.GetIOPortReadWrite(0' 7);
Magic Number,Mosa.DeviceDriver.ISA,Serial,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\Serial.cs,Start,The following statement contains a magic number: const int baudRate = 115200;
Magic Number,Mosa.DeviceDriver.ISA,Serial,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\Serial.cs,Start,The following statement contains a magic number: const int divisor = 115200 / baudRate;
Magic Number,Mosa.DeviceDriver.ISA,Serial,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\Serial.cs,Start,The following statement contains a magic number: dlmBase.Write8((byte)(divisor >> 8 & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,Start,The following statement contains a magic number: if (colorMode)  			{  				offset = 0x8000;  				bytePerChar = 2;  				activeControllerIndex = crtControllerIndexColor;  				activeControllerData = crtControllerDataColor;  			}  			else  			{  				offset = 0x0;  				bytePerChar = 1;  				activeControllerIndex = crtControllerIndex;  				activeControllerData = crtControllerData;  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,Start,The following statement contains a magic number: height = 25;
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,WriteChar,The following statement contains a magic number: if (colorMode)  			{  				uint index = (ushort)(offset + (((y * width) + x) * 2));  				memory[index] = (byte)c;  				memory[index + 1] = (byte)((byte)foreground | ((byte)background << 4));  			}  			else  			{  				uint index = (ushort)(offset + (y * width) + x);  				index = index + x;  				memory[index] = (byte)c;  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,WriteChar,The following statement contains a magic number: if (colorMode)  			{  				uint index = (ushort)(offset + (((y * width) + x) * 2));  				memory[index] = (byte)c;  				memory[index + 1] = (byte)((byte)foreground | ((byte)background << 4));  			}  			else  			{  				uint index = (ushort)(offset + (y * width) + x);  				index = index + x;  				memory[index] = (byte)c;  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,SetCursor,The following statement contains a magic number: SendCommand(CRTCommands.CursorLocationHigh' (byte)((position >> 8) & 0xFF));
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,ClearScreen,The following statement contains a magic number: if (bytePerChar == 2)  			{  				for (int i = 0; i < size; i++)  				{  					memory[(uint)(index + (i * 2))] = 0;  					memory[(uint)(index + (i * 2) + 1)] = (byte)((byte)defaultBackground << 4);  				}  			}  			else  			{  				for (int i = 0; i < size; i = i + bytePerChar)  				{  					memory[(uint)(index + i)] = 0;  				}  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,ClearScreen,The following statement contains a magic number: if (bytePerChar == 2)  			{  				for (int i = 0; i < size; i++)  				{  					memory[(uint)(index + (i * 2))] = 0;  					memory[(uint)(index + (i * 2) + 1)] = (byte)((byte)defaultBackground << 4);  				}  			}  			else  			{  				for (int i = 0; i < size; i = i + bytePerChar)  				{  					memory[(uint)(index + i)] = 0;  				}  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,ClearScreen,The following statement contains a magic number: if (bytePerChar == 2)  			{  				for (int i = 0; i < size; i++)  				{  					memory[(uint)(index + (i * 2))] = 0;  					memory[(uint)(index + (i * 2) + 1)] = (byte)((byte)defaultBackground << 4);  				}  			}  			else  			{  				for (int i = 0; i < size; i = i + bytePerChar)  				{  					memory[(uint)(index + i)] = 0;  				}  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,ClearScreen,The following statement contains a magic number: if (bytePerChar == 2)  			{  				for (int i = 0; i < size; i++)  				{  					memory[(uint)(index + (i * 2))] = 0;  					memory[(uint)(index + (i * 2) + 1)] = (byte)((byte)defaultBackground << 4);  				}  			}  			else  			{  				for (int i = 0; i < size; i = i + bytePerChar)  				{  					memory[(uint)(index + i)] = 0;  				}  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,ScrollUp,The following statement contains a magic number: for (int i = 0; i < width * 2; i++)  			{  				memory[(uint)(index + i)] = 0;  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 5; i++)  			{  				sequencerAddress.Write8(i);  				sequencerData.Write8(settings[1 + i]);  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 25; i++)  			{  				crtControllerIndexColor.Write8(i);  				crtControllerDataColor.Write8(settings[6 + i]);  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 25; i++)  			{  				crtControllerIndexColor.Write8(i);  				crtControllerDataColor.Write8(settings[6 + i]);  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 9; i++)  			{  				graphicsControllerAddress.Write8(i);  				graphicsControllerData.Write8(settings[31 + i]);  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 9; i++)  			{  				graphicsControllerAddress.Write8(i);  				graphicsControllerData.Write8(settings[31 + i]);  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 21; i++)  			{  				inputStatus1ReadB.Read8();  				attributeAddress.Write8(i);  				attributeAddress.Write8(settings[40 + i]); // TODO: Double check  			}
Magic Number,Mosa.DeviceDriver.ISA,VGAText,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\VGAText.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 21; i++)  			{  				inputStatus1ReadB.Read8();  				attributeAddress.Write8(i);  				attributeAddress.Write8(settings[40 + i]); // TODO: Double check  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,ConvertScanCode,The following statement contains a magic number: switch (scancode & 0x7F)  			{  				case 1: key.Character = (char)27; break;  				case 2: key.Character = (_shifted ? '\'' : '1'); break;  				case 3: key.Character = (_shifted ? '"' : '2'); break;  				case 4: key.Character = (_shifted ? '+' : '3'); break;  				case 5: key.Character = (_shifted ? '!' : '4'); break;  				case 6: key.Character = (_shifted ? '%' : '5'); break;  				case 7: key.Character = (_shifted ? '/' : '6'); break;  				case 8: key.Character = (_shifted ? '=' : '7'); break;  				case 9: key.Character = (_shifted ? '(' : '8'); break;  				case 10: key.Character = (_shifted ? ')' : '9'); break;  				case 11: key.Character = TransformCharacter('ö'); break;  				case 12: key.Character = TransformCharacter('ü'); break;  				case 13: key.Character = TransformCharacter('ó'); break;  				case 14: key.Character = '\b'; break;  				case 15: key.Character = '\t'; break;  				case 16: key.Character = TransformCharacter('q'); break;  				case 17: key.Character = TransformCharacter('w'); break;  				case 18: key.Character = TransformCharacter('e'); break;  				case 19: key.Character = TransformCharacter('r'); break;  				case 20: key.Character = TransformCharacter('t'); break;  				case 21: key.Character = TransformCharacter('z'); break;  				case 22: key.Character = TransformCharacter('u'); break;  				case 23: key.Character = TransformCharacter('i'); break;  				case 24: key.Character = TransformCharacter('o'); break;  				case 25: key.Character = TransformCharacter('p'); break;  				case 26: key.Character = TransformCharacter('ő'); break;  				case 27: key.Character = TransformCharacter('ú'); break;  				case 28: key.Character = '\n'; break;  				case 29: key.KeyType = KeyType.LeftControl; break;  				case 30: key.Character = TransformCharacter('a'); break;  				case 31: key.Character = TransformCharacter('s'); break;  				case 32: key.Character = TransformCharacter('d'); break;  				case 33: key.Character = TransformCharacter('f'); break;  				case 34: key.Character = TransformCharacter('g'); break;  				case 35: key.Character = TransformCharacter('h'); break;  				case 36: key.Character = TransformCharacter('j'); break;  				case 37: key.Character = TransformCharacter('k'); break;  				case 38: key.Character = TransformCharacter('l'); break;  				case 39: key.Character = TransformCharacter('é'); break;  				case 40: key.Character = TransformCharacter('á'); break;  				case 41: key.Character = TransformCharacter('0'); break;  				case 42: key.KeyType = KeyType.LeftShift; break;  				case 43: key.Character = TransformCharacter('ű'); break;  				case 44: key.Character = TransformCharacter('y'); break;  				case 45: key.Character = TransformCharacter('x'); break;  				case 46: key.Character = TransformCharacter('c'); break;  				case 47: key.Character = TransformCharacter('v'); break;  				case 48: key.Character = TransformCharacter('b'); break;  				case 49: key.Character = TransformCharacter('n'); break;  				case 50: key.Character = TransformCharacter('m'); break;  				case 51: key.Character = (_shifted ? '?' : '''); break;  				case 52: key.Character = (_shifted ? ':' : '.'); break;  				case 53: key.Character = (_shifted ? '_' : '-'); break;  				case 54: key.KeyType = KeyType.RightShift; break;    				case 56: key.KeyType = KeyType.LeftAlt; break;  				case 57: key.Character = ' '; break;  				case 58: key.KeyType = KeyType.CapsLock; break;  				case 59: key.KeyType = KeyType.F1; break;  				case 60: key.KeyType = KeyType.F2; break;  				case 61: key.KeyType = KeyType.F3; break;  				case 62: key.KeyType = KeyType.F4; break;  				case 63: key.KeyType = KeyType.F5; break;  				case 64: key.KeyType = KeyType.F6; break;  				case 65: key.KeyType = KeyType.F7; break;  				case 66: key.KeyType = KeyType.F8; break;  				case 67: key.KeyType = KeyType.F9; break;  				case 68: key.KeyType = KeyType.F10; break;  				case 69: key.KeyType = KeyType.NumLock; break;  				case 70: key.KeyType = KeyType.ScrollLock; break;  				case 71: key.KeyType = KeyType.Home; break;  				case 72: key.KeyType = KeyType.UpArrow; break;  				case 73: key.KeyType = KeyType.PageUp; break;  				case 74: key.Character = '-'; break;  				case 75: key.KeyType = KeyType.LeftArrow; break;    				case 77: key.KeyType = KeyType.RightArrow; break;  				case 78: key.Character = '+'; break;  				case 79: key.KeyType = KeyType.End; break;  				case 80: key.KeyType = KeyType.DownArrow; break;  				case 81: key.KeyType = KeyType.PageDown; break;  				case 82: key.KeyType = KeyType.Insert; break;  				case 83: key.KeyType = KeyType.Delete; break;    				case 86: key.Character = TransformCharacter('<'); break;  				case 87: key.KeyType = KeyType.F11; break;  				case 88: key.KeyType = KeyType.F12; break;    				default: //Unmapped buttons (which doesn't exist on a hungarian keyboard)  					return new KeyEvent();  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver.ScanCodeMap,US,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\US.cs,ConvertScanCode,The following statement contains a magic number: if (keyState == KeyState.Normal)  			{  				if (scancode == 0xE0)  				{  					keyState = KeyState.Escaped;  					return key;  				}    				key.KeyPress = ((scancode & 0x80) != 0) ? KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    				key.KeyType = KeyType.RegularKey;    				switch (scancode)  				{  					case 1: key.Character = (char)27; break;  					case 2: key.Character = '1'; break;  					case 3: key.Character = '2'; break;  					case 4: key.Character = '3'; break;  					case 5: key.Character = '4'; break;  					case 6: key.Character = '5'; break;  					case 7: key.Character = '6'; break;  					case 8: key.Character = '7'; break;  					case 9: key.Character = '8'; break;  					case 10: key.Character = '9'; break;  					case 11: key.Character = '0'; break;  					case 12: key.Character = '-'; break;  					case 13: key.Character = '='; break;  					case 14: key.Character = '\b'; break;  					case 15: key.Character = '\t'; break;  					case 16: key.Character = 'q'; break;  					case 17: key.Character = 'w'; break;  					case 18: key.Character = 'e'; break;  					case 19: key.Character = 'r'; break;  					case 20: key.Character = 't'; break;  					case 21: key.Character = 'y'; break;  					case 22: key.Character = 'u'; break;  					case 23: key.Character = 'i'; break;  					case 24: key.Character = 'o'; break;  					case 25: key.Character = 'p'; break;  					case 26: key.Character = '['; break;  					case 27: key.Character = ']'; break;  					case 28: key.Character = '\n'; break;  					case 29: key.KeyType = KeyType.LeftControl; break;  					case 30: key.Character = 'a'; break;  					case 31: key.Character = 's'; break;  					case 32: key.Character = 'd'; break;  					case 33: key.Character = 'f'; break;  					case 34: key.Character = 'g'; break;  					case 35: key.Character = 'h'; break;  					case 36: key.Character = 'j'; break;  					case 37: key.Character = 'k'; break;  					case 38: key.Character = 'l'; break;  					case 39: key.Character = ';'; break;  					case 40: key.Character = '\''; break;  					case 41: key.Character = '`'; break;  					case 42: key.KeyType = KeyType.LeftShift; break;  					case 43: key.Character = '\\'; break;  					case 44: key.Character = 'z'; break;  					case 45: key.Character = 'x'; break;  					case 46: key.Character = 'c'; break;  					case 47: key.Character = 'v'; break;  					case 48: key.Character = 'b'; break;  					case 49: key.Character = 'n'; break;  					case 50: key.Character = 'm'; break;  					case 51: key.Character = '''; break;  					case 52: key.Character = '.'; break;  					case 53: key.Character = '/'; break;  					case 54: key.KeyType = KeyType.RightShift; break;  					case 55: key.Character = '*'; break;  					case 56: key.KeyType = KeyType.LeftAlt; break;  					case 57: key.Character = ' '; break;  					case 58: key.KeyType = KeyType.CapsLock; break;  					case 59: key.KeyType = KeyType.F1; break;  					case 60: key.KeyType = KeyType.F2; break;  					case 61: key.KeyType = KeyType.F3; break;  					case 62: key.KeyType = KeyType.F4; break;  					case 63: key.KeyType = KeyType.F5; break;  					case 64: key.KeyType = KeyType.F6; break;  					case 65: key.KeyType = KeyType.F7; break;  					case 66: key.KeyType = KeyType.F8; break;  					case 67: key.KeyType = KeyType.F9; break;  					case 68: key.KeyType = KeyType.F10; break;  					case 69: key.KeyType = KeyType.NumLock; break;  					case 70: key.KeyType = KeyType.ScrollLock; break;  					case 71: key.KeyType = KeyType.Home; break;  					case 72: key.KeyType = KeyType.UpArrow; break;  					case 73: key.KeyType = KeyType.PageUp; break;  					case 74: key.Character = '-'; break;  					case 75: key.KeyType = KeyType.LeftArrow; break;  					case 76: key.Character = (char)0; break;  					case 77: key.KeyType = KeyType.RightArrow; break;  					case 78: key.Character = '+'; break;  					case 79: key.KeyType = KeyType.End; break;  					case 80: key.KeyType = KeyType.DownArrow; break;  					case 81: key.KeyType = KeyType.PageDown; break;  					case 82: key.KeyType = KeyType.Insert; break;  					case 83: key.KeyType = KeyType.Delete; break;  					case 86: key.Character = '\\'; break;  					case 87: key.KeyType = KeyType.F11; break;  					case 88: key.KeyType = KeyType.F12; break;  					case 129: key.Character = (char)27; break;  					case 130: key.Character = '!'; break;  					case 131: key.Character = '@'; break;  					case 132: key.Character = '#'; break;  					case 133: key.Character = '$'; break;  					case 134: key.Character = '%'; break;  					case 135: key.Character = '^'; break;  					case 136: key.Character = '&'; break;  					case 137: key.Character = '*'; break;  					case 138: key.Character = '('; break;  					case 139: key.Character = ')'; break;  					case 140: key.Character = '_'; break;  					case 141: key.Character = '+'; break;  					case 142: key.Character = '\b'; break;  					case 143: key.Character = '\t'; break;  					case 144: key.Character = 'Q'; break;  					case 145: key.Character = 'W'; break;  					case 146: key.Character = 'E'; break;  					case 147: key.Character = 'R'; break;  					case 148: key.Character = 'T'; break;  					case 149: key.Character = 'Y'; break;  					case 150: key.Character = 'U'; break;  					case 151: key.Character = 'I'; break;  					case 152: key.Character = 'O'; break;  					case 153: key.Character = 'P'; break;  					case 154: key.Character = '{'; break;  					case 155: key.Character = '}'; break;  					case 156: key.Character = '\n'; break;  					case 157: key.KeyType = KeyType.RightControl; break;  					case 158: key.Character = 'A'; break;  					case 159: key.Character = 'S'; break;  					case 160: key.Character = 'D'; break;  					case 161: key.Character = 'F'; break;  					case 162: key.Character = 'G'; break;  					case 163: key.Character = 'H'; break;  					case 164: key.Character = 'J'; break;  					case 165: key.Character = 'K'; break;  					case 166: key.Character = 'L'; break;  					case 167: key.Character = ':'; break;  					case 168: key.Character = '"'; break;  					case 169: key.Character = '~'; break;  					case 170: key.KeyType = KeyType.LeftShift; break;  					case 171: key.Character = '|'; break;  					case 172: key.Character = 'Z'; break;  					case 173: key.Character = 'X'; break;  					case 174: key.Character = 'C'; break;  					case 175: key.Character = 'V'; break;  					case 176: key.Character = 'B'; break;  					case 177: key.Character = 'N'; break;  					case 178: key.Character = 'M'; break;  					case 179: key.Character = '<'; break;  					case 180: key.Character = '>'; break;  					case 181: key.Character = '?'; break;  					case 182: key.KeyType = KeyType.RightShift; break;  					case 183: key.Character = '*'; break;  					case 184: key.KeyType = KeyType.RightAlt; break;  					case 185: key.Character = ' '; break;  					case 186: key.KeyType = KeyType.CapsLock; break;  					case 187: key.KeyType = KeyType.F1; break;  					case 188: key.KeyType = KeyType.F2; break;  					case 189: key.KeyType = KeyType.F3; break;  					case 190: key.KeyType = KeyType.F4; break;  					case 191: key.KeyType = KeyType.F5; break;  					case 192: key.KeyType = KeyType.F6; break;  					case 193: key.KeyType = KeyType.F7; break;  					case 194: key.KeyType = KeyType.F8; break;  					case 195: key.KeyType = KeyType.F9; break;  					case 196: key.KeyType = KeyType.F10; break;  					case 197: key.KeyType = KeyType.NumLock; break;  					case 198: key.KeyType = KeyType.ScrollLock; break;  					case 199: key.KeyType = KeyType.Home; break;  					case 200: key.KeyType = KeyType.UpArrow; break;  					case 201: key.KeyType = KeyType.PageUp; break;  					case 202: key.Character = '-'; break;  					case 203: key.KeyType = KeyType.LeftArrow; break;  					case 205: key.KeyType = KeyType.RightArrow; break;  					case 206: key.Character = '+'; break;  					case 207: key.KeyType = KeyType.End; break;  					case 208: key.KeyType = KeyType.DownArrow; break;  					case 209: key.KeyType = KeyType.PageDown; break;  					case 210: key.KeyType = KeyType.Insert; break;  					case 211: key.KeyType = KeyType.Delete; break;  					case 214: key.Character = '|'; break;  					case 215: key.KeyType = KeyType.F11; break;  					case 216: key.KeyType = KeyType.F12; break;  					default: break;  				}    				keyState = KeyState.Normal;  				return key;  			}  			else if ((keyState == KeyState.Escaped) || (keyState == KeyState.EscapeBreak))  			{  				if (scancode == 0xE0)  				{  					key.KeyType = KeyType.RegularKey;    					key.KeyPress = (((scancode & 0x80) != 0) || (keyState == KeyState.EscapeBreak)) ? key.KeyPress = KeyEvent.KeyPressType.Break : key.KeyPress = KeyEvent.KeyPressType.Make;    					if (scancode == 0xF0)  					{  						keyState = KeyState.EscapeBreak;  						return key;  					}    					switch (scancode)  					{  						case 0x1C: key.Character = '\n'; break;  						case 0x1D: key.KeyType = KeyType.LeftControl; break;  						case 0x2A: key.KeyType = KeyType.LeftShift; break;  						case 0x35: key.Character = '/'; break;  						case 0x36: key.KeyType = KeyType.RightShift; break;    						case 0x37: key.KeyType = KeyType.ControlPrintScreen; break;  						case 0x38: key.KeyType = KeyType.LeftAlt; break; // ?    						case 0x46: key.KeyType = KeyType.ScrollLock; break;  						case 0x47: key.KeyType = KeyType.Home; break;  						case 0x48: key.KeyType = KeyType.UpArrow; break;  						case 0x49: key.KeyType = KeyType.PageUp; break;  						case 0x4B: key.KeyType = KeyType.LeftArrow; break;  						case 0x4D: key.KeyType = KeyType.RightArrow; break;    						case 0x4F: key.KeyType = KeyType.End; break;  						case 0x50: key.KeyType = KeyType.DownArrow; break;  						case 0x51: key.KeyType = KeyType.PageDown; break;  						case 0x52: key.KeyType = KeyType.Insert; break;  						case 0x53: key.KeyType = KeyType.Delete; break;    						case 0x5B: key.KeyType = KeyType.LeftWindow; break;  						case 0x5C: key.KeyType = KeyType.RightWindow; break;  						case 0x5D: key.KeyType = KeyType.Menu; break;    						//case 0x37: key.KeyType = Key.Special.Power; break;  						//case 0x3F: key.KeyType = Key.Special.Sleep; break;  						//case 0x5E: key.KeyType = Key.Special.Wake; break;    						default: break;  					}    					keyState = KeyState.Normal;  					return key;  				}  				else if (keyState == KeyState.Espaced2)  				{  					keyState = KeyState.Normal;  					return key;  				}  			}
Magic Number,Mosa.DeviceDriver,Setup,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\Setup.cs,Register,The following statement contains a magic number: registery.AddDeviceDriver(new ISADeviceDriverRegistryEntry()  			{  				Name = "CMOS"'  				Platforms = PlatformArchitecture.X86'  				AutoLoad = true'  				BasePort = 0x0070'  				PortRange = 2'  				Factory = delegate { return new ISA.CMOS(); }  			});
Magic Number,Mosa.DeviceDriver,Setup,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\Setup.cs,Register,The following statement contains a magic number: registery.AddDeviceDriver(new ISADeviceDriverRegistryEntry()  			{  				Name = "PCIController"'  				Platforms = PlatformArchitecture.X86AndX64'  				AutoLoad = true'  				BasePort = 0x0CF8'  				PortRange = 8'  				Factory = delegate { return new ISA.PCIController(); }  			});
Magic Number,Mosa.DeviceDriver,Setup,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\Setup.cs,Register,The following statement contains a magic number: registery.AddDeviceDriver(new ISADeviceDriverRegistryEntry()  			{  				Name = "IDEController"'  				Platforms = PlatformArchitecture.X86AndX64'  				AutoLoad = true'  				BasePort = 0x1F0'  				PortRange = 8'  				AltBasePort = 0x3F6'  				AltPortRange = 8'  				Factory = delegate { return new ISA.IDEController(); }  			});
Magic Number,Mosa.DeviceDriver,Setup,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\Setup.cs,Register,The following statement contains a magic number: registery.AddDeviceDriver(new ISADeviceDriverRegistryEntry()  			{  				Name = "IDEController"'  				Platforms = PlatformArchitecture.X86AndX64'  				AutoLoad = true'  				BasePort = 0x1F0'  				PortRange = 8'  				AltBasePort = 0x3F6'  				AltPortRange = 8'  				Factory = delegate { return new ISA.IDEController(); }  			});
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Setup,The following statement contains a magic number: rxDescriptor = hardwareResources.GetMemory(2);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Setup,The following statement contains a magic number: buffers = hardwareResources.GetMemory(3);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Setup,The following statement contains a magic number: bufferSize = 2048;
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Setup,The following statement contains a magic number: for (uint index = 0; index < 16; index++)  			{  				uint offset = index * 4;  				rxDescriptor.Write32((offset + 1) * 4' len);  				rxDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * index));  				txDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * (index + 16)));  			}
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Setup,The following statement contains a magic number: for (uint index = 0; index < 16; index++)  			{  				uint offset = index * 4;  				rxDescriptor.Write32((offset + 1) * 4' len);  				rxDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * index));  				txDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * (index + 16)));  			}
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Setup,The following statement contains a magic number: for (uint index = 0; index < 16; index++)  			{  				uint offset = index * 4;  				rxDescriptor.Write32((offset + 1) * 4' len);  				rxDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * index));  				txDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * (index + 16)));  			}
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Setup,The following statement contains a magic number: for (uint index = 0; index < 16; index++)  			{  				uint offset = index * 4;  				rxDescriptor.Write32((offset + 1) * 4' len);  				rxDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * index));  				txDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * (index + 16)));  			}
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Setup,The following statement contains a magic number: for (uint index = 0; index < 16; index++)  			{  				uint offset = index * 4;  				rxDescriptor.Write32((offset + 1) * 4' len);  				rxDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * index));  				txDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * (index + 16)));  			}
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Setup,The following statement contains a magic number: for (uint index = 0; index < 16; index++)  			{  				uint offset = index * 4;  				rxDescriptor.Write32((offset + 1) * 4' len);  				rxDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * index));  				txDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * (index + 16)));  			}
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Setup,The following statement contains a magic number: for (uint index = 0; index < 16; index++)  			{  				uint offset = index * 4;  				rxDescriptor.Write32((offset + 1) * 4' len);  				rxDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * index));  				txDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * (index + 16)));  			}
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Setup,The following statement contains a magic number: for (uint index = 0; index < 16; index++)  			{  				uint offset = index * 4;  				rxDescriptor.Write32((offset + 1) * 4' len);  				rxDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * index));  				txDescriptor.Write32((offset + 2) * 4' physicalBufferAddress + (bufferSize * (index + 16)));  			}
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: var eepromMac = new byte[6];
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: eepromMac[1] = (byte)((data >> 8) & 0xFF);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: eepromMac[2] = (byte)((data >> 16) & 0xFF);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: eepromMac[2] = (byte)((data >> 16) & 0xFF);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: eepromMac[3] = (byte)((data >> 24) & 0xFF);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: eepromMac[3] = (byte)((data >> 24) & 0xFF);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: eepromMac[4] = (byte)(data & 0xFF);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: eepromMac[5] = (byte)((data >> 8) & 0xFF);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: eepromMac[5] = (byte)((data >> 8) & 0xFF);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(0' (0x4 << 28) | (0x4 << 30));
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(0' (0x4 << 28) | (0x4 << 30));
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(4' (uint)(eepromMac[0] | (eepromMac[1] << 8) | (eepromMac[2] << 16) | (eepromMac[3] << 24)));
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(4' (uint)(eepromMac[0] | (eepromMac[1] << 8) | (eepromMac[2] << 16) | (eepromMac[3] << 24)));
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(4' (uint)(eepromMac[0] | (eepromMac[1] << 8) | (eepromMac[2] << 16) | (eepromMac[3] << 24)));
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(4' (uint)(eepromMac[0] | (eepromMac[1] << 8) | (eepromMac[2] << 16) | (eepromMac[3] << 24)));
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(4' (uint)(eepromMac[0] | (eepromMac[1] << 8) | (eepromMac[2] << 16) | (eepromMac[3] << 24)));
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(4' (uint)(eepromMac[0] | (eepromMac[1] << 8) | (eepromMac[2] << 16) | (eepromMac[3] << 24)));
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(8' (uint)(eepromMac[4] | (eepromMac[5] << 8)));
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(8' (uint)(eepromMac[4] | (eepromMac[5] << 8)));
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(8' (uint)(eepromMac[4] | (eepromMac[5] << 8)));
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(8' (uint)(eepromMac[4] | (eepromMac[5] << 8)));
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(16' 0x0);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(24' 0x0);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(28' rxDescriptor.Address);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,Start,The following statement contains a magic number: initBlock.Write32(32' txDescriptor.Address);
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,SendPacket,The following statement contains a magic number: if (nextTXDesc >= 16)  			{  				nextTXDesc = 0;  			}
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,SendPacket,The following statement contains a magic number: uint offset = txd * 4;
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,RetrievePackets,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)  			{  				uint offset = rxd * 4;    				uint status = rxDescriptor.Read32(offset + 1);    				// Check is 31/OWN bit is not set  				if ((status & 0x80000000) == 0)  				{  					ushort length = (ushort)(rxDescriptor.Read16(offset + 0) & 0xFFF);  					var data = new byte[length];    					for (uint i = 0; i < data.Length; i++)  					{  						data[i] = buffers.Read8((rxd * bufferSize) + i);  					}    					// if queue fails because it is already full' the packet is discarded  					packetBuffer.QueuePacketForStack(data);    					// Clear 31/OWN bit  					rxDescriptor.Write32(offset + 1' status | 0x80000000);  				}  			}
Magic Number,Mosa.DeviceDriver.PCI.AMD,AMDPCNet,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\AMD\AMDPCNetII.cs,RetrievePackets,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)  			{  				uint offset = rxd * 4;    				uint status = rxDescriptor.Read32(offset + 1);    				// Check is 31/OWN bit is not set  				if ((status & 0x80000000) == 0)  				{  					ushort length = (ushort)(rxDescriptor.Read16(offset + 0) & 0xFFF);  					var data = new byte[length];    					for (uint i = 0; i < data.Length; i++)  					{  						data[i] = buffers.Read8((rxd * bufferSize) + i);  					}    					// if queue fails because it is already full' the packet is discarded  					packetBuffer.QueuePacketForStack(data);    					// Clear 31/OWN bit  					rxDescriptor.Write32(offset + 1' status | 0x80000000);  				}  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Setup,The following statement contains a magic number: SectorCountPort = base.HardwareResources.GetIOPortReadWrite(0' 2);
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Setup,The following statement contains a magic number: LBALowPort = base.HardwareResources.GetIOPortReadWrite(0' 3);
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Setup,The following statement contains a magic number: LBAMidPort = base.HardwareResources.GetIOPortReadWrite(0' 4);
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Setup,The following statement contains a magic number: LBAHighPort = base.HardwareResources.GetIOPortReadWrite(0' 5);
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Setup,The following statement contains a magic number: DeviceHeadPort = base.HardwareResources.GetIOPortReadWrite(0' 6);
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Setup,The following statement contains a magic number: CommandPort = base.HardwareResources.GetIOPortWrite(0' 7);
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Setup,The following statement contains a magic number: StatusPort = base.HardwareResources.GetIOPortReadWrite(0' 7);
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Start,The following statement contains a magic number: HAL.Sleep(1000 / 250);
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Start,The following statement contains a magic number: HAL.Sleep(1000 / 250);
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Start,The following statement contains a magic number: HAL.Sleep(1000 / 250);
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Start,The following statement contains a magic number: HAL.Sleep(1000 / 250);
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,PerformLBA28,The following statement contains a magic number: LBAMidPort.Write8((byte)((lba >> 8) & 0xFF));
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,PerformLBA28,The following statement contains a magic number: LBAHighPort.Write8((byte)((lba >> 16) & 0xFF));
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,PerformLBA28,The following statement contains a magic number: DeviceHeadPort.Write8((byte)(0xE0 | (drive << 4) | ((lba >> 24) & 0x0F)));
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,PerformLBA28,The following statement contains a magic number: DeviceHeadPort.Write8((byte)(0xE0 | (drive << 4) | ((lba >> 24) & 0x0F)));
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,PerformLBA28,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 256; index++)  				{  					DataPort.Write16(sector.GetUShort(offset + (index * 2)));  				}  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,PerformLBA28,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 256; index++)  				{  					DataPort.Write16(sector.GetUShort(offset + (index * 2)));  				}  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,PerformLBA28,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 256; index++)  				{  					DataPort.Write16(sector.GetUShort(offset + (index * 2)));  				}  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,PerformLBA28,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 256; index++)  				{  					DataPort.Write16(sector.GetUShort(offset + (index * 2)));  				}  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,ReadLBA48,The following statement contains a magic number: LBALowPort.Write8((byte)((lba >> 24) & 0xFF));
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,ReadLBA48,The following statement contains a magic number: LBAMidPort.Write8((byte)((lba >> 32) & 0xFF));
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,ReadLBA48,The following statement contains a magic number: LBAMidPort.Write8((byte)((lba >> 8) & 0xFF));
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,ReadLBA48,The following statement contains a magic number: LBAHighPort.Write8((byte)((lba >> 40) & 0xFF));
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,ReadLBA48,The following statement contains a magic number: LBAHighPort.Write8((byte)((lba >> 16) & 0xFF));
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,ReadLBA48,The following statement contains a magic number: DeviceHeadPort.Write8((byte)(0x40 | (drive << 4)));
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,ReadLBA48,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 256; index++)  				{  					DataPort.Write16(sector.GetUShort(offset + (index * 2)));  				}  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,ReadLBA48,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 256; index++)  				{  					DataPort.Write16(sector.GetUShort(offset + (index * 2)));  				}  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,ReadLBA48,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 256; index++)  				{  					DataPort.Write16(sector.GetUShort(offset + (index * 2)));  				}  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,ReadLBA48,The following statement contains a magic number: if (operation == SectorOperation.Read)  			{  				for (uint index = 0; index < 256; index++)  				{  					sector.SetUShort(offset + (index * 2)' DataPort.Read16());  				}  			}  			else  			{  				for (uint index = 0; index < 256; index++)  				{  					DataPort.Write16(sector.GetUShort(offset + (index * 2)));  				}  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Open,The following statement contains a magic number: var info = new DataBlock(512);
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Open,The following statement contains a magic number: for (uint index = 0; index < 256; index++)  			{  				info.SetUShort(index * 2' DataPort.Read16());  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,Open,The following statement contains a magic number: for (uint index = 0; index < 256; index++)  			{  				info.SetUShort(index * 2' DataPort.Read16());  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,ReadBlock,The following statement contains a magic number: if (data.Length < count * 512)  			{  				return false;  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,ReadBlock,The following statement contains a magic number: try  			{  				spinLock.Enter();  				for (uint index = 0; index < count; index++)  				{  					if (!PerformLBA28(SectorOperation.Read' drive' block + index' data' index * 512))  					{  						return false;  					}  				}  				return true;  			}  			finally  			{  				spinLock.Exit();  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,WriteBlock,The following statement contains a magic number: if (data.Length < count * 512)  			{  				return false;  			}
Magic Number,Mosa.DeviceDriver.PCI.MassStorage,PCIIDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\MassStorage\PCIIDEController.cs,WriteBlock,The following statement contains a magic number: try  			{  				spinLock.Enter();  				for (uint index = 0; index < count; index++)  				{  					if (!PerformLBA28(SectorOperation.Write' drive' block + index' data' index * 512))  					{  						return false;  					}  				}  				return true;  			}  			finally  			{  				spinLock.Exit();  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,Start,The following statement contains a magic number: if (!SetMode(13))  				return DeviceDriverStartStatus.Failed;
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,WritePixel,The following statement contains a magic number: if (writeMethod == WriteMethod.Pixel8)  			{  				memory.Write8((uint)(y * 320 + x)' colorIndex);  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,WritePixel,The following statement contains a magic number: if (writeMethod == WriteMethod.Pixel2)  			{ // ???  				uint address = (uint)(y * 320 + x / 2);  				colorIndex = (byte)(colorIndex & 0xF);    				if ((x & 0x01) == 0)  					memory.Write8(address & 0xF' (byte)(colorIndex << 4));  				else  					memory.Write8(address & 0x0F' colorIndex);  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,WritePixel,The following statement contains a magic number: if (writeMethod == WriteMethod.Pixel2)  			{ // ???  				uint address = (uint)(y * 320 + x / 2);  				colorIndex = (byte)(colorIndex & 0xF);    				if ((x & 0x01) == 0)  					memory.Write8(address & 0xF' (byte)(colorIndex << 4));  				else  					memory.Write8(address & 0x0F' colorIndex);  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,WritePixel,The following statement contains a magic number: if (writeMethod == WriteMethod.Pixel2)  			{ // ???  				uint address = (uint)(y * 320 + x / 2);  				colorIndex = (byte)(colorIndex & 0xF);    				if ((x & 0x01) == 0)  					memory.Write8(address & 0xF' (byte)(colorIndex << 4));  				else  					memory.Write8(address & 0x0F' colorIndex);  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,ReadPixel,The following statement contains a magic number: if (writeMethod == WriteMethod.Pixel8)  			{  				return memory.Read8((uint)(y * 320 + x));  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 5; i++)  			{  				sequencerAddress.Write8(i);  				sequencerData.Write8(settings[1 + i]);  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 25; i++)  			{  				crtControllerIndexColor.Write8(i);  				crtControllerDataColor.Write8(settings[6 + i]);  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 25; i++)  			{  				crtControllerIndexColor.Write8(i);  				crtControllerDataColor.Write8(settings[6 + i]);  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 9; i++)  			{  				graphicsControllerAddress.Write8(i);  				graphicsControllerData.Write8(settings[31 + i]);  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 9; i++)  			{  				graphicsControllerAddress.Write8(i);  				graphicsControllerData.Write8(settings[31 + i]);  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 21; i++)  			{  				inputStatus1ReadB.Read8();  				attributeAddress.Write8(i);  				attributeAddress.Write8(settings[52 + i]);  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,WriteSettings,The following statement contains a magic number: for (byte i = 0; i < 21; i++)  			{  				inputStatus1ReadB.Read8();  				attributeAddress.Write8(i);  				attributeAddress.Write8(settings[52 + i]);  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The following statement contains a magic number: switch (mode)  			{  				case 4: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }  				case 5: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }    				//case 11: { WriteSettings(VGA640x480x2); width = 640; height = 480; colors = 2; writeMethod = WriteMethod.xxx; return true; }  				//case 12: { WriteSettings(VGA640x480x16); width = 640; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				case 13: { WriteSettings(VGA320x200x256); width = 320; height = 200; colors = 256; writeMethod = WriteMethod.Pixel8; return true; }    				// Custom Standard Modes:  				//case 99: { WriteSettings(VGA720x480x16); width = 720; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				default: { return false; }  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The following statement contains a magic number: switch (mode)  			{  				case 4: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }  				case 5: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }    				//case 11: { WriteSettings(VGA640x480x2); width = 640; height = 480; colors = 2; writeMethod = WriteMethod.xxx; return true; }  				//case 12: { WriteSettings(VGA640x480x16); width = 640; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				case 13: { WriteSettings(VGA320x200x256); width = 320; height = 200; colors = 256; writeMethod = WriteMethod.Pixel8; return true; }    				// Custom Standard Modes:  				//case 99: { WriteSettings(VGA720x480x16); width = 720; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				default: { return false; }  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The following statement contains a magic number: switch (mode)  			{  				case 4: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }  				case 5: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }    				//case 11: { WriteSettings(VGA640x480x2); width = 640; height = 480; colors = 2; writeMethod = WriteMethod.xxx; return true; }  				//case 12: { WriteSettings(VGA640x480x16); width = 640; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				case 13: { WriteSettings(VGA320x200x256); width = 320; height = 200; colors = 256; writeMethod = WriteMethod.Pixel8; return true; }    				// Custom Standard Modes:  				//case 99: { WriteSettings(VGA720x480x16); width = 720; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				default: { return false; }  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The following statement contains a magic number: switch (mode)  			{  				case 4: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }  				case 5: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }    				//case 11: { WriteSettings(VGA640x480x2); width = 640; height = 480; colors = 2; writeMethod = WriteMethod.xxx; return true; }  				//case 12: { WriteSettings(VGA640x480x16); width = 640; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				case 13: { WriteSettings(VGA320x200x256); width = 320; height = 200; colors = 256; writeMethod = WriteMethod.Pixel8; return true; }    				// Custom Standard Modes:  				//case 99: { WriteSettings(VGA720x480x16); width = 720; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				default: { return false; }  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The following statement contains a magic number: switch (mode)  			{  				case 4: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }  				case 5: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }    				//case 11: { WriteSettings(VGA640x480x2); width = 640; height = 480; colors = 2; writeMethod = WriteMethod.xxx; return true; }  				//case 12: { WriteSettings(VGA640x480x16); width = 640; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				case 13: { WriteSettings(VGA320x200x256); width = 320; height = 200; colors = 256; writeMethod = WriteMethod.Pixel8; return true; }    				// Custom Standard Modes:  				//case 99: { WriteSettings(VGA720x480x16); width = 720; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				default: { return false; }  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The following statement contains a magic number: switch (mode)  			{  				case 4: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }  				case 5: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }    				//case 11: { WriteSettings(VGA640x480x2); width = 640; height = 480; colors = 2; writeMethod = WriteMethod.xxx; return true; }  				//case 12: { WriteSettings(VGA640x480x16); width = 640; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				case 13: { WriteSettings(VGA320x200x256); width = 320; height = 200; colors = 256; writeMethod = WriteMethod.Pixel8; return true; }    				// Custom Standard Modes:  				//case 99: { WriteSettings(VGA720x480x16); width = 720; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				default: { return false; }  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The following statement contains a magic number: switch (mode)  			{  				case 4: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }  				case 5: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }    				//case 11: { WriteSettings(VGA640x480x2); width = 640; height = 480; colors = 2; writeMethod = WriteMethod.xxx; return true; }  				//case 12: { WriteSettings(VGA640x480x16); width = 640; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				case 13: { WriteSettings(VGA320x200x256); width = 320; height = 200; colors = 256; writeMethod = WriteMethod.Pixel8; return true; }    				// Custom Standard Modes:  				//case 99: { WriteSettings(VGA720x480x16); width = 720; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				default: { return false; }  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The following statement contains a magic number: switch (mode)  			{  				case 4: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }  				case 5: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }    				//case 11: { WriteSettings(VGA640x480x2); width = 640; height = 480; colors = 2; writeMethod = WriteMethod.xxx; return true; }  				//case 12: { WriteSettings(VGA640x480x16); width = 640; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				case 13: { WriteSettings(VGA320x200x256); width = 320; height = 200; colors = 256; writeMethod = WriteMethod.Pixel8; return true; }    				// Custom Standard Modes:  				//case 99: { WriteSettings(VGA720x480x16); width = 720; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				default: { return false; }  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The following statement contains a magic number: switch (mode)  			{  				case 4: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }  				case 5: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }    				//case 11: { WriteSettings(VGA640x480x2); width = 640; height = 480; colors = 2; writeMethod = WriteMethod.xxx; return true; }  				//case 12: { WriteSettings(VGA640x480x16); width = 640; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				case 13: { WriteSettings(VGA320x200x256); width = 320; height = 200; colors = 256; writeMethod = WriteMethod.Pixel8; return true; }    				// Custom Standard Modes:  				//case 99: { WriteSettings(VGA720x480x16); width = 720; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				default: { return false; }  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The following statement contains a magic number: switch (mode)  			{  				case 4: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }  				case 5: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }    				//case 11: { WriteSettings(VGA640x480x2); width = 640; height = 480; colors = 2; writeMethod = WriteMethod.xxx; return true; }  				//case 12: { WriteSettings(VGA640x480x16); width = 640; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				case 13: { WriteSettings(VGA320x200x256); width = 320; height = 200; colors = 256; writeMethod = WriteMethod.Pixel8; return true; }    				// Custom Standard Modes:  				//case 99: { WriteSettings(VGA720x480x16); width = 720; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				default: { return false; }  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The following statement contains a magic number: switch (mode)  			{  				case 4: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }  				case 5: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }    				//case 11: { WriteSettings(VGA640x480x2); width = 640; height = 480; colors = 2; writeMethod = WriteMethod.xxx; return true; }  				//case 12: { WriteSettings(VGA640x480x16); width = 640; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				case 13: { WriteSettings(VGA320x200x256); width = 320; height = 200; colors = 256; writeMethod = WriteMethod.Pixel8; return true; }    				// Custom Standard Modes:  				//case 99: { WriteSettings(VGA720x480x16); width = 720; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				default: { return false; }  			}
Magic Number,Mosa.DeviceDriver.PCI.VideoCard,GenericVGA,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VideoCard\GenericVGA.cs,SetMode,The following statement contains a magic number: switch (mode)  			{  				case 4: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }  				case 5: { WriteSettings(VGA320x200x4); width = 320; height = 200; colors = 4; writeMethod = WriteMethod.Pixel2; return true; }    				//case 11: { WriteSettings(VGA640x480x2); width = 640; height = 480; colors = 2; writeMethod = WriteMethod.xxx; return true; }  				//case 12: { WriteSettings(VGA640x480x16); width = 640; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				case 13: { WriteSettings(VGA320x200x256); width = 320; height = 200; colors = 256; writeMethod = WriteMethod.Pixel8; return true; }    				// Custom Standard Modes:  				//case 99: { WriteSettings(VGA720x480x16); width = 720; height = 480; colors = 16; writeMethod = WriteMethod.xxx; return true; }  				default: { return false; }  			}
Magic Number,Mosa.DeviceDriver.PCI.S3,S3Trio64V2,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\S3\S3Trio64V2.cs,Start,The following statement contains a magic number: byte[] ramSizes = new byte[] { 4' 0' 3' 8' 2' 6' 1' 0 };
Magic Number,Mosa.DeviceDriver.PCI.S3,S3Trio64V2,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\S3\S3Trio64V2.cs,Start,The following statement contains a magic number: byte[] ramSizes = new byte[] { 4' 0' 3' 8' 2' 6' 1' 0 };
Magic Number,Mosa.DeviceDriver.PCI.S3,S3Trio64V2,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\S3\S3Trio64V2.cs,Start,The following statement contains a magic number: byte[] ramSizes = new byte[] { 4' 0' 3' 8' 2' 6' 1' 0 };
Magic Number,Mosa.DeviceDriver.PCI.S3,S3Trio64V2,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\S3\S3Trio64V2.cs,Start,The following statement contains a magic number: byte[] ramSizes = new byte[] { 4' 0' 3' 8' 2' 6' 1' 0 };
Magic Number,Mosa.DeviceDriver.PCI.S3,S3Trio64V2,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\S3\S3Trio64V2.cs,Start,The following statement contains a magic number: byte[] ramSizes = new byte[] { 4' 0' 3' 8' 2' 6' 1' 0 };
Magic Number,Mosa.DeviceDriver.PCI.S3,S3Trio64V2,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\S3\S3Trio64V2.cs,Start,The following statement contains a magic number: int ramSizeMB = ramSizes[(ReadCrtcRegister(0x36) >> 5) & 0x7];
Magic Number,Mosa.DeviceDriver.PCI.S3,S3Trio64V2,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\S3\S3Trio64V2.cs,Start,The following statement contains a magic number: memory = base.HardwareResources.GetMemory((byte)(ramSizeMB * 1024 * 1024));
Magic Number,Mosa.DeviceDriver.PCI.S3,S3Trio64V2,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\S3\S3Trio64V2.cs,Start,The following statement contains a magic number: memory = base.HardwareResources.GetMemory((byte)(ramSizeMB * 1024 * 1024));
Magic Number,Mosa.DeviceDriver.PCI.S3,S3Trio64V2,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\S3\S3Trio64V2.cs,Start,The following statement contains a magic number: byte n2 = (byte)((n >> 5) & 0x03);
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,Start,The following statement contains a magic number: SetMode(640' 480);
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,Start,The following statement contains a magic number: SetMode(640' 480);
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,SetMode,The following statement contains a magic number: SendCommand(Register.BitsPerPixel' 32);
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,SetMode,The following statement contains a magic number: bitsPerPixel = 32;
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,SetMode,The following statement contains a magic number: switch (bitsPerPixel)  			{  				case 8: frameBuffer = new FrameBuffer8bpp(memory' width' height' offset' 1); break;  				case 16: frameBuffer = new FrameBuffer16bpp(memory' width' height' offset' 2); break;  				case 24: frameBuffer = new FrameBuffer24bpp(memory' width' height' offset' 3); break;  				case 32: frameBuffer = new FrameBuffer32bpp(memory' width' height' offset' 4); break;  				default: return false;  			}
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,SetMode,The following statement contains a magic number: switch (bitsPerPixel)  			{  				case 8: frameBuffer = new FrameBuffer8bpp(memory' width' height' offset' 1); break;  				case 16: frameBuffer = new FrameBuffer16bpp(memory' width' height' offset' 2); break;  				case 24: frameBuffer = new FrameBuffer24bpp(memory' width' height' offset' 3); break;  				case 32: frameBuffer = new FrameBuffer32bpp(memory' width' height' offset' 4); break;  				default: return false;  			}
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,SetMode,The following statement contains a magic number: switch (bitsPerPixel)  			{  				case 8: frameBuffer = new FrameBuffer8bpp(memory' width' height' offset' 1); break;  				case 16: frameBuffer = new FrameBuffer16bpp(memory' width' height' offset' 2); break;  				case 24: frameBuffer = new FrameBuffer24bpp(memory' width' height' offset' 3); break;  				case 32: frameBuffer = new FrameBuffer32bpp(memory' width' height' offset' 4); break;  				default: return false;  			}
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,SetMode,The following statement contains a magic number: switch (bitsPerPixel)  			{  				case 8: frameBuffer = new FrameBuffer8bpp(memory' width' height' offset' 1); break;  				case 16: frameBuffer = new FrameBuffer16bpp(memory' width' height' offset' 2); break;  				case 24: frameBuffer = new FrameBuffer24bpp(memory' width' height' offset' 3); break;  				case 32: frameBuffer = new FrameBuffer32bpp(memory' width' height' offset' 4); break;  				default: return false;  			}
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,SetMode,The following statement contains a magic number: switch (bitsPerPixel)  			{  				case 8: frameBuffer = new FrameBuffer8bpp(memory' width' height' offset' 1); break;  				case 16: frameBuffer = new FrameBuffer16bpp(memory' width' height' offset' 2); break;  				case 24: frameBuffer = new FrameBuffer24bpp(memory' width' height' offset' 3); break;  				case 32: frameBuffer = new FrameBuffer32bpp(memory' width' height' offset' 4); break;  				default: return false;  			}
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,SetMode,The following statement contains a magic number: switch (bitsPerPixel)  			{  				case 8: frameBuffer = new FrameBuffer8bpp(memory' width' height' offset' 1); break;  				case 16: frameBuffer = new FrameBuffer16bpp(memory' width' height' offset' 2); break;  				case 24: frameBuffer = new FrameBuffer24bpp(memory' width' height' offset' 3); break;  				case 32: frameBuffer = new FrameBuffer32bpp(memory' width' height' offset' 4); break;  				default: return false;  			}
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,SetMode,The following statement contains a magic number: switch (bitsPerPixel)  			{  				case 8: frameBuffer = new FrameBuffer8bpp(memory' width' height' offset' 1); break;  				case 16: frameBuffer = new FrameBuffer16bpp(memory' width' height' offset' 2); break;  				case 24: frameBuffer = new FrameBuffer24bpp(memory' width' height' offset' 3); break;  				case 32: frameBuffer = new FrameBuffer32bpp(memory' width' height' offset' 4); break;  				default: return false;  			}
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,InitializeFifo,The following statement contains a magic number: SetFifo(Fifo.Min' FifoNumRegs * 4);
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,InitializeFifo,The following statement contains a magic number: SetFifo(Fifo.NextCmd' FifoNumRegs * 4);
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,InitializeFifo,The following statement contains a magic number: SetFifo(Fifo.Stop' FifoNumRegs * 4);
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,GetFifo,The following statement contains a magic number: return fifo.Read32(index * 4);
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,SetFifo,The following statement contains a magic number: fifo.Write32(index * 4' value);
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,WaitForFifo,The following statement contains a magic number: while (ReadRegister(Register.Busy) != 0)  			{  				HAL.Sleep(10);  			}
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,WriteToFifo,The following statement contains a magic number: if (((GetFifo(Fifo.NextCmd) == GetFifo(Fifo.Max) - 4) && GetFifo(Fifo.Stop) == GetFifo(Fifo.Min)) ||  				(GetFifo(Fifo.NextCmd) + 4 == GetFifo(Fifo.Stop)))  			{  				WaitForFifo();  			}
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,WriteToFifo,The following statement contains a magic number: if (((GetFifo(Fifo.NextCmd) == GetFifo(Fifo.Max) - 4) && GetFifo(Fifo.Stop) == GetFifo(Fifo.Min)) ||  				(GetFifo(Fifo.NextCmd) + 4 == GetFifo(Fifo.Stop)))  			{  				WaitForFifo();  			}
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,WriteToFifo,The following statement contains a magic number: SetFifo(GetFifo(Fifo.NextCmd) / 4' value);
Magic Number,Mosa.DeviceDriver.PCI.VMware,VMwareSVGAII,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\PCI\VMware\VMwareSVGAII.cs,WriteToFifo,The following statement contains a magic number: SetFifo(Fifo.NextCmd' GetFifo(Fifo.NextCmd) + 4);
Missing Default,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,ReadBlock,The following switch statement is missing a default case: switch (driveInfo[drive].AddressingMode)  					{  						case AddressingMode.LBA28:  							if (!PerformLBA28(SectorOperation.Read' drive' block + index' data' index * 512))  								return false;  							break;    						case AddressingMode.LBA48:  							if (!PerformLBA48(SectorOperation.Read' drive' block + index' data' index * 512))  								return false;  							break;  					}
Missing Default,Mosa.DeviceDriver.ISA,IDEControllerX,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEControllerX.cs,WriteBlock,The following switch statement is missing a default case: switch (driveInfo[drive].AddressingMode)  					{  						case AddressingMode.LBA28:  							if (!PerformLBA28(SectorOperation.Write' drive' block + index' data' index * 512))  							{  								return false;  							}  							break;    						case AddressingMode.LBA48:  							if (!PerformLBA48(SectorOperation.Write' drive' block + index' data' index * 512))  							{  								return false;  							}  							break;  					}
Missing Default,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,ReadBlock,The following switch statement is missing a default case: switch (driveInfo[drive].AddressingMode)  					{  						case AddressingMode.LBA28:  							if (!PerformLBA28(SectorOperation.Read' drive' block + index' data' index * 512))  								return false;  							break;    						case AddressingMode.LBA48:  							if (!PerformLBA48(SectorOperation.Read' drive' block + index' data' index * 512))  								return false;  							break;  					}
Missing Default,Mosa.DeviceDriver.ISA,IDEController,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ISA\IDEController.cs,WriteBlock,The following switch statement is missing a default case: switch (driveInfo[drive].AddressingMode)  					{  						case AddressingMode.LBA28:  							if (!PerformLBA28(SectorOperation.Write' drive' block + index' data' index * 512))  								return false;  							break;    						case AddressingMode.LBA48:  							if (!PerformLBA48(SectorOperation.Write' drive' block + index' data' index * 512))  								return false;  							break;  					}
Missing Default,Mosa.DeviceDriver.ScanCodeMap,HU,C:\repos\mosa_MOSA-Project\Source\Mosa.DeviceDriver\ScanCodeMap\HU.cs,TransformCharacter,The following switch statement is missing a default case: switch (c)  				{  					case 'q': return '\\';  					case 'w': return '|';    					case 'f': return '[';  					case 'g': return ']';  					case 'é': return '$';    					case 'í': return '<';  					case 'y': return '>';  					case 'x': return '#';  					case 'c': return '&';  					case 'v': return '@';  					case 'b': return '{';  					case 'n': return '}';  					case ''': return ';';  					case '.': return '>';  					case '-': return '*';  				}
