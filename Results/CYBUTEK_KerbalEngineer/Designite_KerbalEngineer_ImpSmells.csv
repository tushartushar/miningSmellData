Implementation smell,Namespace,Class,File,Method,Description
Long Method,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,The method has 103 lines of code.
Long Method,KerbalEngineer.Flight.Readouts,ReadoutLibrary,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutLibrary.cs,ReadoutLibrary,The method has 164 lines of code.
Long Method,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,New,The method has 120 lines of code.
Long Method,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,SetResourceDrains,The method has 151 lines of code.
Long Method,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Internal,The method has 119 lines of code.
Long Method,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Old,The method has 156 lines of code.
Long Method,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,PrepareSimulation,The method has 119 lines of code.
Long Method,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,RunSimulation,The method has 296 lines of code.
Complex Method,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,OnGUI,Cyclomatic complexity of the method is 9
Complex Method,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,Window,Cyclomatic complexity of the method is 9
Complex Method,KerbalEngineer.Editor,BuildOverlayPartInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayPartInfo.cs,Update,Cyclomatic complexity of the method is 10
Complex Method,KerbalEngineer.Flight.Readouts.Rendezvous,TargetSelector,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\TargetSelector.cs,DrawTypes,Cyclomatic complexity of the method is 13
Complex Method,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,Cyclomatic complexity of the method is 11
Complex Method,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,DrawInstalledReadouts,Cyclomatic complexity of the method is 8
Complex Method,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,New,Cyclomatic complexity of the method is 14
Complex Method,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,SetResourceDrains,Cyclomatic complexity of the method is 16
Complex Method,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,New,Cyclomatic complexity of the method is 19
Complex Method,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,DumpPartToLog,Cyclomatic complexity of the method is 10
Complex Method,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Internal,Cyclomatic complexity of the method is 26
Complex Method,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Old,Cyclomatic complexity of the method is 33
Complex Method,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,SetupAttachNodes,Cyclomatic complexity of the method is 11
Complex Method,KerbalEngineer.VesselSimulator,SimManager,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\SimManager.cs,DoesEngineUseCorrectedThrust,Cyclomatic complexity of the method is 9
Complex Method,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,PrepareSimulation,Cyclomatic complexity of the method is 22
Complex Method,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,RunSimulation,Cyclomatic complexity of the method is 42
Complex Method,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,BuildDontStageLists,Cyclomatic complexity of the method is 11
Complex Method,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,AllowedToStage,Cyclomatic complexity of the method is 14
Complex Method,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,ActivateStage,Cyclomatic complexity of the method is 11
Long Parameter List,KerbalEngineer,LogMsg,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\LogMsg.cs,Append,The method has 5 parameters. Parameters: val' val2' val3' val4' val5
Long Parameter List,KerbalEngineer,LogMsg,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\LogMsg.cs,AppendLine,The method has 5 parameters. Parameters: val' val2' val3' val4' val5
Long Parameter List,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,New,The method has 7 parameters. Parameters: theEngine' engineMod' atmosphere' machNumber' vectoredThrust' fullThrust' log
Long Parameter List,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,GetFlowModifier,The method has 6 parameters. Parameters: atmChangeFlow' atmCurve' atmDensity' velCurve' machNumber' maxMach
Long Parameter List,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,CreateEngineSims,The method has 6 parameters. Parameters: allEngines' atmosphere' mach' vectoredThrust' fullThrust' log
Long Parameter List,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet,The method has 7 parameters. Parameters: type' includeSurfaceMountedParts' allParts' visited' allSources' log' indent
Long Parameter List,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Internal,The method has 8 parameters. Parameters: type' includeSurfaceMountedParts' allParts' visited' allSources' priMax' log' indent
Long Parameter List,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Old,The method has 7 parameters. Parameters: type' includeSurfaceMountedParts' allParts' visited' allSources' log' indent
Long Parameter List,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,PrepareSimulation,The method has 8 parameters. Parameters: _log' parts' theGravity' theAtmosphere' theMach' dumpTree' vectoredThrust' fullThrust
Long Identifier,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,,The length of the parameter resPriorityUseParentInverseStage is 32.
Long Identifier,KerbalEngineer.VesselSimulator,SimManager,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\SimManager.cs,,The length of the parameter RF_ModuleEngineConfigs_localCorrectThrust is 41.
Long Identifier,KerbalEngineer.VesselSimulator,SimManager,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\SimManager.cs,,The length of the parameter RF_ModuleHybridEngine_localCorrectThrust is 40.
Long Identifier,KerbalEngineer.VesselSimulator,SimManager,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\SimManager.cs,,The length of the parameter RF_ModuleHybridEngines_localCorrectThrust is 41.
Long Statement,KerbalEngineer,AppLauncherButton,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\AppLauncherButton.cs,OnGUIApplicationLauncherReady,The length of the statement  "                button = ApplicationLauncher.Instance.AddModApplication(OnTrue' OnFalse' OnHover' OnHoverOut' OnEnable' OnDisable' ApplicationLauncher.AppScenes.ALWAYS' iconTexture); " is 166.
Long Statement,KerbalEngineer,MyLogger,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\MyLogger.cs,Flush,The length of the statement  "                            file.WriteLine(message.Length > 0 ? message.Length > 1 ? "[" + message[0] + "]: " + message[1] : message[0] : string.Empty); " is 124.
Long Statement,KerbalEngineer.Control,ControlCentre,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Control\ControlCentre.cs,OnGUI,The length of the statement  "                this.position = GUILayout.Window(this.GetInstanceID()' this.position' this.Window' "KERBAL ENGINEER REDUX " + EngineerGlobals.ASSEMBLY_VERSION + "p - CONTROL CENTRE"' HighLogic.Skin.window); " is 190.
Long Statement,KerbalEngineer.Control.Panels,BuildOverlayPanel,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Control\Panels\BuildOverlayPanel.cs,DrawPartInfo,The length of the statement  "            BuildOverlayPartInfo.Visible = GUILayout.Toggle(BuildOverlayPartInfo.Visible' "Visible"' ControlCentre.Button' GUILayout.Width(150.0f)); " is 136.
Long Statement,KerbalEngineer.Control.Panels,BuildOverlayPanel,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Control\Panels\BuildOverlayPanel.cs,DrawPartInfo,The length of the statement  "                BuildOverlayPartInfo.NamesOnly = GUILayout.Toggle(BuildOverlayPartInfo.NamesOnly' "Show Names Only"' ControlCentre.Button' GUILayout.Width(150.0f)); " is 148.
Long Statement,KerbalEngineer.Control.Panels,BuildOverlayPanel,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Control\Panels\BuildOverlayPanel.cs,DrawPartInfo,The length of the statement  "                    BuildOverlayPartInfo.ClickToOpen = GUILayout.Toggle(BuildOverlayPartInfo.ClickToOpen' "Click To Open"' ControlCentre.Button' GUILayout.Width(150.0f)); " is 150.
Long Statement,KerbalEngineer.Control.Panels,BuildOverlayPanel,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Control\Panels\BuildOverlayPanel.cs,DrawDisplays,The length of the statement  "            BuildOverlayVessel.Visible = GUILayout.Toggle(BuildOverlayVessel.Visible' "Vessel Details"' ControlCentre.Button' GUILayout.Width(150.0f)); " is 139.
Long Statement,KerbalEngineer.Control.Panels,BuildOverlayPanel,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Control\Panels\BuildOverlayPanel.cs,DrawDisplays,The length of the statement  "            BuildOverlayResources.Visible = GUILayout.Toggle(BuildOverlayResources.Visible' "Resources List"' ControlCentre.Button' GUILayout.Width(150.0f)); " is 145.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,OnGUI,The length of the statement  "                if (!visible || EditorLogic.fetch == null || EditorLogic.fetch.ship.parts.Count == 0 || EditorLogic.fetch.editorScreen != EditorScreen.Parts) " is 141.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,OnGUI,The length of the statement  "                title = !compactMode ? "KERBAL ENGINEER REDUX " + EngineerGlobals.ASSEMBLY_VERSION : "K.E.R. " + EngineerGlobals.ASSEMBLY_VERSION; " is 130.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawAtmosphericDetails,The length of the statement  "                GUILayout.Label("Altitude: " + (Altitude * 0.001f).ToString("F1") + "km"' settingAtmoStyle' GUILayout.Width(125.0f * GuiDisplaySize.Offset)); " is 141.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawAtmosphericDetails,The length of the statement  "                Altitude = GUILayout.HorizontalSlider(Altitude' 0.0f' (float)(CelestialBodies.SelectedBody.CelestialBody.atmosphereDepth)); " is 123.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawAtmosphericDetails,The length of the statement  "                GUILayout.Label("Mach: " + atmosphericMach.ToString("F2")' settingAtmoStyle' GUILayout.Width(125.0f * GuiDisplaySize.Offset)); " is 126.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawBody,The length of the statement  "            if (GUILayout.Button(bodyInfo.Children.Count > 0 ? bodyInfo.Name + " [" + bodyInfo.Children.Count + "]" : bodyInfo.Name' bodyInfo.Selected && bodyInfo.SelectedDepth == 0 ? bodiesButtonActiveStyle : bodiesButtonStyle)) " is 217.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawSettings,The length of the statement  "            compactCollapseRight = !GUILayout.Toggle(!compactCollapseRight' "LEFT"' buttonStyle' GUILayout.Width(100.0f * GuiDisplaySize.Offset)); " is 134.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawSettings,The length of the statement  "            compactCollapseRight = GUILayout.Toggle(compactCollapseRight' "RIGHT"' buttonStyle' GUILayout.Width(100.0f * GuiDisplaySize.Offset)); " is 133.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawSettings,The length of the statement  "            SimManager.vectoredThrust = GUILayout.Toggle(SimManager.vectoredThrust' "ENABLED"' buttonStyle' GUILayout.Width(100.0f * GuiDisplaySize.Offset)); " is 145.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawSettings,The length of the statement  "            SimManager.logOutput = GUILayout.Toggle(SimManager.logOutput' "ENABLED"' buttonStyle' GUILayout.Width(100.0f * GuiDisplaySize.Offset)); " is 135.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawSettings,The length of the statement  "            BuildOverlay.Visible = GUILayout.Toggle(BuildOverlay.Visible' "VISIBLE"' buttonStyle' GUILayout.Width(100.0f * GuiDisplaySize.Offset)); " is 135.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawSettings,The length of the statement  "            BuildOverlayPartInfo.NamesOnly = GUILayout.Toggle(BuildOverlayPartInfo.NamesOnly' "NAMES ONLY"' buttonStyle' GUILayout.Width(100.0f * GuiDisplaySize.Offset)); " is 158.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawSettings,The length of the statement  "            BuildOverlayPartInfo.ClickToOpen = GUILayout.Toggle(BuildOverlayPartInfo.ClickToOpen' "CLICK TO OPEN"' buttonStyle' GUILayout.Width(100.0f * GuiDisplaySize.Offset)); " is 165.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawSettings,The length of the statement  "            FlightEngineerCore.IsCareerMode = GUILayout.Toggle(FlightEngineerCore.IsCareerMode' "CAREER"' buttonStyle' GUILayout.Width(100.0f * GuiDisplaySize.Offset)); " is 156.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawSettings,The length of the statement  "            FlightEngineerCore.IsCareerMode = !GUILayout.Toggle(!FlightEngineerCore.IsCareerMode' "PARTLESS"' buttonStyle' GUILayout.Width(100.0f * GuiDisplaySize.Offset)); " is 160.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawSettings,The length of the statement  "            FlightEngineerCore.IsKerbalLimited = GUILayout.Toggle(FlightEngineerCore.IsKerbalLimited' "KERBAL"' buttonStyle' GUILayout.Width(100.0f * GuiDisplaySize.Offset)); " is 162.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawSettings,The length of the statement  "            FlightEngineerCore.IsTrackingStationLimited = GUILayout.Toggle(FlightEngineerCore.IsTrackingStationLimited' "TRACKING"' buttonStyle' GUILayout.Width(100.0f * GuiDisplaySize.Offset)); " is 182.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawSettings,The length of the statement  "            FlightAppLauncher.IsHoverActivated = GUILayout.Toggle(FlightAppLauncher.IsHoverActivated' "MOUSE HOVER"' buttonStyle' GUILayout.Width(125.0f * GuiDisplaySize.Offset)); " is 167.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,DrawSettings,The length of the statement  "            SimManager.minSimTime = TimeSpan.FromMilliseconds(GUILayout.HorizontalSlider((float)SimManager.minSimTime.TotalMilliseconds' 0' 2000.0f)); " is 138.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,Window,The length of the statement  "                    //if (GUI.Button(new Rect(position.width - 143.0f * GuiDisplaySize.Offset' 5.0f' 70.0f * GuiDisplaySize.Offset' 20.0f)' "SETTINGS"' buttonStyle)) " is 145.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,Window,The length of the statement  "                    if (GUI.Toggle(new Rect(position.width - 143.0f * GuiDisplaySize.Offset' 5.0f' 70.0f * GuiDisplaySize.Offset' 20.0f)' showSettings' "SETTINGS"' buttonStyle) != showSettings) " is 173.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,Window,The length of the statement  "                    if (GUI.Toggle(new Rect(position.width - 226.0f * GuiDisplaySize.Offset' 5.0f' 80.0f * GuiDisplaySize.Offset' 20.0f)' showAllStages' "ALL STAGES"' buttonStyle) != showAllStages) " is 177.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,Window,The length of the statement  "                    if (GUI.Toggle(new Rect(position.width - 324.0f * GuiDisplaySize.Offset' 5.0f' 95.0f * GuiDisplaySize.Offset' 20.0f)' showAtmosphericDetails' "ATMOSPHERIC"' buttonStyle) != showAtmosphericDetails) " is 196.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,Window,The length of the statement  "                    bodiesListPosition = new Rect(position.width - 452.0f * GuiDisplaySize.Offset' 5.0f' 125.0f * GuiDisplaySize.Offset' 20.0f); " is 124.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,Window,The length of the statement  "                    bodiesList.enabled = GUI.Toggle(bodiesListPosition' bodiesList.enabled' "BODY: " + CelestialBodies.SelectedBody.Name.ToUpper()' buttonStyle); " is 141.
Long Statement,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,Window,The length of the statement  "                    if (GUI.Toggle(new Rect(position.width - 133.0f * GuiDisplaySize.Offset' 5.0f' 60.0f * GuiDisplaySize.Offset' 20.0f)' showAtmosphericDetails' "ATMO"' buttonStyle) != showAtmosphericDetails) " is 189.
Long Statement,KerbalEngineer.Editor,BuildOverlayPartInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayPartInfo.cs,OnGUI,The length of the statement  "                if (!Visible || Hidden || selectedPart == null || (EditorPanels.Instance.IsMouseOver() && IsPointerOverStaging() == false)) " is 123.
Long Statement,KerbalEngineer.Editor,BuildOverlayPartInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayPartInfo.cs,Update,The length of the statement  "                if (!Visible || Hidden || EditorLogic.RootPart == null || EditorLogic.fetch.editorScreen != EditorScreen.Parts || (EditorPanels.Instance.IsMouseOver() && IsPointerOverStaging() == false)) " is 187.
Long Statement,KerbalEngineer.Editor,BuildOverlayPartInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayPartInfo.cs,SetEngineInfo,The length of the statement  "                infoItems.Add(PartInfoItem.Create("Thrust"' Units.ToForce(protoModuleEngine.MinimumThrust' protoModuleEngine.MaximumThrust))); " is 126.
Long Statement,KerbalEngineer.Editor,BuildOverlayPartInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayPartInfo.cs,SetEngineInfo,The length of the statement  "                infoItems.Add(PartInfoItem.Create("Isp"' Units.ConcatF(protoModuleEngine.GetSpecificImpulse(1.0f)' protoModuleEngine.GetSpecificImpulse(0.0f)) + "s")); " is 151.
Long Statement,KerbalEngineer.Editor,BuildOverlayPartInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayPartInfo.cs,SetParachuteInfo,The length of the statement  "                infoItems.Add(PartInfoItem.Create("Deployed Drag"' Units.ConcatF(moduleParachute.semiDeployedDrag' moduleParachute.fullyDeployedDrag))); " is 136.
Long Statement,KerbalEngineer.Editor,BuildOverlayPartInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayPartInfo.cs,SetRcsInfo,The length of the statement  "                infoItems.Add(PartInfoItem.Create("Specific Impulse"' Units.ConcatF(moduleRcs.atmosphereCurve.Evaluate(1.0f)' moduleRcs.atmosphereCurve.Evaluate(0.0f)) + "s")); " is 160.
Long Statement,KerbalEngineer.Editor,BuildOverlayPartInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayPartInfo.cs,SetResourceItems,The length of the statement  "                                          ? PartInfoItem.Create("\t" + partResource.info.name' "(" + partResource.GetMass().ToMass() + ") " + partResource.amount.ToString("F1")) " is 135.
Long Statement,KerbalEngineer.Editor,BuildOverlayPartInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayPartInfo.cs,SetTransmitterInfo,The length of the statement  "                infoItems.Add(PartInfoItem.Create("Bandwidth"' (moduleDataTransmitter.packetInterval * moduleDataTransmitter.packetSize).ToString("F2") + "Mits/sec")); " is 151.
Long Statement,KerbalEngineer.Editor,BuildOverlayPartInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayPartInfo.cs,SetTransmitterInfo,The length of the statement  "                infoItems.Add(PartInfoItem.Create(moduleDataTransmitter.GetConsumedResources()[0].name' moduleDataTransmitter.packetResourceCost.ToString("F2") + "/Packet")); " is 158.
Long Statement,KerbalEngineer.Editor,BuildOverlayResources,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayResources.cs,Window,The length of the statement  "                        GUILayout.Label("(" + resource.Value.Mass.ToMass() + ") " + resource.Value.Amount.ToString("N1")' BuildOverlay.ValueStyle); " is 123.
Long Statement,KerbalEngineer.Editor,BuildOverlayVessel,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayVessel.cs,OnGUI,The length of the statement  "                    windowPosition = GUILayout.Window(GetInstanceID()' windowPosition' VesselWindow' string.Empty' BuildOverlay.WindowStyle); " is 121.
Long Statement,KerbalEngineer.Editor,BuildOverlayVessel,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayVessel.cs,SetVesselInfo,The length of the statement  "                infoItems.Add(PartInfoItem.Create("Delta-V"' lastStage.deltaV.ToString("N0") + " / " + lastStage.totalDeltaV.ToString("N0") + "m/s")); " is 134.
Long Statement,KerbalEngineer.Editor,BuildOverlayVessel,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayVessel.cs,SetVesselInfo,The length of the statement  "                infoItems.Add(PartInfoItem.Create("TWR"' lastStage.thrustToWeight.ToString("F2") + " (" + lastStage.maxThrustToWeight.ToString("F2") + ")")); " is 141.
Long Statement,KerbalEngineer.Extensions,PartExtensions,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Extensions\PartExtensions.cs,GetCostWet,The length of the statement  "            return part.partInfo.cost - GetResourceCostInverted(part) + part.GetModuleCostsNoAlloc(0.0f); // part.GetModuleCosts allocate 44B per call.  " is 139.
Long Statement,KerbalEngineer.Extensions,PartExtensions,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Extensions\PartExtensions.cs,GetWetMass,The length of the statement  "            return (part.physicalSignificance == Part.PhysicalSignificance.FULL) ? part.mass + part.GetResourceMass() : part.GetResourceMass(); " is 131.
Long Statement,KerbalEngineer.Flight,ActionMenuGui,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\ActionMenuGui.cs,OnGUI,The length of the statement  "                this.position.x = Mathf.Clamp(Screen.width * 0.5f + this.transform.parent.position.x - 19.0f' Screen.width * 0.5f' Screen.width - this.position.width); " is 151.
Long Statement,KerbalEngineer.Flight,ActionMenuGui,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\ActionMenuGui.cs,DrawControlBarButton,The length of the statement  "                if (GUILayout.Toggle(DisplayStack.Instance.ShowControlBar' "CONTROL BAR"' this.buttonStyle) != DisplayStack.Instance.ShowControlBar) " is 132.
Long Statement,KerbalEngineer.Flight,DisplayStack,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\DisplayStack.cs,OnGUI,The length of the statement  "                    this.windowPosition = GUILayout.Window(this.windowId' this.windowPosition' this.Window' string.Empty' this.windowStyle).ClampToScreen(); " is 136.
Long Statement,KerbalEngineer.Flight,FlightEngineerCore,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\FlightEngineerCore.cs,AddSectionEditor,The length of the statement  "                editor.Position = new Rect(section.EditorPositionX' section.EditorPositionY' SectionEditor.Width' SectionEditor.Height); " is 120.
Long Statement,KerbalEngineer.Flight.Readouts.Miscellaneous,SimulationDelay,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Miscellaneous\SimulationDelay.cs,Draw,The length of the statement  "            SimManager.minSimTime = TimeSpan.FromMilliseconds(GUILayout.HorizontalSlider((float)SimManager.minSimTime.TotalMilliseconds' 0' 2000.0f)); " is 138.
Long Statement,KerbalEngineer.Flight.Readouts.Orbital,TimeToAtmosphere,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\TimeToAtmosphere.cs,Draw,The length of the statement  "			if (orbit.referenceBody.atmosphere && orbit.PeA < orbit.referenceBody.atmosphereDepth && orbit.ApA > orbit.referenceBody.atmosphereDepth) " is 137.
Long Statement,KerbalEngineer.Flight.Readouts.Orbital,TimeToEquatorialDescendingNode,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\TimeToEquatorialDescendingNode.cs,Draw,The length of the statement  "            this.DrawLine(TimeFormatter.ConvertToString(FlightGlobals.ActiveVessel.orbit.GetTimeToDescendingNode())' section.IsHud); " is 120.
Long Statement,KerbalEngineer.Flight.Readouts.Orbital.ManoeuvreNode,ManoeuvreProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\ManoeuvreNode\ManoeuvreProcessor.cs,Update,The length of the statement  "            AngleToPrograde = FlightGlobals.ActiveVessel.patchedConicSolver.maneuverNodes[0].patch.GetAngleToPrograde(UniversalTime); " is 121.
Long Statement,KerbalEngineer.Flight.Readouts.Orbital.ManoeuvreNode,ManoeuvreProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\ManoeuvreNode\ManoeuvreProcessor.cs,Update,The length of the statement  "            AngleToRetrograde = FlightGlobals.ActiveVessel.patchedConicSolver.maneuverNodes[0].patch.GetAngleToRetrograde(UniversalTime); " is 125.
Long Statement,KerbalEngineer.Flight.Readouts.Orbital.ManoeuvreNode,NodeTimeToHalfBurn,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\ManoeuvreNode\NodeTimeToHalfBurn.cs,Draw,The length of the statement  "            this.DrawLine("Time to Node Burn"' TimeFormatter.ConvertToString(ManoeuvreProcessor.UniversalTime - ManoeuvreProcessor.HalfBurnTime - Planetarium.GetUniversalTime())' section.IsHud); " is 182.
Long Statement,KerbalEngineer.Flight.Readouts.Orbital.ManoeuvreNode,NodeTimeToManoeuvre,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\ManoeuvreNode\NodeTimeToManoeuvre.cs,Draw,The length of the statement  "            this.DrawLine("Time to Node"' TimeFormatter.ConvertToString(ManoeuvreProcessor.UniversalTime - Planetarium.GetUniversalTime())' section.IsHud); " is 143.
Long Statement,KerbalEngineer.Flight.Readouts.Orbital.ManoeuvreNode,NodeTotalDeltaV,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\ManoeuvreNode\NodeTotalDeltaV.cs,Draw,The length of the statement  "            this.DrawLine("Node DeltaV (Total)"' ManoeuvreProcessor.TotalDeltaV.ToSpeed() + " (" + (ManoeuvreProcessor.HasDeltaV ? "S" + ManoeuvreProcessor.FinalStage : "X") + ")"' section.IsHud); " is 184.
Long Statement,KerbalEngineer.Flight.Readouts.Rendezvous,TargetSelector,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\TargetSelector.cs,DrawPlanets,The length of the statement  "                if (FlightGlobals.ActiveVessel.mainBody.referenceBody != body.referenceBody || body == Planetarium.fetch.Sun || body == FlightGlobals.ActiveVessel.mainBody) " is 156.
Long Statement,KerbalEngineer.Flight.Readouts.Rendezvous,TargetSelector,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\TargetSelector.cs,DrawTarget,The length of the statement  "                if (!(target is CelestialBody) && GUILayout.Button("Switch to Target"' this.ButtonStyle' GUILayout.Width(this.ContentWidth))) " is 125.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,Slope,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\Slope.cs,GetSlopeAngleAndHeading,The length of the statement  "                if (Physics.Raycast(FlightGlobals.ActiveVessel.CoM' -rad' out hit' Mathf.Infinity' 1 << 15)) // Just "Local Scenery" please " is 123.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,Biome,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\Biome.cs,Draw,The length of the statement  "            this.DrawLine(ScienceUtil.GetExperimentBiome(FlightGlobals.ActiveVessel.mainBody' FlightGlobals.ActiveVessel.latitude' FlightGlobals.ActiveVessel.longitude)' section.IsHud); " is 173.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,Situation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\Situation.cs,GetBiome,The length of the statement  "            return ScienceUtil.GetExperimentBiome(FlightGlobals.ActiveVessel.mainBody' FlightGlobals.ActiveVessel.latitude' FlightGlobals.ActiveVessel.longitude); " is 150.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,Situation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\Situation.cs,GetBodyPlural,The length of the statement  "            return FlightGlobals.currentMainBody.bodyName.EndsWith("s") ? FlightGlobals.currentMainBody.bodyName + "\'" : FlightGlobals.currentMainBody.bodyName + "\'s"; " is 157.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,AltitudeTerrain,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\AltitudeTerrain.cs,Draw,The length of the statement  "            if (FlightGlobals.ActiveVessel.terrainAltitude > 0.0 || FlightGlobals.ActiveVessel.situation == Vessel.Situations.SPLASHED) " is 123.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,ImpactLatitude,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactLatitude.cs,Draw,The length of the statement  "                this.DrawLine(Units.ToAngleDMS(ImpactProcessor.Latitude) + (ImpactProcessor.Latitude < 0 ? " S" : " N")' section.IsHud); " is 120.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,ImpactLongitude,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactLongitude.cs,Draw,The length of the statement  "                this.DrawLine(Units.ToAngleDMS(ImpactProcessor.Longitude) + (ImpactProcessor.Longitude < 0.0 ? " W" : " E")' section.IsHud); " is 124.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,The length of the statement  "                //experimentally determined; even for very flat trajectories' the errors go into the sub-millimeter area after 5 iterations or so " is 129.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,The length of the statement  "                    if ((FlightGlobals.ActiveVessel.orbit.eccentricity < 1) && (FlightGlobals.ActiveVessel.orbit.ApA <= this.impactAltitude)) " is 121.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,The length of the statement  "                        double costheta = (FlightGlobals.ActiveVessel.orbit.PeR * (1 + e) / (FlightGlobals.ActiveVessel.mainBody.Radius + this.impactAltitude) - 1) / e; " is 144.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,The length of the statement  "                    var rad = QuaternionD.AngleAxis(this.impactLongitude' Vector3d.down) * QuaternionD.AngleAxis(this.impactLatitude' Vector3d.forward) * Vector3d.right; " is 149.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,The length of the statement  "                    this.impactAltitude = FlightGlobals.ActiveVessel.mainBody.pqsController.GetSurfaceHeight(rad) - FlightGlobals.ActiveVessel.mainBody.pqsController.radius; " is 153.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,The length of the statement  "                    MyLogger.Log("GetExperimentBiome(" + FlightGlobals.ActiveVessel.mainBody.name + "' " + this.impactLatitude + "' " + this.impactLongitude + ") died"); " is 149.
Long Statement,KerbalEngineer.Flight.Readouts.Surface,Latitude,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\Latitude.cs,Draw,The length of the statement  "            this.DrawLine(Units.ToAngleDMS(FlightGlobals.ship_latitude) + (FlightGlobals.ship_latitude < 0 ? " S" : " N")' section.IsHud); " is 126.
Long Statement,KerbalEngineer.Flight.Readouts.Thermal,CoolestSkinTemperature,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Thermal\CoolestSkinTemperature.cs,Draw,The length of the statement  "                DrawLine(Units.ToTemperature(ThermalProcessor.CoolestSkinTemperature' ThermalProcessor.CoolestSkinTemperatureMax)' section.IsHud); " is 130.
Long Statement,KerbalEngineer.Flight.Readouts.Thermal,CoolestTemperature,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Thermal\CoolestTemperature.cs,Draw,The length of the statement  "                DrawLine(Units.ToTemperature(ThermalProcessor.CoolestTemperature' ThermalProcessor.CoolestTemperatureMax)' section.IsHud); " is 122.
Long Statement,KerbalEngineer.Flight.Readouts.Thermal,CriticalSkinTemperature,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Thermal\CriticalSkinTemperature.cs,Draw,The length of the statement  "                DrawLine(Units.ToTemperature(ThermalProcessor.CriticalSkinTemperature' ThermalProcessor.CriticalSkinTemperatureMax)' section.IsHud); " is 132.
Long Statement,KerbalEngineer.Flight.Readouts.Thermal,CriticalTemperature,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Thermal\CriticalTemperature.cs,Draw,The length of the statement  "                DrawLine(Units.ToTemperature(ThermalProcessor.CriticalTemperature' ThermalProcessor.CriticalTemperatureMax)' section.IsHud); " is 124.
Long Statement,KerbalEngineer.Flight.Readouts.Thermal,HottestSkinTemperature,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Thermal\HottestSkinTemperature.cs,Draw,The length of the statement  "                DrawLine(Units.ToTemperature(ThermalProcessor.HottestSkinTemperature' ThermalProcessor.HottestSkinTemperatureMax)' section.IsHud); " is 130.
Long Statement,KerbalEngineer.Flight.Readouts.Thermal,HottestTemperature,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Thermal\HottestTemperature.cs,Draw,The length of the statement  "                DrawLine(Units.ToTemperature(ThermalProcessor.HottestTemperature' ThermalProcessor.HottestTemperatureMax)' section.IsHud); " is 122.
Long Statement,KerbalEngineer.Flight.Readouts.Thermal,ThermalProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Thermal\ThermalProcessor.cs,Update,The length of the statement  "                if (part.temperature / part.maxTemp > CriticalTemperaturePercentage || part.skinTemperature / part.skinMaxTemp > CriticalTemperaturePercentage) " is 143.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,AttitudeProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\AttitudeProcessor.cs,GetSurfaceRotation,The length of the statement  "            this.north = Vector3.ProjectOnPlane((FlightGlobals.ActiveVessel.mainBody.position + FlightGlobals.ActiveVessel.mainBody.transform.up * (float)FlightGlobals.ActiveVessel.mainBody.Radius) - this.centreOfMass' this.up).normalized; " is 227.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,AttitudeProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\AttitudeProcessor.cs,GetSurfaceRotation,The length of the statement  "            return Quaternion.Inverse(Quaternion.Euler(90.0f' 0.0f' 0.0f) * Quaternion.Inverse(FlightGlobals.ActiveVessel.transform.rotation) * Quaternion.LookRotation(this.north' this.up)); " is 178.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,DeltaVCurrentTotal,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\DeltaVCurrentTotal.cs,Draw,The length of the statement  "                this.DrawLine(SimulationProcessor.LastStage.deltaV.ToString("N0") + "m/s" + " / " + SimulationProcessor.LastStage.totalDeltaV.ToString("N0") + "m/s"' section.IsHud); " is 165.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,PartCount,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\PartCount.cs,Draw,The length of the statement  "                this.DrawLine(Units.ConcatF(SimulationProcessor.LastStage.partCount' SimulationProcessor.LastStage.totalPartCount' 0)' section.IsHud); " is 134.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,DeltaVCurrent,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\DeltaVCurrent.cs,Draw,The length of the statement  "                this.DrawLine(SimulationProcessor.LastStage.deltaV.ToString("N0") + "m/s (" + TimeFormatter.ConvertToString(SimulationProcessor.LastStage.time) + ")"' section.IsHud); " is 166.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,Acceleration,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\Acceleration.cs,Draw,The length of the statement  "                this.DrawLine(Units.ToAcceleration(SimulationProcessor.LastStage.actualThrust / SimulationProcessor.LastStage.totalMass' SimulationProcessor.LastStage.thrust / SimulationProcessor.LastStage.totalMass)' section.IsHud); " is 217.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,SuicideBurnProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\SuicideBurnProcessor.cs,Update,The length of the statement  "            if (FlightGlobals.currentMainBody == null || FlightGlobals.ActiveVessel == null || SimulationProcessor.LastStage == null || " is 123.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,SurfaceThrustToWeight,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\SurfaceThrustToWeight.cs,Draw,The length of the statement  "            m_Actual = (SimulationProcessor.LastStage.actualThrust / (SimulationProcessor.LastStage.totalMass * m_Gravity)).ToString("F2"); " is 127.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,SurfaceThrustToWeight,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\SurfaceThrustToWeight.cs,Draw,The length of the statement  "            m_Total = (SimulationProcessor.LastStage.thrust / (SimulationProcessor.LastStage.totalMass * m_Gravity)).ToString("F2"); " is 120.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,DeltaVStaged,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\DeltaVStaged.cs,Draw,The length of the statement  "            foreach (Stage stage in SimulationProcessor.Stages.Where(stage => stage.deltaV > 0 || stage.number == StageManager.CurrentStage)) " is 129.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,DeltaVStaged,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\DeltaVStaged.cs,Draw,The length of the statement  "                DrawLine("DeltaV (S" + stage.number + ")"' stage.deltaV.ToString("N0") + "m/s (" + TimeFormatter.ConvertToString(stage.time) + ")"' section.IsHud); " is 147.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,DeltaVTotal,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\DeltaVTotal.cs,Draw,The length of the statement  "                this.DrawLine(SimulationProcessor.LastStage.totalDeltaV.ToString("N0") + "m/s (" + TimeFormatter.ConvertToString(SimulationProcessor.LastStage.totalTime) + ")"' section.IsHud); " is 176.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,Mass,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\Mass.cs,Draw,The length of the statement  "                this.DrawLine(Units.ToMass(SimulationProcessor.LastStage.mass' SimulationProcessor.LastStage.totalMass)' section.IsHud); " is 120.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,Thrust,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\Thrust.cs,Draw,The length of the statement  "                this.DrawLine(Units.ToForce(SimulationProcessor.LastStage.actualThrust' SimulationProcessor.LastStage.thrust)' section.IsHud); " is 126.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,ThrustToWeight,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\ThrustToWeight.cs,Draw,The length of the statement  "            this.actual = (SimulationProcessor.LastStage.actualThrust / (SimulationProcessor.LastStage.totalMass * this.gravity)).ToString("F2"); " is 133.
Long Statement,KerbalEngineer.Flight.Readouts.Vessel,ThrustToWeight,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\ThrustToWeight.cs,Draw,The length of the statement  "            this.total = (SimulationProcessor.LastStage.thrust / (SimulationProcessor.LastStage.totalMass * this.gravity)).ToString("F2"); " is 126.
Long Statement,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ConcatF,The length of the statement  "            return value1.ToString("F" + decimals) + " / " + value2.ToString("F" + decimals) + " / " + value3.ToString("F" + decimals); " is 123.
Long Statement,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ConcatN,The length of the statement  "            return value1.ToString("N" + decimals) + " / " + value2.ToString("N" + decimals) + " / " + value3.ToString("N" + decimals); " is 123.
Long Statement,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToForce,The length of the statement  "            return value.ToString((value < 100000.0) ? (value < 10000.0) ? (value < 100.0) ? (Math.Abs(value) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0") + "kN"; " is 159.
Long Statement,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToForce,The length of the statement  "            string format1 = (value1 < 100000.0) ? (value1 < 10000.0) ? (value1 < 100.0) ? (Math.Abs(value1) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0"; " is 150.
Long Statement,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToForce,The length of the statement  "            string format2 = (value2 < 100000.0) ? (value2 < 10000.0) ? (value2 < 100.0) ? (Math.Abs(value2) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0"; " is 150.
Long Statement,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToPressure,The length of the statement  "            return value.ToString((value < 100000.0) ? (value < 10000.0) ? (value < 100.0) ? (Math.Abs(value) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0") + "kN/m²"; " is 162.
Long Statement,KerbalEngineer.Helpers,TimeFormatter,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\TimeFormatter.cs,ConvertToString,The length of the statement  "            return minutes > 0 ? string.Format("{0}m {1}s"' minutes' seconds.ToString(format)) : string.Format("{0}s"' seconds.ToString(format)); " is 133.
Long Statement,KerbalEngineer.KeyBinding,KeyBinder,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\KeyBinding\KeyBinder.cs,OnGUI,The length of the statement  "            position = GUILayout.Window(GetInstanceID()' position' RenderWindow' "Kerbal Engineer Redux - Key Bindings"' HighLogic.Skin.window).ClampToScreen(); " is 148.
Long Statement,KerbalEngineer.KeyBinding,KeyBindPopup,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\KeyBinding\KeyBindPopup.cs,OnGUI,The length of the statement  "            position = GUILayout.Window(GetInstanceID()' position' RenderWindow' "Select Key Bind"' HighLogic.Skin.window).ClampToScreen(); " is 127.
Long Statement,KerbalEngineer.Settings,SettingsWindow,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Settings\SettingsWindow.cs,AddBuildOverlayOptions,The length of the statement  "                Toggle buildOverlayNamesOnly = AddToggle(buildOverlay' "NAMES ONLY"' 100.0f' value => BuildOverlayPartInfo.NamesOnly = value); " is 126.
Long Statement,KerbalEngineer.Settings,SettingsWindow,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Settings\SettingsWindow.cs,AddBuildOverlayOptions,The length of the statement  "                Toggle buildOverlayClickToOpen = AddToggle(buildOverlay' "CLICK TO OPEN"' 100.0f' value => BuildOverlayPartInfo.ClickToOpen = value); " is 133.
Long Statement,KerbalEngineer.Settings,SettingsWindow,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Settings\SettingsWindow.cs,AddFlightActivationModes,The length of the statement  "                Toggle flightActivationModeCareer = AddToggle(flightActivationMode' "CAREER"' 100.0f' value => FlightEngineerCore.IsCareerMode = value); " is 136.
Long Statement,KerbalEngineer.Settings,SettingsWindow,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Settings\SettingsWindow.cs,AddFlightActivationModes,The length of the statement  "                Toggle flightActivationModePartless = AddToggle(flightActivationMode' "PARTLESS"' 100.0f' value => FlightEngineerCore.IsCareerMode = !value); " is 141.
Long Statement,KerbalEngineer.Settings,SettingHandler,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Settings\SettingHandler.cs,Serialise,The length of the statement  "                new XmlSerializer(typeof(List<SettingItem>)' this.Items.Select(s => s.Value.GetType()).ToArray()).Serialize(stream' this.Items); " is 128.
Long Statement,KerbalEngineer.UIControls,DropDown,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\UIControls\DropDown.cs,Update,The length of the statement  "                if ((Input.GetMouseButtonDown(0) || Input.GetMouseButtonDown(1) || Input.GetMouseButtonDown(2)) && !this.position.MouseIsOver() && !this.button.MouseIsOver()) " is 158.
Long Statement,KerbalEngineer.Flight.Readouts,ReadoutLibrary,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutLibrary.cs,GetReadout,The length of the statement  "            return readouts.FirstOrDefault(r => r.Name == name || r.GetType().Name == name || r.Category + "." + r.GetType().Name == name); " is 127.
Long Statement,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,OnGUI,The length of the statement  "            this.position = GUILayout.Window(this.GetInstanceID()' this.position' this.Window' "EDIT SECTION - " + this.ParentSection.Name.ToUpper()' this.windowStyle).ClampToScreen(); " is 172.
Long Statement,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,DrawAvailableReadouts,The length of the statement  "            this.scrollPositionAvailable = GUILayout.BeginScrollView(this.scrollPositionAvailable' false' true' GUILayout.Height(200.0f)); " is 126.
Long Statement,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,DrawCategories,The length of the statement  "                if (GUILayout.Button("<b>" + category.Name.ToUpper() + "</b>" + (string.IsNullOrEmpty(category.Description) ? string.Empty : "\n<i>" + description + "</i>")' category == ReadoutCategory.Selected ? this.categoryButtonActiveStyle : this.categoryButtonStyle)) " is 256.
Long Statement,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,DrawCategorySelector,The length of the statement  "            this.categoryList.enabled = GUILayout.Toggle(this.categoryList.enabled' "▼ SELECTED CATEGORY: " + ReadoutCategory.Selected.ToString().ToUpper() + " ▼"' this.categoryTitleButtonStyle); " is 183.
Long Statement,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,DrawCustomOptions,The length of the statement  "            this.ParentSection.Abbreviation = GUILayout.TextField(this.ParentSection.Abbreviation' this.textStyle' GUILayout.Width(75.0f)); " is 127.
Long Statement,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,DrawCustomOptions,The length of the statement  "            ParentSection.IsHud = GUILayout.Toggle(this.ParentSection.IsHud' "HUD"' this.readoutButtonStyle' GUILayout.Width(50.0f)); " is 121.
Long Statement,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,DrawCustomOptions,The length of the statement  "                this.ParentSection.IsHudBackground = GUILayout.Toggle(this.ParentSection.IsHudBackground' "BG"' this.readoutButtonStyle' GUILayout.Width(50.0f)); " is 145.
Long Statement,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,DrawPresetSaveButton,The length of the statement  "            this.SavePreset(PresetLibrary.Presets.Find(p => String.Equals(p.Name' this.ParentSection.Name' StringComparison.CurrentCultureIgnoreCase))); " is 140.
Long Statement,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,DrawPresetSelector,The length of the statement  "            this.presetList.enabled = GUILayout.Toggle(this.presetList.enabled' "▼ PRESETS ▼"' this.categoryTitleButtonStyle' GUILayout.Width(150.0f)); " is 139.
Long Statement,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,ShowHelpMessage,The length of the statement  "            GUILayout.Label(!String.IsNullOrEmpty(readout.HelpString) ? readout.HelpString : "Sorry' no help information has been provided for this readout module."' this.helpTextStyle); " is 174.
Long Statement,KerbalEngineer.Flight.Sections,SectionWindow,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionWindow.cs,OnGUI,The length of the statement  "            if (this.ParentSection == null || !this.ParentSection.IsVisible || (DisplayStack.Instance.Hidden && !this.ParentSection.IsHud) || !FlightEngineerCore.IsDisplayable) " is 164.
Long Statement,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,New,The length of the statement  "                float flowModifier = GetFlowModifier(atmChangeFlow' atmCurve' engineSim.partSim.part.atmDensity' velCurve' machNumber' ref engineSim.maxMach); " is 142.
Long Statement,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,New,The length of the statement  "                engineSim.thrust = GetThrust(Mathf.Lerp(minFuelFlow' maxFuelFlow' GetThrustPercent(thrustPercentage)) * flowModifier' engineSim.isp); " is 133.
Long Statement,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,New,The length of the statement  "                float flowModifier = GetFlowModifier(atmChangeFlow' atmCurve' CelestialBodies.SelectedBody.GetDensity(BuildAdvanced.Altitude)' velCurve' machNumber' ref engineSim.maxMach); " is 172.
Long Statement,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,New,The length of the statement  "                engineSim.thrust = GetThrust(Mathf.Lerp(minFuelFlow' maxFuelFlow' GetThrustPercent(thrustPercentage)) * flowModifier' engineSim.isp); " is 133.
Long Statement,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,CalculateThrustVector,The length of the statement  "				if (log != null) log.buf.AppendFormat("Transform = ({0:g6}' {1:g6}' {2:g6})   length = {3:g6}\n"' trans.forward.x' trans.forward.y' trans.forward.z' trans.forward.magnitude); " is 174.
Long Statement,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,CalculateThrustVector,The length of the statement  "			if (log != null) log.buf.AppendFormat("ThrustVec  = ({0:g6}' {1:g6}' {2:g6})   length = {3:g6}\n"' thrustvec.x' thrustvec.y' thrustvec.z' thrustvec.magnitude); " is 159.
Long Statement,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,CalculateThrustVector,The length of the statement  "			if (log != null) log.buf.AppendFormat("ThrustVecN = ({0:g6}' {1:g6}' {2:g6})   length = {3:g6}\n"' thrustvec.x' thrustvec.y' thrustvec.z' thrustvec.magnitude); " is 159.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,DrainResources,The length of the statement  "                //if (log != null) log.AppendLine("draining "' (time * resourceDrains[type])' " "' ResourceContainer.GetResourceName(type)); " is 124.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,EmptyOf,The length of the statement  "                if (resources.HasType(type) && resourceFlowStates[type] != 0 && resources[type] > SimManager.RESOURCE_PART_EMPTY_THRESH) " is 120.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetResourcePriority,The length of the statement  "            return ((!resPriorityUseParentInverseStage || !(parent != null)) ? inverseStage : parent.inverseStage) * 10 + resPriorityOffset; " is 128.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet,The length of the statement  "            // Call a modified version of the old GetSourceSet code that adds all potential sources rather than stopping the recursive scan " is 127.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Internal,The length of the statement  "            // Rule 2: Part performs scan on start of every fuel pipe ending in it. This scan is done in order in which pipes were installed. " is 129.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Internal,The length of the statement  "            // Then it makes an union of fuel tank sets each pipe scan returned. If the resulting list is not empty' it is returned as result. " is 130.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Internal,The length of the statement  "                        partSim.GetSourceSet_Internal(type' includeSurfaceMountedParts' allParts' visited' allSources' ref priMax' log' indent); " is 120.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Internal,The length of the statement  "                                partSim.GetSourceSet_Internal(type' includeSurfaceMountedParts' allParts' visited' allSources' ref priMax' log' indent); " is 120.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Internal,The length of the statement  "                                    attachSim.attachedPartSim.GetSourceSet_Internal(type' includeSurfaceMountedParts' allParts' visited' allSources' ref priMax' log' indent); " is 138.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Internal,The length of the statement  "            // If the part is fuel container for searched type of fuel (i.e. it has capability to contain that type of fuel and the fuel  " is 124.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Old,The length of the statement  "            // Rule 2: Part performs scan on start of every fuel pipe ending in it. This scan is done in order in which pipes were installed. " is 129.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Old,The length of the statement  "            // Then it makes an union of fuel tank sets each pipe scan returned. If the resulting list is not empty' it is returned as result. " is 130.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Old,The length of the statement  "            // Rule 3: This rule has been removed and merged with rules 4 and 7 to fix issue with fuel tanks with disabled crossfeed " is 120.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Old,The length of the statement  "            //  Couplers (bicoupler' tricoupler' ...) are an exception' they only scan one attach point on the single attachment side' " is 122.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Old,The length of the statement  "            //  The order in which mount points of a part are scanned appears to be fixed and defined by the part specification file. [Experiment] " is 134.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Old,The length of the statement  "                                    attachSim.attachedPartSim.GetSourceSet_Old(type' includeSurfaceMountedParts' allParts' visited' allSources' log' indent); " is 121.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Old,The length of the statement  "            // Rule 5: If the part is fuel container for searched type of fuel (i.e. it has capability to contain that type of fuel and the fuel  " is 132.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Old,The length of the statement  "            // Rule 6: If the part is fuel container for searched type of fuel (i.e. it has capability to contain that type of fuel and the fuel  " is 132.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetSourceSet_Old,The length of the statement  "            // Rule 7: If the part is radially attached to another part and it is child of that part in the ship's tree structure' it scans its  " is 131.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,SetupAttachNodes,The length of the statement  "                if (log != null) log.AppendLine("AttachNode "' attachNode.id' " = "' (attachNode.attachedPart != null ? attachNode.attachedPart.partInfo.name : "null")); " is 153.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,SetupParent,The length of the statement  "                    if (part.attachMode == AttachModes.SRF_ATTACH && part.attachRules.srfAttach && part.fuelCrossFeed && part.parent.fuelCrossFeed) " is 127.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,TimeToDrainResource,The length of the statement  "                    //if (log != null) log.AppendLine("type = " + ResourceContainer.GetResourceName(type) + "  amount = " + resources[type] + "  rate = " + resourceDrains[type] + "  time = " + time); " is 179.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,CalculateThrustVector,The length of the statement  "                if (log != null) log.buf.AppendFormat("Transform = ({0:g6}' {1:g6}' {2:g6})   length = {3:g6}\n"' trans.forward.x' trans.forward.y' trans.forward.z' trans.forward.magnitude); " is 174.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,CalculateThrustVector,The length of the statement  "            if (log != null) log.buf.AppendFormat("ThrustVec  = ({0:g6}' {1:g6}' {2:g6})   length = {3:g6}\n"' thrustvec.x' thrustvec.y' thrustvec.z' thrustvec.magnitude); " is 159.
Long Statement,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,CalculateThrustVector,The length of the statement  "            if (log != null) log.buf.AppendFormat("ThrustVecN = ({0:g6}' {1:g6}' {2:g6})   length = {3:g6}\n"' thrustvec.x' thrustvec.y' thrustvec.z' thrustvec.magnitude); " is 159.
Long Statement,KerbalEngineer.VesselSimulator,SimManager,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\SimManager.cs,UpdateModSettings,The length of the statement  "                // (out ispMultiplierVac' out ispMultiplierAtm' out extendToZeroIsp' out thrustCorrection' out ispCutoff' out thrustCutoff); " is 124.
Long Statement,KerbalEngineer.VesselSimulator,SimManager,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\SimManager.cs,TryStartSimulation,The length of the statement  "                if (!bRequested || bRunning || (timer.Elapsed < delayBetweenSims && timer.Elapsed >= TimeSpan.Zero) || (!HighLogic.LoadedSceneIsEditor && FlightGlobals.ActiveVessel == null)) " is 174.
Long Statement,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,RunSimulation,The length of the statement  "                        vecStageDeltaV += vecThrust * (float)((currentisp * Units.GRAVITY * Math.Log(stepStartMass / stepEndMass)) / simpleTotalThrust); " is 128.
Long Statement,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,FreePooledObject,The length of the statement  "            //MonoBehaviour.print("FreePooledObject pool size before = " + PartSim.pool.Count() + " for " + allParts.Count + " parts"); " is 123.
Long Statement,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,FreePooledObject,The length of the statement  "            //MonoBehaviour.print("FreePooledObject pool size before = " + EngineSim.pool.Count() + " for " + allEngines.Count + " engines"); " is 129.
Long Statement,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,BuildDontStageLists,The length of the statement  "                    if (log != null) log.AppendLine(partSim.name' ":"' partSim.partId' " is engine or tank' decoupled = "' partSim.decoupledInStage); " is 129.
Complex Conditional,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,OnGUI,The conditional expression  "!visible || EditorLogic.fetch == null || EditorLogic.fetch.ship.parts.Count == 0 || EditorLogic.fetch.editorScreen != EditorScreen.Parts"  is complex.
Complex Conditional,KerbalEngineer.Editor,BuildOverlayPartInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayPartInfo.cs,OnGUI,The conditional expression  "!Visible || Hidden || selectedPart == null || (EditorPanels.Instance.IsMouseOver() && IsPointerOverStaging() == false)"  is complex.
Complex Conditional,KerbalEngineer.Editor,BuildOverlayPartInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayPartInfo.cs,Update,The conditional expression  "!Visible || Hidden || EditorLogic.RootPart == null || EditorLogic.fetch.editorScreen != EditorScreen.Parts || (EditorPanels.Instance.IsMouseOver() && IsPointerOverStaging() == false)"  is complex.
Complex Conditional,KerbalEngineer.Flight.Readouts.Orbital.ManoeuvreNode,ManoeuvreProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\ManoeuvreNode\ManoeuvreProcessor.cs,Update,The conditional expression  "FlightGlobals.ActiveVessel.patchedConicSolver == null ||                  FlightGlobals.ActiveVessel.patchedConicSolver.maneuverNodes == null ||                  FlightGlobals.ActiveVessel.patchedConicSolver.maneuverNodes.Count == 0 ||                  !SimulationProcessor.ShowDetails"  is complex.
Complex Conditional,KerbalEngineer.Flight.Readouts.Rendezvous,RendezvousProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\RendezvousProcessor.cs,Update,The conditional expression  "FlightGlobals.fetch == null ||                  FlightGlobals.fetch.VesselTarget == null ||                  FlightGlobals.ActiveVessel == null ||                  FlightGlobals.ActiveVessel.targetObject == null ||                  FlightGlobals.ActiveVessel.targetObject.GetOrbit() == null ||                  FlightGlobals.ship_orbit == null ||                  FlightGlobals.ship_orbit.referenceBody == null"  is complex.
Complex Conditional,KerbalEngineer.Flight.Readouts.Vessel,SuicideBurnProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\SuicideBurnProcessor.cs,Update,The conditional expression  "FlightGlobals.currentMainBody == null || FlightGlobals.ActiveVessel == null || SimulationProcessor.LastStage == null ||                  FlightGlobals.ship_orbit.PeA >= 0.0 || !SimulationProcessor.ShowDetails"  is complex.
Complex Conditional,KerbalEngineer.UIControls,DropDown,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\UIControls\DropDown.cs,Update,The conditional expression  "(Input.GetMouseButtonDown(0) || Input.GetMouseButtonDown(1) || Input.GetMouseButtonDown(2)) && !this.position.MouseIsOver() && !this.button.MouseIsOver()"  is complex.
Complex Conditional,KerbalEngineer.Flight.Sections,SectionWindow,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionWindow.cs,OnGUI,The conditional expression  "this.ParentSection == null || !this.ParentSection.IsVisible || (DisplayStack.Instance.Hidden && !this.ParentSection.IsHud) || !FlightEngineerCore.IsDisplayable"  is complex.
Complex Conditional,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,SetResourceDrains,The conditional expression  "mode == ResourceFlowMode.ALL_VESSEL_BALANCE ||                      mode == ResourceFlowMode.STAGE_PRIORITY_FLOW_BALANCE ||                      mode == ResourceFlowMode.STAGE_STACK_FLOW_BALANCE ||                      mode == ResourceFlowMode.STACK_PRIORITY_SEARCH"  is complex.
Complex Conditional,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,SetupParent,The conditional expression  "part.attachMode == AttachModes.SRF_ATTACH && part.attachRules.srfAttach && part.fuelCrossFeed && part.parent.fuelCrossFeed"  is complex.
Complex Conditional,KerbalEngineer.VesselSimulator,SimManager,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\SimManager.cs,TryStartSimulation,The conditional expression  "!bRequested || bRunning || (timer.Elapsed < delayBetweenSims && timer.Elapsed >= TimeSpan.Zero) || (!HighLogic.LoadedSceneIsEditor && FlightGlobals.ActiveVessel == null)"  is complex.
Complex Conditional,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,RunSimulation,The conditional expression  "resourceDrainTime > 0d && stepStartMass > stepEndMass && stepStartMass > 0d && stepEndMass > 0d"  is complex.
Magic Number,KerbalEngineer,BodyInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\CelestialBodies.cs,BodyInfo,The following statement contains a magic number: try                  {                      // Set the body information.                      CelestialBody = body;                      Name = body.bodyName;                      Gravity = 9.81 * body.GeeASL;                      Parent = parent;                        // Set orbiting bodies information.                      Children = new List<BodyInfo>();                      foreach (CelestialBody orbitingBody in body.orbitingBodies)                      {                          Children.Add(new BodyInfo(orbitingBody' this));                      }                        SelectedDepth = 0;                  }                  catch (Exception ex)                  {                      MyLogger.Exception(ex);                  }
Magic Number,KerbalEngineer,LogMsg,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\LogMsg.cs,LogMsg,The following statement contains a magic number: buf = new StringBuilder(64 * 1024);
Magic Number,KerbalEngineer,LogMsg,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\LogMsg.cs,LogMsg,The following statement contains a magic number: buf = new StringBuilder(64 * 1024);
Magic Number,KerbalEngineer.Control,ControlCentre,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Control\ControlCentre.cs,InitialiseStyles,The following statement contains a magic number: this.panelSelectorStyle = new GUIStyle(Button)              {                  fontSize = 16'                  fixedHeight = 40.0f              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: areaStyle = new GUIStyle(HighLogic.Skin.box)              {                  padding = new RectOffset(0' 0' 9' 0)              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: areaSettingStyle = new GUIStyle(HighLogic.Skin.box)              {                  padding = new RectOffset(10' 10' 10' 10)              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: areaSettingStyle = new GUIStyle(HighLogic.Skin.box)              {                  padding = new RectOffset(10' 10' 10' 10)              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: areaSettingStyle = new GUIStyle(HighLogic.Skin.box)              {                  padding = new RectOffset(10' 10' 10' 10)              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: areaSettingStyle = new GUIStyle(HighLogic.Skin.box)              {                  padding = new RectOffset(10' 10' 10' 10)              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: buttonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  alignment = TextAnchor.MiddleCenter              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: titleStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  alignment = TextAnchor.MiddleCenter'                  stretchWidth = true              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: infoStyle = new GUIStyle(HighLogic.Skin.label)              {                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  alignment = TextAnchor.MiddleCenter'                  stretchWidth = true              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: bodiesButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  margin = new RectOffset(0' 0' 2' 0)'                  padding = new RectOffset(5' 5' 5' 5)'                  normal =                  {                      textColor = Color.white                  }'                  active =                  {                      textColor = Color.white                  }'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  alignment = TextAnchor.MiddleCenter'                  fixedHeight = 20.0f              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: bodiesButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  margin = new RectOffset(0' 0' 2' 0)'                  padding = new RectOffset(5' 5' 5' 5)'                  normal =                  {                      textColor = Color.white                  }'                  active =                  {                      textColor = Color.white                  }'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  alignment = TextAnchor.MiddleCenter'                  fixedHeight = 20.0f              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: bodiesButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  margin = new RectOffset(0' 0' 2' 0)'                  padding = new RectOffset(5' 5' 5' 5)'                  normal =                  {                      textColor = Color.white                  }'                  active =                  {                      textColor = Color.white                  }'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  alignment = TextAnchor.MiddleCenter'                  fixedHeight = 20.0f              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: bodiesButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  margin = new RectOffset(0' 0' 2' 0)'                  padding = new RectOffset(5' 5' 5' 5)'                  normal =                  {                      textColor = Color.white                  }'                  active =                  {                      textColor = Color.white                  }'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  alignment = TextAnchor.MiddleCenter'                  fixedHeight = 20.0f              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: bodiesButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  margin = new RectOffset(0' 0' 2' 0)'                  padding = new RectOffset(5' 5' 5' 5)'                  normal =                  {                      textColor = Color.white                  }'                  active =                  {                      textColor = Color.white                  }'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  alignment = TextAnchor.MiddleCenter'                  fixedHeight = 20.0f              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,InitialiseStyles,The following statement contains a magic number: bodiesButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  margin = new RectOffset(0' 0' 2' 0)'                  padding = new RectOffset(5' 5' 5' 5)'                  normal =                  {                      textColor = Color.white                  }'                  active =                  {                      textColor = Color.white                  }'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  alignment = TextAnchor.MiddleCenter'                  fixedHeight = 20.0f              };
Magic Number,KerbalEngineer.Editor,BuildAdvanced,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildAdvanced.cs,Window,The following statement contains a magic number: try              {                  compactModeRect = new Rect(position.width - 70.0f * GuiDisplaySize.Offset' 5.0f' 65.0f * GuiDisplaySize.Offset' 20.0f);                    // Draw the compact mode toggle.                  if (GUI.Toggle(compactModeRect' compactMode' "COMPACT"' buttonStyle) != compactMode)                  {                      hasChanged = true;                      compactCheck = 2;                      compactRight = position.xMax;                      compactMode = !compactMode;                  }                    // When not in compact mode draw the 'All Stages' and 'Atmospheric' toggles.                  if (!compactMode)                  {                      //if (GUI.Button(new Rect(position.width - 143.0f * GuiDisplaySize.Offset' 5.0f' 70.0f * GuiDisplaySize.Offset' 20.0f)' "SETTINGS"' buttonStyle))                      //{                      //    SettingsWindow.Open();                      //}                      if (GUI.Toggle(new Rect(position.width - 143.0f * GuiDisplaySize.Offset' 5.0f' 70.0f * GuiDisplaySize.Offset' 20.0f)' showSettings' "SETTINGS"' buttonStyle) != showSettings)                      {                          hasChanged = true;                          showSettings = !showSettings;                      }                        if (GUI.Toggle(new Rect(position.width - 226.0f * GuiDisplaySize.Offset' 5.0f' 80.0f * GuiDisplaySize.Offset' 20.0f)' showAllStages' "ALL STAGES"' buttonStyle) != showAllStages)                      {                          hasChanged = true;                          showAllStages = !showAllStages;                      }                        if (GUI.Toggle(new Rect(position.width - 324.0f * GuiDisplaySize.Offset' 5.0f' 95.0f * GuiDisplaySize.Offset' 20.0f)' showAtmosphericDetails' "ATMOSPHERIC"' buttonStyle) != showAtmosphericDetails)                      {                          hasChanged = true;                          showAtmosphericDetails = !showAtmosphericDetails;                      }                        bodiesListPosition = new Rect(position.width - 452.0f * GuiDisplaySize.Offset' 5.0f' 125.0f * GuiDisplaySize.Offset' 20.0f);                      bodiesList.enabled = GUI.Toggle(bodiesListPosition' bodiesList.enabled' "BODY: " + CelestialBodies.SelectedBody.Name.ToUpper()' buttonStyle);                      bodiesList.SetPosition(bodiesListPosition.Translate(position));                  }                  else                  {                      if (GUI.Toggle(new Rect(position.width - 133.0f * GuiDisplaySize.Offset' 5.0f' 60.0f * GuiDisplaySize.Offset' 20.0f)' showAtmosphericDetails' "ATMO"' buttonStyle) != showAtmosphericDetails)                      {                          hasChanged = true;                          showAtmosphericDetails = !showAtmosphericDetails;                      }                  }                    // Draw the main informational display box.                  if (!compactMode)                  {                      GUILayout.BeginHorizontal(areaStyle);                      DrawStageNumbers();                      DrawPartCount();                      DrawCost();                      DrawMass();                      DrawIsp();                      DrawThrust();                      DrawTorque();                      DrawTwr();                      DrawDeltaV();                      DrawBurnTime();                      GUILayout.EndHorizontal();                        if (showAtmosphericDetails && !compactMode)                      {                          GUILayout.BeginVertical(areaSettingStyle);                          DrawAtmosphericDetails();                          GUILayout.EndVertical();                      }                        if (showSettings)                      {                          GUILayout.BeginVertical(areaSettingStyle);                          DrawSettings();                          GUILayout.EndVertical();                      }                  }                  else // Draw only a few details when in compact mode.                  {                      GUILayout.BeginHorizontal(areaStyle);                      DrawStageNumbers();                      DrawTwr();                      DrawDeltaV();                      GUILayout.EndHorizontal();                  }                    GUI.DragWindow();              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "BuildAdvanced.Window()");              }
Magic Number,KerbalEngineer.Editor,BuildOverlayPartInfo,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Editor\BuildOverlayPartInfo.cs,Update,The following statement contains a magic number: try              {                  if (!Visible || Hidden || EditorLogic.RootPart == null || EditorLogic.fetch.editorScreen != EditorScreen.Parts || (EditorPanels.Instance.IsMouseOver() && IsPointerOverStaging() == false))                  {                      return;                  }                    position.x = Mathf.Clamp(Input.mousePosition.x + 16.0f' 0.0f' Screen.width - position.width);                  position.y = Mathf.Clamp(Screen.height - Input.mousePosition.y' 0.0f' Screen.height - position.height);                  if (position.x < Input.mousePosition.x + 20.0f)                  {                      position.y = Mathf.Clamp(position.y + 20.0f' 0.0f' Screen.height - position.height);                  }                    if (position.x < Input.mousePosition.x + 16.0f && position.y < Screen.height - Input.mousePosition.y)                  {                      position.x = Input.mousePosition.x - 3 - position.width;                  }                    RaycastHit rayHit;                  Part part = null;                  if (Physics.Raycast(Camera.main.ScreenPointToRay(Input.mousePosition)' out rayHit))                  {                      // MyLogger.Log("Raycast returned true");                      part = rayHit.transform.GetComponent<Part>();                  }                  else                  {                      // MyLogger.Log("Raycast returned false");                      part = EditorLogic.fetch.ship.parts.Find(p => p.HighlightActive) ?? EditorLogic.SelectedPart;                  }                    if (part != null)                  {                      if (!part.Equals(selectedPart))                      {                          selectedPart = part;                          ResetInfo();                      }                        if (NamesOnly || skipFrame)                      {                          skipFrame = false;                          return;                      }                        if (!showInfo && Input.GetKeyDown(KeyBinder.PartInfoShowHide))                      {                          showInfo = true;                      }                      else if (ClickToOpen && showInfo && Input.GetKeyDown(KeyBinder.PartInfoShowHide))                      {                          ResetInfo();                      }                        if (showInfo)                      {                          PartInfoItem.Release(infoItems);                          infoItems.Clear();                          SetCostInfo();                          SetMassItems();                          SetResourceItems();                          SetEngineInfo();                          SetAlternatorInfo();                          SetGimbalInfo();                          SetRcsInfo();                          SetParachuteInfo();                          SetSasInfo();                          SetReactionWheelInfo();                          SetSolarPanelInfo();                          SetGeneratorInfo();                          SetDecouplerInfo();                          SetTransmitterInfo();                          SetScienceExperimentInfo();                          SetScienceContainerInfo();                          SetSingleActivationInfo();                      }                  }                  else                  {                      selectedPart = null;                  }              }              catch (Exception ex)              {                  MyLogger.Exception(ex);              }
Magic Number,KerbalEngineer.Extensions,OrbitExtensions,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Extensions\OrbitExtensions.cs,GetAngleToPrograde,The following statement contains a magic number: return AngleHelper.Clamp360(orbit.inclination < 90.0 ? angle : 360.0 - angle);
Magic Number,KerbalEngineer.Extensions,OrbitExtensions,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Extensions\OrbitExtensions.cs,GetAngleToPrograde,The following statement contains a magic number: return AngleHelper.Clamp360(orbit.inclination < 90.0 ? angle : 360.0 - angle);
Magic Number,KerbalEngineer.Extensions,OrbitExtensions,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Extensions\OrbitExtensions.cs,GetAngleToRetrograde,The following statement contains a magic number: return AngleHelper.Clamp360(orbit.inclination < 90.0 ? angle : 360.0 - angle);
Magic Number,KerbalEngineer.Extensions,OrbitExtensions,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Extensions\OrbitExtensions.cs,GetAngleToRetrograde,The following statement contains a magic number: return AngleHelper.Clamp360(orbit.inclination < 90.0 ? angle : 360.0 - angle);
Magic Number,KerbalEngineer.Extensions,OrbitExtensions,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Extensions\OrbitExtensions.cs,GetPhaseAngle,The following statement contains a magic number: return (orbit.semiMajorAxis < target.semiMajorAxis) ? angle : angle - 360.0;
Magic Number,KerbalEngineer.Extensions,OrbitExtensions,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Extensions\OrbitExtensions.cs,GetTrueAnomalyOfAscendingNode,The following statement contains a magic number: return 360.0 - orbit.argumentOfPeriapsis;
Magic Number,KerbalEngineer.Extensions,OrbitExtensions,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Extensions\OrbitExtensions.cs,GetTrueAnomalyOfDescendingNode,The following statement contains a magic number: return 180.0 - orbit.argumentOfPeriapsis;
Magic Number,KerbalEngineer.Extensions,ProtoModuleEngine,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Extensions\PartExtensions.cs,SetModuleEngines,The following statement contains a magic number: MaximumThrust = engine.maxThrust * (engine.thrustPercentage * 0.01);
Magic Number,KerbalEngineer.Flight,ActionMenuGui,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\ActionMenuGui.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      border = new RectOffset(10' 0' 20' 10)'                      margin = new RectOffset(0' 0' 3' 0)'                      padding = new RectOffset(5' 5' 26' 5)'                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/ToolbarBackground"' false)                      }                  };                    this.buttonStyle = new GUIStyle(HighLogic.Skin.button)                  {                      normal =                      {                          textColor = Color.white'                      }'                      margin = new RectOffset()'                      padding = new RectOffset()'                      alignment = TextAnchor.MiddleCenter'                      fontSize = 11'                      fontStyle = FontStyle.Bold'                      fixedHeight = 20.0f'                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "ActionMenu->InitialiseStyles");              }
Magic Number,KerbalEngineer.Flight,ActionMenuGui,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\ActionMenuGui.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      border = new RectOffset(10' 0' 20' 10)'                      margin = new RectOffset(0' 0' 3' 0)'                      padding = new RectOffset(5' 5' 26' 5)'                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/ToolbarBackground"' false)                      }                  };                    this.buttonStyle = new GUIStyle(HighLogic.Skin.button)                  {                      normal =                      {                          textColor = Color.white'                      }'                      margin = new RectOffset()'                      padding = new RectOffset()'                      alignment = TextAnchor.MiddleCenter'                      fontSize = 11'                      fontStyle = FontStyle.Bold'                      fixedHeight = 20.0f'                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "ActionMenu->InitialiseStyles");              }
Magic Number,KerbalEngineer.Flight,ActionMenuGui,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\ActionMenuGui.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      border = new RectOffset(10' 0' 20' 10)'                      margin = new RectOffset(0' 0' 3' 0)'                      padding = new RectOffset(5' 5' 26' 5)'                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/ToolbarBackground"' false)                      }                  };                    this.buttonStyle = new GUIStyle(HighLogic.Skin.button)                  {                      normal =                      {                          textColor = Color.white'                      }'                      margin = new RectOffset()'                      padding = new RectOffset()'                      alignment = TextAnchor.MiddleCenter'                      fontSize = 11'                      fontStyle = FontStyle.Bold'                      fixedHeight = 20.0f'                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "ActionMenu->InitialiseStyles");              }
Magic Number,KerbalEngineer.Flight,ActionMenuGui,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\ActionMenuGui.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      border = new RectOffset(10' 0' 20' 10)'                      margin = new RectOffset(0' 0' 3' 0)'                      padding = new RectOffset(5' 5' 26' 5)'                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/ToolbarBackground"' false)                      }                  };                    this.buttonStyle = new GUIStyle(HighLogic.Skin.button)                  {                      normal =                      {                          textColor = Color.white'                      }'                      margin = new RectOffset()'                      padding = new RectOffset()'                      alignment = TextAnchor.MiddleCenter'                      fontSize = 11'                      fontStyle = FontStyle.Bold'                      fixedHeight = 20.0f'                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "ActionMenu->InitialiseStyles");              }
Magic Number,KerbalEngineer.Flight,ActionMenuGui,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\ActionMenuGui.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      border = new RectOffset(10' 0' 20' 10)'                      margin = new RectOffset(0' 0' 3' 0)'                      padding = new RectOffset(5' 5' 26' 5)'                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/ToolbarBackground"' false)                      }                  };                    this.buttonStyle = new GUIStyle(HighLogic.Skin.button)                  {                      normal =                      {                          textColor = Color.white'                      }'                      margin = new RectOffset()'                      padding = new RectOffset()'                      alignment = TextAnchor.MiddleCenter'                      fontSize = 11'                      fontStyle = FontStyle.Bold'                      fixedHeight = 20.0f'                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "ActionMenu->InitialiseStyles");              }
Magic Number,KerbalEngineer.Flight,ActionMenuGui,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\ActionMenuGui.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      border = new RectOffset(10' 0' 20' 10)'                      margin = new RectOffset(0' 0' 3' 0)'                      padding = new RectOffset(5' 5' 26' 5)'                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/ToolbarBackground"' false)                      }                  };                    this.buttonStyle = new GUIStyle(HighLogic.Skin.button)                  {                      normal =                      {                          textColor = Color.white'                      }'                      margin = new RectOffset()'                      padding = new RectOffset()'                      alignment = TextAnchor.MiddleCenter'                      fontSize = 11'                      fontStyle = FontStyle.Bold'                      fixedHeight = 20.0f'                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "ActionMenu->InitialiseStyles");              }
Magic Number,KerbalEngineer.Flight,ActionMenuGui,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\ActionMenuGui.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      border = new RectOffset(10' 0' 20' 10)'                      margin = new RectOffset(0' 0' 3' 0)'                      padding = new RectOffset(5' 5' 26' 5)'                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/ToolbarBackground"' false)                      }                  };                    this.buttonStyle = new GUIStyle(HighLogic.Skin.button)                  {                      normal =                      {                          textColor = Color.white'                      }'                      margin = new RectOffset()'                      padding = new RectOffset()'                      alignment = TextAnchor.MiddleCenter'                      fontSize = 11'                      fontStyle = FontStyle.Bold'                      fixedHeight = 20.0f'                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "ActionMenu->InitialiseStyles");              }
Magic Number,KerbalEngineer.Flight,ActionMenuGui,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\ActionMenuGui.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      border = new RectOffset(10' 0' 20' 10)'                      margin = new RectOffset(0' 0' 3' 0)'                      padding = new RectOffset(5' 5' 26' 5)'                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/ToolbarBackground"' false)                      }                  };                    this.buttonStyle = new GUIStyle(HighLogic.Skin.button)                  {                      normal =                      {                          textColor = Color.white'                      }'                      margin = new RectOffset()'                      padding = new RectOffset()'                      alignment = TextAnchor.MiddleCenter'                      fontSize = 11'                      fontStyle = FontStyle.Bold'                      fixedHeight = 20.0f'                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "ActionMenu->InitialiseStyles");              }
Magic Number,KerbalEngineer.Flight,ActionMenuGui,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\ActionMenuGui.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      border = new RectOffset(10' 0' 20' 10)'                      margin = new RectOffset(0' 0' 3' 0)'                      padding = new RectOffset(5' 5' 26' 5)'                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/ToolbarBackground"' false)                      }                  };                    this.buttonStyle = new GUIStyle(HighLogic.Skin.button)                  {                      normal =                      {                          textColor = Color.white'                      }'                      margin = new RectOffset()'                      padding = new RectOffset()'                      alignment = TextAnchor.MiddleCenter'                      fontSize = 11'                      fontStyle = FontStyle.Bold'                      fixedHeight = 20.0f'                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "ActionMenu->InitialiseStyles");              }
Magic Number,KerbalEngineer.Flight,DisplayStack,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\DisplayStack.cs,DrawControlBarButtons,The following statement contains a magic number: foreach (var section in sections.Where(s => !string.IsNullOrEmpty(s.Abbreviation) || !s.IsCustom))              {                  if (index % 4 == 0)                  {                      if (index > 0)                      {                          GUILayout.EndHorizontal();                      }                      GUILayout.BeginHorizontal();                  }                  section.IsVisible = GUILayout.Toggle(section.IsVisible' section.Abbreviation.ToUpper()' this.buttonStyle);                  index++;              }
Magic Number,KerbalEngineer.Flight,DisplayStack,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\DisplayStack.cs,InitialiseStyles,The following statement contains a magic number: this.windowStyle = new GUIStyle(HighLogic.Skin.window)              {                  margin = new RectOffset()'                  padding = new RectOffset(5' 5' 0' 5)              };
Magic Number,KerbalEngineer.Flight,DisplayStack,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\DisplayStack.cs,InitialiseStyles,The following statement contains a magic number: this.windowStyle = new GUIStyle(HighLogic.Skin.window)              {                  margin = new RectOffset()'                  padding = new RectOffset(5' 5' 0' 5)              };
Magic Number,KerbalEngineer.Flight,DisplayStack,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\DisplayStack.cs,InitialiseStyles,The following statement contains a magic number: this.windowStyle = new GUIStyle(HighLogic.Skin.window)              {                  margin = new RectOffset()'                  padding = new RectOffset(5' 5' 0' 5)              };
Magic Number,KerbalEngineer.Flight,DisplayStack,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\DisplayStack.cs,InitialiseStyles,The following statement contains a magic number: this.titleStyle = new GUIStyle(HighLogic.Skin.label)              {                  margin = new RectOffset(0' 0' 5' 3)'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleCenter'                  fontSize = (int)(13 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  stretchWidth = true              };
Magic Number,KerbalEngineer.Flight,DisplayStack,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\DisplayStack.cs,InitialiseStyles,The following statement contains a magic number: this.titleStyle = new GUIStyle(HighLogic.Skin.label)              {                  margin = new RectOffset(0' 0' 5' 3)'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleCenter'                  fontSize = (int)(13 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  stretchWidth = true              };
Magic Number,KerbalEngineer.Flight,DisplayStack,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\DisplayStack.cs,InitialiseStyles,The following statement contains a magic number: this.titleStyle = new GUIStyle(HighLogic.Skin.label)              {                  margin = new RectOffset(0' 0' 5' 3)'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleCenter'                  fontSize = (int)(13 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  stretchWidth = true              };
Magic Number,KerbalEngineer.Flight,DisplayStack,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\DisplayStack.cs,InitialiseStyles,The following statement contains a magic number: this.buttonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleCenter'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  fixedWidth = 60.0f * GuiDisplaySize.Offset'                  fixedHeight = 25.0f * GuiDisplaySize.Offset'              };
Magic Number,KerbalEngineer.Flight.Readouts.Miscellaneous,Separator,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Miscellaneous\Separator.cs,InitialiseStyles,The following statement contains a magic number: this.boxStyleHud = new GUIStyle(this.boxStyle)              {                  margin = new RectOffset(0' 0' (int)(8 * GuiDisplaySize.Offset)' 0)              };
Magic Number,KerbalEngineer.Flight.Readouts.Orbital,SemiMajorAxis,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\SemiMajorAxis.cs,Draw,The following statement contains a magic number: this.DrawLine(Units.ToDistance(FlightGlobals.ship_orbit.semiMajorAxis' 3)' section.IsHud);
Magic Number,KerbalEngineer.Flight.Readouts.Orbital,SpeedAtApoapsis,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\SpeedAtApoapsis.cs,Draw,The following statement contains a magic number: if (orbit.eccentricity > 1.0)                  str = "---m/s";              else              {                  double speedsqr = orbit.referenceBody.gravParameter * ((2 / orbit.ApR) - (1 / orbit.semiMajorAxis));                  if (Double.IsNaN(speedsqr) || speedsqr < 0)                      str = "---m/s";     // Don't think this is possible barring bugs in the Orbit class                  else                      str = Math.Sqrt(speedsqr).ToSpeed();              }
Magic Number,KerbalEngineer.Flight.Readouts.Orbital,SpeedAtPeriapsis,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\SpeedAtPeriapsis.cs,Draw,The following statement contains a magic number: double speedsqr = orbit.referenceBody.gravParameter * ((2 / orbit.PeR) - oneovera);
Magic Number,KerbalEngineer.Flight.Readouts.Orbital,TimeToAtmosphere,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\TimeToAtmosphere.cs,Draw,The following statement contains a magic number: if (orbit.referenceBody.atmosphere && orbit.PeA < orbit.referenceBody.atmosphereDepth && orbit.ApA > orbit.referenceBody.atmosphereDepth)              {                  double tA = orbit.TrueAnomalyAtRadius(orbit.referenceBody.atmosphereDepth + orbit.referenceBody.Radius);                  //log.buf.AppendFormat("tA = {0}\n"' tA);                  double utTime = Planetarium.GetUniversalTime();                  //log.buf.AppendFormat("utTime = {0}\n"' utTime);                  double timeAtRad1 = orbit.GetUTforTrueAnomaly(tA' orbit.period * 0.5);                  //log.buf.AppendFormat("timeAtRad1 = {0}\n"' timeAtRad1);                  if (timeAtRad1 < utTime)                  {                      timeAtRad1 += orbit.period;                      //log.buf.AppendFormat("timeAtRad1 = {0}\n"' timeAtRad1);                  }                  double timeAtRad2 = orbit.GetUTforTrueAnomaly(-tA' orbit.period * 0.5);                  //log.buf.AppendFormat("timeAtRad2 = {0}\n"' timeAtRad2);                  if (timeAtRad2 < utTime)                  {                      timeAtRad2 += orbit.period;                      //log.buf.AppendFormat("timeAtRad2 = {0}\n"' timeAtRad2);                  }                  double time = Math.Min(timeAtRad1' timeAtRad2) - utTime;                  //log.buf.AppendFormat("time = {0}\n"' time);                    if (Double.IsNaN(time))                  {                      str = "---s";                      //log.buf.AppendLine("time is NaN");                  }                  else                  {                      str = TimeFormatter.ConvertToString(time);                      //log.buf.AppendFormat("str = {0}\n"' str);                  }              }              else              {                  str = "---s";                  //log.buf.AppendLine("no atmosphere' pe > atmosphere' or ap < atmosphere");              }
Magic Number,KerbalEngineer.Flight.Readouts.Orbital,TimeToAtmosphere,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\TimeToAtmosphere.cs,Draw,The following statement contains a magic number: if (orbit.referenceBody.atmosphere && orbit.PeA < orbit.referenceBody.atmosphereDepth && orbit.ApA > orbit.referenceBody.atmosphereDepth)              {                  double tA = orbit.TrueAnomalyAtRadius(orbit.referenceBody.atmosphereDepth + orbit.referenceBody.Radius);                  //log.buf.AppendFormat("tA = {0}\n"' tA);                  double utTime = Planetarium.GetUniversalTime();                  //log.buf.AppendFormat("utTime = {0}\n"' utTime);                  double timeAtRad1 = orbit.GetUTforTrueAnomaly(tA' orbit.period * 0.5);                  //log.buf.AppendFormat("timeAtRad1 = {0}\n"' timeAtRad1);                  if (timeAtRad1 < utTime)                  {                      timeAtRad1 += orbit.period;                      //log.buf.AppendFormat("timeAtRad1 = {0}\n"' timeAtRad1);                  }                  double timeAtRad2 = orbit.GetUTforTrueAnomaly(-tA' orbit.period * 0.5);                  //log.buf.AppendFormat("timeAtRad2 = {0}\n"' timeAtRad2);                  if (timeAtRad2 < utTime)                  {                      timeAtRad2 += orbit.period;                      //log.buf.AppendFormat("timeAtRad2 = {0}\n"' timeAtRad2);                  }                  double time = Math.Min(timeAtRad1' timeAtRad2) - utTime;                  //log.buf.AppendFormat("time = {0}\n"' time);                    if (Double.IsNaN(time))                  {                      str = "---s";                      //log.buf.AppendLine("time is NaN");                  }                  else                  {                      str = TimeFormatter.ConvertToString(time);                      //log.buf.AppendFormat("str = {0}\n"' str);                  }              }              else              {                  str = "---s";                  //log.buf.AppendLine("no atmosphere' pe > atmosphere' or ap < atmosphere");              }
Magic Number,KerbalEngineer.Flight.Readouts.Orbital,SemiMinorAxis,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\SemiMinorAxis.cs,Draw,The following statement contains a magic number: this.DrawLine(Units.ToDistance(FlightGlobals.ship_orbit.semiMinorAxis' 3)' section.IsHud);
Magic Number,KerbalEngineer.Flight.Readouts.Orbital.ManoeuvreNode,ManoeuvreProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\ManoeuvreNode\ManoeuvreProcessor.cs,GetBurnTime,The following statement contains a magic number: var deltaVMidPoint = deltaV * 0.5;
Magic Number,KerbalEngineer.Flight.Readouts.Orbital.ManoeuvreNode,ManoeuvreProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Orbital\ManoeuvreNode\ManoeuvreProcessor.cs,GetBurnTime,The following statement contains a magic number: for (var i = SimulationProcessor.Stages.Length - 1; i > -1; i--)              {                  var stage = SimulationProcessor.Stages[i];                  var stageDeltaV = stage.deltaV;                  var startMass = stage.totalMass;                    ProcessStageDrain:                  if (deltaV <= Double.Epsilon)                  {                      break;                  }                  if (stageDeltaV <= Double.Epsilon)                  {                      continue;                  }                    FinalStage = i;                    double deltaVDrain;                  if (deltaVMidPoint > 0.0)                  {                      deltaVDrain = deltaV.Clamp(0.0' stageDeltaV.Clamp(0.0' deltaVMidPoint));                      deltaVMidPoint -= deltaVDrain;                      setMidPoint = deltaVMidPoint <= Double.Epsilon;                  }                  else                  {                      deltaVDrain = deltaV.Clamp(0.0' stageDeltaV);                  }                    var exhaustVelocity = stage.isp * Units.GRAVITY;                  var flowRate = stage.thrust / exhaustVelocity;                  var endMass = Math.Exp(Math.Log(startMass) - deltaVDrain / exhaustVelocity);                  var deltaMass = (startMass - endMass) * Math.Exp(-(deltaVDrain * 0.001) / exhaustVelocity);                  burnTime += deltaMass / flowRate;                    deltaV -= deltaVDrain;                  stageDeltaV -= deltaVDrain;                  startMass -= deltaMass;                    if (setMidPoint)                  {                      midPointTime = burnTime;                      setMidPoint = false;                      goto ProcessStageDrain;                  }              }
Magic Number,KerbalEngineer.Flight.Readouts.Rendezvous,SemiMinorAxis,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\SemiMinorAxis.cs,Draw,The following statement contains a magic number: if (RendezvousProcessor.ShowDetails)              {                  this.DrawLine(Units.ToDistance(RendezvousProcessor.SemiMajorAxis' 3)' section.IsHud);              }
Magic Number,KerbalEngineer.Flight.Readouts.Rendezvous,SemiMajorAxis,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\SemiMajorAxis.cs,Draw,The following statement contains a magic number: if (RendezvousProcessor.ShowDetails)              {                  this.DrawLine(Units.ToDistance(RendezvousProcessor.SemiMajorAxis' 3)' section.IsHud);              }
Magic Number,KerbalEngineer.Flight.Readouts.Rendezvous,RendezvousProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\RendezvousProcessor.cs,CalcInterceptAngle,The following statement contains a magic number: double originRadius = (originOrbit.semiMinorAxis + originOrbit.semiMajorAxis) * 0.5;
Magic Number,KerbalEngineer.Flight.Readouts.Rendezvous,RendezvousProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\RendezvousProcessor.cs,CalcInterceptAngle,The following statement contains a magic number: double targetRadius = (targetOrbit.semiMinorAxis + targetOrbit.semiMajorAxis) * 0.5;
Magic Number,KerbalEngineer.Flight.Readouts.Rendezvous,RendezvousProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\RendezvousProcessor.cs,CalcInterceptAngle,The following statement contains a magic number: double angle = 180.0 * (1.0 - Math.Pow((originRadius + targetRadius) / (2.0 * targetRadius)' 1.5));
Magic Number,KerbalEngineer.Flight.Readouts.Rendezvous,RendezvousProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\RendezvousProcessor.cs,CalcInterceptAngle,The following statement contains a magic number: double angle = 180.0 * (1.0 - Math.Pow((originRadius + targetRadius) / (2.0 * targetRadius)' 1.5));
Magic Number,KerbalEngineer.Flight.Readouts.Rendezvous,RendezvousProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\RendezvousProcessor.cs,CalcInterceptAngle,The following statement contains a magic number: double angle = 180.0 * (1.0 - Math.Pow((originRadius + targetRadius) / (2.0 * targetRadius)' 1.5));
Magic Number,KerbalEngineer.Flight.Readouts.Rendezvous,RendezvousProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\RendezvousProcessor.cs,CalcInterceptAngle,The following statement contains a magic number: return RelativeInclination < 90.0 ? AngleHelper.Clamp360(angle) : AngleHelper.Clamp360(360.0 - (180.0 - angle));
Magic Number,KerbalEngineer.Flight.Readouts.Rendezvous,RendezvousProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\RendezvousProcessor.cs,CalcInterceptAngle,The following statement contains a magic number: return RelativeInclination < 90.0 ? AngleHelper.Clamp360(angle) : AngleHelper.Clamp360(360.0 - (180.0 - angle));
Magic Number,KerbalEngineer.Flight.Readouts.Rendezvous,RendezvousProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Rendezvous\RendezvousProcessor.cs,CalcInterceptAngle,The following statement contains a magic number: return RelativeInclination < 90.0 ? AngleHelper.Clamp360(angle) : AngleHelper.Clamp360(360.0 - (180.0 - angle));
Magic Number,KerbalEngineer.Flight.Readouts.Surface,Slope,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\Slope.cs,GetSlopeAngleAndHeading,The following statement contains a magic number: try              {                  var result = "--° @ ---°";                  var mainBody = FlightGlobals.ActiveVessel.mainBody;                  var rad = (FlightGlobals.ActiveVessel.CoM - mainBody.position).normalized;                  RaycastHit hit;                  if (Physics.Raycast(FlightGlobals.ActiveVessel.CoM' -rad' out hit' Mathf.Infinity' 1 << 15)) // Just "Local Scenery" please                  {                      var norm = hit.normal;                      norm = norm.normalized;                      var raddotnorm = Vector3d.Dot(rad' norm);                      if (raddotnorm > 1.0)                      {                          raddotnorm = 1.0;                      }                      else if (raddotnorm < 0.0)                      {                          raddotnorm = 0.0;                      }                      var slope = Math.Acos(raddotnorm) * 180 / Math.PI;                      result = Units.ToAngle(slope' 1);                      if (slope < 0.05)                      {                          result += " @ ---°";                      }                      else                      {                          var side = Vector3d.Cross(rad' norm).normalized;                          var east = Vector3d.Cross(rad' Vector3d.up).normalized;                          var north = Vector3d.Cross(rad' east).normalized;                          var sidedoteast = Vector3d.Dot(side' east);                          var direction = Math.Acos(sidedoteast) * 180 / Math.PI;                          var sidedotnorth = Vector3d.Dot(side' north);                          if (sidedotnorth < 0)                          {                              direction = 360 - direction;                          }                          result += " @ " + Units.ToAngle(direction' 1);                      }                  }                    return result;              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "Surface->Slope->GetSlopeAngleAndHeading");                  return "--° @ ---°";              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,Slope,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\Slope.cs,GetSlopeAngleAndHeading,The following statement contains a magic number: try              {                  var result = "--° @ ---°";                  var mainBody = FlightGlobals.ActiveVessel.mainBody;                  var rad = (FlightGlobals.ActiveVessel.CoM - mainBody.position).normalized;                  RaycastHit hit;                  if (Physics.Raycast(FlightGlobals.ActiveVessel.CoM' -rad' out hit' Mathf.Infinity' 1 << 15)) // Just "Local Scenery" please                  {                      var norm = hit.normal;                      norm = norm.normalized;                      var raddotnorm = Vector3d.Dot(rad' norm);                      if (raddotnorm > 1.0)                      {                          raddotnorm = 1.0;                      }                      else if (raddotnorm < 0.0)                      {                          raddotnorm = 0.0;                      }                      var slope = Math.Acos(raddotnorm) * 180 / Math.PI;                      result = Units.ToAngle(slope' 1);                      if (slope < 0.05)                      {                          result += " @ ---°";                      }                      else                      {                          var side = Vector3d.Cross(rad' norm).normalized;                          var east = Vector3d.Cross(rad' Vector3d.up).normalized;                          var north = Vector3d.Cross(rad' east).normalized;                          var sidedoteast = Vector3d.Dot(side' east);                          var direction = Math.Acos(sidedoteast) * 180 / Math.PI;                          var sidedotnorth = Vector3d.Dot(side' north);                          if (sidedotnorth < 0)                          {                              direction = 360 - direction;                          }                          result += " @ " + Units.ToAngle(direction' 1);                      }                  }                    return result;              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "Surface->Slope->GetSlopeAngleAndHeading");                  return "--° @ ---°";              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,Slope,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\Slope.cs,GetSlopeAngleAndHeading,The following statement contains a magic number: try              {                  var result = "--° @ ---°";                  var mainBody = FlightGlobals.ActiveVessel.mainBody;                  var rad = (FlightGlobals.ActiveVessel.CoM - mainBody.position).normalized;                  RaycastHit hit;                  if (Physics.Raycast(FlightGlobals.ActiveVessel.CoM' -rad' out hit' Mathf.Infinity' 1 << 15)) // Just "Local Scenery" please                  {                      var norm = hit.normal;                      norm = norm.normalized;                      var raddotnorm = Vector3d.Dot(rad' norm);                      if (raddotnorm > 1.0)                      {                          raddotnorm = 1.0;                      }                      else if (raddotnorm < 0.0)                      {                          raddotnorm = 0.0;                      }                      var slope = Math.Acos(raddotnorm) * 180 / Math.PI;                      result = Units.ToAngle(slope' 1);                      if (slope < 0.05)                      {                          result += " @ ---°";                      }                      else                      {                          var side = Vector3d.Cross(rad' norm).normalized;                          var east = Vector3d.Cross(rad' Vector3d.up).normalized;                          var north = Vector3d.Cross(rad' east).normalized;                          var sidedoteast = Vector3d.Dot(side' east);                          var direction = Math.Acos(sidedoteast) * 180 / Math.PI;                          var sidedotnorth = Vector3d.Dot(side' north);                          if (sidedotnorth < 0)                          {                              direction = 360 - direction;                          }                          result += " @ " + Units.ToAngle(direction' 1);                      }                  }                    return result;              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "Surface->Slope->GetSlopeAngleAndHeading");                  return "--° @ ---°";              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,Slope,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\Slope.cs,GetSlopeAngleAndHeading,The following statement contains a magic number: try              {                  var result = "--° @ ---°";                  var mainBody = FlightGlobals.ActiveVessel.mainBody;                  var rad = (FlightGlobals.ActiveVessel.CoM - mainBody.position).normalized;                  RaycastHit hit;                  if (Physics.Raycast(FlightGlobals.ActiveVessel.CoM' -rad' out hit' Mathf.Infinity' 1 << 15)) // Just "Local Scenery" please                  {                      var norm = hit.normal;                      norm = norm.normalized;                      var raddotnorm = Vector3d.Dot(rad' norm);                      if (raddotnorm > 1.0)                      {                          raddotnorm = 1.0;                      }                      else if (raddotnorm < 0.0)                      {                          raddotnorm = 0.0;                      }                      var slope = Math.Acos(raddotnorm) * 180 / Math.PI;                      result = Units.ToAngle(slope' 1);                      if (slope < 0.05)                      {                          result += " @ ---°";                      }                      else                      {                          var side = Vector3d.Cross(rad' norm).normalized;                          var east = Vector3d.Cross(rad' Vector3d.up).normalized;                          var north = Vector3d.Cross(rad' east).normalized;                          var sidedoteast = Vector3d.Dot(side' east);                          var direction = Math.Acos(sidedoteast) * 180 / Math.PI;                          var sidedotnorth = Vector3d.Dot(side' north);                          if (sidedotnorth < 0)                          {                              direction = 360 - direction;                          }                          result += " @ " + Units.ToAngle(direction' 1);                      }                  }                    return result;              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "Surface->Slope->GetSlopeAngleAndHeading");                  return "--° @ ---°";              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,Slope,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\Slope.cs,GetSlopeAngleAndHeading,The following statement contains a magic number: try              {                  var result = "--° @ ---°";                  var mainBody = FlightGlobals.ActiveVessel.mainBody;                  var rad = (FlightGlobals.ActiveVessel.CoM - mainBody.position).normalized;                  RaycastHit hit;                  if (Physics.Raycast(FlightGlobals.ActiveVessel.CoM' -rad' out hit' Mathf.Infinity' 1 << 15)) // Just "Local Scenery" please                  {                      var norm = hit.normal;                      norm = norm.normalized;                      var raddotnorm = Vector3d.Dot(rad' norm);                      if (raddotnorm > 1.0)                      {                          raddotnorm = 1.0;                      }                      else if (raddotnorm < 0.0)                      {                          raddotnorm = 0.0;                      }                      var slope = Math.Acos(raddotnorm) * 180 / Math.PI;                      result = Units.ToAngle(slope' 1);                      if (slope < 0.05)                      {                          result += " @ ---°";                      }                      else                      {                          var side = Vector3d.Cross(rad' norm).normalized;                          var east = Vector3d.Cross(rad' Vector3d.up).normalized;                          var north = Vector3d.Cross(rad' east).normalized;                          var sidedoteast = Vector3d.Dot(side' east);                          var direction = Math.Acos(sidedoteast) * 180 / Math.PI;                          var sidedotnorth = Vector3d.Dot(side' north);                          if (sidedotnorth < 0)                          {                              direction = 360 - direction;                          }                          result += " @ " + Units.ToAngle(direction' 1);                      }                  }                    return result;              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "Surface->Slope->GetSlopeAngleAndHeading");                  return "--° @ ---°";              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,AtmosphericProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\AtmosphericProcessor.cs,Update,The following statement contains a magic number: try              {                  if (!this.hasCheckedAeroMods)                  {                      this.CheckAeroMods();                  }                    if (FlightGlobals.ActiveVessel.atmDensity < double.Epsilon || NearInstalled)                  {                      ShowDetails = false;                      return;                  }                    ShowDetails = true;                    if (FarInstalled)                  {                      TerminalVelocity = (double)this.farTerminalVelocity.Invoke(null' null);                  }                  else                  {                      var m = FlightGlobals.ActiveVessel.parts.Sum(part => part.GetWetMass()) * 1000.0;                      var g = FlightGlobals.getGeeForceAtPosition(FlightGlobals.ship_position).magnitude;                      var a = FlightGlobals.ActiveVessel.parts.Sum(part => part.DragCubes.AreaDrag) * PhysicsGlobals.DragCubeMultiplier;                      var p = FlightGlobals.ActiveVessel.atmDensity;                      var c = PhysicsGlobals.DragMultiplier;                        TerminalVelocity = Math.Sqrt((2.0 * m * g) / (p * a * c));                        StaticPressure = FlightGlobals.ActiveVessel.staticPressurekPa;                      DynamicPressure = FlightGlobals.ActiveVessel.dynamicPressurekPa;                  }                    Efficiency = FlightGlobals.ship_srfSpeed / TerminalVelocity;              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "AtmosphericProcessor->Update");              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,AtmosphericProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\AtmosphericProcessor.cs,Update,The following statement contains a magic number: try              {                  if (!this.hasCheckedAeroMods)                  {                      this.CheckAeroMods();                  }                    if (FlightGlobals.ActiveVessel.atmDensity < double.Epsilon || NearInstalled)                  {                      ShowDetails = false;                      return;                  }                    ShowDetails = true;                    if (FarInstalled)                  {                      TerminalVelocity = (double)this.farTerminalVelocity.Invoke(null' null);                  }                  else                  {                      var m = FlightGlobals.ActiveVessel.parts.Sum(part => part.GetWetMass()) * 1000.0;                      var g = FlightGlobals.getGeeForceAtPosition(FlightGlobals.ship_position).magnitude;                      var a = FlightGlobals.ActiveVessel.parts.Sum(part => part.DragCubes.AreaDrag) * PhysicsGlobals.DragCubeMultiplier;                      var p = FlightGlobals.ActiveVessel.atmDensity;                      var c = PhysicsGlobals.DragMultiplier;                        TerminalVelocity = Math.Sqrt((2.0 * m * g) / (p * a * c));                        StaticPressure = FlightGlobals.ActiveVessel.staticPressurekPa;                      DynamicPressure = FlightGlobals.ActiveVessel.dynamicPressurekPa;                  }                    Efficiency = FlightGlobals.ship_srfSpeed / TerminalVelocity;              }              catch (Exception ex)              {                  MyLogger.Exception(ex' "AtmosphericProcessor->Update");              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel.mainBody.pqsController != null)              {                  //do impact site calculations                  this.impactHappening = true;                  this.impactTime = 0;                  this.impactLongitude = 0;                  this.impactLatitude = 0;                  this.impactAltitude = 0;                  var e = FlightGlobals.ActiveVessel.orbit.eccentricity;                  //get current position direction vector                  var currentpos = this.RadiusDirection(FlightGlobals.ActiveVessel.orbit.trueAnomaly * Units.RAD_TO_DEG);                  //calculate longitude in inertial reference frame from that                  var currentirflong = 180 * Math.Atan2(currentpos.x' currentpos.y) / Math.PI;                    //experimentally determined; even for very flat trajectories' the errors go into the sub-millimeter area after 5 iterations or so                  const int impactiterations = 6;                    //do a few iterations of impact site calculations                  for (var i = 0; i < impactiterations; i++)                  {                      if (FlightGlobals.ActiveVessel.orbit.PeA >= this.impactAltitude)                      {                          //periapsis must be lower than impact alt                          this.impactHappening = false;                      }                      if ((FlightGlobals.ActiveVessel.orbit.eccentricity < 1) && (FlightGlobals.ActiveVessel.orbit.ApA <= this.impactAltitude))                      {                          //apoapsis must be higher than impact alt                          this.impactHappening = false;                      }                      if ((FlightGlobals.ActiveVessel.orbit.eccentricity >= 1) && (FlightGlobals.ActiveVessel.orbit.timeToPe <= 0))                      {                          //if currently escaping' we still need to be before periapsis                          this.impactHappening = false;                      }                      if (!this.impactHappening)                      {                          this.impactTime = 0;                          this.impactLongitude = 0;                          this.impactLatitude = 0;                          this.impactAltitude = 0;                          break;                      }                        double impacttheta = 0;                      if (e > 0)                      {                          //in this step' we are using the calculated impact altitude of the last step' to refine the impact site position                          double costheta = (FlightGlobals.ActiveVessel.orbit.PeR * (1 + e) / (FlightGlobals.ActiveVessel.mainBody.Radius + this.impactAltitude) - 1) / e;                          if (costheta < -1d)                              costheta = -1d;                          else if (costheta > 1d)                              costheta = 1d;                          impacttheta = -180 * Math.Acos(costheta) / Math.PI;                      }                        //calculate time to impact                      this.impactTime = FlightGlobals.ActiveVessel.orbit.timeToPe - this.TimeToPeriapsis(impacttheta);                      //calculate position vector of impact site                      var impactpos = this.RadiusDirection(impacttheta);                      //calculate longitude of impact site in inertial reference frame                      var impactirflong = 180 * Math.Atan2(impactpos.x' impactpos.y) / Math.PI;                      var deltairflong = impactirflong - currentirflong;                      //get body rotation until impact                      var bodyrot = 360 * this.impactTime / FlightGlobals.ActiveVessel.mainBody.rotationPeriod;                      //get current longitude in body coordinates                      var currentlong = FlightGlobals.ActiveVessel.longitude;                      //finally' calculate the impact longitude in body coordinates                      this.impactLongitude = this.NormAngle(currentlong - deltairflong - bodyrot);                      //calculate impact latitude from impact position                      this.impactLatitude = 180 * Math.Asin(impactpos.z / impactpos.magnitude) / Math.PI;                      //calculate the actual altitude of the impact site                      //altitude for long/lat code stolen from some ISA MapSat forum post; who knows why this works' but it seems to.                      var rad = QuaternionD.AngleAxis(this.impactLongitude' Vector3d.down) * QuaternionD.AngleAxis(this.impactLatitude' Vector3d.forward) * Vector3d.right;                      this.impactAltitude = FlightGlobals.ActiveVessel.mainBody.pqsController.GetSurfaceHeight(rad) - FlightGlobals.ActiveVessel.mainBody.pqsController.radius;                      if ((this.impactAltitude < 0) && FlightGlobals.ActiveVessel.mainBody.ocean)                      {                          this.impactAltitude = 0;                      }                  }              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel.mainBody.pqsController != null)              {                  //do impact site calculations                  this.impactHappening = true;                  this.impactTime = 0;                  this.impactLongitude = 0;                  this.impactLatitude = 0;                  this.impactAltitude = 0;                  var e = FlightGlobals.ActiveVessel.orbit.eccentricity;                  //get current position direction vector                  var currentpos = this.RadiusDirection(FlightGlobals.ActiveVessel.orbit.trueAnomaly * Units.RAD_TO_DEG);                  //calculate longitude in inertial reference frame from that                  var currentirflong = 180 * Math.Atan2(currentpos.x' currentpos.y) / Math.PI;                    //experimentally determined; even for very flat trajectories' the errors go into the sub-millimeter area after 5 iterations or so                  const int impactiterations = 6;                    //do a few iterations of impact site calculations                  for (var i = 0; i < impactiterations; i++)                  {                      if (FlightGlobals.ActiveVessel.orbit.PeA >= this.impactAltitude)                      {                          //periapsis must be lower than impact alt                          this.impactHappening = false;                      }                      if ((FlightGlobals.ActiveVessel.orbit.eccentricity < 1) && (FlightGlobals.ActiveVessel.orbit.ApA <= this.impactAltitude))                      {                          //apoapsis must be higher than impact alt                          this.impactHappening = false;                      }                      if ((FlightGlobals.ActiveVessel.orbit.eccentricity >= 1) && (FlightGlobals.ActiveVessel.orbit.timeToPe <= 0))                      {                          //if currently escaping' we still need to be before periapsis                          this.impactHappening = false;                      }                      if (!this.impactHappening)                      {                          this.impactTime = 0;                          this.impactLongitude = 0;                          this.impactLatitude = 0;                          this.impactAltitude = 0;                          break;                      }                        double impacttheta = 0;                      if (e > 0)                      {                          //in this step' we are using the calculated impact altitude of the last step' to refine the impact site position                          double costheta = (FlightGlobals.ActiveVessel.orbit.PeR * (1 + e) / (FlightGlobals.ActiveVessel.mainBody.Radius + this.impactAltitude) - 1) / e;                          if (costheta < -1d)                              costheta = -1d;                          else if (costheta > 1d)                              costheta = 1d;                          impacttheta = -180 * Math.Acos(costheta) / Math.PI;                      }                        //calculate time to impact                      this.impactTime = FlightGlobals.ActiveVessel.orbit.timeToPe - this.TimeToPeriapsis(impacttheta);                      //calculate position vector of impact site                      var impactpos = this.RadiusDirection(impacttheta);                      //calculate longitude of impact site in inertial reference frame                      var impactirflong = 180 * Math.Atan2(impactpos.x' impactpos.y) / Math.PI;                      var deltairflong = impactirflong - currentirflong;                      //get body rotation until impact                      var bodyrot = 360 * this.impactTime / FlightGlobals.ActiveVessel.mainBody.rotationPeriod;                      //get current longitude in body coordinates                      var currentlong = FlightGlobals.ActiveVessel.longitude;                      //finally' calculate the impact longitude in body coordinates                      this.impactLongitude = this.NormAngle(currentlong - deltairflong - bodyrot);                      //calculate impact latitude from impact position                      this.impactLatitude = 180 * Math.Asin(impactpos.z / impactpos.magnitude) / Math.PI;                      //calculate the actual altitude of the impact site                      //altitude for long/lat code stolen from some ISA MapSat forum post; who knows why this works' but it seems to.                      var rad = QuaternionD.AngleAxis(this.impactLongitude' Vector3d.down) * QuaternionD.AngleAxis(this.impactLatitude' Vector3d.forward) * Vector3d.right;                      this.impactAltitude = FlightGlobals.ActiveVessel.mainBody.pqsController.GetSurfaceHeight(rad) - FlightGlobals.ActiveVessel.mainBody.pqsController.radius;                      if ((this.impactAltitude < 0) && FlightGlobals.ActiveVessel.mainBody.ocean)                      {                          this.impactAltitude = 0;                      }                  }              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel.mainBody.pqsController != null)              {                  //do impact site calculations                  this.impactHappening = true;                  this.impactTime = 0;                  this.impactLongitude = 0;                  this.impactLatitude = 0;                  this.impactAltitude = 0;                  var e = FlightGlobals.ActiveVessel.orbit.eccentricity;                  //get current position direction vector                  var currentpos = this.RadiusDirection(FlightGlobals.ActiveVessel.orbit.trueAnomaly * Units.RAD_TO_DEG);                  //calculate longitude in inertial reference frame from that                  var currentirflong = 180 * Math.Atan2(currentpos.x' currentpos.y) / Math.PI;                    //experimentally determined; even for very flat trajectories' the errors go into the sub-millimeter area after 5 iterations or so                  const int impactiterations = 6;                    //do a few iterations of impact site calculations                  for (var i = 0; i < impactiterations; i++)                  {                      if (FlightGlobals.ActiveVessel.orbit.PeA >= this.impactAltitude)                      {                          //periapsis must be lower than impact alt                          this.impactHappening = false;                      }                      if ((FlightGlobals.ActiveVessel.orbit.eccentricity < 1) && (FlightGlobals.ActiveVessel.orbit.ApA <= this.impactAltitude))                      {                          //apoapsis must be higher than impact alt                          this.impactHappening = false;                      }                      if ((FlightGlobals.ActiveVessel.orbit.eccentricity >= 1) && (FlightGlobals.ActiveVessel.orbit.timeToPe <= 0))                      {                          //if currently escaping' we still need to be before periapsis                          this.impactHappening = false;                      }                      if (!this.impactHappening)                      {                          this.impactTime = 0;                          this.impactLongitude = 0;                          this.impactLatitude = 0;                          this.impactAltitude = 0;                          break;                      }                        double impacttheta = 0;                      if (e > 0)                      {                          //in this step' we are using the calculated impact altitude of the last step' to refine the impact site position                          double costheta = (FlightGlobals.ActiveVessel.orbit.PeR * (1 + e) / (FlightGlobals.ActiveVessel.mainBody.Radius + this.impactAltitude) - 1) / e;                          if (costheta < -1d)                              costheta = -1d;                          else if (costheta > 1d)                              costheta = 1d;                          impacttheta = -180 * Math.Acos(costheta) / Math.PI;                      }                        //calculate time to impact                      this.impactTime = FlightGlobals.ActiveVessel.orbit.timeToPe - this.TimeToPeriapsis(impacttheta);                      //calculate position vector of impact site                      var impactpos = this.RadiusDirection(impacttheta);                      //calculate longitude of impact site in inertial reference frame                      var impactirflong = 180 * Math.Atan2(impactpos.x' impactpos.y) / Math.PI;                      var deltairflong = impactirflong - currentirflong;                      //get body rotation until impact                      var bodyrot = 360 * this.impactTime / FlightGlobals.ActiveVessel.mainBody.rotationPeriod;                      //get current longitude in body coordinates                      var currentlong = FlightGlobals.ActiveVessel.longitude;                      //finally' calculate the impact longitude in body coordinates                      this.impactLongitude = this.NormAngle(currentlong - deltairflong - bodyrot);                      //calculate impact latitude from impact position                      this.impactLatitude = 180 * Math.Asin(impactpos.z / impactpos.magnitude) / Math.PI;                      //calculate the actual altitude of the impact site                      //altitude for long/lat code stolen from some ISA MapSat forum post; who knows why this works' but it seems to.                      var rad = QuaternionD.AngleAxis(this.impactLongitude' Vector3d.down) * QuaternionD.AngleAxis(this.impactLatitude' Vector3d.forward) * Vector3d.right;                      this.impactAltitude = FlightGlobals.ActiveVessel.mainBody.pqsController.GetSurfaceHeight(rad) - FlightGlobals.ActiveVessel.mainBody.pqsController.radius;                      if ((this.impactAltitude < 0) && FlightGlobals.ActiveVessel.mainBody.ocean)                      {                          this.impactAltitude = 0;                      }                  }              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel.mainBody.pqsController != null)              {                  //do impact site calculations                  this.impactHappening = true;                  this.impactTime = 0;                  this.impactLongitude = 0;                  this.impactLatitude = 0;                  this.impactAltitude = 0;                  var e = FlightGlobals.ActiveVessel.orbit.eccentricity;                  //get current position direction vector                  var currentpos = this.RadiusDirection(FlightGlobals.ActiveVessel.orbit.trueAnomaly * Units.RAD_TO_DEG);                  //calculate longitude in inertial reference frame from that                  var currentirflong = 180 * Math.Atan2(currentpos.x' currentpos.y) / Math.PI;                    //experimentally determined; even for very flat trajectories' the errors go into the sub-millimeter area after 5 iterations or so                  const int impactiterations = 6;                    //do a few iterations of impact site calculations                  for (var i = 0; i < impactiterations; i++)                  {                      if (FlightGlobals.ActiveVessel.orbit.PeA >= this.impactAltitude)                      {                          //periapsis must be lower than impact alt                          this.impactHappening = false;                      }                      if ((FlightGlobals.ActiveVessel.orbit.eccentricity < 1) && (FlightGlobals.ActiveVessel.orbit.ApA <= this.impactAltitude))                      {                          //apoapsis must be higher than impact alt                          this.impactHappening = false;                      }                      if ((FlightGlobals.ActiveVessel.orbit.eccentricity >= 1) && (FlightGlobals.ActiveVessel.orbit.timeToPe <= 0))                      {                          //if currently escaping' we still need to be before periapsis                          this.impactHappening = false;                      }                      if (!this.impactHappening)                      {                          this.impactTime = 0;                          this.impactLongitude = 0;                          this.impactLatitude = 0;                          this.impactAltitude = 0;                          break;                      }                        double impacttheta = 0;                      if (e > 0)                      {                          //in this step' we are using the calculated impact altitude of the last step' to refine the impact site position                          double costheta = (FlightGlobals.ActiveVessel.orbit.PeR * (1 + e) / (FlightGlobals.ActiveVessel.mainBody.Radius + this.impactAltitude) - 1) / e;                          if (costheta < -1d)                              costheta = -1d;                          else if (costheta > 1d)                              costheta = 1d;                          impacttheta = -180 * Math.Acos(costheta) / Math.PI;                      }                        //calculate time to impact                      this.impactTime = FlightGlobals.ActiveVessel.orbit.timeToPe - this.TimeToPeriapsis(impacttheta);                      //calculate position vector of impact site                      var impactpos = this.RadiusDirection(impacttheta);                      //calculate longitude of impact site in inertial reference frame                      var impactirflong = 180 * Math.Atan2(impactpos.x' impactpos.y) / Math.PI;                      var deltairflong = impactirflong - currentirflong;                      //get body rotation until impact                      var bodyrot = 360 * this.impactTime / FlightGlobals.ActiveVessel.mainBody.rotationPeriod;                      //get current longitude in body coordinates                      var currentlong = FlightGlobals.ActiveVessel.longitude;                      //finally' calculate the impact longitude in body coordinates                      this.impactLongitude = this.NormAngle(currentlong - deltairflong - bodyrot);                      //calculate impact latitude from impact position                      this.impactLatitude = 180 * Math.Asin(impactpos.z / impactpos.magnitude) / Math.PI;                      //calculate the actual altitude of the impact site                      //altitude for long/lat code stolen from some ISA MapSat forum post; who knows why this works' but it seems to.                      var rad = QuaternionD.AngleAxis(this.impactLongitude' Vector3d.down) * QuaternionD.AngleAxis(this.impactLatitude' Vector3d.forward) * Vector3d.right;                      this.impactAltitude = FlightGlobals.ActiveVessel.mainBody.pqsController.GetSurfaceHeight(rad) - FlightGlobals.ActiveVessel.mainBody.pqsController.radius;                      if ((this.impactAltitude < 0) && FlightGlobals.ActiveVessel.mainBody.ocean)                      {                          this.impactAltitude = 0;                      }                  }              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel.mainBody.pqsController != null)              {                  //do impact site calculations                  this.impactHappening = true;                  this.impactTime = 0;                  this.impactLongitude = 0;                  this.impactLatitude = 0;                  this.impactAltitude = 0;                  var e = FlightGlobals.ActiveVessel.orbit.eccentricity;                  //get current position direction vector                  var currentpos = this.RadiusDirection(FlightGlobals.ActiveVessel.orbit.trueAnomaly * Units.RAD_TO_DEG);                  //calculate longitude in inertial reference frame from that                  var currentirflong = 180 * Math.Atan2(currentpos.x' currentpos.y) / Math.PI;                    //experimentally determined; even for very flat trajectories' the errors go into the sub-millimeter area after 5 iterations or so                  const int impactiterations = 6;                    //do a few iterations of impact site calculations                  for (var i = 0; i < impactiterations; i++)                  {                      if (FlightGlobals.ActiveVessel.orbit.PeA >= this.impactAltitude)                      {                          //periapsis must be lower than impact alt                          this.impactHappening = false;                      }                      if ((FlightGlobals.ActiveVessel.orbit.eccentricity < 1) && (FlightGlobals.ActiveVessel.orbit.ApA <= this.impactAltitude))                      {                          //apoapsis must be higher than impact alt                          this.impactHappening = false;                      }                      if ((FlightGlobals.ActiveVessel.orbit.eccentricity >= 1) && (FlightGlobals.ActiveVessel.orbit.timeToPe <= 0))                      {                          //if currently escaping' we still need to be before periapsis                          this.impactHappening = false;                      }                      if (!this.impactHappening)                      {                          this.impactTime = 0;                          this.impactLongitude = 0;                          this.impactLatitude = 0;                          this.impactAltitude = 0;                          break;                      }                        double impacttheta = 0;                      if (e > 0)                      {                          //in this step' we are using the calculated impact altitude of the last step' to refine the impact site position                          double costheta = (FlightGlobals.ActiveVessel.orbit.PeR * (1 + e) / (FlightGlobals.ActiveVessel.mainBody.Radius + this.impactAltitude) - 1) / e;                          if (costheta < -1d)                              costheta = -1d;                          else if (costheta > 1d)                              costheta = 1d;                          impacttheta = -180 * Math.Acos(costheta) / Math.PI;                      }                        //calculate time to impact                      this.impactTime = FlightGlobals.ActiveVessel.orbit.timeToPe - this.TimeToPeriapsis(impacttheta);                      //calculate position vector of impact site                      var impactpos = this.RadiusDirection(impacttheta);                      //calculate longitude of impact site in inertial reference frame                      var impactirflong = 180 * Math.Atan2(impactpos.x' impactpos.y) / Math.PI;                      var deltairflong = impactirflong - currentirflong;                      //get body rotation until impact                      var bodyrot = 360 * this.impactTime / FlightGlobals.ActiveVessel.mainBody.rotationPeriod;                      //get current longitude in body coordinates                      var currentlong = FlightGlobals.ActiveVessel.longitude;                      //finally' calculate the impact longitude in body coordinates                      this.impactLongitude = this.NormAngle(currentlong - deltairflong - bodyrot);                      //calculate impact latitude from impact position                      this.impactLatitude = 180 * Math.Asin(impactpos.z / impactpos.magnitude) / Math.PI;                      //calculate the actual altitude of the impact site                      //altitude for long/lat code stolen from some ISA MapSat forum post; who knows why this works' but it seems to.                      var rad = QuaternionD.AngleAxis(this.impactLongitude' Vector3d.down) * QuaternionD.AngleAxis(this.impactLatitude' Vector3d.forward) * Vector3d.right;                      this.impactAltitude = FlightGlobals.ActiveVessel.mainBody.pqsController.GetSurfaceHeight(rad) - FlightGlobals.ActiveVessel.mainBody.pqsController.radius;                      if ((this.impactAltitude < 0) && FlightGlobals.ActiveVessel.mainBody.ocean)                      {                          this.impactAltitude = 0;                      }                  }              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel.mainBody.pqsController != null)              {                  //do impact site calculations                  this.impactHappening = true;                  this.impactTime = 0;                  this.impactLongitude = 0;                  this.impactLatitude = 0;                  this.impactAltitude = 0;                  var e = FlightGlobals.ActiveVessel.orbit.eccentricity;                  //get current position direction vector                  var currentpos = this.RadiusDirection(FlightGlobals.ActiveVessel.orbit.trueAnomaly * Units.RAD_TO_DEG);                  //calculate longitude in inertial reference frame from that                  var currentirflong = 180 * Math.Atan2(currentpos.x' currentpos.y) / Math.PI;                    //experimentally determined; even for very flat trajectories' the errors go into the sub-millimeter area after 5 iterations or so                  const int impactiterations = 6;                    //do a few iterations of impact site calculations                  for (var i = 0; i < impactiterations; i++)                  {                      if (FlightGlobals.ActiveVessel.orbit.PeA >= this.impactAltitude)                      {                          //periapsis must be lower than impact alt                          this.impactHappening = false;                      }                      if ((FlightGlobals.ActiveVessel.orbit.eccentricity < 1) && (FlightGlobals.ActiveVessel.orbit.ApA <= this.impactAltitude))                      {                          //apoapsis must be higher than impact alt                          this.impactHappening = false;                      }                      if ((FlightGlobals.ActiveVessel.orbit.eccentricity >= 1) && (FlightGlobals.ActiveVessel.orbit.timeToPe <= 0))                      {                          //if currently escaping' we still need to be before periapsis                          this.impactHappening = false;                      }                      if (!this.impactHappening)                      {                          this.impactTime = 0;                          this.impactLongitude = 0;                          this.impactLatitude = 0;                          this.impactAltitude = 0;                          break;                      }                        double impacttheta = 0;                      if (e > 0)                      {                          //in this step' we are using the calculated impact altitude of the last step' to refine the impact site position                          double costheta = (FlightGlobals.ActiveVessel.orbit.PeR * (1 + e) / (FlightGlobals.ActiveVessel.mainBody.Radius + this.impactAltitude) - 1) / e;                          if (costheta < -1d)                              costheta = -1d;                          else if (costheta > 1d)                              costheta = 1d;                          impacttheta = -180 * Math.Acos(costheta) / Math.PI;                      }                        //calculate time to impact                      this.impactTime = FlightGlobals.ActiveVessel.orbit.timeToPe - this.TimeToPeriapsis(impacttheta);                      //calculate position vector of impact site                      var impactpos = this.RadiusDirection(impacttheta);                      //calculate longitude of impact site in inertial reference frame                      var impactirflong = 180 * Math.Atan2(impactpos.x' impactpos.y) / Math.PI;                      var deltairflong = impactirflong - currentirflong;                      //get body rotation until impact                      var bodyrot = 360 * this.impactTime / FlightGlobals.ActiveVessel.mainBody.rotationPeriod;                      //get current longitude in body coordinates                      var currentlong = FlightGlobals.ActiveVessel.longitude;                      //finally' calculate the impact longitude in body coordinates                      this.impactLongitude = this.NormAngle(currentlong - deltairflong - bodyrot);                      //calculate impact latitude from impact position                      this.impactLatitude = 180 * Math.Asin(impactpos.z / impactpos.magnitude) / Math.PI;                      //calculate the actual altitude of the impact site                      //altitude for long/lat code stolen from some ISA MapSat forum post; who knows why this works' but it seems to.                      var rad = QuaternionD.AngleAxis(this.impactLongitude' Vector3d.down) * QuaternionD.AngleAxis(this.impactLatitude' Vector3d.forward) * Vector3d.right;                      this.impactAltitude = FlightGlobals.ActiveVessel.mainBody.pqsController.GetSurfaceHeight(rad) - FlightGlobals.ActiveVessel.mainBody.pqsController.radius;                      if ((this.impactAltitude < 0) && FlightGlobals.ActiveVessel.mainBody.ocean)                      {                          this.impactAltitude = 0;                      }                  }              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,NormAngle,The following statement contains a magic number: if (ang > 180)              {                  ang -= 360 * Math.Ceiling((ang - 180) / 360);              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,NormAngle,The following statement contains a magic number: if (ang > 180)              {                  ang -= 360 * Math.Ceiling((ang - 180) / 360);              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,NormAngle,The following statement contains a magic number: if (ang > 180)              {                  ang -= 360 * Math.Ceiling((ang - 180) / 360);              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,NormAngle,The following statement contains a magic number: if (ang > 180)              {                  ang -= 360 * Math.Ceiling((ang - 180) / 360);              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,NormAngle,The following statement contains a magic number: if (ang <= -180)              {                  ang -= 360 * Math.Floor((ang + 180) / 360);              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,NormAngle,The following statement contains a magic number: if (ang <= -180)              {                  ang -= 360 * Math.Floor((ang + 180) / 360);              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,NormAngle,The following statement contains a magic number: if (ang <= -180)              {                  ang -= 360 * Math.Floor((ang + 180) / 360);              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,NormAngle,The following statement contains a magic number: if (ang <= -180)              {                  ang -= 360 * Math.Floor((ang + 180) / 360);              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,RadiusDirection,The following statement contains a magic number: theta = Math.PI * theta / 180;
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,RadiusDirection,The following statement contains a magic number: var omega = Math.PI * FlightGlobals.ActiveVessel.orbit.argumentOfPeriapsis / 180;
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,RadiusDirection,The following statement contains a magic number: var incl = Math.PI * FlightGlobals.ActiveVessel.orbit.inclination / 180;
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,TimeToPeriapsis,The following statement contains a magic number: if (e == 1.0)              {                  var D = Math.Tan(Math.PI * theta / 360.0);                  var M = D + D * D * D / 3.0;                  return (Math.Sqrt(2.0 * rp * rp * rp / mu) * M);              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,TimeToPeriapsis,The following statement contains a magic number: if (e == 1.0)              {                  var D = Math.Tan(Math.PI * theta / 360.0);                  var M = D + D * D * D / 3.0;                  return (Math.Sqrt(2.0 * rp * rp * rp / mu) * M);              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,TimeToPeriapsis,The following statement contains a magic number: if (e == 1.0)              {                  var D = Math.Tan(Math.PI * theta / 360.0);                  var M = D + D * D * D / 3.0;                  return (Math.Sqrt(2.0 * rp * rp * rp / mu) * M);              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,TimeToPeriapsis,The following statement contains a magic number: if (a > 0)              {                  var cosTheta = Math.Cos(Math.PI * theta / 180.0);                  var cosE = (e + cosTheta) / (1.0 + e * cosTheta);                  var radE = Math.Acos(cosE);                  var M = radE - e * Math.Sin(radE);                  return (Math.Sqrt(a * a * a / mu) * M);              }
Magic Number,KerbalEngineer.Flight.Readouts.Surface,ImpactProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\ImpactProcessor.cs,TimeToPeriapsis,The following statement contains a magic number: if (a < 0)              {                  var cosTheta = Math.Cos(Math.PI * theta / 180.0);                  var coshF = (e + cosTheta) / (1.0 + e * cosTheta);                  var radF = ACosh(coshF);                  var M = e * Math.Sinh(radF) - radF;                  return (Math.Sqrt(-a * a * a / mu) * M);              }
Magic Number,KerbalEngineer.Flight.Readouts.Vessel,SimulationProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\SimulationProcessor.cs,Update,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null)              {                  SimManager.Gravity = FlightGlobals.ActiveVessel.mainBody.gravParameter /                                       Math.Pow(FlightGlobals.ActiveVessel.mainBody.Radius +                                                FlightGlobals.ActiveVessel.mainBody.GetAltitude(FlightGlobals.ActiveVessel.CoM)' 2);                  SimManager.Mach = FlightGlobals.ActiveVessel.mach;              }
Magic Number,KerbalEngineer.Flight.Readouts.Vessel,SuicideBurnProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\SuicideBurnProcessor.cs,Update,The following statement contains a magic number: m_Gravity = FlightGlobals.currentMainBody.gravParameter / Math.Pow(FlightGlobals.currentMainBody.Radius' 2.0);
Magic Number,KerbalEngineer.Flight.Readouts.Vessel,SuicideBurnProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\SuicideBurnProcessor.cs,Update,The following statement contains a magic number: DeltaV = Math.Sqrt((2 * m_Gravity * m_RadarAltitude) + Math.Pow(FlightGlobals.ship_verticalSpeed' 2.0));
Magic Number,KerbalEngineer.Flight.Readouts.Vessel,SuicideBurnProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\SuicideBurnProcessor.cs,Update,The following statement contains a magic number: DeltaV = Math.Sqrt((2 * m_Gravity * m_RadarAltitude) + Math.Pow(FlightGlobals.ship_verticalSpeed' 2.0));
Magic Number,KerbalEngineer.Flight.Readouts.Vessel,SuicideBurnProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\SuicideBurnProcessor.cs,Update,The following statement contains a magic number: Altitude = Math.Pow(DeltaV' 2.0) / (2.0 * m_Acceleration);
Magic Number,KerbalEngineer.Flight.Readouts.Vessel,SuicideBurnProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\SuicideBurnProcessor.cs,Update,The following statement contains a magic number: Altitude = Math.Pow(DeltaV' 2.0) / (2.0 * m_Acceleration);
Magic Number,KerbalEngineer.Flight.Readouts.Vessel,SurfaceThrustToWeight,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Vessel\SurfaceThrustToWeight.cs,Draw,The following statement contains a magic number: m_Gravity = FlightGlobals.currentMainBody.gravParameter / Math.Pow(FlightGlobals.currentMainBody.Radius' 2);
Magic Number,KerbalEngineer.Helpers,AngleHelper,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\AngleHelper.cs,Clamp180,The following statement contains a magic number: if (angle.IsValid())              {                  if (angle < -180.0)                  {                      do                      {                          angle += 360.0;                      }                      while (angle < -180.0);                  }                  else if (angle > 180.0)                  {                      do                      {                          angle -= 360.0;                      }                      while (angle > 180.0);                  }              }
Magic Number,KerbalEngineer.Helpers,AngleHelper,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\AngleHelper.cs,Clamp180,The following statement contains a magic number: if (angle.IsValid())              {                  if (angle < -180.0)                  {                      do                      {                          angle += 360.0;                      }                      while (angle < -180.0);                  }                  else if (angle > 180.0)                  {                      do                      {                          angle -= 360.0;                      }                      while (angle > 180.0);                  }              }
Magic Number,KerbalEngineer.Helpers,AngleHelper,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\AngleHelper.cs,Clamp180,The following statement contains a magic number: if (angle.IsValid())              {                  if (angle < -180.0)                  {                      do                      {                          angle += 360.0;                      }                      while (angle < -180.0);                  }                  else if (angle > 180.0)                  {                      do                      {                          angle -= 360.0;                      }                      while (angle > 180.0);                  }              }
Magic Number,KerbalEngineer.Helpers,AngleHelper,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\AngleHelper.cs,Clamp180,The following statement contains a magic number: if (angle.IsValid())              {                  if (angle < -180.0)                  {                      do                      {                          angle += 360.0;                      }                      while (angle < -180.0);                  }                  else if (angle > 180.0)                  {                      do                      {                          angle -= 360.0;                      }                      while (angle > 180.0);                  }              }
Magic Number,KerbalEngineer.Helpers,AngleHelper,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\AngleHelper.cs,Clamp180,The following statement contains a magic number: if (angle.IsValid())              {                  if (angle < -180.0)                  {                      do                      {                          angle += 360.0;                      }                      while (angle < -180.0);                  }                  else if (angle > 180.0)                  {                      do                      {                          angle -= 360.0;                      }                      while (angle > 180.0);                  }              }
Magic Number,KerbalEngineer.Helpers,AngleHelper,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\AngleHelper.cs,Clamp180,The following statement contains a magic number: if (angle.IsValid())              {                  if (angle < -180.0)                  {                      do                      {                          angle += 360.0;                      }                      while (angle < -180.0);                  }                  else if (angle > 180.0)                  {                      do                      {                          angle -= 360.0;                      }                      while (angle > 180.0);                  }              }
Magic Number,KerbalEngineer.Helpers,AngleHelper,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\AngleHelper.cs,Clamp360,The following statement contains a magic number: if (angle.IsValid())              {                  if (angle < 0.0)                  {                      do                      {                          angle += 360.0;                      }                      while (angle < 0.0);                  }                  else if (angle >= 360.0)                  {                      do                      {                          angle -= 360.0;                      }                      while (angle >= 360.0);                  }              }
Magic Number,KerbalEngineer.Helpers,AngleHelper,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\AngleHelper.cs,Clamp360,The following statement contains a magic number: if (angle.IsValid())              {                  if (angle < 0.0)                  {                      do                      {                          angle += 360.0;                      }                      while (angle < 0.0);                  }                  else if (angle >= 360.0)                  {                      do                      {                          angle -= 360.0;                      }                      while (angle >= 360.0);                  }              }
Magic Number,KerbalEngineer.Helpers,AngleHelper,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\AngleHelper.cs,Clamp360,The following statement contains a magic number: if (angle.IsValid())              {                  if (angle < 0.0)                  {                      do                      {                          angle += 360.0;                      }                      while (angle < 0.0);                  }                  else if (angle >= 360.0)                  {                      do                      {                          angle -= 360.0;                      }                      while (angle >= 360.0);                  }              }
Magic Number,KerbalEngineer.Helpers,AngleHelper,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\AngleHelper.cs,Clamp360,The following statement contains a magic number: if (angle.IsValid())              {                  if (angle < 0.0)                  {                      do                      {                          angle += 360.0;                      }                      while (angle < 0.0);                  }                  else if (angle >= 360.0)                  {                      do                      {                          angle -= 360.0;                      }                      while (angle >= 360.0);                  }              }
Magic Number,KerbalEngineer.Helpers,AngleHelper,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\AngleHelper.cs,GetAngleBetweenVectors,The following statement contains a magic number: Vector3d rotated = QuaternionD.AngleAxis(90.0' Vector3d.forward) * right;
Magic Number,KerbalEngineer.Helpers,AngleHelper,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\AngleHelper.cs,GetAngleBetweenVectors,The following statement contains a magic number: if (Vector3d.Angle(rotated' left) > 90.0)              {                  return 360.0 - angle;              }
Magic Number,KerbalEngineer.Helpers,AngleHelper,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\AngleHelper.cs,GetAngleBetweenVectors,The following statement contains a magic number: if (Vector3d.Angle(rotated' left) > 90.0)              {                  return 360.0 - angle;              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,Cost,The following statement contains a magic number: if (value >= 1000000.0)              {                  return (value / 1000.0).ToString("N" + decimals) + "K";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,Cost,The following statement contains a magic number: if (value >= 1000000.0)              {                  return (value / 1000.0).ToString("N" + decimals) + "K";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,Cost,The following statement contains a magic number: if (value1 >= 1000000.0 || value2 >= 1000000.0)              {                  return (value1 / 1000.0).ToString("N" + decimals) + " / " + (value2 / 1000.0).ToString("N" + decimals) + "K";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,Cost,The following statement contains a magic number: if (value1 >= 1000000.0 || value2 >= 1000000.0)              {                  return (value1 / 1000.0).ToString("N" + decimals) + " / " + (value2 / 1000.0).ToString("N" + decimals) + "K";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,Cost,The following statement contains a magic number: if (value1 >= 1000000.0 || value2 >= 1000000.0)              {                  return (value1 / 1000.0).ToString("N" + decimals) + " / " + (value2 / 1000.0).ToString("N" + decimals) + "K";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,Cost,The following statement contains a magic number: if (value1 >= 1000000.0 || value2 >= 1000000.0)              {                  return (value1 / 1000.0).ToString("N" + decimals) + " / " + (value2 / 1000.0).ToString("N" + decimals) + "K";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToAngleDMS,The following statement contains a magic number: int min = (int)Math.Floor(rem * 60);
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToAngleDMS,The following statement contains a magic number: rem -= ((double)min / 60);
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToAngleDMS,The following statement contains a magic number: int sec = (int)Math.Floor(rem * 3600);
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToDistance,The following statement contains a magic number: if (Math.Abs(value) < 1000000.0)              {                  if (Math.Abs(value) >= 10.0)                  {                      return value.ToString("N" + decimals) + "m";                  }                    value *= 100.0;                  if (Math.Abs(value) >= 100.0)                  {                      return value.ToString("N" + decimals) + "cm";                  }                    value *= 10.0;                  return value.ToString("N" + decimals) + "mm";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToDistance,The following statement contains a magic number: if (Math.Abs(value) < 1000000.0)              {                  if (Math.Abs(value) >= 10.0)                  {                      return value.ToString("N" + decimals) + "m";                  }                    value *= 100.0;                  if (Math.Abs(value) >= 100.0)                  {                      return value.ToString("N" + decimals) + "cm";                  }                    value *= 10.0;                  return value.ToString("N" + decimals) + "mm";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToDistance,The following statement contains a magic number: if (Math.Abs(value) < 1000000.0)              {                  if (Math.Abs(value) >= 10.0)                  {                      return value.ToString("N" + decimals) + "m";                  }                    value *= 100.0;                  if (Math.Abs(value) >= 100.0)                  {                      return value.ToString("N" + decimals) + "cm";                  }                    value *= 10.0;                  return value.ToString("N" + decimals) + "mm";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToDistance,The following statement contains a magic number: if (Math.Abs(value) < 1000000.0)              {                  if (Math.Abs(value) >= 10.0)                  {                      return value.ToString("N" + decimals) + "m";                  }                    value *= 100.0;                  if (Math.Abs(value) >= 100.0)                  {                      return value.ToString("N" + decimals) + "cm";                  }                    value *= 10.0;                  return value.ToString("N" + decimals) + "mm";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToDistance,The following statement contains a magic number: if (Math.Abs(value) < 1000000.0)              {                  if (Math.Abs(value) >= 10.0)                  {                      return value.ToString("N" + decimals) + "m";                  }                    value *= 100.0;                  if (Math.Abs(value) >= 100.0)                  {                      return value.ToString("N" + decimals) + "cm";                  }                    value *= 10.0;                  return value.ToString("N" + decimals) + "mm";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToDistance,The following statement contains a magic number: value /= 1000.0;
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToDistance,The following statement contains a magic number: if (Math.Abs(value) < 1000000.0)              {                  return value.ToString("N" + decimals) + "km";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToDistance,The following statement contains a magic number: value /= 1000.0;
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToForce,The following statement contains a magic number: return value.ToString((value < 100000.0) ? (value < 10000.0) ? (value < 100.0) ? (Math.Abs(value) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0") + "kN";
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToForce,The following statement contains a magic number: return value.ToString((value < 100000.0) ? (value < 10000.0) ? (value < 100.0) ? (Math.Abs(value) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0") + "kN";
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToForce,The following statement contains a magic number: return value.ToString((value < 100000.0) ? (value < 10000.0) ? (value < 100.0) ? (Math.Abs(value) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0") + "kN";
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToForce,The following statement contains a magic number: string format1 = (value1 < 100000.0) ? (value1 < 10000.0) ? (value1 < 100.0) ? (Math.Abs(value1) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0";
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToForce,The following statement contains a magic number: string format1 = (value1 < 100000.0) ? (value1 < 10000.0) ? (value1 < 100.0) ? (Math.Abs(value1) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0";
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToForce,The following statement contains a magic number: string format1 = (value1 < 100000.0) ? (value1 < 10000.0) ? (value1 < 100.0) ? (Math.Abs(value1) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0";
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToForce,The following statement contains a magic number: string format2 = (value2 < 100000.0) ? (value2 < 10000.0) ? (value2 < 100.0) ? (Math.Abs(value2) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0";
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToForce,The following statement contains a magic number: string format2 = (value2 < 100000.0) ? (value2 < 10000.0) ? (value2 < 100.0) ? (Math.Abs(value2) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0";
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToForce,The following statement contains a magic number: string format2 = (value2 < 100000.0) ? (value2 < 10000.0) ? (value2 < 100.0) ? (Math.Abs(value2) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0";
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToMass,The following statement contains a magic number: if (value >= 1000.0)              {                  return value.ToString("N" + decimals + 2) + "t";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToMass,The following statement contains a magic number: if (value >= 1000.0)              {                  return value.ToString("N" + decimals + 2) + "t";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToMass,The following statement contains a magic number: value *= 1000.0;
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToMass,The following statement contains a magic number: if (value1 >= 1000.0f || value2 >= 1000.0f)              {                  return value1.ToString("N" + decimals + 2) + " / " + value2.ToString("N" + decimals + 2) + "t";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToMass,The following statement contains a magic number: if (value1 >= 1000.0f || value2 >= 1000.0f)              {                  return value1.ToString("N" + decimals + 2) + " / " + value2.ToString("N" + decimals + 2) + "t";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToMass,The following statement contains a magic number: value1 *= 1000.0;
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToMass,The following statement contains a magic number: value2 *= 1000.0;
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToPercent,The following statement contains a magic number: value *= 100.0;
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToPressure,The following statement contains a magic number: return value.ToString((value < 100000.0) ? (value < 10000.0) ? (value < 100.0) ? (Math.Abs(value) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0") + "kN/m²";
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToPressure,The following statement contains a magic number: return value.ToString((value < 100000.0) ? (value < 10000.0) ? (value < 100.0) ? (Math.Abs(value) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0") + "kN/m²";
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToPressure,The following statement contains a magic number: return value.ToString((value < 100000.0) ? (value < 10000.0) ? (value < 100.0) ? (Math.Abs(value) < double.Epsilon) ? "N0" : "N3" : "N2" : "N1" : "N0") + "kN/m²";
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToRate,The following statement contains a magic number: return value < 1.0 ? (value * 60.0).ToString("F" + decimals) + "/min" : value.ToString("F" + decimals) + "/sec";
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToSpeed,The following statement contains a magic number: if (Math.Abs(value) < 1.0)              {                  return (value * 1000.0).ToString("N" + decimals) + "mm/s";              }
Magic Number,KerbalEngineer.Helpers,Units,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\Units.cs,ToTorque,The following statement contains a magic number: return value.ToString((value < 100.0) ? (Math.Abs(value) < double.Epsilon) ? "N0" : "N2" : "N0") + "kNm";
Magic Number,KerbalEngineer.Helpers,TimeFormatter,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\TimeFormatter.cs,ConvertToString,The following statement contains a magic number: if (seconds > 0.0)              {                  years = (int)(seconds / KSPUtil.dateTimeFormatter.Year);                  seconds -= years * KSPUtil.dateTimeFormatter.Year;                    days = (int)(seconds / KSPUtil.dateTimeFormatter.Day);                  seconds -= days * KSPUtil.dateTimeFormatter.Day;                    hours = (int)(seconds / 3600.0);                  seconds -= hours * 3600.0;                    minutes = (int)(seconds / 60.0);                  seconds -= minutes * 60.0;              }
Magic Number,KerbalEngineer.Helpers,TimeFormatter,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\TimeFormatter.cs,ConvertToString,The following statement contains a magic number: if (seconds > 0.0)              {                  years = (int)(seconds / KSPUtil.dateTimeFormatter.Year);                  seconds -= years * KSPUtil.dateTimeFormatter.Year;                    days = (int)(seconds / KSPUtil.dateTimeFormatter.Day);                  seconds -= days * KSPUtil.dateTimeFormatter.Day;                    hours = (int)(seconds / 3600.0);                  seconds -= hours * 3600.0;                    minutes = (int)(seconds / 60.0);                  seconds -= minutes * 60.0;              }
Magic Number,KerbalEngineer.Helpers,TimeFormatter,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\TimeFormatter.cs,ConvertToString,The following statement contains a magic number: if (seconds > 0.0)              {                  years = (int)(seconds / KSPUtil.dateTimeFormatter.Year);                  seconds -= years * KSPUtil.dateTimeFormatter.Year;                    days = (int)(seconds / KSPUtil.dateTimeFormatter.Day);                  seconds -= days * KSPUtil.dateTimeFormatter.Day;                    hours = (int)(seconds / 3600.0);                  seconds -= hours * 3600.0;                    minutes = (int)(seconds / 60.0);                  seconds -= minutes * 60.0;              }
Magic Number,KerbalEngineer.Helpers,TimeFormatter,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Helpers\TimeFormatter.cs,ConvertToString,The following statement contains a magic number: if (seconds > 0.0)              {                  years = (int)(seconds / KSPUtil.dateTimeFormatter.Year);                  seconds -= years * KSPUtil.dateTimeFormatter.Year;                    days = (int)(seconds / KSPUtil.dateTimeFormatter.Day);                  seconds -= days * KSPUtil.dateTimeFormatter.Day;                    hours = (int)(seconds / 3600.0);                  seconds -= hours * 3600.0;                    minutes = (int)(seconds / 60.0);                  seconds -= minutes * 60.0;              }
Magic Number,KerbalEngineer.UIControls,DropDown,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\UIControls\DropDown.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/DropDownBackground"' false)                      }'                      border = new RectOffset(8' 8' 1' 8)'                      margin = new RectOffset()'                      padding = new RectOffset(5' 5' 5' 5)                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex);              }
Magic Number,KerbalEngineer.UIControls,DropDown,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\UIControls\DropDown.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/DropDownBackground"' false)                      }'                      border = new RectOffset(8' 8' 1' 8)'                      margin = new RectOffset()'                      padding = new RectOffset(5' 5' 5' 5)                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex);              }
Magic Number,KerbalEngineer.UIControls,DropDown,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\UIControls\DropDown.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/DropDownBackground"' false)                      }'                      border = new RectOffset(8' 8' 1' 8)'                      margin = new RectOffset()'                      padding = new RectOffset(5' 5' 5' 5)                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex);              }
Magic Number,KerbalEngineer.UIControls,DropDown,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\UIControls\DropDown.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/DropDownBackground"' false)                      }'                      border = new RectOffset(8' 8' 1' 8)'                      margin = new RectOffset()'                      padding = new RectOffset(5' 5' 5' 5)                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex);              }
Magic Number,KerbalEngineer.UIControls,DropDown,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\UIControls\DropDown.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/DropDownBackground"' false)                      }'                      border = new RectOffset(8' 8' 1' 8)'                      margin = new RectOffset()'                      padding = new RectOffset(5' 5' 5' 5)                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex);              }
Magic Number,KerbalEngineer.UIControls,DropDown,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\UIControls\DropDown.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/DropDownBackground"' false)                      }'                      border = new RectOffset(8' 8' 1' 8)'                      margin = new RectOffset()'                      padding = new RectOffset(5' 5' 5' 5)                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex);              }
Magic Number,KerbalEngineer.UIControls,DropDown,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\UIControls\DropDown.cs,InitialiseStyles,The following statement contains a magic number: try              {                  this.windowStyle = new GUIStyle                  {                      normal =                      {                          background = GameDatabase.Instance.GetTexture("KerbalEngineer/Textures/DropDownBackground"' false)                      }'                      border = new RectOffset(8' 8' 1' 8)'                      margin = new RectOffset()'                      padding = new RectOffset(5' 5' 5' 5)                  };              }              catch (Exception ex)              {                  MyLogger.Exception(ex);              }
Magic Number,KerbalEngineer.UIControls,DropDown,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\UIControls\DropDown.cs,Update,The following statement contains a magic number: try              {                  if ((Input.GetMouseButtonDown(0) || Input.GetMouseButtonDown(1) || Input.GetMouseButtonDown(2)) && !this.position.MouseIsOver() && !this.button.MouseIsOver())                  {                      this.enabled = false;                  }              }              catch (Exception ex)              {                  MyLogger.Exception(ex);              }
Magic Number,KerbalEngineer.Flight.Readouts,ReadoutModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutModule.cs,DrawLine,The following statement contains a magic number: if (!compact)              {                  GUILayout.Label(this.Name' this.NameStyle);                  GUILayout.FlexibleSpace();                  GUILayout.Label(value.ToLength(20)' this.ValueStyle);              }              else              {                  GUILayout.Label(this.Name' this.NameStyle' GUILayout.Height(this.NameStyle.fontSize * 1.2f));                  GUILayout.FlexibleSpace();                  GUILayout.Label(value.ToLength(20)' this.ValueStyle' GUILayout.Height(this.ValueStyle.fontSize * 1.2f));              }
Magic Number,KerbalEngineer.Flight.Readouts,ReadoutModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutModule.cs,DrawLine,The following statement contains a magic number: if (!compact)              {                  GUILayout.Label(this.Name' this.NameStyle);                  GUILayout.FlexibleSpace();                  GUILayout.Label(value.ToLength(20)' this.ValueStyle);              }              else              {                  GUILayout.Label(this.Name' this.NameStyle' GUILayout.Height(this.NameStyle.fontSize * 1.2f));                  GUILayout.FlexibleSpace();                  GUILayout.Label(value.ToLength(20)' this.ValueStyle' GUILayout.Height(this.ValueStyle.fontSize * 1.2f));              }
Magic Number,KerbalEngineer.Flight.Readouts,ReadoutModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutModule.cs,DrawLine,The following statement contains a magic number: if (!compact)              {                  GUILayout.Label(name' this.NameStyle);                  GUILayout.FlexibleSpace();                  GUILayout.Label(value.ToLength(20)' this.ValueStyle);              }              else              {                  GUILayout.Label(name' this.NameStyle' GUILayout.Height(this.NameStyle.fontSize * 1.2f));                  GUILayout.FlexibleSpace();                  GUILayout.Label(value.ToLength(20)' this.ValueStyle' GUILayout.Height(this.ValueStyle.fontSize * 1.2f));              }
Magic Number,KerbalEngineer.Flight.Readouts,ReadoutModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutModule.cs,DrawLine,The following statement contains a magic number: if (!compact)              {                  GUILayout.Label(name' this.NameStyle);                  GUILayout.FlexibleSpace();                  GUILayout.Label(value.ToLength(20)' this.ValueStyle);              }              else              {                  GUILayout.Label(name' this.NameStyle' GUILayout.Height(this.NameStyle.fontSize * 1.2f));                  GUILayout.FlexibleSpace();                  GUILayout.Label(value.ToLength(20)' this.ValueStyle' GUILayout.Height(this.ValueStyle.fontSize * 1.2f));              }
Magic Number,KerbalEngineer.Flight.Readouts,ReadoutModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutModule.cs,InitialiseStyles,The following statement contains a magic number: this.NameStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset(5' 0' 0' 0)'                  alignment = TextAnchor.MiddleLeft'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  fixedHeight = 20.0f * GuiDisplaySize.Offset              };
Magic Number,KerbalEngineer.Flight.Readouts,ReadoutModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutModule.cs,InitialiseStyles,The following statement contains a magic number: this.NameStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset(5' 0' 0' 0)'                  alignment = TextAnchor.MiddleLeft'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  fixedHeight = 20.0f * GuiDisplaySize.Offset              };
Magic Number,KerbalEngineer.Flight.Readouts,ReadoutModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutModule.cs,InitialiseStyles,The following statement contains a magic number: this.ValueStyle = new GUIStyle(HighLogic.Skin.label)              {                  margin = new RectOffset()'                  padding = new RectOffset(0' 5' 0' 0)'                  alignment = TextAnchor.MiddleRight'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Normal'                  fixedHeight = 20.0f * GuiDisplaySize.Offset              };
Magic Number,KerbalEngineer.Flight.Readouts,ReadoutModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutModule.cs,InitialiseStyles,The following statement contains a magic number: this.ValueStyle = new GUIStyle(HighLogic.Skin.label)              {                  margin = new RectOffset()'                  padding = new RectOffset(0' 5' 0' 0)'                  alignment = TextAnchor.MiddleRight'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Normal'                  fixedHeight = 20.0f * GuiDisplaySize.Offset              };
Magic Number,KerbalEngineer.Flight.Readouts,ReadoutModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutModule.cs,InitialiseStyles,The following statement contains a magic number: this.MessageStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleCenter'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Normal'                  fixedHeight = 20.0f * GuiDisplaySize.Offset'                  stretchWidth = true              };
Magic Number,KerbalEngineer.Flight.Readouts,ReadoutModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutModule.cs,InitialiseStyles,The following statement contains a magic number: this.ButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(0' 0' 1' 1)'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleCenter'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fixedHeight = 18.0f * GuiDisplaySize.Offset              };
Magic Number,KerbalEngineer.Flight.Readouts,ReadoutModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutModule.cs,InitialiseStyles,The following statement contains a magic number: this.TextFieldStyle = new GUIStyle(HighLogic.Skin.textField)              {                  margin = new RectOffset(0' 0' 1' 1)'                  padding = new RectOffset(5' 5' 0' 0)'                  alignment = TextAnchor.MiddleLeft'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fixedHeight = 18.0f * GuiDisplaySize.Offset              };
Magic Number,KerbalEngineer.Flight.Readouts,ReadoutModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutModule.cs,InitialiseStyles,The following statement contains a magic number: this.TextFieldStyle = new GUIStyle(HighLogic.Skin.textField)              {                  margin = new RectOffset(0' 0' 1' 1)'                  padding = new RectOffset(5' 5' 0' 0)'                  alignment = TextAnchor.MiddleLeft'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fixedHeight = 18.0f * GuiDisplaySize.Offset              };
Magic Number,KerbalEngineer.Flight.Readouts,ReadoutModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\ReadoutModule.cs,InitialiseStyles,The following statement contains a magic number: this.TextFieldStyle = new GUIStyle(HighLogic.Skin.textField)              {                  margin = new RectOffset(0' 0' 1' 1)'                  padding = new RectOffset(5' 5' 0' 0)'                  alignment = TextAnchor.MiddleLeft'                  fontSize = (int)(11 * GuiDisplaySize.Offset)'                  fixedHeight = 18.0f * GuiDisplaySize.Offset              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,DrawCategories,The following statement contains a magic number: foreach (var category in ReadoutCategory.Categories)              {                  var description = category.Description;                  if (description.Length > 50)                  {                      description = description.Substring(0' 50 - 1) + "...";                  }                    if (GUILayout.Button("<b>" + category.Name.ToUpper() + "</b>" + (string.IsNullOrEmpty(category.Description) ? string.Empty : "\n<i>" + description + "</i>")' category == ReadoutCategory.Selected ? this.categoryButtonActiveStyle : this.categoryButtonStyle))                  {                      ReadoutCategory.Selected = category;                      this.categoryList.enabled = false;                  }              }
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,DrawCategories,The following statement contains a magic number: foreach (var category in ReadoutCategory.Categories)              {                  var description = category.Description;                  if (description.Length > 50)                  {                      description = description.Substring(0' 50 - 1) + "...";                  }                    if (GUILayout.Button("<b>" + category.Name.ToUpper() + "</b>" + (string.IsNullOrEmpty(category.Description) ? string.Empty : "\n<i>" + description + "</i>")' category == ReadoutCategory.Selected ? this.categoryButtonActiveStyle : this.categoryButtonStyle))                  {                      ReadoutCategory.Selected = category;                      this.categoryList.enabled = false;                  }              }
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.categoryButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(0' 0' 2' 0)'                  padding = new RectOffset(5' 5' 5' 5)'                  alignment = TextAnchor.MiddleCenter'                  fontSize = 12'                  fontStyle = FontStyle.Normal'                  richText = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.categoryButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(0' 0' 2' 0)'                  padding = new RectOffset(5' 5' 5' 5)'                  alignment = TextAnchor.MiddleCenter'                  fontSize = 12'                  fontStyle = FontStyle.Normal'                  richText = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.categoryButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(0' 0' 2' 0)'                  padding = new RectOffset(5' 5' 5' 5)'                  alignment = TextAnchor.MiddleCenter'                  fontSize = 12'                  fontStyle = FontStyle.Normal'                  richText = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.categoryButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(0' 0' 2' 0)'                  padding = new RectOffset(5' 5' 5' 5)'                  alignment = TextAnchor.MiddleCenter'                  fontSize = 12'                  fontStyle = FontStyle.Normal'                  richText = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.categoryButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(0' 0' 2' 0)'                  padding = new RectOffset(5' 5' 5' 5)'                  alignment = TextAnchor.MiddleCenter'                  fontSize = 12'                  fontStyle = FontStyle.Normal'                  richText = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.categoryButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(0' 0' 2' 0)'                  padding = new RectOffset(5' 5' 5' 5)'                  alignment = TextAnchor.MiddleCenter'                  fontSize = 12'                  fontStyle = FontStyle.Normal'                  richText = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.panelTitleStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleLeft'                  fontSize = 12'                  fontStyle = FontStyle.Bold'                  fixedHeight = 30.0f'                  stretchWidth = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.textStyle = new GUIStyle(HighLogic.Skin.textField)              {                  margin = new RectOffset(3' 3' 3' 3)'                  alignment = TextAnchor.MiddleLeft'                  stretchWidth = true'                  stretchHeight = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.textStyle = new GUIStyle(HighLogic.Skin.textField)              {                  margin = new RectOffset(3' 3' 3' 3)'                  alignment = TextAnchor.MiddleLeft'                  stretchWidth = true'                  stretchHeight = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.textStyle = new GUIStyle(HighLogic.Skin.textField)              {                  margin = new RectOffset(3' 3' 3' 3)'                  alignment = TextAnchor.MiddleLeft'                  stretchWidth = true'                  stretchHeight = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.textStyle = new GUIStyle(HighLogic.Skin.textField)              {                  margin = new RectOffset(3' 3' 3' 3)'                  alignment = TextAnchor.MiddleLeft'                  stretchWidth = true'                  stretchHeight = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.readoutNameStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset(10' 0' 0' 0)'                  alignment = TextAnchor.MiddleLeft'                  fontSize = 12'                  fontStyle = FontStyle.Bold'                  stretchWidth = true'                  stretchHeight = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.readoutNameStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset(10' 0' 0' 0)'                  alignment = TextAnchor.MiddleLeft'                  fontSize = 12'                  fontStyle = FontStyle.Bold'                  stretchWidth = true'                  stretchHeight = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.readoutButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(2' 2' 2' 2)'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleCenter'                  fontSize = 12'                  fontStyle = FontStyle.Bold'                  stretchHeight = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.readoutButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(2' 2' 2' 2)'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleCenter'                  fontSize = 12'                  fontStyle = FontStyle.Bold'                  stretchHeight = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.readoutButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(2' 2' 2' 2)'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleCenter'                  fontSize = 12'                  fontStyle = FontStyle.Bold'                  stretchHeight = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.readoutButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(2' 2' 2' 2)'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleCenter'                  fontSize = 12'                  fontStyle = FontStyle.Bold'                  stretchHeight = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.readoutButtonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(2' 2' 2' 2)'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleCenter'                  fontSize = 12'                  fontStyle = FontStyle.Bold'                  stretchHeight = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.helpBoxStyle = new GUIStyle(HighLogic.Skin.box)              {                  margin = new RectOffset(2' 2' 2' 10)'                  padding = new RectOffset(10' 10' 10' 10)              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.helpBoxStyle = new GUIStyle(HighLogic.Skin.box)              {                  margin = new RectOffset(2' 2' 2' 10)'                  padding = new RectOffset(10' 10' 10' 10)              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.helpBoxStyle = new GUIStyle(HighLogic.Skin.box)              {                  margin = new RectOffset(2' 2' 2' 10)'                  padding = new RectOffset(10' 10' 10' 10)              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.helpBoxStyle = new GUIStyle(HighLogic.Skin.box)              {                  margin = new RectOffset(2' 2' 2' 10)'                  padding = new RectOffset(10' 10' 10' 10)              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.helpBoxStyle = new GUIStyle(HighLogic.Skin.box)              {                  margin = new RectOffset(2' 2' 2' 10)'                  padding = new RectOffset(10' 10' 10' 10)              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.helpBoxStyle = new GUIStyle(HighLogic.Skin.box)              {                  margin = new RectOffset(2' 2' 2' 10)'                  padding = new RectOffset(10' 10' 10' 10)              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.helpBoxStyle = new GUIStyle(HighLogic.Skin.box)              {                  margin = new RectOffset(2' 2' 2' 10)'                  padding = new RectOffset(10' 10' 10' 10)              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.helpBoxStyle = new GUIStyle(HighLogic.Skin.box)              {                  margin = new RectOffset(2' 2' 2' 10)'                  padding = new RectOffset(10' 10' 10' 10)              };
Magic Number,KerbalEngineer.Flight.Sections,SectionEditor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionEditor.cs,InitialiseStyles,The following statement contains a magic number: this.helpTextStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.yellow                  }'                  margin = new RectOffset()'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleLeft'                  fontSize = 13'                  fontStyle = FontStyle.Normal'                  stretchWidth = true'                  richText = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionModule.cs,InitialiseStyles,The following statement contains a magic number: this.boxStyle = new GUIStyle(HighLogic.Skin.box)              {                  margin = new RectOffset()'                  padding = new RectOffset(5' 5' 5' 5)              };
Magic Number,KerbalEngineer.Flight.Sections,SectionModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionModule.cs,InitialiseStyles,The following statement contains a magic number: this.boxStyle = new GUIStyle(HighLogic.Skin.box)              {                  margin = new RectOffset()'                  padding = new RectOffset(5' 5' 5' 5)              };
Magic Number,KerbalEngineer.Flight.Sections,SectionModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionModule.cs,InitialiseStyles,The following statement contains a magic number: this.boxStyle = new GUIStyle(HighLogic.Skin.box)              {                  margin = new RectOffset()'                  padding = new RectOffset(5' 5' 5' 5)              };
Magic Number,KerbalEngineer.Flight.Sections,SectionModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionModule.cs,InitialiseStyles,The following statement contains a magic number: this.boxStyle = new GUIStyle(HighLogic.Skin.box)              {                  margin = new RectOffset()'                  padding = new RectOffset(5' 5' 5' 5)              };
Magic Number,KerbalEngineer.Flight.Sections,SectionModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionModule.cs,InitialiseStyles,The following statement contains a magic number: this.titleStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset(2' 0' 5' 2)'                  fontSize = (int)(13 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  stretchWidth = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionModule.cs,InitialiseStyles,The following statement contains a magic number: this.titleStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset(2' 0' 5' 2)'                  fontSize = (int)(13 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  stretchWidth = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionModule.cs,InitialiseStyles,The following statement contains a magic number: this.titleStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset(2' 0' 5' 2)'                  fontSize = (int)(13 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  stretchWidth = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionModule.cs,InitialiseStyles,The following statement contains a magic number: this.titleStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset(2' 0' 5' 2)'                  fontSize = (int)(13 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  stretchWidth = true              };
Magic Number,KerbalEngineer.Flight.Sections,SectionModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionModule.cs,InitialiseStyles,The following statement contains a magic number: this.buttonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(0' 0' 5' 3)'                  padding = new RectOffset()'                  fontSize = (int)(10 * GuiDisplaySize.Offset)'                  stretchHeight = true'                  fixedWidth = 60.0f * GuiDisplaySize.Offset              };
Magic Number,KerbalEngineer.Flight.Sections,SectionModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionModule.cs,InitialiseStyles,The following statement contains a magic number: this.buttonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(0' 0' 5' 3)'                  padding = new RectOffset()'                  fontSize = (int)(10 * GuiDisplaySize.Offset)'                  stretchHeight = true'                  fixedWidth = 60.0f * GuiDisplaySize.Offset              };
Magic Number,KerbalEngineer.Flight.Sections,SectionModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionModule.cs,InitialiseStyles,The following statement contains a magic number: this.buttonStyle = new GUIStyle(HighLogic.Skin.button)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset(0' 0' 5' 3)'                  padding = new RectOffset()'                  fontSize = (int)(10 * GuiDisplaySize.Offset)'                  stretchHeight = true'                  fixedWidth = 60.0f * GuiDisplaySize.Offset              };
Magic Number,KerbalEngineer.Flight.Sections,SectionModule,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionModule.cs,InitialiseStyles,The following statement contains a magic number: this.messageStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset()'                  alignment = TextAnchor.MiddleCenter'                  fontSize = (int)(12 * GuiDisplaySize.Offset)'                  fontStyle = FontStyle.Bold'                  fixedWidth = 220.0f * GuiDisplaySize.Offset'                  fixedHeight = 20.0f * GuiDisplaySize.Offset              };
Magic Number,KerbalEngineer.Flight.Sections,SectionWindow,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionWindow.cs,InitialiseStyles,The following statement contains a magic number: this.windowStyle = new GUIStyle(HighLogic.Skin.window)              {                  margin = new RectOffset()'                  padding = new RectOffset(5' 5' 0' 5)'              };
Magic Number,KerbalEngineer.Flight.Sections,SectionWindow,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionWindow.cs,InitialiseStyles,The following statement contains a magic number: this.windowStyle = new GUIStyle(HighLogic.Skin.window)              {                  margin = new RectOffset()'                  padding = new RectOffset(5' 5' 0' 5)'              };
Magic Number,KerbalEngineer.Flight.Sections,SectionWindow,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionWindow.cs,InitialiseStyles,The following statement contains a magic number: this.windowStyle = new GUIStyle(HighLogic.Skin.window)              {                  margin = new RectOffset()'                  padding = new RectOffset(5' 5' 0' 5)'              };
Magic Number,KerbalEngineer.Flight.Sections,SectionWindow,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionWindow.cs,InitialiseStyles,The following statement contains a magic number: this.hudWindowStyle = new GUIStyle(this.windowStyle)              {                  normal =                  {                      background = null                  }'                  onNormal =                  {                      background = null                  }'                  padding = new RectOffset(5' 5' 0' 8)'              };
Magic Number,KerbalEngineer.Flight.Sections,SectionWindow,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionWindow.cs,InitialiseStyles,The following statement contains a magic number: this.hudWindowStyle = new GUIStyle(this.windowStyle)              {                  normal =                  {                      background = null                  }'                  onNormal =                  {                      background = null                  }'                  padding = new RectOffset(5' 5' 0' 8)'              };
Magic Number,KerbalEngineer.Flight.Sections,SectionWindow,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Sections\SectionWindow.cs,InitialiseStyles,The following statement contains a magic number: this.hudWindowStyle = new GUIStyle(this.windowStyle)              {                  normal =                  {                      background = null                  }'                  onNormal =                  {                      background = null                  }'                  padding = new RectOffset(5' 5' 0' 8)'              };
Magic Number,KerbalEngineer.VesselSimulator,EngineSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\EngineSim.cs,GetFlowModifier,The following statement contains a magic number: if (atmChangeFlow)              {                  flowModifier = (float)(atmDensity / 1.225);                  if (atmCurve != null)                  {                      flowModifier = atmCurve.Evaluate(flowModifier);                  }              }
Magic Number,KerbalEngineer.VesselSimulator,PartSim,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\PartSim.cs,GetResourcePriority,The following statement contains a magic number: return ((!resPriorityUseParentInverseStage || !(parent != null)) ? inverseStage : parent.inverseStage) * 10 + resPriorityOffset;
Magic Number,KerbalEngineer.VesselSimulator,SimManager,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\SimManager.cs,CheckForMods,The following statement contains a magic number: foreach (var assembly in AssemblyLoader.loadedAssemblies)              {                  log.AppendLine("Assembly: "' assembly.assembly);                    var name = assembly.assembly.ToString().Split(''')[0];                    if (name == "RealFuels")                  {                      log.AppendLine("Found RealFuels mod");                        var RF_ModuleEngineConfigs_Type = assembly.assembly.GetType("RealFuels.ModuleEngineConfigs");                      if (RF_ModuleEngineConfigs_Type != null)                      {                          RF_ModuleEngineConfigs_localCorrectThrust = RF_ModuleEngineConfigs_Type.GetField("localCorrectThrust");                      }                        var RF_ModuleHybridEngine_Type = assembly.assembly.GetType("RealFuels.ModuleHybridEngine");                      if (RF_ModuleHybridEngine_Type != null)                      {                          RF_ModuleHybridEngine_localCorrectThrust = RF_ModuleHybridEngine_Type.GetField("localCorrectThrust");                      }                        var RF_ModuleHybridEngines_Type = assembly.assembly.GetType("RealFuels.ModuleHybridEngines");                      if (RF_ModuleHybridEngines_Type != null)                      {                          RF_ModuleHybridEngines_localCorrectThrust = RF_ModuleHybridEngines_Type.GetField("localCorrectThrust");                      }                        hasInstalledRealFuels = true;                      break;                  }                  else if (name == "KerbalIspDifficultyScaler")                  {                      log.AppendLine("Found KIDS mod");                        var KIDS_Utils_Type = assembly.assembly.GetType("KerbalIspDifficultyScaler.KerbalIspDifficultyScalerUtils");                      if (KIDS_Utils_Type != null)                      {                          KIDS_Utils_GetIspMultiplier = KIDS_Utils_Type.GetMethod("GetIspMultiplier");                      }                        KIDSparameters = new object[6];                      hasInstalledKIDS = true;                  }              }
Magic Number,KerbalEngineer.VesselSimulator,SimManager,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\SimManager.cs,UpdateModSettings,The following statement contains a magic number: if (hasInstalledKIDS)              {                  // (out ispMultiplierVac' out ispMultiplierAtm' out extendToZeroIsp' out thrustCorrection' out ispCutoff' out thrustCutoff);                  KIDSparameters.Initialize();                  KIDS_Utils_GetIspMultiplier.Invoke(null' KIDSparameters);                  bKIDSThrustISP = (bool)KIDSparameters[3];              }
Magic Number,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,RunSimulation,The following statement contains a magic number: while (currentStage >= 0)              {                  if (log != null)                  {                      log.AppendLine("Simulating stage "' currentStage);                      log.Flush();                      _timer.Reset();                      _timer.Start();                  }                    // Update active engines and resource drains                  UpdateResourceDrains();                    // Update the masses of the parts to correctly handle "no physics" parts                  stageStartMass = UpdatePartMasses();                    if (log != null)                      allParts[0].DumpPartToLog(log' ""' allParts);                    // Create the Stage object for this stage                  Stage stage = new Stage();                    stageTime = 0d;                  vecStageDeltaV = Vector3.zero;                    stageStartCom = ShipCom;                    stepStartMass = stageStartMass;                  stepEndMass = 0;                    CalculateThrustAndISP();                    // Store various things in the Stage object                  stage.thrust = totalStageThrust;                  stage.thrustToWeight = totalStageThrust / (stageStartMass * gravity);                  stage.maxThrustToWeight = stage.thrustToWeight;                  stage.actualThrust = totalStageActualThrust;                  stage.actualThrustToWeight = totalStageActualThrust / (stageStartMass * gravity);                  if (log != null)                  {                      log.AppendLine("stage.thrust = "' stage.thrust);                      log.AppendLine("StageMass = "' stageStartMass);                      log.AppendLine("Initial maxTWR = "' stage.maxThrustToWeight);                  }                    // calculate torque and associates                  stage.maxThrustTorque = totalStageThrustForce.TorqueAt(stageStartCom).magnitude;                    // torque divided by thrust. imagine that all engines are at the end of a lever that tries to turn the ship.                  // this numerical value' in meters' would represent the length of that lever.                  double torqueLeverArmLength = (stage.thrust <= 0) ? 0 : stage.maxThrustTorque / stage.thrust;                    // how far away are the engines from the CoM' actually?                  double thrustDistance = (stageStartCom - totalStageThrustForce.GetAverageForceApplicationPoint()).magnitude;                    // the combination of the above two values gives an approximation of the offset angle.                  double sinThrustOffsetAngle = 0;                  if (thrustDistance > 1e-7) {                      sinThrustOffsetAngle = torqueLeverArmLength / thrustDistance;                      if (sinThrustOffsetAngle > 1) {                          sinThrustOffsetAngle = 1;                      }                  }                    stage.thrustOffsetAngle = Math.Asin(sinThrustOffsetAngle) * 180 / Math.PI;                    // Calculate the total cost of the vessel at this point                  stage.totalCost = 0d;                  for (int i = 0; i < allParts.Count; ++i)                  {                      if (currentStage > allParts[i].decoupledInStage)                          stage.totalCost += allParts[i].GetCost(currentStage);                  }                    // The total mass is simply the mass at the start of the stage                  stage.totalMass = stageStartMass;                    // If we have done a previous stage                  if (currentStage < startStage)                  {                      // Calculate what the previous stage's mass and cost were by subtraction                      Stage prev = stages[currentStage + 1];                      prev.cost = prev.totalCost - stage.totalCost;                      prev.mass = prev.totalMass - stage.totalMass;                  }                    // The above code will never run for the last stage so set those directly                  if (currentStage == 0)                  {                      stage.cost = stage.totalCost;                      stage.mass = stage.totalMass;                  }                    dontStageParts = dontStagePartsLists[currentStage];                    if (log != null)                  {                      log.AppendLine("Stage setup took "' _timer.ElapsedMilliseconds' "ms");                        if (dontStageParts.Count > 0)                      {                          log.AppendLine("Parts preventing staging:");                          for (int i = 0; i < dontStageParts.Count; i++)                          {                              PartSim partSim = dontStageParts[i];                              partSim.DumpPartToLog(log' "");                          }                      }                      else                      {                          log.AppendLine("No parts preventing staging");                      }                        log.Flush();                  }                      // Now we will loop until we are allowed to stage                  int loopCounter = 0;                  while (!AllowedToStage())                  {                      loopCounter++;                      //if (log != null) log.AppendLine("loop = "' loopCounter);                      // Calculate how long each draining tank will take to drain and run for the minimum time                      double resourceDrainTime = double.MaxValue;                      PartSim partMinDrain = null;                      foreach (PartSim partSim in drainingParts)                      {                          double time = partSim.TimeToDrainResource(log);                          if (time < resourceDrainTime)                          {                              resourceDrainTime = time;                              partMinDrain = partSim;                          }                      }                        if (log != null) log.Append("Drain time = "' resourceDrainTime' " ("' partMinDrain.name)                                          .AppendLine(":"' partMinDrain.partId' ")");                      foreach (PartSim partSim in drainingParts)                      {                          partSim.DrainResources(resourceDrainTime' log);                      }                        // Get the mass after draining                      stepEndMass = ShipMass;                      stageTime += resourceDrainTime;                        double stepEndTWR = totalStageThrust / (stepEndMass * gravity);                      /*if (log != null)                      {                          log.AppendLine("After drain mass = "' stepEndMass);                          log.AppendLine("currentThrust = "' totalStageThrust);                          log.AppendLine("currentTWR = "' stepEndTWR);                      }*/                      if (stepEndTWR > stage.maxThrustToWeight)                      {                          stage.maxThrustToWeight = stepEndTWR;                      }                        //if (log != null) log.AppendLine("newMaxTWR = "' stage.maxThrustToWeight);                        // If we have drained anything and the masses make sense then add this step's deltaV to the stage total                      if (resourceDrainTime > 0d && stepStartMass > stepEndMass && stepStartMass > 0d && stepEndMass > 0d)                      {                          vecStageDeltaV += vecThrust * (float)((currentisp * Units.GRAVITY * Math.Log(stepStartMass / stepEndMass)) / simpleTotalThrust);                      }                        // Update the active engines and resource drains for the next step                      UpdateResourceDrains();                        // Recalculate the current thrust and isp for the next step                      CalculateThrustAndISP();                                            // Check if we actually changed anything                      if (stepStartMass == stepEndMass)                      {                          //MonoBehaviour.print("No change in mass");                          break;                      }                        // Check to stop rampant looping                      if (loopCounter == 1000)                      {                          if (log != null)                          {                              log.AppendLine("exceeded loop count");                              log.AppendLine("stageStartMass = " + stageStartMass);                              log.AppendLine("stepStartMass = " + stepStartMass);                              log.AppendLine("StepEndMass   = " + stepEndMass);                          }                          break;                      }                        // The next step starts at the mass this one ended at                      stepStartMass = stepEndMass;                  }                    // Store more values in the Stage object and stick it in the array                    // Store the magnitude of the deltaV vector                  stage.deltaV = vecStageDeltaV.magnitude;                  stage.resourceMass = stageStartMass - stepEndMass;                    // Recalculate effective stage isp from the stage deltaV (flip the standard deltaV calculation around)                  // Note: If the mass doesn't change then this is a divide by zero                  if (stageStartMass != stepStartMass)                  {                      stage.isp = stage.deltaV / (Units.GRAVITY * Math.Log(stageStartMass / stepStartMass));                  }                  else                  {                      stage.isp = 0;                  }                    // Zero stage time if more than a day (this should be moved into the window code)                  stage.time = (stageTime < SECONDS_PER_DAY) ? stageTime : 0d;                  stage.number = doingCurrent ? -1 : currentStage; // Set the stage number to -1 if doing current engines                  stage.totalPartCount = allParts.Count;                  stage.maxMach = maxMach;                  stages[currentStage] = stage;                    // Now activate the next stage                  currentStage--;                  doingCurrent = false;                    if (log != null)                  {                      // Log how long the stage took                      _timer.Stop();                      log.AppendLine("Simulating stage took "' _timer.ElapsedMilliseconds' "ms");                      stage.Dump(log);                      _timer.Reset();                      _timer.Start();                  }                    // Activate the next stage                  ActivateStage();                    if (log != null)                  {                      // Log how long it took to activate                      _timer.Stop();                      log.AppendLine("ActivateStage took "' _timer.ElapsedMilliseconds' "ms");                  }              }
Magic Number,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,RunSimulation,The following statement contains a magic number: while (currentStage >= 0)              {                  if (log != null)                  {                      log.AppendLine("Simulating stage "' currentStage);                      log.Flush();                      _timer.Reset();                      _timer.Start();                  }                    // Update active engines and resource drains                  UpdateResourceDrains();                    // Update the masses of the parts to correctly handle "no physics" parts                  stageStartMass = UpdatePartMasses();                    if (log != null)                      allParts[0].DumpPartToLog(log' ""' allParts);                    // Create the Stage object for this stage                  Stage stage = new Stage();                    stageTime = 0d;                  vecStageDeltaV = Vector3.zero;                    stageStartCom = ShipCom;                    stepStartMass = stageStartMass;                  stepEndMass = 0;                    CalculateThrustAndISP();                    // Store various things in the Stage object                  stage.thrust = totalStageThrust;                  stage.thrustToWeight = totalStageThrust / (stageStartMass * gravity);                  stage.maxThrustToWeight = stage.thrustToWeight;                  stage.actualThrust = totalStageActualThrust;                  stage.actualThrustToWeight = totalStageActualThrust / (stageStartMass * gravity);                  if (log != null)                  {                      log.AppendLine("stage.thrust = "' stage.thrust);                      log.AppendLine("StageMass = "' stageStartMass);                      log.AppendLine("Initial maxTWR = "' stage.maxThrustToWeight);                  }                    // calculate torque and associates                  stage.maxThrustTorque = totalStageThrustForce.TorqueAt(stageStartCom).magnitude;                    // torque divided by thrust. imagine that all engines are at the end of a lever that tries to turn the ship.                  // this numerical value' in meters' would represent the length of that lever.                  double torqueLeverArmLength = (stage.thrust <= 0) ? 0 : stage.maxThrustTorque / stage.thrust;                    // how far away are the engines from the CoM' actually?                  double thrustDistance = (stageStartCom - totalStageThrustForce.GetAverageForceApplicationPoint()).magnitude;                    // the combination of the above two values gives an approximation of the offset angle.                  double sinThrustOffsetAngle = 0;                  if (thrustDistance > 1e-7) {                      sinThrustOffsetAngle = torqueLeverArmLength / thrustDistance;                      if (sinThrustOffsetAngle > 1) {                          sinThrustOffsetAngle = 1;                      }                  }                    stage.thrustOffsetAngle = Math.Asin(sinThrustOffsetAngle) * 180 / Math.PI;                    // Calculate the total cost of the vessel at this point                  stage.totalCost = 0d;                  for (int i = 0; i < allParts.Count; ++i)                  {                      if (currentStage > allParts[i].decoupledInStage)                          stage.totalCost += allParts[i].GetCost(currentStage);                  }                    // The total mass is simply the mass at the start of the stage                  stage.totalMass = stageStartMass;                    // If we have done a previous stage                  if (currentStage < startStage)                  {                      // Calculate what the previous stage's mass and cost were by subtraction                      Stage prev = stages[currentStage + 1];                      prev.cost = prev.totalCost - stage.totalCost;                      prev.mass = prev.totalMass - stage.totalMass;                  }                    // The above code will never run for the last stage so set those directly                  if (currentStage == 0)                  {                      stage.cost = stage.totalCost;                      stage.mass = stage.totalMass;                  }                    dontStageParts = dontStagePartsLists[currentStage];                    if (log != null)                  {                      log.AppendLine("Stage setup took "' _timer.ElapsedMilliseconds' "ms");                        if (dontStageParts.Count > 0)                      {                          log.AppendLine("Parts preventing staging:");                          for (int i = 0; i < dontStageParts.Count; i++)                          {                              PartSim partSim = dontStageParts[i];                              partSim.DumpPartToLog(log' "");                          }                      }                      else                      {                          log.AppendLine("No parts preventing staging");                      }                        log.Flush();                  }                      // Now we will loop until we are allowed to stage                  int loopCounter = 0;                  while (!AllowedToStage())                  {                      loopCounter++;                      //if (log != null) log.AppendLine("loop = "' loopCounter);                      // Calculate how long each draining tank will take to drain and run for the minimum time                      double resourceDrainTime = double.MaxValue;                      PartSim partMinDrain = null;                      foreach (PartSim partSim in drainingParts)                      {                          double time = partSim.TimeToDrainResource(log);                          if (time < resourceDrainTime)                          {                              resourceDrainTime = time;                              partMinDrain = partSim;                          }                      }                        if (log != null) log.Append("Drain time = "' resourceDrainTime' " ("' partMinDrain.name)                                          .AppendLine(":"' partMinDrain.partId' ")");                      foreach (PartSim partSim in drainingParts)                      {                          partSim.DrainResources(resourceDrainTime' log);                      }                        // Get the mass after draining                      stepEndMass = ShipMass;                      stageTime += resourceDrainTime;                        double stepEndTWR = totalStageThrust / (stepEndMass * gravity);                      /*if (log != null)                      {                          log.AppendLine("After drain mass = "' stepEndMass);                          log.AppendLine("currentThrust = "' totalStageThrust);                          log.AppendLine("currentTWR = "' stepEndTWR);                      }*/                      if (stepEndTWR > stage.maxThrustToWeight)                      {                          stage.maxThrustToWeight = stepEndTWR;                      }                        //if (log != null) log.AppendLine("newMaxTWR = "' stage.maxThrustToWeight);                        // If we have drained anything and the masses make sense then add this step's deltaV to the stage total                      if (resourceDrainTime > 0d && stepStartMass > stepEndMass && stepStartMass > 0d && stepEndMass > 0d)                      {                          vecStageDeltaV += vecThrust * (float)((currentisp * Units.GRAVITY * Math.Log(stepStartMass / stepEndMass)) / simpleTotalThrust);                      }                        // Update the active engines and resource drains for the next step                      UpdateResourceDrains();                        // Recalculate the current thrust and isp for the next step                      CalculateThrustAndISP();                                            // Check if we actually changed anything                      if (stepStartMass == stepEndMass)                      {                          //MonoBehaviour.print("No change in mass");                          break;                      }                        // Check to stop rampant looping                      if (loopCounter == 1000)                      {                          if (log != null)                          {                              log.AppendLine("exceeded loop count");                              log.AppendLine("stageStartMass = " + stageStartMass);                              log.AppendLine("stepStartMass = " + stepStartMass);                              log.AppendLine("StepEndMass   = " + stepEndMass);                          }                          break;                      }                        // The next step starts at the mass this one ended at                      stepStartMass = stepEndMass;                  }                    // Store more values in the Stage object and stick it in the array                    // Store the magnitude of the deltaV vector                  stage.deltaV = vecStageDeltaV.magnitude;                  stage.resourceMass = stageStartMass - stepEndMass;                    // Recalculate effective stage isp from the stage deltaV (flip the standard deltaV calculation around)                  // Note: If the mass doesn't change then this is a divide by zero                  if (stageStartMass != stepStartMass)                  {                      stage.isp = stage.deltaV / (Units.GRAVITY * Math.Log(stageStartMass / stepStartMass));                  }                  else                  {                      stage.isp = 0;                  }                    // Zero stage time if more than a day (this should be moved into the window code)                  stage.time = (stageTime < SECONDS_PER_DAY) ? stageTime : 0d;                  stage.number = doingCurrent ? -1 : currentStage; // Set the stage number to -1 if doing current engines                  stage.totalPartCount = allParts.Count;                  stage.maxMach = maxMach;                  stages[currentStage] = stage;                    // Now activate the next stage                  currentStage--;                  doingCurrent = false;                    if (log != null)                  {                      // Log how long the stage took                      _timer.Stop();                      log.AppendLine("Simulating stage took "' _timer.ElapsedMilliseconds' "ms");                      stage.Dump(log);                      _timer.Reset();                      _timer.Start();                  }                    // Activate the next stage                  ActivateStage();                    if (log != null)                  {                      // Log how long it took to activate                      _timer.Stop();                      log.AppendLine("ActivateStage took "' _timer.ElapsedMilliseconds' "ms");                  }              }
Magic Number,KerbalEngineer.VesselSimulator,Simulation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\Simulation.cs,RunSimulation,The following statement contains a magic number: while (currentStage >= 0)              {                  if (log != null)                  {                      log.AppendLine("Simulating stage "' currentStage);                      log.Flush();                      _timer.Reset();                      _timer.Start();                  }                    // Update active engines and resource drains                  UpdateResourceDrains();                    // Update the masses of the parts to correctly handle "no physics" parts                  stageStartMass = UpdatePartMasses();                    if (log != null)                      allParts[0].DumpPartToLog(log' ""' allParts);                    // Create the Stage object for this stage                  Stage stage = new Stage();                    stageTime = 0d;                  vecStageDeltaV = Vector3.zero;                    stageStartCom = ShipCom;                    stepStartMass = stageStartMass;                  stepEndMass = 0;                    CalculateThrustAndISP();                    // Store various things in the Stage object                  stage.thrust = totalStageThrust;                  stage.thrustToWeight = totalStageThrust / (stageStartMass * gravity);                  stage.maxThrustToWeight = stage.thrustToWeight;                  stage.actualThrust = totalStageActualThrust;                  stage.actualThrustToWeight = totalStageActualThrust / (stageStartMass * gravity);                  if (log != null)                  {                      log.AppendLine("stage.thrust = "' stage.thrust);                      log.AppendLine("StageMass = "' stageStartMass);                      log.AppendLine("Initial maxTWR = "' stage.maxThrustToWeight);                  }                    // calculate torque and associates                  stage.maxThrustTorque = totalStageThrustForce.TorqueAt(stageStartCom).magnitude;                    // torque divided by thrust. imagine that all engines are at the end of a lever that tries to turn the ship.                  // this numerical value' in meters' would represent the length of that lever.                  double torqueLeverArmLength = (stage.thrust <= 0) ? 0 : stage.maxThrustTorque / stage.thrust;                    // how far away are the engines from the CoM' actually?                  double thrustDistance = (stageStartCom - totalStageThrustForce.GetAverageForceApplicationPoint()).magnitude;                    // the combination of the above two values gives an approximation of the offset angle.                  double sinThrustOffsetAngle = 0;                  if (thrustDistance > 1e-7) {                      sinThrustOffsetAngle = torqueLeverArmLength / thrustDistance;                      if (sinThrustOffsetAngle > 1) {                          sinThrustOffsetAngle = 1;                      }                  }                    stage.thrustOffsetAngle = Math.Asin(sinThrustOffsetAngle) * 180 / Math.PI;                    // Calculate the total cost of the vessel at this point                  stage.totalCost = 0d;                  for (int i = 0; i < allParts.Count; ++i)                  {                      if (currentStage > allParts[i].decoupledInStage)                          stage.totalCost += allParts[i].GetCost(currentStage);                  }                    // The total mass is simply the mass at the start of the stage                  stage.totalMass = stageStartMass;                    // If we have done a previous stage                  if (currentStage < startStage)                  {                      // Calculate what the previous stage's mass and cost were by subtraction                      Stage prev = stages[currentStage + 1];                      prev.cost = prev.totalCost - stage.totalCost;                      prev.mass = prev.totalMass - stage.totalMass;                  }                    // The above code will never run for the last stage so set those directly                  if (currentStage == 0)                  {                      stage.cost = stage.totalCost;                      stage.mass = stage.totalMass;                  }                    dontStageParts = dontStagePartsLists[currentStage];                    if (log != null)                  {                      log.AppendLine("Stage setup took "' _timer.ElapsedMilliseconds' "ms");                        if (dontStageParts.Count > 0)                      {                          log.AppendLine("Parts preventing staging:");                          for (int i = 0; i < dontStageParts.Count; i++)                          {                              PartSim partSim = dontStageParts[i];                              partSim.DumpPartToLog(log' "");                          }                      }                      else                      {                          log.AppendLine("No parts preventing staging");                      }                        log.Flush();                  }                      // Now we will loop until we are allowed to stage                  int loopCounter = 0;                  while (!AllowedToStage())                  {                      loopCounter++;                      //if (log != null) log.AppendLine("loop = "' loopCounter);                      // Calculate how long each draining tank will take to drain and run for the minimum time                      double resourceDrainTime = double.MaxValue;                      PartSim partMinDrain = null;                      foreach (PartSim partSim in drainingParts)                      {                          double time = partSim.TimeToDrainResource(log);                          if (time < resourceDrainTime)                          {                              resourceDrainTime = time;                              partMinDrain = partSim;                          }                      }                        if (log != null) log.Append("Drain time = "' resourceDrainTime' " ("' partMinDrain.name)                                          .AppendLine(":"' partMinDrain.partId' ")");                      foreach (PartSim partSim in drainingParts)                      {                          partSim.DrainResources(resourceDrainTime' log);                      }                        // Get the mass after draining                      stepEndMass = ShipMass;                      stageTime += resourceDrainTime;                        double stepEndTWR = totalStageThrust / (stepEndMass * gravity);                      /*if (log != null)                      {                          log.AppendLine("After drain mass = "' stepEndMass);                          log.AppendLine("currentThrust = "' totalStageThrust);                          log.AppendLine("currentTWR = "' stepEndTWR);                      }*/                      if (stepEndTWR > stage.maxThrustToWeight)                      {                          stage.maxThrustToWeight = stepEndTWR;                      }                        //if (log != null) log.AppendLine("newMaxTWR = "' stage.maxThrustToWeight);                        // If we have drained anything and the masses make sense then add this step's deltaV to the stage total                      if (resourceDrainTime > 0d && stepStartMass > stepEndMass && stepStartMass > 0d && stepEndMass > 0d)                      {                          vecStageDeltaV += vecThrust * (float)((currentisp * Units.GRAVITY * Math.Log(stepStartMass / stepEndMass)) / simpleTotalThrust);                      }                        // Update the active engines and resource drains for the next step                      UpdateResourceDrains();                        // Recalculate the current thrust and isp for the next step                      CalculateThrustAndISP();                                            // Check if we actually changed anything                      if (stepStartMass == stepEndMass)                      {                          //MonoBehaviour.print("No change in mass");                          break;                      }                        // Check to stop rampant looping                      if (loopCounter == 1000)                      {                          if (log != null)                          {                              log.AppendLine("exceeded loop count");                              log.AppendLine("stageStartMass = " + stageStartMass);                              log.AppendLine("stepStartMass = " + stepStartMass);                              log.AppendLine("StepEndMass   = " + stepEndMass);                          }                          break;                      }                        // The next step starts at the mass this one ended at                      stepStartMass = stepEndMass;                  }                    // Store more values in the Stage object and stick it in the array                    // Store the magnitude of the deltaV vector                  stage.deltaV = vecStageDeltaV.magnitude;                  stage.resourceMass = stageStartMass - stepEndMass;                    // Recalculate effective stage isp from the stage deltaV (flip the standard deltaV calculation around)                  // Note: If the mass doesn't change then this is a divide by zero                  if (stageStartMass != stepStartMass)                  {                      stage.isp = stage.deltaV / (Units.GRAVITY * Math.Log(stageStartMass / stepStartMass));                  }                  else                  {                      stage.isp = 0;                  }                    // Zero stage time if more than a day (this should be moved into the window code)                  stage.time = (stageTime < SECONDS_PER_DAY) ? stageTime : 0d;                  stage.number = doingCurrent ? -1 : currentStage; // Set the stage number to -1 if doing current engines                  stage.totalPartCount = allParts.Count;                  stage.maxMach = maxMach;                  stages[currentStage] = stage;                    // Now activate the next stage                  currentStage--;                  doingCurrent = false;                    if (log != null)                  {                      // Log how long the stage took                      _timer.Stop();                      log.AppendLine("Simulating stage took "' _timer.ElapsedMilliseconds' "ms");                      stage.Dump(log);                      _timer.Reset();                      _timer.Start();                  }                    // Activate the next stage                  ActivateStage();                    if (log != null)                  {                      // Log how long it took to activate                      _timer.Stop();                      log.AppendLine("ActivateStage took "' _timer.ElapsedMilliseconds' "ms");                  }              }
Missing Default,KerbalEngineer,StyleManager,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\StyleManager.cs,Process,The following switch statement is missing a default case: switch (applicator.ElementType)              {                  case StyleApplicator.ElementTypes.Window:                      applicator.SetImage(skin.window.normal.background' Image.Type.Sliced);                      break;                    case StyleApplicator.ElementTypes.Box:                      applicator.SetImage(skin.box.normal.background' Image.Type.Sliced);                      break;                    case StyleApplicator.ElementTypes.Button:                      applicator.SetSelectable(null' skin.button.normal.background'                          skin.button.highlight.background'                          skin.button.active.background'                          skin.button.disabled.background);                      break;                    case StyleApplicator.ElementTypes.ButtonToggle:                      applicator.SetToggle(null' skin.button.normal.background'                          skin.button.highlight.background'                          skin.button.active.background'                          skin.button.disabled.background);                      break;                    case StyleApplicator.ElementTypes.Label:                      applicator.SetText(GetTextStyle(skin.label' skin.label.normal));                      break;              }
Missing Default,KerbalEngineer.Flight.Readouts.Surface,Situation,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\Situation.cs,Draw,The following switch statement is missing a default case: switch (ScienceUtil.GetExperimentSituation(FlightGlobals.ActiveVessel))              {                  case ExperimentSituations.SrfLanded:                      this.DrawLine("Landed");                      break;                    case ExperimentSituations.SrfSplashed:                      this.DrawLine("Splashed");                      break;                    case ExperimentSituations.FlyingLow:                      this.DrawLine("Flying Low");                      break;                    case ExperimentSituations.FlyingHigh:                      this.DrawLine("Flying High");                      break;                    case ExperimentSituations.InSpaceLow:                      this.DrawLine("In Space Low");                      break;                    case ExperimentSituations.InSpaceHigh:                      this.DrawLine("In Space High");                      break;              }
Missing Default,KerbalEngineer.Flight.Readouts.Surface,AtmosphericProcessor,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\Flight\Readouts\Surface\AtmosphericProcessor.cs,CheckAeroMods,The following switch statement is missing a default case: switch (loadedAssembly.name)                      {                          case "FerramAerospaceResearch":                              this.farTerminalVelocity = loadedAssembly.assembly.GetType("ferram4.FARAPI").GetMethod("GetActiveControlSys_TermVel");                              FarInstalled = true;                              MyLogger.Log("FAR detected!");                              break;                            case "NEAR":                              NearInstalled = true;                              MyLogger.Log("NEAR detected! Turning off atmospheric details!");                              break;                      }
Missing Default,KerbalEngineer.VesselSimulator,SimManager,C:\repos\CYBUTEK_KerbalEngineer\KerbalEngineer\VesselSimulator\SimManager.cs,GetVesselTypeString,The following switch statement is missing a default case: switch (vesselType)              {                  case VesselType.Debris:                      return "Debris";                  case VesselType.SpaceObject:                      return "SpaceObject";                  case VesselType.Unknown:                      return "Unknown";                  case VesselType.Probe:                      return "Probe";                  case VesselType.Rover:                      return "Rover";                  case VesselType.Lander:                      return "Lander";                  case VesselType.Ship:                      return "Ship";                  case VesselType.Station:                      return "Station";                  case VesselType.Base:                      return "Base";                  case VesselType.EVA:                      return "EVA";                  case VesselType.Flag:                      return "Flag";              }
