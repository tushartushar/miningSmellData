Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,Generate,Cyclomatic complexity of the method is 10
Complex Method,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,Generate,Cyclomatic complexity of the method is 10
Long Parameter List,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,Generate,The method has 6 parameters.
Long Parameter List,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,Generate,The method has 6 parameters.
Long Statement,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,Generate,The length of the statement  "		throw new ArgumentOutOfRangeException ("rainIntensity"' "Must be more than 0 (exclusive) and less than 1 (inclusive)."); " is 120.
Long Statement,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,Generate,The length of the statement  "			// How many samples each oscillation of the drop will be for the specified frequency (i.e.' sample count of a sinlge oscillation). " is 130.
Long Statement,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,GetBackgroundNoise,The length of the statement  "	return (float)((Math.Sin (((Math.PI * 2 * freq) / (sampleRate + r.Next (-(int)(sampleRate * 0.01)' (int)(sampleRate * 0.01)))) * i) * 0.5) + (r.NextDouble () * 0.5)); " is 166.
Long Statement,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,Generate,The length of the statement  "		throw new ArgumentOutOfRangeException ("rainIntensity"' "Must be more than 0 (exclusive) and less than 1 (inclusive)."); " is 120.
Long Statement,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,Generate,The length of the statement  "			// How many samples each oscillation of the drop will be for the specified frequency (i.e.' sample count of a sinlge oscillation). " is 130.
Long Statement,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,GetBackgroundNoise,The length of the statement  "	return (Math.Sin (((Math.PI * 2 * freq) / (sampleRate + r.Next (-(int)(sampleRate * 0.01)' (int)(sampleRate * 0.01)))) * i) * 0.5) + (r.NextDouble () * 0.5); " is 157.
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,Generate,The following statement contains a magic number: if (maxOscillationsPerDrop < 2) {  	throw new ArgumentOutOfRangeException ("maxOscillationsPerDrop"' "Must be 2 or higher.");  }  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,Generate,The following statement contains a magic number: for (var i = 0; i < sampleCount; i++) {  	if (dropAdded) {  		// Pick the drop's frequency.  		dropFreq = r.Next (minDropFreq' maxDropFreq);  		// How many samples each oscillation of the drop will be for the specified frequency (i.e.' sample count of a sinlge oscillation).  		var samplesPerOscillation = sampleRate / dropFreq;  		// Calc the drop's total sample count.  		samplesPerDrop = r.Next (1' (int)maxOscillationsPerDrop) * samplesPerOscillation;  		// Then calc the max drop count per sec.  		var maxDropsPerSec = sampleRate / samplesPerDrop;  		// Finally we can now calc rain intensity.  		addDrop = r.NextDouble () < (maxDropsPerSec * rainIntensity) / maxDropsPerSec;  		// Choose maximum drop amplitude ("loudness").  		amplitude = (float)r.NextDouble ();  		amplitude /= (float)combinedAmp;  	}  	// Add sound of distant rain.  	samples [i] += (float)(GetBackgroundNoise (i' dropFreq) * (backgroundIntensity / combinedAmp));  	if (addDrop) {  		// Add drop.  		samples [i] += (float)(amplitude * Math.Sin (((Math.PI * 2 * dropFreq) / sampleRate) * i) * 4);  		// Soften drop.  		samples [i] *= currentDropDuration / samplesPerDrop;  		samples [i] *= 1 - currentDropDuration / samplesPerDrop;  		dropAdded = false;  		currentDropDuration++;  		if (currentDropDuration > samplesPerDrop) {  			dropAdded = true;  			addDrop = false;  			currentDropDuration = 0;  		}  	}  }  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,Generate,The following statement contains a magic number: for (var i = 0; i < sampleCount; i++) {  	if (dropAdded) {  		// Pick the drop's frequency.  		dropFreq = r.Next (minDropFreq' maxDropFreq);  		// How many samples each oscillation of the drop will be for the specified frequency (i.e.' sample count of a sinlge oscillation).  		var samplesPerOscillation = sampleRate / dropFreq;  		// Calc the drop's total sample count.  		samplesPerDrop = r.Next (1' (int)maxOscillationsPerDrop) * samplesPerOscillation;  		// Then calc the max drop count per sec.  		var maxDropsPerSec = sampleRate / samplesPerDrop;  		// Finally we can now calc rain intensity.  		addDrop = r.NextDouble () < (maxDropsPerSec * rainIntensity) / maxDropsPerSec;  		// Choose maximum drop amplitude ("loudness").  		amplitude = (float)r.NextDouble ();  		amplitude /= (float)combinedAmp;  	}  	// Add sound of distant rain.  	samples [i] += (float)(GetBackgroundNoise (i' dropFreq) * (backgroundIntensity / combinedAmp));  	if (addDrop) {  		// Add drop.  		samples [i] += (float)(amplitude * Math.Sin (((Math.PI * 2 * dropFreq) / sampleRate) * i) * 4);  		// Soften drop.  		samples [i] *= currentDropDuration / samplesPerDrop;  		samples [i] *= 1 - currentDropDuration / samplesPerDrop;  		dropAdded = false;  		currentDropDuration++;  		if (currentDropDuration > samplesPerDrop) {  			dropAdded = true;  			addDrop = false;  			currentDropDuration = 0;  		}  	}  }  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,Generate,The following statement contains a magic number: if (addDrop) {  	// Add drop.  	samples [i] += (float)(amplitude * Math.Sin (((Math.PI * 2 * dropFreq) / sampleRate) * i) * 4);  	// Soften drop.  	samples [i] *= currentDropDuration / samplesPerDrop;  	samples [i] *= 1 - currentDropDuration / samplesPerDrop;  	dropAdded = false;  	currentDropDuration++;  	if (currentDropDuration > samplesPerDrop) {  		dropAdded = true;  		addDrop = false;  		currentDropDuration = 0;  	}  }  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,Generate,The following statement contains a magic number: if (addDrop) {  	// Add drop.  	samples [i] += (float)(amplitude * Math.Sin (((Math.PI * 2 * dropFreq) / sampleRate) * i) * 4);  	// Soften drop.  	samples [i] *= currentDropDuration / samplesPerDrop;  	samples [i] *= 1 - currentDropDuration / samplesPerDrop;  	dropAdded = false;  	currentDropDuration++;  	if (currentDropDuration > samplesPerDrop) {  		dropAdded = true;  		addDrop = false;  		currentDropDuration = 0;  	}  }  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,Generate,The following statement contains a magic number: samples [i] += (float)(amplitude * Math.Sin (((Math.PI * 2 * dropFreq) / sampleRate) * i) * 4);  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,Generate,The following statement contains a magic number: samples [i] += (float)(amplitude * Math.Sin (((Math.PI * 2 * dropFreq) / sampleRate) * i) * 4);  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,Generate,The following statement contains a magic number: return LinkwitzRileyLowPass (LinkwitzRileyHighPass (samples' 250)' 16000);  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,Generate,The following statement contains a magic number: return LinkwitzRileyLowPass (LinkwitzRileyHighPass (samples' 250)' 16000);  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,GetBackgroundNoise,The following statement contains a magic number: return (float)((Math.Sin (((Math.PI * 2 * freq) / (sampleRate + r.Next (-(int)(sampleRate * 0.01)' (int)(sampleRate * 0.01)))) * i) * 0.5) + (r.NextDouble () * 0.5));  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,GetBackgroundNoise,The following statement contains a magic number: return (float)((Math.Sin (((Math.PI * 2 * freq) / (sampleRate + r.Next (-(int)(sampleRate * 0.01)' (int)(sampleRate * 0.01)))) * i) * 0.5) + (r.NextDouble () * 0.5));  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,GetBackgroundNoise,The following statement contains a magic number: return (float)((Math.Sin (((Math.PI * 2 * freq) / (sampleRate + r.Next (-(int)(sampleRate * 0.01)' (int)(sampleRate * 0.01)))) * i) * 0.5) + (r.NextDouble () * 0.5));  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,GetBackgroundNoise,The following statement contains a magic number: return (float)((Math.Sin (((Math.PI * 2 * freq) / (sampleRate + r.Next (-(int)(sampleRate * 0.01)' (int)(sampleRate * 0.01)))) * i) * 0.5) + (r.NextDouble () * 0.5));  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,GetBackgroundNoise,The following statement contains a magic number: return (float)((Math.Sin (((Math.PI * 2 * freq) / (sampleRate + r.Next (-(int)(sampleRate * 0.01)' (int)(sampleRate * 0.01)))) * i) * 0.5) + (r.NextDouble () * 0.5));  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,LinkwitzRileyLowPass,The following statement contains a magic number: if (cutoff < 1 || cutoff >= sampleRate / 2) {  	throw new ArgumentOutOfRangeException ("cutoff"' "The cutoff frequency must be between 0 and 'sampleRate' / 2.");  }  
Magic Number,RainGenerator,Generator32Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator32Bit.cs,LinkwitzRileyHighPass,The following statement contains a magic number: if (cutoff < 1 || cutoff >= sampleRate / 2) {  	throw new ArgumentOutOfRangeException ("cutoff"' "The cutoff frequency must be between 0 and 'sampleRate' / 2.");  }  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,Generate,The following statement contains a magic number: if (maxOscillationsPerDrop < 2) {  	throw new ArgumentOutOfRangeException ("maxOscillationsPerDrop"' "Must be 2 or higher.");  }  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,Generate,The following statement contains a magic number: for (var i = 0; i < sampleCount; i++) {  	if (dropAdded) {  		// Pick the drop's frequency.  		dropFreq = r.Next (minDropFreq' maxDropFreq);  		// How many samples each oscillation of the drop will be for the specified frequency (i.e.' sample count of a sinlge oscillation).  		var samplesPerOscillation = sampleRate / dropFreq;  		// Calc the drop's total sample count.  		samplesPerDrop = r.Next (1' (int)maxOscillationsPerDrop) * samplesPerOscillation;  		// Then calc the max drop count per sec.  		var maxDropsPerSec = sampleRate / samplesPerDrop;  		// Finally we can now calc rain intensity.  		addDrop = r.NextDouble () < (maxDropsPerSec * rainIntensity) / maxDropsPerSec;  		// Choose maximum drop amplitude ("loudness").  		amplitude = r.NextDouble ();  		amplitude /= combinedAmp;  	}  	// Add sound of distant rain.  	samples [i] += GetBackgroundNoise (i' dropFreq) * (backgroundIntensity / combinedAmp);  	if (addDrop) {  		// Add drop.  		samples [i] += amplitude * Math.Sin (((Math.PI * 2 * dropFreq) / sampleRate) * i) * 4;  		// Soften drop.  		samples [i] *= currentDropDuration / samplesPerDrop;  		samples [i] *= 1 - currentDropDuration / samplesPerDrop;  		dropAdded = false;  		currentDropDuration++;  		if (currentDropDuration > samplesPerDrop) {  			dropAdded = true;  			addDrop = false;  			currentDropDuration = 0;  		}  	}  }  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,Generate,The following statement contains a magic number: for (var i = 0; i < sampleCount; i++) {  	if (dropAdded) {  		// Pick the drop's frequency.  		dropFreq = r.Next (minDropFreq' maxDropFreq);  		// How many samples each oscillation of the drop will be for the specified frequency (i.e.' sample count of a sinlge oscillation).  		var samplesPerOscillation = sampleRate / dropFreq;  		// Calc the drop's total sample count.  		samplesPerDrop = r.Next (1' (int)maxOscillationsPerDrop) * samplesPerOscillation;  		// Then calc the max drop count per sec.  		var maxDropsPerSec = sampleRate / samplesPerDrop;  		// Finally we can now calc rain intensity.  		addDrop = r.NextDouble () < (maxDropsPerSec * rainIntensity) / maxDropsPerSec;  		// Choose maximum drop amplitude ("loudness").  		amplitude = r.NextDouble ();  		amplitude /= combinedAmp;  	}  	// Add sound of distant rain.  	samples [i] += GetBackgroundNoise (i' dropFreq) * (backgroundIntensity / combinedAmp);  	if (addDrop) {  		// Add drop.  		samples [i] += amplitude * Math.Sin (((Math.PI * 2 * dropFreq) / sampleRate) * i) * 4;  		// Soften drop.  		samples [i] *= currentDropDuration / samplesPerDrop;  		samples [i] *= 1 - currentDropDuration / samplesPerDrop;  		dropAdded = false;  		currentDropDuration++;  		if (currentDropDuration > samplesPerDrop) {  			dropAdded = true;  			addDrop = false;  			currentDropDuration = 0;  		}  	}  }  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,Generate,The following statement contains a magic number: if (addDrop) {  	// Add drop.  	samples [i] += amplitude * Math.Sin (((Math.PI * 2 * dropFreq) / sampleRate) * i) * 4;  	// Soften drop.  	samples [i] *= currentDropDuration / samplesPerDrop;  	samples [i] *= 1 - currentDropDuration / samplesPerDrop;  	dropAdded = false;  	currentDropDuration++;  	if (currentDropDuration > samplesPerDrop) {  		dropAdded = true;  		addDrop = false;  		currentDropDuration = 0;  	}  }  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,Generate,The following statement contains a magic number: if (addDrop) {  	// Add drop.  	samples [i] += amplitude * Math.Sin (((Math.PI * 2 * dropFreq) / sampleRate) * i) * 4;  	// Soften drop.  	samples [i] *= currentDropDuration / samplesPerDrop;  	samples [i] *= 1 - currentDropDuration / samplesPerDrop;  	dropAdded = false;  	currentDropDuration++;  	if (currentDropDuration > samplesPerDrop) {  		dropAdded = true;  		addDrop = false;  		currentDropDuration = 0;  	}  }  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,Generate,The following statement contains a magic number: samples [i] += amplitude * Math.Sin (((Math.PI * 2 * dropFreq) / sampleRate) * i) * 4;  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,Generate,The following statement contains a magic number: samples [i] += amplitude * Math.Sin (((Math.PI * 2 * dropFreq) / sampleRate) * i) * 4;  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,Generate,The following statement contains a magic number: return LinkwitzRileyLowPass (LinkwitzRileyHighPass (samples' 250)' 16000);  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,Generate,The following statement contains a magic number: return LinkwitzRileyLowPass (LinkwitzRileyHighPass (samples' 250)' 16000);  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,GetBackgroundNoise,The following statement contains a magic number: return (Math.Sin (((Math.PI * 2 * freq) / (sampleRate + r.Next (-(int)(sampleRate * 0.01)' (int)(sampleRate * 0.01)))) * i) * 0.5) + (r.NextDouble () * 0.5);  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,GetBackgroundNoise,The following statement contains a magic number: return (Math.Sin (((Math.PI * 2 * freq) / (sampleRate + r.Next (-(int)(sampleRate * 0.01)' (int)(sampleRate * 0.01)))) * i) * 0.5) + (r.NextDouble () * 0.5);  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,GetBackgroundNoise,The following statement contains a magic number: return (Math.Sin (((Math.PI * 2 * freq) / (sampleRate + r.Next (-(int)(sampleRate * 0.01)' (int)(sampleRate * 0.01)))) * i) * 0.5) + (r.NextDouble () * 0.5);  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,GetBackgroundNoise,The following statement contains a magic number: return (Math.Sin (((Math.PI * 2 * freq) / (sampleRate + r.Next (-(int)(sampleRate * 0.01)' (int)(sampleRate * 0.01)))) * i) * 0.5) + (r.NextDouble () * 0.5);  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,GetBackgroundNoise,The following statement contains a magic number: return (Math.Sin (((Math.PI * 2 * freq) / (sampleRate + r.Next (-(int)(sampleRate * 0.01)' (int)(sampleRate * 0.01)))) * i) * 0.5) + (r.NextDouble () * 0.5);  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,LinkwitzRileyLowPass,The following statement contains a magic number: if (cutoff < 1 || cutoff >= sampleRate / 2) {  	throw new ArgumentOutOfRangeException ("cutoff"' "The cutoff frequency must be between 0 and 'sampleRate' / 2.");  }  
Magic Number,RainGenerator,Generator64Bit,C:\repos\Northern-Path-Technologies_Rain-Generator\Rain Generator\Rain Generator\Generator64Bit.cs,LinkwitzRileyHighPass,The following statement contains a magic number: if (cutoff < 1 || cutoff >= sampleRate / 2) {  	throw new ArgumentOutOfRangeException ("cutoff"' "The cutoff frequency must be between 0 and 'sampleRate' / 2.");  }  
