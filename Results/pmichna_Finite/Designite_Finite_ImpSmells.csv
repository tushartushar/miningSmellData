Implementation smell,Namespace,Class,File,Method,Description
Long Method,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,buildDFA,The method has 104 lines of code.
Complex Method,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,Cyclomatic complexity of the method is 11
Complex Method,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,buildDFA,Cyclomatic complexity of the method is 33
Complex Method,Finite,OutputWindow,C:\repos\pmichna_Finite\Finite\OutputWindow.xaml.cs,btnNextStep_Click,Cyclomatic complexity of the method is 8
Complex Method,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,Cyclomatic complexity of the method is 24
Complex Method,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetUnionSubExpressions,Cyclomatic complexity of the method is 12
Complex Method,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,containsObsoloeteParentheses,Cyclomatic complexity of the method is 10
Complex Method,Finite,SimulationWindow,C:\repos\pmichna_Finite\Finite\SimulationWindow.xaml.cs,generateDot,Cyclomatic complexity of the method is 8
Long Statement,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The length of the statement  "		return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*")); " is 125.
Long Statement,Finite,OutputWindow,C:\repos\pmichna_Finite\Finite\OutputWindow.xaml.cs,dot2bmp,The length of the statement  "	var wrapper = new GraphVizWrapper.GraphVizWrapper (getStartProcessQuery' getProcessStartInfoQuery' registerLayoutPluginCommand); " is 128.
Long Statement,Finite,SimulationWindow,C:\repos\pmichna_Finite\Finite\SimulationWindow.xaml.cs,btnStartSimulation_Click,The length of the statement  "			MessageBox.Show ("Not accepted - your word contains illegal characters or letters' that do not belong to the alphabet."); " is 121.
Long Statement,Finite,SimulationWindow,C:\repos\pmichna_Finite\Finite\SimulationWindow.xaml.cs,generateDot,The length of the statement  "		if (from.RegexLabel == _currentState.RegexLabel && to.RegexLabel == newCurrentState.RegexLabel && _steps [i].Over == _word [_currentChar]) " is 138.
Long Statement,Finite,SimulationWindow,C:\repos\pmichna_Finite\Finite\SimulationWindow.xaml.cs,dot2bmp,The length of the statement  "	var wrapper = new GraphVizWrapper.GraphVizWrapper (getStartProcessQuery' getProcessStartInfoQuery' registerLayoutPluginCommand); " is 128.
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.IsEmptyWord) {  	return CreateEmptySet ();  }  else if (re.Value == a.ToString ()) {  	return new RegularExpression ();  }  else if (re.Value.Length == 1 && !(re.Value == a.ToString ())) {  	return CreateEmptySet ();  }  else if (re.Value.Equals (RegularExpression.EMPTY_SET)) {  	return CreateEmptySet ();  }  else if (re.IsConcatenation) {  	re.GetConcatSubExpressions (out r' out s);  	return Derive (r' a).Concatenate (s).Union (v (r).Concatenate (Derive (s' a)));  }  else if (re.IsKleene) {  	string expUnderStar;  	if (re.Value [0] == '(') {  		expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  	}  	else {  		expUnderStar = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderStar)' a).Concatenate (new RegularExpression (re.Value));  }  else if (re.IsPlus) {  	string expUnderPlus;  	if (re.Value [0] == '(') {  		expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  	}  	else {  		expUnderPlus = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*"));  }  else if (re.IsUnion) {  	re.GetUnionSubExpressions (out r' out s);  	return Derive (r' a).Union (Derive (s' a));  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.IsEmptyWord) {  	return CreateEmptySet ();  }  else if (re.Value == a.ToString ()) {  	return new RegularExpression ();  }  else if (re.Value.Length == 1 && !(re.Value == a.ToString ())) {  	return CreateEmptySet ();  }  else if (re.Value.Equals (RegularExpression.EMPTY_SET)) {  	return CreateEmptySet ();  }  else if (re.IsConcatenation) {  	re.GetConcatSubExpressions (out r' out s);  	return Derive (r' a).Concatenate (s).Union (v (r).Concatenate (Derive (s' a)));  }  else if (re.IsKleene) {  	string expUnderStar;  	if (re.Value [0] == '(') {  		expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  	}  	else {  		expUnderStar = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderStar)' a).Concatenate (new RegularExpression (re.Value));  }  else if (re.IsPlus) {  	string expUnderPlus;  	if (re.Value [0] == '(') {  		expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  	}  	else {  		expUnderPlus = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*"));  }  else if (re.IsUnion) {  	re.GetUnionSubExpressions (out r' out s);  	return Derive (r' a).Union (Derive (s' a));  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.Value == a.ToString ()) {  	return new RegularExpression ();  }  else if (re.Value.Length == 1 && !(re.Value == a.ToString ())) {  	return CreateEmptySet ();  }  else if (re.Value.Equals (RegularExpression.EMPTY_SET)) {  	return CreateEmptySet ();  }  else if (re.IsConcatenation) {  	re.GetConcatSubExpressions (out r' out s);  	return Derive (r' a).Concatenate (s).Union (v (r).Concatenate (Derive (s' a)));  }  else if (re.IsKleene) {  	string expUnderStar;  	if (re.Value [0] == '(') {  		expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  	}  	else {  		expUnderStar = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderStar)' a).Concatenate (new RegularExpression (re.Value));  }  else if (re.IsPlus) {  	string expUnderPlus;  	if (re.Value [0] == '(') {  		expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  	}  	else {  		expUnderPlus = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*"));  }  else if (re.IsUnion) {  	re.GetUnionSubExpressions (out r' out s);  	return Derive (r' a).Union (Derive (s' a));  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.Value == a.ToString ()) {  	return new RegularExpression ();  }  else if (re.Value.Length == 1 && !(re.Value == a.ToString ())) {  	return CreateEmptySet ();  }  else if (re.Value.Equals (RegularExpression.EMPTY_SET)) {  	return CreateEmptySet ();  }  else if (re.IsConcatenation) {  	re.GetConcatSubExpressions (out r' out s);  	return Derive (r' a).Concatenate (s).Union (v (r).Concatenate (Derive (s' a)));  }  else if (re.IsKleene) {  	string expUnderStar;  	if (re.Value [0] == '(') {  		expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  	}  	else {  		expUnderStar = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderStar)' a).Concatenate (new RegularExpression (re.Value));  }  else if (re.IsPlus) {  	string expUnderPlus;  	if (re.Value [0] == '(') {  		expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  	}  	else {  		expUnderPlus = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*"));  }  else if (re.IsUnion) {  	re.GetUnionSubExpressions (out r' out s);  	return Derive (r' a).Union (Derive (s' a));  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.Value.Length == 1 && !(re.Value == a.ToString ())) {  	return CreateEmptySet ();  }  else if (re.Value.Equals (RegularExpression.EMPTY_SET)) {  	return CreateEmptySet ();  }  else if (re.IsConcatenation) {  	re.GetConcatSubExpressions (out r' out s);  	return Derive (r' a).Concatenate (s).Union (v (r).Concatenate (Derive (s' a)));  }  else if (re.IsKleene) {  	string expUnderStar;  	if (re.Value [0] == '(') {  		expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  	}  	else {  		expUnderStar = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderStar)' a).Concatenate (new RegularExpression (re.Value));  }  else if (re.IsPlus) {  	string expUnderPlus;  	if (re.Value [0] == '(') {  		expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  	}  	else {  		expUnderPlus = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*"));  }  else if (re.IsUnion) {  	re.GetUnionSubExpressions (out r' out s);  	return Derive (r' a).Union (Derive (s' a));  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.Value.Length == 1 && !(re.Value == a.ToString ())) {  	return CreateEmptySet ();  }  else if (re.Value.Equals (RegularExpression.EMPTY_SET)) {  	return CreateEmptySet ();  }  else if (re.IsConcatenation) {  	re.GetConcatSubExpressions (out r' out s);  	return Derive (r' a).Concatenate (s).Union (v (r).Concatenate (Derive (s' a)));  }  else if (re.IsKleene) {  	string expUnderStar;  	if (re.Value [0] == '(') {  		expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  	}  	else {  		expUnderStar = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderStar)' a).Concatenate (new RegularExpression (re.Value));  }  else if (re.IsPlus) {  	string expUnderPlus;  	if (re.Value [0] == '(') {  		expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  	}  	else {  		expUnderPlus = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*"));  }  else if (re.IsUnion) {  	re.GetUnionSubExpressions (out r' out s);  	return Derive (r' a).Union (Derive (s' a));  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.Value.Equals (RegularExpression.EMPTY_SET)) {  	return CreateEmptySet ();  }  else if (re.IsConcatenation) {  	re.GetConcatSubExpressions (out r' out s);  	return Derive (r' a).Concatenate (s).Union (v (r).Concatenate (Derive (s' a)));  }  else if (re.IsKleene) {  	string expUnderStar;  	if (re.Value [0] == '(') {  		expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  	}  	else {  		expUnderStar = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderStar)' a).Concatenate (new RegularExpression (re.Value));  }  else if (re.IsPlus) {  	string expUnderPlus;  	if (re.Value [0] == '(') {  		expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  	}  	else {  		expUnderPlus = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*"));  }  else if (re.IsUnion) {  	re.GetUnionSubExpressions (out r' out s);  	return Derive (r' a).Union (Derive (s' a));  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.Value.Equals (RegularExpression.EMPTY_SET)) {  	return CreateEmptySet ();  }  else if (re.IsConcatenation) {  	re.GetConcatSubExpressions (out r' out s);  	return Derive (r' a).Concatenate (s).Union (v (r).Concatenate (Derive (s' a)));  }  else if (re.IsKleene) {  	string expUnderStar;  	if (re.Value [0] == '(') {  		expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  	}  	else {  		expUnderStar = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderStar)' a).Concatenate (new RegularExpression (re.Value));  }  else if (re.IsPlus) {  	string expUnderPlus;  	if (re.Value [0] == '(') {  		expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  	}  	else {  		expUnderPlus = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*"));  }  else if (re.IsUnion) {  	re.GetUnionSubExpressions (out r' out s);  	return Derive (r' a).Union (Derive (s' a));  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.IsConcatenation) {  	re.GetConcatSubExpressions (out r' out s);  	return Derive (r' a).Concatenate (s).Union (v (r).Concatenate (Derive (s' a)));  }  else if (re.IsKleene) {  	string expUnderStar;  	if (re.Value [0] == '(') {  		expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  	}  	else {  		expUnderStar = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderStar)' a).Concatenate (new RegularExpression (re.Value));  }  else if (re.IsPlus) {  	string expUnderPlus;  	if (re.Value [0] == '(') {  		expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  	}  	else {  		expUnderPlus = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*"));  }  else if (re.IsUnion) {  	re.GetUnionSubExpressions (out r' out s);  	return Derive (r' a).Union (Derive (s' a));  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.IsConcatenation) {  	re.GetConcatSubExpressions (out r' out s);  	return Derive (r' a).Concatenate (s).Union (v (r).Concatenate (Derive (s' a)));  }  else if (re.IsKleene) {  	string expUnderStar;  	if (re.Value [0] == '(') {  		expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  	}  	else {  		expUnderStar = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderStar)' a).Concatenate (new RegularExpression (re.Value));  }  else if (re.IsPlus) {  	string expUnderPlus;  	if (re.Value [0] == '(') {  		expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  	}  	else {  		expUnderPlus = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*"));  }  else if (re.IsUnion) {  	re.GetUnionSubExpressions (out r' out s);  	return Derive (r' a).Union (Derive (s' a));  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.IsKleene) {  	string expUnderStar;  	if (re.Value [0] == '(') {  		expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  	}  	else {  		expUnderStar = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderStar)' a).Concatenate (new RegularExpression (re.Value));  }  else if (re.IsPlus) {  	string expUnderPlus;  	if (re.Value [0] == '(') {  		expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  	}  	else {  		expUnderPlus = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*"));  }  else if (re.IsUnion) {  	re.GetUnionSubExpressions (out r' out s);  	return Derive (r' a).Union (Derive (s' a));  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.IsKleene) {  	string expUnderStar;  	if (re.Value [0] == '(') {  		expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  	}  	else {  		expUnderStar = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderStar)' a).Concatenate (new RegularExpression (re.Value));  }  else if (re.IsPlus) {  	string expUnderPlus;  	if (re.Value [0] == '(') {  		expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  	}  	else {  		expUnderPlus = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*"));  }  else if (re.IsUnion) {  	re.GetUnionSubExpressions (out r' out s);  	return Derive (r' a).Union (Derive (s' a));  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.Value [0] == '(') {  	expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  }  else {  	expUnderStar = re.Value [0].ToString ();  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: expUnderStar = re.Value.Substring (1' re.Value.Length - 3);  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.IsPlus) {  	string expUnderPlus;  	if (re.Value [0] == '(') {  		expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  	}  	else {  		expUnderPlus = re.Value [0].ToString ();  	}  	return Derive (new RegularExpression (expUnderPlus)' a).Concatenate (new RegularExpression ("(" + expUnderPlus + ")" + "*"));  }  else if (re.IsUnion) {  	re.GetUnionSubExpressions (out r' out s);  	return Derive (r' a).Union (Derive (s' a));  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: if (re.Value [0] == '(') {  	expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  }  else {  	expUnderPlus = re.Value [0].ToString ();  }  
Magic Number,Finite,DFABuilder,C:\repos\pmichna_Finite\Finite\DFABuilder.cs,Derive,The following statement contains a magic number: expUnderPlus = re.Value.Substring (1' re.Value.Length - 4);  
Magic Number,Finite,OutputWindow,C:\repos\pmichna_Finite\Finite\OutputWindow.xaml.cs,OutputWindow,The following statement contains a magic number: if (_dfa.States.Count >= 25) {  	MessageBox.Show ("Warning! There are more than 25 states generated. The proper working of the application is not guaranteed.");  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [0]) {  case '(':  	//Beginning with a '('  	Stack stack = new Stack ();  	int parenthesesCounter = 0;  	for (int i = 0; i < Value.Length; i++) {  		if (Value [i] == '(')  			parenthesesCounter++;  		else if (Value [i] == ')')  			parenthesesCounter--;  		stack.Push (Value [i]);  		if (parenthesesCounter == 0) {  			StringBuilder sb = new StringBuilder ();  			while (stack.Count != 0)  				sb.Append (stack.Pop ());  			char[] rValue = sb.ToString ().ToCharArray ();  			Array.Reverse (rValue);  			switch (Value [i + 1]) {  			case '*':  				r = new RegularExpression (new String (rValue) + Value [i + 1]);  				s = new RegularExpression (Value.Substring (i + 2));  				break;  			case '^':  				r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  				s = new RegularExpression (Value.Substring (i + 3));  				break;  			default:  				r = new RegularExpression (new String (rValue));  				s = new RegularExpression (Value.Substring (i + 1));  				break;  			}  			return;  		}  	}  	break;  default:  	//Beginning with a character  	switch (Value [1]) {  	case '*':  		r = new RegularExpression (Value.Substring (0' 2));  		s = new RegularExpression (Value.Substring (2));  		break;  	case '^':  		r = new RegularExpression (Value.Substring (0' 3));  		s = new RegularExpression (Value.Substring (3));  		break;  	default:  		r = new RegularExpression (Value [0]);  		s = new RegularExpression (Value.Substring (1));  		break;  	}  	return;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [0]) {  case '(':  	//Beginning with a '('  	Stack stack = new Stack ();  	int parenthesesCounter = 0;  	for (int i = 0; i < Value.Length; i++) {  		if (Value [i] == '(')  			parenthesesCounter++;  		else if (Value [i] == ')')  			parenthesesCounter--;  		stack.Push (Value [i]);  		if (parenthesesCounter == 0) {  			StringBuilder sb = new StringBuilder ();  			while (stack.Count != 0)  				sb.Append (stack.Pop ());  			char[] rValue = sb.ToString ().ToCharArray ();  			Array.Reverse (rValue);  			switch (Value [i + 1]) {  			case '*':  				r = new RegularExpression (new String (rValue) + Value [i + 1]);  				s = new RegularExpression (Value.Substring (i + 2));  				break;  			case '^':  				r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  				s = new RegularExpression (Value.Substring (i + 3));  				break;  			default:  				r = new RegularExpression (new String (rValue));  				s = new RegularExpression (Value.Substring (i + 1));  				break;  			}  			return;  		}  	}  	break;  default:  	//Beginning with a character  	switch (Value [1]) {  	case '*':  		r = new RegularExpression (Value.Substring (0' 2));  		s = new RegularExpression (Value.Substring (2));  		break;  	case '^':  		r = new RegularExpression (Value.Substring (0' 3));  		s = new RegularExpression (Value.Substring (3));  		break;  	default:  		r = new RegularExpression (Value [0]);  		s = new RegularExpression (Value.Substring (1));  		break;  	}  	return;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [0]) {  case '(':  	//Beginning with a '('  	Stack stack = new Stack ();  	int parenthesesCounter = 0;  	for (int i = 0; i < Value.Length; i++) {  		if (Value [i] == '(')  			parenthesesCounter++;  		else if (Value [i] == ')')  			parenthesesCounter--;  		stack.Push (Value [i]);  		if (parenthesesCounter == 0) {  			StringBuilder sb = new StringBuilder ();  			while (stack.Count != 0)  				sb.Append (stack.Pop ());  			char[] rValue = sb.ToString ().ToCharArray ();  			Array.Reverse (rValue);  			switch (Value [i + 1]) {  			case '*':  				r = new RegularExpression (new String (rValue) + Value [i + 1]);  				s = new RegularExpression (Value.Substring (i + 2));  				break;  			case '^':  				r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  				s = new RegularExpression (Value.Substring (i + 3));  				break;  			default:  				r = new RegularExpression (new String (rValue));  				s = new RegularExpression (Value.Substring (i + 1));  				break;  			}  			return;  		}  	}  	break;  default:  	//Beginning with a character  	switch (Value [1]) {  	case '*':  		r = new RegularExpression (Value.Substring (0' 2));  		s = new RegularExpression (Value.Substring (2));  		break;  	case '^':  		r = new RegularExpression (Value.Substring (0' 3));  		s = new RegularExpression (Value.Substring (3));  		break;  	default:  		r = new RegularExpression (Value [0]);  		s = new RegularExpression (Value.Substring (1));  		break;  	}  	return;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [0]) {  case '(':  	//Beginning with a '('  	Stack stack = new Stack ();  	int parenthesesCounter = 0;  	for (int i = 0; i < Value.Length; i++) {  		if (Value [i] == '(')  			parenthesesCounter++;  		else if (Value [i] == ')')  			parenthesesCounter--;  		stack.Push (Value [i]);  		if (parenthesesCounter == 0) {  			StringBuilder sb = new StringBuilder ();  			while (stack.Count != 0)  				sb.Append (stack.Pop ());  			char[] rValue = sb.ToString ().ToCharArray ();  			Array.Reverse (rValue);  			switch (Value [i + 1]) {  			case '*':  				r = new RegularExpression (new String (rValue) + Value [i + 1]);  				s = new RegularExpression (Value.Substring (i + 2));  				break;  			case '^':  				r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  				s = new RegularExpression (Value.Substring (i + 3));  				break;  			default:  				r = new RegularExpression (new String (rValue));  				s = new RegularExpression (Value.Substring (i + 1));  				break;  			}  			return;  		}  	}  	break;  default:  	//Beginning with a character  	switch (Value [1]) {  	case '*':  		r = new RegularExpression (Value.Substring (0' 2));  		s = new RegularExpression (Value.Substring (2));  		break;  	case '^':  		r = new RegularExpression (Value.Substring (0' 3));  		s = new RegularExpression (Value.Substring (3));  		break;  	default:  		r = new RegularExpression (Value [0]);  		s = new RegularExpression (Value.Substring (1));  		break;  	}  	return;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [0]) {  case '(':  	//Beginning with a '('  	Stack stack = new Stack ();  	int parenthesesCounter = 0;  	for (int i = 0; i < Value.Length; i++) {  		if (Value [i] == '(')  			parenthesesCounter++;  		else if (Value [i] == ')')  			parenthesesCounter--;  		stack.Push (Value [i]);  		if (parenthesesCounter == 0) {  			StringBuilder sb = new StringBuilder ();  			while (stack.Count != 0)  				sb.Append (stack.Pop ());  			char[] rValue = sb.ToString ().ToCharArray ();  			Array.Reverse (rValue);  			switch (Value [i + 1]) {  			case '*':  				r = new RegularExpression (new String (rValue) + Value [i + 1]);  				s = new RegularExpression (Value.Substring (i + 2));  				break;  			case '^':  				r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  				s = new RegularExpression (Value.Substring (i + 3));  				break;  			default:  				r = new RegularExpression (new String (rValue));  				s = new RegularExpression (Value.Substring (i + 1));  				break;  			}  			return;  		}  	}  	break;  default:  	//Beginning with a character  	switch (Value [1]) {  	case '*':  		r = new RegularExpression (Value.Substring (0' 2));  		s = new RegularExpression (Value.Substring (2));  		break;  	case '^':  		r = new RegularExpression (Value.Substring (0' 3));  		s = new RegularExpression (Value.Substring (3));  		break;  	default:  		r = new RegularExpression (Value [0]);  		s = new RegularExpression (Value.Substring (1));  		break;  	}  	return;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [0]) {  case '(':  	//Beginning with a '('  	Stack stack = new Stack ();  	int parenthesesCounter = 0;  	for (int i = 0; i < Value.Length; i++) {  		if (Value [i] == '(')  			parenthesesCounter++;  		else if (Value [i] == ')')  			parenthesesCounter--;  		stack.Push (Value [i]);  		if (parenthesesCounter == 0) {  			StringBuilder sb = new StringBuilder ();  			while (stack.Count != 0)  				sb.Append (stack.Pop ());  			char[] rValue = sb.ToString ().ToCharArray ();  			Array.Reverse (rValue);  			switch (Value [i + 1]) {  			case '*':  				r = new RegularExpression (new String (rValue) + Value [i + 1]);  				s = new RegularExpression (Value.Substring (i + 2));  				break;  			case '^':  				r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  				s = new RegularExpression (Value.Substring (i + 3));  				break;  			default:  				r = new RegularExpression (new String (rValue));  				s = new RegularExpression (Value.Substring (i + 1));  				break;  			}  			return;  		}  	}  	break;  default:  	//Beginning with a character  	switch (Value [1]) {  	case '*':  		r = new RegularExpression (Value.Substring (0' 2));  		s = new RegularExpression (Value.Substring (2));  		break;  	case '^':  		r = new RegularExpression (Value.Substring (0' 3));  		s = new RegularExpression (Value.Substring (3));  		break;  	default:  		r = new RegularExpression (Value [0]);  		s = new RegularExpression (Value.Substring (1));  		break;  	}  	return;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [0]) {  case '(':  	//Beginning with a '('  	Stack stack = new Stack ();  	int parenthesesCounter = 0;  	for (int i = 0; i < Value.Length; i++) {  		if (Value [i] == '(')  			parenthesesCounter++;  		else if (Value [i] == ')')  			parenthesesCounter--;  		stack.Push (Value [i]);  		if (parenthesesCounter == 0) {  			StringBuilder sb = new StringBuilder ();  			while (stack.Count != 0)  				sb.Append (stack.Pop ());  			char[] rValue = sb.ToString ().ToCharArray ();  			Array.Reverse (rValue);  			switch (Value [i + 1]) {  			case '*':  				r = new RegularExpression (new String (rValue) + Value [i + 1]);  				s = new RegularExpression (Value.Substring (i + 2));  				break;  			case '^':  				r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  				s = new RegularExpression (Value.Substring (i + 3));  				break;  			default:  				r = new RegularExpression (new String (rValue));  				s = new RegularExpression (Value.Substring (i + 1));  				break;  			}  			return;  		}  	}  	break;  default:  	//Beginning with a character  	switch (Value [1]) {  	case '*':  		r = new RegularExpression (Value.Substring (0' 2));  		s = new RegularExpression (Value.Substring (2));  		break;  	case '^':  		r = new RegularExpression (Value.Substring (0' 3));  		s = new RegularExpression (Value.Substring (3));  		break;  	default:  		r = new RegularExpression (Value [0]);  		s = new RegularExpression (Value.Substring (1));  		break;  	}  	return;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: for (int i = 0; i < Value.Length; i++) {  	if (Value [i] == '(')  		parenthesesCounter++;  	else if (Value [i] == ')')  		parenthesesCounter--;  	stack.Push (Value [i]);  	if (parenthesesCounter == 0) {  		StringBuilder sb = new StringBuilder ();  		while (stack.Count != 0)  			sb.Append (stack.Pop ());  		char[] rValue = sb.ToString ().ToCharArray ();  		Array.Reverse (rValue);  		switch (Value [i + 1]) {  		case '*':  			r = new RegularExpression (new String (rValue) + Value [i + 1]);  			s = new RegularExpression (Value.Substring (i + 2));  			break;  		case '^':  			r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  			s = new RegularExpression (Value.Substring (i + 3));  			break;  		default:  			r = new RegularExpression (new String (rValue));  			s = new RegularExpression (Value.Substring (i + 1));  			break;  		}  		return;  	}  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: for (int i = 0; i < Value.Length; i++) {  	if (Value [i] == '(')  		parenthesesCounter++;  	else if (Value [i] == ')')  		parenthesesCounter--;  	stack.Push (Value [i]);  	if (parenthesesCounter == 0) {  		StringBuilder sb = new StringBuilder ();  		while (stack.Count != 0)  			sb.Append (stack.Pop ());  		char[] rValue = sb.ToString ().ToCharArray ();  		Array.Reverse (rValue);  		switch (Value [i + 1]) {  		case '*':  			r = new RegularExpression (new String (rValue) + Value [i + 1]);  			s = new RegularExpression (Value.Substring (i + 2));  			break;  		case '^':  			r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  			s = new RegularExpression (Value.Substring (i + 3));  			break;  		default:  			r = new RegularExpression (new String (rValue));  			s = new RegularExpression (Value.Substring (i + 1));  			break;  		}  		return;  	}  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: for (int i = 0; i < Value.Length; i++) {  	if (Value [i] == '(')  		parenthesesCounter++;  	else if (Value [i] == ')')  		parenthesesCounter--;  	stack.Push (Value [i]);  	if (parenthesesCounter == 0) {  		StringBuilder sb = new StringBuilder ();  		while (stack.Count != 0)  			sb.Append (stack.Pop ());  		char[] rValue = sb.ToString ().ToCharArray ();  		Array.Reverse (rValue);  		switch (Value [i + 1]) {  		case '*':  			r = new RegularExpression (new String (rValue) + Value [i + 1]);  			s = new RegularExpression (Value.Substring (i + 2));  			break;  		case '^':  			r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  			s = new RegularExpression (Value.Substring (i + 3));  			break;  		default:  			r = new RegularExpression (new String (rValue));  			s = new RegularExpression (Value.Substring (i + 1));  			break;  		}  		return;  	}  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: if (parenthesesCounter == 0) {  	StringBuilder sb = new StringBuilder ();  	while (stack.Count != 0)  		sb.Append (stack.Pop ());  	char[] rValue = sb.ToString ().ToCharArray ();  	Array.Reverse (rValue);  	switch (Value [i + 1]) {  	case '*':  		r = new RegularExpression (new String (rValue) + Value [i + 1]);  		s = new RegularExpression (Value.Substring (i + 2));  		break;  	case '^':  		r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  		s = new RegularExpression (Value.Substring (i + 3));  		break;  	default:  		r = new RegularExpression (new String (rValue));  		s = new RegularExpression (Value.Substring (i + 1));  		break;  	}  	return;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: if (parenthesesCounter == 0) {  	StringBuilder sb = new StringBuilder ();  	while (stack.Count != 0)  		sb.Append (stack.Pop ());  	char[] rValue = sb.ToString ().ToCharArray ();  	Array.Reverse (rValue);  	switch (Value [i + 1]) {  	case '*':  		r = new RegularExpression (new String (rValue) + Value [i + 1]);  		s = new RegularExpression (Value.Substring (i + 2));  		break;  	case '^':  		r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  		s = new RegularExpression (Value.Substring (i + 3));  		break;  	default:  		r = new RegularExpression (new String (rValue));  		s = new RegularExpression (Value.Substring (i + 1));  		break;  	}  	return;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: if (parenthesesCounter == 0) {  	StringBuilder sb = new StringBuilder ();  	while (stack.Count != 0)  		sb.Append (stack.Pop ());  	char[] rValue = sb.ToString ().ToCharArray ();  	Array.Reverse (rValue);  	switch (Value [i + 1]) {  	case '*':  		r = new RegularExpression (new String (rValue) + Value [i + 1]);  		s = new RegularExpression (Value.Substring (i + 2));  		break;  	case '^':  		r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  		s = new RegularExpression (Value.Substring (i + 3));  		break;  	default:  		r = new RegularExpression (new String (rValue));  		s = new RegularExpression (Value.Substring (i + 1));  		break;  	}  	return;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [i + 1]) {  case '*':  	r = new RegularExpression (new String (rValue) + Value [i + 1]);  	s = new RegularExpression (Value.Substring (i + 2));  	break;  case '^':  	r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  	s = new RegularExpression (Value.Substring (i + 3));  	break;  default:  	r = new RegularExpression (new String (rValue));  	s = new RegularExpression (Value.Substring (i + 1));  	break;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [i + 1]) {  case '*':  	r = new RegularExpression (new String (rValue) + Value [i + 1]);  	s = new RegularExpression (Value.Substring (i + 2));  	break;  case '^':  	r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  	s = new RegularExpression (Value.Substring (i + 3));  	break;  default:  	r = new RegularExpression (new String (rValue));  	s = new RegularExpression (Value.Substring (i + 1));  	break;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [i + 1]) {  case '*':  	r = new RegularExpression (new String (rValue) + Value [i + 1]);  	s = new RegularExpression (Value.Substring (i + 2));  	break;  case '^':  	r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  	s = new RegularExpression (Value.Substring (i + 3));  	break;  default:  	r = new RegularExpression (new String (rValue));  	s = new RegularExpression (Value.Substring (i + 1));  	break;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: s = new RegularExpression (Value.Substring (i + 2));  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: r = new RegularExpression (new String (rValue) + Value [i + 1] + Value [i + 2]);  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: s = new RegularExpression (Value.Substring (i + 3));  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [1]) {  case '*':  	r = new RegularExpression (Value.Substring (0' 2));  	s = new RegularExpression (Value.Substring (2));  	break;  case '^':  	r = new RegularExpression (Value.Substring (0' 3));  	s = new RegularExpression (Value.Substring (3));  	break;  default:  	r = new RegularExpression (Value [0]);  	s = new RegularExpression (Value.Substring (1));  	break;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [1]) {  case '*':  	r = new RegularExpression (Value.Substring (0' 2));  	s = new RegularExpression (Value.Substring (2));  	break;  case '^':  	r = new RegularExpression (Value.Substring (0' 3));  	s = new RegularExpression (Value.Substring (3));  	break;  default:  	r = new RegularExpression (Value [0]);  	s = new RegularExpression (Value.Substring (1));  	break;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [1]) {  case '*':  	r = new RegularExpression (Value.Substring (0' 2));  	s = new RegularExpression (Value.Substring (2));  	break;  case '^':  	r = new RegularExpression (Value.Substring (0' 3));  	s = new RegularExpression (Value.Substring (3));  	break;  default:  	r = new RegularExpression (Value [0]);  	s = new RegularExpression (Value.Substring (1));  	break;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: switch (Value [1]) {  case '*':  	r = new RegularExpression (Value.Substring (0' 2));  	s = new RegularExpression (Value.Substring (2));  	break;  case '^':  	r = new RegularExpression (Value.Substring (0' 3));  	s = new RegularExpression (Value.Substring (3));  	break;  default:  	r = new RegularExpression (Value [0]);  	s = new RegularExpression (Value.Substring (1));  	break;  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: r = new RegularExpression (Value.Substring (0' 2));  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: s = new RegularExpression (Value.Substring (2));  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: r = new RegularExpression (Value.Substring (0' 3));  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetConcatSubExpressions,The following statement contains a magic number: s = new RegularExpression (Value.Substring (3));  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,removeObsoleteParentheses,The following statement contains a magic number: while (containsObsoloeteParentheses (str)) {  	str = str.Substring (1' str.Length - 2);  }  
Magic Number,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,removeObsoleteParentheses,The following statement contains a magic number: str = str.Substring (1' str.Length - 2);  
Missing Default,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,GetUnionSubExpressions,The following switch statement is missing a default case: switch (Value [i]) {  case '(':  	parentheses++;  	break;  case ')':  	parentheses--;  	break;  case '+':  	if (parentheses == 0 && Value [i - 1] != '^') {  		r = new RegularExpression (Value.Substring (0' i));  		s = new RegularExpression (Value.Substring (i + 1));  	}  	break;  }  
Missing Default,Finite,RegularExpression,C:\repos\pmichna_Finite\Finite\RegularExpression.cs,containsObsoloeteParentheses,The following switch statement is missing a default case: switch (str [i]) {  case '(':  	parentheses++;  	break;  case ')':  	parentheses--;  	if (closedInObsoleteParentheses && parentheses == 0 && i != str.Length - 1)  		closedInObsoleteParentheses = false;  	break;  }  
