Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ACME.Examples,Program,C:\repos\discretelogics_TeaFiles.Net\Examples\AnalyzeTicks\Program.cs,Run,Cyclomatic complexity of the method is 8
Long Identifier,ACME.Examples,Program,C:\repos\discretelogics_TeaFiles.Net\Examples\AnalyzeTicks\Program.cs,Run,The length of the parameter minimumExpectedTicksPerSession is 30.
Long Statement,ACME.Examples,Program,C:\repos\discretelogics_TeaFiles.Net\Examples\AnalyzeTicks\Program.cs,Main,The length of the statement  "		bool memoryMapped = args.Count () >= 2 ? args [1].StartsWith ("m"' StringComparison.InvariantCultureIgnoreCase) : false; " is 120.
Magic Number,ACME.Examples,Program,C:\repos\discretelogics_TeaFiles.Net\Examples\AnalyzeTicks\Program.cs,Main,The following statement contains a magic number: try {  	if (args.Count () < 1)  		throw new Exception ("Usage: AnalyzeTicks <filename> [m]emorymapped|read [n]times");  	string filename = args [0];  	bool memoryMapped = args.Count () >= 2 ? args [1].StartsWith ("m"' StringComparison.InvariantCultureIgnoreCase) : false;  	int n = args.Count () >= 3 ? int.Parse (args [2]) : 1;  	Console.WriteLine (Environment.Is64BitProcess ? "64bit" : "32bit");  	for (int i = 1; i <= n; i++) {  		Console.WriteLine ("----------------------------------");  		Console.WriteLine (i + ". run");  		var sw = Stopwatch.StartNew ();  		Run (filename' memoryMapped' n == 1);  		sw.Stop ();  		Console.WriteLine ("execution time = " + sw.Elapsed.TotalMilliseconds + "ms");  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,ACME.Examples,Program,C:\repos\discretelogics_TeaFiles.Net\Examples\AnalyzeTicks\Program.cs,Main,The following statement contains a magic number: try {  	if (args.Count () < 1)  		throw new Exception ("Usage: AnalyzeTicks <filename> [m]emorymapped|read [n]times");  	string filename = args [0];  	bool memoryMapped = args.Count () >= 2 ? args [1].StartsWith ("m"' StringComparison.InvariantCultureIgnoreCase) : false;  	int n = args.Count () >= 3 ? int.Parse (args [2]) : 1;  	Console.WriteLine (Environment.Is64BitProcess ? "64bit" : "32bit");  	for (int i = 1; i <= n; i++) {  		Console.WriteLine ("----------------------------------");  		Console.WriteLine (i + ". run");  		var sw = Stopwatch.StartNew ();  		Run (filename' memoryMapped' n == 1);  		sw.Stop ();  		Console.WriteLine ("execution time = " + sw.Elapsed.TotalMilliseconds + "ms");  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,ACME.Examples,Program,C:\repos\discretelogics_TeaFiles.Net\Examples\AnalyzeTicks\Program.cs,Main,The following statement contains a magic number: try {  	if (args.Count () < 1)  		throw new Exception ("Usage: AnalyzeTicks <filename> [m]emorymapped|read [n]times");  	string filename = args [0];  	bool memoryMapped = args.Count () >= 2 ? args [1].StartsWith ("m"' StringComparison.InvariantCultureIgnoreCase) : false;  	int n = args.Count () >= 3 ? int.Parse (args [2]) : 1;  	Console.WriteLine (Environment.Is64BitProcess ? "64bit" : "32bit");  	for (int i = 1; i <= n; i++) {  		Console.WriteLine ("----------------------------------");  		Console.WriteLine (i + ". run");  		var sw = Stopwatch.StartNew ();  		Run (filename' memoryMapped' n == 1);  		sw.Stop ();  		Console.WriteLine ("execution time = " + sw.Elapsed.TotalMilliseconds + "ms");  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,ACME.Examples,Program,C:\repos\discretelogics_TeaFiles.Net\Examples\AnalyzeTicks\Program.cs,Run,The following statement contains a magic number: if (displayValues) {  	double minimumExpectedTicksPerSession = median / 2.0;  	Console.WriteLine ("First 10 sessions:");  	foreach (var s in stats.Sessions.Take (10)) {  		Console.WriteLine (s + " " + ((s.TickCount >= minimumExpectedTicksPerSession) ? "OK" : "QUESTIONABLE"));  	}  }  
Magic Number,ACME.Examples,Program,C:\repos\discretelogics_TeaFiles.Net\Examples\AnalyzeTicks\Program.cs,Run,The following statement contains a magic number: if (displayValues) {  	double minimumExpectedTicksPerSession = median / 2.0;  	Console.WriteLine ("First 10 sessions:");  	foreach (var s in stats.Sessions.Take (10)) {  		Console.WriteLine (s + " " + ((s.TickCount >= minimumExpectedTicksPerSession) ? "OK" : "QUESTIONABLE"));  	}  }  
Magic Number,ACME.Examples,Program,C:\repos\discretelogics_TeaFiles.Net\Examples\AnalyzeTicks\Program.cs,Run,The following statement contains a magic number: foreach (var s in stats.Sessions.Take (10)) {  	Console.WriteLine (s + " " + ((s.TickCount >= minimumExpectedTicksPerSession) ? "OK" : "QUESTIONABLE"));  }  
