Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Zysl.BinStores,FtpStore,C:\repos\mafutrct_Zysl\trunk\Zysl\BinStores\FtpStore.cs,FtpStore,The method has 5 parameters.
Long Statement,Zysl.BinStores,GenericBackedCache,C:\repos\mafutrct_Zysl\trunk\Zysl\BinStores\GenericBackedCache.cs,Compact,The length of the statement  "				_Log.Info ("Cache.Compact: MaxSize {0}' Dirty {1}' Access {2}' AccessSum {3}' efficiency previous {4:0.00}' now {5:0.00}. Cache {6} items' Backend {7} items."'" is 159.
Magic Number,Zysl.BinStores,GenericBackedCache,C:\repos\mafutrct_Zysl\trunk\Zysl\BinStores\GenericBackedCache.cs,Compact,The following statement contains a magic number: if (_AccessCache.Count > MaxSize) {  	/* 				 * calc stats 				 */var oldEff = EfficiencyFactor;  	EfficiencyFactor = 0.5 * EfficiencyFactor + 0.5 * _AccessCache.Values.Sum () / _AccessCache.Count;  	/* 				_Log.Info ("Cache.Compact: MaxSize {0}' Dirty {1}' Access {2}' AccessSum {3}' efficiency previous {4:0.00}' now {5:0.00}. Cache {6} items' Backend {7} items."' 					 MaxSize' 					 _Dirty.Count' 					 _AccessCache.Count' 					 _AccessCache.Values.Sum ()' 					 oldEff' 					 EfficiencyFactor' 					 _Cache.Count' 					 _Files.Count); 				*//* 				 * compact cache 				 */var items = _AccessCache.OrderByDescending (x => x.Value).Skip (MaxSize / 2).ToArray ();  	foreach (var item in items) {  		if (_Dirty.Contains (item.Key)) {  			_Files [item.Key] = _Cache [item.Key];  			_Dirty.Remove (item.Key);  		}  		_Cache.Remove (item.Key);  		_AccessCache.Remove (item.Key);  	}  	foreach (var item in _AccessCache.ToArray ()) {  		_AccessCache [item.Key] = item.Value / 2;  	}  }  
Magic Number,Zysl.BinStores,GenericBackedCache,C:\repos\mafutrct_Zysl\trunk\Zysl\BinStores\GenericBackedCache.cs,Compact,The following statement contains a magic number: if (_AccessCache.Count > MaxSize) {  	/* 				 * calc stats 				 */var oldEff = EfficiencyFactor;  	EfficiencyFactor = 0.5 * EfficiencyFactor + 0.5 * _AccessCache.Values.Sum () / _AccessCache.Count;  	/* 				_Log.Info ("Cache.Compact: MaxSize {0}' Dirty {1}' Access {2}' AccessSum {3}' efficiency previous {4:0.00}' now {5:0.00}. Cache {6} items' Backend {7} items."' 					 MaxSize' 					 _Dirty.Count' 					 _AccessCache.Count' 					 _AccessCache.Values.Sum ()' 					 oldEff' 					 EfficiencyFactor' 					 _Cache.Count' 					 _Files.Count); 				*//* 				 * compact cache 				 */var items = _AccessCache.OrderByDescending (x => x.Value).Skip (MaxSize / 2).ToArray ();  	foreach (var item in items) {  		if (_Dirty.Contains (item.Key)) {  			_Files [item.Key] = _Cache [item.Key];  			_Dirty.Remove (item.Key);  		}  		_Cache.Remove (item.Key);  		_AccessCache.Remove (item.Key);  	}  	foreach (var item in _AccessCache.ToArray ()) {  		_AccessCache [item.Key] = item.Value / 2;  	}  }  
Magic Number,Zysl.BinStores,GenericBackedCache,C:\repos\mafutrct_Zysl\trunk\Zysl\BinStores\GenericBackedCache.cs,Compact,The following statement contains a magic number: if (_AccessCache.Count > MaxSize) {  	/* 				 * calc stats 				 */var oldEff = EfficiencyFactor;  	EfficiencyFactor = 0.5 * EfficiencyFactor + 0.5 * _AccessCache.Values.Sum () / _AccessCache.Count;  	/* 				_Log.Info ("Cache.Compact: MaxSize {0}' Dirty {1}' Access {2}' AccessSum {3}' efficiency previous {4:0.00}' now {5:0.00}. Cache {6} items' Backend {7} items."' 					 MaxSize' 					 _Dirty.Count' 					 _AccessCache.Count' 					 _AccessCache.Values.Sum ()' 					 oldEff' 					 EfficiencyFactor' 					 _Cache.Count' 					 _Files.Count); 				*//* 				 * compact cache 				 */var items = _AccessCache.OrderByDescending (x => x.Value).Skip (MaxSize / 2).ToArray ();  	foreach (var item in items) {  		if (_Dirty.Contains (item.Key)) {  			_Files [item.Key] = _Cache [item.Key];  			_Dirty.Remove (item.Key);  		}  		_Cache.Remove (item.Key);  		_AccessCache.Remove (item.Key);  	}  	foreach (var item in _AccessCache.ToArray ()) {  		_AccessCache [item.Key] = item.Value / 2;  	}  }  
Magic Number,Zysl.BinStores,GenericBackedCache,C:\repos\mafutrct_Zysl\trunk\Zysl\BinStores\GenericBackedCache.cs,Compact,The following statement contains a magic number: if (_AccessCache.Count > MaxSize) {  	/* 				 * calc stats 				 */var oldEff = EfficiencyFactor;  	EfficiencyFactor = 0.5 * EfficiencyFactor + 0.5 * _AccessCache.Values.Sum () / _AccessCache.Count;  	/* 				_Log.Info ("Cache.Compact: MaxSize {0}' Dirty {1}' Access {2}' AccessSum {3}' efficiency previous {4:0.00}' now {5:0.00}. Cache {6} items' Backend {7} items."' 					 MaxSize' 					 _Dirty.Count' 					 _AccessCache.Count' 					 _AccessCache.Values.Sum ()' 					 oldEff' 					 EfficiencyFactor' 					 _Cache.Count' 					 _Files.Count); 				*//* 				 * compact cache 				 */var items = _AccessCache.OrderByDescending (x => x.Value).Skip (MaxSize / 2).ToArray ();  	foreach (var item in items) {  		if (_Dirty.Contains (item.Key)) {  			_Files [item.Key] = _Cache [item.Key];  			_Dirty.Remove (item.Key);  		}  		_Cache.Remove (item.Key);  		_AccessCache.Remove (item.Key);  	}  	foreach (var item in _AccessCache.ToArray ()) {  		_AccessCache [item.Key] = item.Value / 2;  	}  }  
Magic Number,Zysl.BinStores,GenericBackedCache,C:\repos\mafutrct_Zysl\trunk\Zysl\BinStores\GenericBackedCache.cs,Compact,The following statement contains a magic number: EfficiencyFactor = 0.5 * EfficiencyFactor + 0.5 * _AccessCache.Values.Sum () / _AccessCache.Count;  
Magic Number,Zysl.BinStores,GenericBackedCache,C:\repos\mafutrct_Zysl\trunk\Zysl\BinStores\GenericBackedCache.cs,Compact,The following statement contains a magic number: EfficiencyFactor = 0.5 * EfficiencyFactor + 0.5 * _AccessCache.Values.Sum () / _AccessCache.Count;  
Magic Number,Zysl.BinStores,GenericBackedCache,C:\repos\mafutrct_Zysl\trunk\Zysl\BinStores\GenericBackedCache.cs,Compact,The following statement contains a magic number: foreach (var item in _AccessCache.ToArray ()) {  	_AccessCache [item.Key] = item.Value / 2;  }  
Magic Number,Zysl.BinStores,GenericBackedCache,C:\repos\mafutrct_Zysl\trunk\Zysl\BinStores\GenericBackedCache.cs,Compact,The following statement contains a magic number: _AccessCache [item.Key] = item.Value / 2;  
Magic Number,Zysl.KVS,KVStore,C:\repos\mafutrct_Zysl\trunk\Zysl\KVS\KVStore.cs,HexStr,The following statement contains a magic number: for (int y = 0' x = 0; y < p.Length; ++y' ++x) {  	b = ((byte)(p [y] >> 4));  	c [x] = (char)(b > 9 ? b + 0x37 : b + 0x30);  	b = ((byte)(p [y] & 0xF));  	c [++x] = (char)(b > 9 ? b + 0x37 : b + 0x30);  }  
Magic Number,Zysl.KVS,KVStore,C:\repos\mafutrct_Zysl\trunk\Zysl\KVS\KVStore.cs,HexStr,The following statement contains a magic number: for (int y = 0' x = 0; y < p.Length; ++y' ++x) {  	b = ((byte)(p [y] >> 4));  	c [x] = (char)(b > 9 ? b + 0x37 : b + 0x30);  	b = ((byte)(p [y] & 0xF));  	c [++x] = (char)(b > 9 ? b + 0x37 : b + 0x30);  }  
Magic Number,Zysl.KVS,KVStore,C:\repos\mafutrct_Zysl\trunk\Zysl\KVS\KVStore.cs,HexStr,The following statement contains a magic number: for (int y = 0' x = 0; y < p.Length; ++y' ++x) {  	b = ((byte)(p [y] >> 4));  	c [x] = (char)(b > 9 ? b + 0x37 : b + 0x30);  	b = ((byte)(p [y] & 0xF));  	c [++x] = (char)(b > 9 ? b + 0x37 : b + 0x30);  }  
Magic Number,Zysl.KVS,KVStore,C:\repos\mafutrct_Zysl\trunk\Zysl\KVS\KVStore.cs,HexStr,The following statement contains a magic number: b = ((byte)(p [y] >> 4));  
Magic Number,Zysl.KVS,KVStore,C:\repos\mafutrct_Zysl\trunk\Zysl\KVS\KVStore.cs,HexStr,The following statement contains a magic number: c [x] = (char)(b > 9 ? b + 0x37 : b + 0x30);  
Magic Number,Zysl.KVS,KVStore,C:\repos\mafutrct_Zysl\trunk\Zysl\KVS\KVStore.cs,HexStr,The following statement contains a magic number: c [++x] = (char)(b > 9 ? b + 0x37 : b + 0x30);  
