Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FunBoardTracker.Demo,Demo,C:\repos\marius1_FunBoardTracker\FunBoardTracker.Demo\Demo.cs,LoadIssues,Cyclomatic complexity of the method is 19
Long Parameter List,FunBoardTracker.Demo,SwimLanePolygon,C:\repos\marius1_FunBoardTracker\FunBoardTracker.Demo\SwimLaneArea.cs,GetSwimLaneAreaByPoints,The method has 7 parameters.
Long Statement,FunBoardTracker.Demo,SwimLanePolygon,C:\repos\marius1_FunBoardTracker\FunBoardTracker.Demo\SwimLaneArea.cs,PointInArea,The length of the statement  "		if ((newPoint.X < p.X) == (p.X <= oldPoint.X) && ((long)p.Y - (long)p1.Y) * (long)(p2.X - p1.X) < ((long)p2.Y - (long)p1.Y) * (long)(p.X - p1.X)) { " is 147.
Magic Number,FunBoardTracker.Demo,Demo,C:\repos\marius1_FunBoardTracker\FunBoardTracker.Demo\Demo.cs,InitializeJira,The following statement contains a magic number: this.Invoke ((MethodInvoker)delegate {  	cmbRapidViews.Items.AddRange (rapidViews.ToArray ());  	// team object hack  	cmbRapidViews.SelectedIndex = rapidViews.FindIndex (i => i.Id == 37);  	cmbRapidViews.Enabled = true;  	btnGetIssues.Enabled = true;  });  
Magic Number,FunBoardTracker.Demo,Demo,C:\repos\marius1_FunBoardTracker\FunBoardTracker.Demo\Demo.cs,InitializeJira,The following statement contains a magic number: cmbRapidViews.SelectedIndex = rapidViews.FindIndex (i => i.Id == 37);  
Magic Number,FunBoardTracker.Demo,SwimLanePolygon,C:\repos\marius1_FunBoardTracker\FunBoardTracker.Demo\SwimLaneArea.cs,PointInArea,The following statement contains a magic number: if (Area.Length < 3) {  	return inside;  }  
Missing Default,FunBoardTracker.Demo,Demo,C:\repos\marius1_FunBoardTracker\FunBoardTracker.Demo\Demo.cs,LoadIssues,The following switch statement is missing a default case: switch (issue.Issue.Status) {  case Status.Open:  	lstTodo.Items.Add (GetListViewItemFromIssue (issue));  	todo += issue.Issue.EstimateStatistic.StatFieldValue.Value;  	break;  case Status.InProgress:  	lstDoing.Items.Add (GetListViewItemFromIssue (issue));  	doing += issue.Issue.EstimateStatistic.StatFieldValue.Value;  	break;  case Status.ReadyForQa:  case Status.QaInProgress:  	lstTest.Items.Add (GetListViewItemFromIssue (issue));  	test += issue.Issue.EstimateStatistic.StatFieldValue.Value;  	break;  case Status.Resolved:  case Status.Closed:  	lstDone.Items.Add (GetListViewItemFromIssue (issue));  	done += issue.Issue.EstimateStatistic.StatFieldValue.Value;  	break;  }  
