Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,BitSharp.Esent,EsentBlockCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockCursor.cs,OpenCursor,The method has 14 parameters. Parameters: jetDatabase' jetInstance' readOnly' jetSession' blockDbId' globalsTableId' flushColumnId' blockHeadersTableId' blockHeaderHashColumnId' blockHeaderPreviousHashColumnId' blockHeaderHeightColumnId' blockHeaderTotalWorkColumnId' blockHeaderValidColumnId' blockHeaderBytesColumnId
Long Parameter List,BitSharp.Esent,EsentBlockTxesCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesCursor.cs,OpenCursor,The method has 17 parameters. Parameters: jetDatabase' jetInstance' readOnly' jetSession' blockDbId' globalsTableId' blockCountColumnId' flushColumnId' blockIndexTableId' blockIndexBlockHashColumnId' blockIndexBlockIndexColumnId' blocksTableId' blockIndexColumnId' txIndexColumnId' blockDepthColumnId' blockTxHashColumnId' blockTxBytesColumnId
Long Parameter List,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,AddTransaction,The method has 5 parameters. Parameters: blockIndex' txIndex' txHash' txBytes' cursor
Long Parameter List,BitSharp.Esent,EsentStorageModule,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentStorageModule.cs,EsentStorageModule,The method has 5 parameters. Parameters: baseDirectory' rulesType' cacheSizeMinBytes' cacheSizeMaxBytes' blockTxesStorageLocations
Long Parameter List,BitSharp.Esent,EsentChainStateCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateCursor.cs,OpenCursor,The method has 32 parameters. Parameters: jetDatabase' jetInstance' jetSession' chainStateDbId' globalsTableId' chainTipColumnId' unspentTxCountColumnId' unspentOutputCountColumnId' totalTxCountColumnId' totalInputCountColumnId' totalOutputCountColumnId' flushTableId' flushColumnId' headersTableId' headerBlockHashColumnId' headerBytesColumnId' unspentTxTableId' txHashColumnId' blockIndexColumnId' txIndexColumnId' txVersionColumnId' isCoinbaseColumnId' outputStatesColumnId' unspentTxOutputTableId' txOutputKeyColumnId' txOutputBytesColumnId' spentTxTableId' spentSpentBlockIndexColumnId' spentDataColumnId' unmintedTxTableId' unmintedBlockHashColumnId' unmintedDataColumnId
Long Parameter List,BitSharp.Esent,PersistentObjectDictonary<TKey;TValue>,C:\repos\pmlyon_BitSharp\BitSharp.Esent\PersistentObjectDictonary.cs,PersistentObjectDictonary,The method has 5 parameters. Parameters: directory' keyEncoder' keyDecoder' valueEncoder' valueDecoder
Long Identifier,BitSharp.Esent,EsentBlockCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockCursor.cs,OpenCursor,The length of the parameter blockHeaderPreviousHashColumnId is 31.
Long Identifier,BitSharp.Esent,EsentBlockCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockCursor.cs,,The length of the parameter blockHeaderPreviousHashColumnId is 31.
Long Identifier,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,CreateDatabase,The length of the parameter blockHeaderPreviousHashColumnId is 31.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateGlobalsTable,The length of the statement  "            Api.JetAddColumn(jetSession' globalsTableId' "ChainTip"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary }' null' 0' out chainTipColumnId); " is 138.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateGlobalsTable,The length of the statement  "            Api.JetAddColumn(jetSession' globalsTableId' "UnspentTxCount"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out unspentTxCountColumnId); " is 186.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateGlobalsTable,The length of the statement  "            Api.JetAddColumn(jetSession' globalsTableId' "UnspentOutputCount"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out unspentOutputCountColumnId); " is 194.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateGlobalsTable,The length of the statement  "            Api.JetAddColumn(jetSession' globalsTableId' "TotalTxCount"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out totalTxCountColumnId); " is 182.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateGlobalsTable,The length of the statement  "            Api.JetAddColumn(jetSession' globalsTableId' "TotalInputCount"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out totalInputCountColumnId); " is 188.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateGlobalsTable,The length of the statement  "            Api.JetAddColumn(jetSession' globalsTableId' "TotalOutputCount"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out totalOutputCountColumnId); " is 190.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateFlushTable,The length of the statement  "            Api.JetAddColumn(jetSession' flushTableId' "Flush"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out flushColumnId); " is 197.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateHeadersTable,The length of the statement  "            Api.JetAddColumn(jetSession' headersTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHashColumnId); " is 190.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateHeadersTable,The length of the statement  "            Api.JetAddColumn(jetSession' headersTableId' "HeaderBytes"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out headerBytesColumnId); " is 182.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnspentTxTable,The length of the statement  "            Api.JetAddColumn(jetSession' unspentTxTableId' "TxHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out txHashColumnId); " is 215.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnspentTxTable,The length of the statement  "            Api.JetAddColumn(jetSession' unspentTxTableId' "BlockIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockIndexColumnId); " is 180.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnspentTxTable,The length of the statement  "            Api.JetAddColumn(jetSession' unspentTxTableId' "TxIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out txIndexColumnId); " is 174.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnspentTxTable,The length of the statement  "            Api.JetAddColumn(jetSession' unspentTxTableId' "TxVersion"' new JET_COLUMNDEF { coltyp = VistaColtyp.UnsignedLong' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out txVersionColumnId); " is 187.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnspentTxTable,The length of the statement  "            Api.JetAddColumn(jetSession' unspentTxTableId' "IsCoinbase"' new JET_COLUMNDEF { coltyp = JET_coltyp.Bit' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out isCoinbaseColumnId); " is 179.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnspentTxTable,The length of the statement  "            Api.JetAddColumn(jetSession' unspentTxTableId' "OutputStates"' new JET_COLUMNDEF { coltyp = JET_coltyp.LongBinary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out outputStatesColumnId); " is 190.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnspentTxOutputTable,The length of the statement  "            Api.JetAddColumn(jetSession' unspentTxOutputTableId' "TxOutputKey"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 36' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out txOutputKeyColumnId); " is 231.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnspentTxOutputTable,The length of the statement  "            Api.JetAddColumn(jetSession' unspentTxOutputTableId' "TxOutputBytes"' new JET_COLUMNDEF { coltyp = JET_coltyp.LongBinary }' null' 0' out txOutputBytesColumnId); " is 160.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateSpentTxTable,The length of the statement  "            Api.JetAddColumn(jetSession' spentTxTableId' "SpentBlockIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out spentSpentBlockIndexColumnId); " is 193.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateSpentTxTable,The length of the statement  "            Api.JetAddColumn(jetSession' spentTxTableId' "SpentData"' new JET_COLUMNDEF { coltyp = JET_coltyp.LongBinary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out spentDataColumnId); " is 182.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnmintedTxTable,The length of the statement  "            Api.JetAddColumn(jetSession' unmintedTxTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out unmintedBlockHashColumnId); " is 201.
Long Statement,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnmintedTxTable,The length of the statement  "            Api.JetAddColumn(jetSession' unmintedTxTableId' "UnmintedData"' new JET_COLUMNDEF { coltyp = JET_coltyp.LongBinary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out unmintedDataColumnId); " is 191.
Long Statement,BitSharp.Esent,EsentBlockCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockCursor.cs,OpenCursor,The length of the statement  "                Api.JetOpenDatabase(jetSession' jetDatabase' ""' out blockDbId' readOnly ? OpenDatabaseGrbit.ReadOnly : OpenDatabaseGrbit.None); " is 128.
Long Statement,BitSharp.Esent,EsentBlockCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockCursor.cs,OpenCursor,The length of the statement  "                Api.JetOpenTable(jetSession' blockDbId' "Globals"' null' 0' readOnly ? OpenTableGrbit.ReadOnly : OpenTableGrbit.None' out globalsTableId); " is 138.
Long Statement,BitSharp.Esent,EsentBlockCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockCursor.cs,OpenCursor,The length of the statement  "                Api.JetOpenTable(jetSession' blockDbId' "BlockHeaders"' null' 0' readOnly ? OpenTableGrbit.ReadOnly : OpenTableGrbit.None' out blockHeadersTableId); " is 148.
Long Statement,BitSharp.Esent,EsentBlockTxesCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesCursor.cs,OpenCursor,The length of the statement  "                Api.JetOpenDatabase(jetSession' jetDatabase' ""' out blockDbId' readOnly ? OpenDatabaseGrbit.ReadOnly : OpenDatabaseGrbit.None); " is 128.
Long Statement,BitSharp.Esent,EsentBlockTxesCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesCursor.cs,OpenCursor,The length of the statement  "                Api.JetOpenTable(jetSession' blockDbId' "Globals"' null' 0' readOnly ? OpenTableGrbit.ReadOnly : OpenTableGrbit.None' out globalsTableId); " is 138.
Long Statement,BitSharp.Esent,EsentBlockTxesCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesCursor.cs,OpenCursor,The length of the statement  "                Api.JetOpenTable(jetSession' blockDbId' "BlockIndex"' null' 0' readOnly ? OpenTableGrbit.ReadOnly : OpenTableGrbit.None' out blockIndexTableId); " is 144.
Long Statement,BitSharp.Esent,EsentBlockTxesCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesCursor.cs,OpenCursor,The length of the statement  "                Api.JetOpenTable(jetSession' blockDbId' "Blocks"' null' 0' readOnly ? OpenTableGrbit.ReadOnly : OpenTableGrbit.None' out blocksTableId); " is 136.
Long Statement,BitSharp.Esent,MerkleTreePruningCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\MerkleTreePruningCursor.cs,TryMoveLeft,The length of the statement  "                var recordBlockIndex = Api.RetrieveColumnAsInt32(cursor.jetSession' cursor.blocksTableId' cursor.blockIndexColumnId).Value; " is 123.
Long Statement,BitSharp.Esent,MerkleTreePruningCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\MerkleTreePruningCursor.cs,TryMoveRight,The length of the statement  "                var recordBlockIndex = Api.RetrieveColumnAsInt32(cursor.jetSession' cursor.blocksTableId' cursor.blockIndexColumnId).Value; " is 123.
Long Statement,BitSharp.Esent,MerkleTreePruningCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\MerkleTreePruningCursor.cs,ReadNode,The length of the statement  "            Api.RetrieveColumns(cursor.jetSession' cursor.blocksTableId' blockIndexColumn' txIndexColumn' depthColumn' txHashColumn); " is 121.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,TryAddChainedHeader,The length of the statement  "                                new BytesColumnValue { Columnid = cursor.blockHeaderHashColumnId' Value = DbEncoder.EncodeUInt256(chainedHeader.Hash) }' " is 120.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,TryAddChainedHeader,The length of the statement  "                                new BytesColumnValue { Columnid = cursor.blockHeaderPreviousHashColumnId' Value = DbEncoder.EncodeUInt256(chainedHeader.PreviousBlockHash) }' " is 141.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,TryAddChainedHeader,The length of the statement  "                                new BytesColumnValue { Columnid = cursor.blockHeaderTotalWorkColumnId' Value = DataEncoder.EncodeTotalWork(chainedHeader.TotalWork) }' " is 134.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,TryAddChainedHeader,The length of the statement  "                                new BytesColumnValue { Columnid = cursor.blockHeaderBytesColumnId' Value = DataEncoder.EncodeChainedHeader(chainedHeader) }); " is 125.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,TryGetChainedHeader,The length of the statement  "                    chainedHeader = DataDecoder.DecodeChainedHeader(Api.RetrieveColumn(cursor.jetSession' cursor.blockHeadersTableId' cursor.blockHeaderBytesColumnId)); " is 148.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,FindMaxTotalWork,The length of the statement  "                        var valid = Api.RetrieveColumnAsBoolean(cursor.jetSession' cursor.blockHeadersTableId' cursor.blockHeaderValidColumnId); " is 120.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,FindMaxTotalWork,The length of the statement  "                            var chainedHeader = DataDecoder.DecodeChainedHeader(Api.RetrieveColumn(cursor.jetSession' cursor.blockHeadersTableId' cursor.blockHeaderBytesColumnId)); " is 152.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,ReadChainedHeaders,The length of the statement  "                        var chainedHeader = DataDecoder.DecodeChainedHeader(Api.RetrieveColumn(cursor.jetSession' cursor.blockHeadersTableId' cursor.blockHeaderBytesColumnId)); " is 152.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' globalsTableId' "Flush"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out flushColumnId); " is 199.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' blockHeadersTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockHeaderHashColumnId); " is 230.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' blockHeadersTableId' "PreviousBlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockHeaderPreviousHashColumnId); " is 246.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' blockHeadersTableId' "Height"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderHeightColumnId); " is 186.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' blockHeadersTableId' "TotalWork"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderTotalWorkColumnId); " is 194.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' blockHeadersTableId' "Valid"' new JET_COLUMNDEF { coltyp = JET_coltyp.Bit' }' null' 0' out blockHeaderValidColumnId); " is 146.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' blockHeadersTableId' "BlockHeaderBytes"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderBytesColumnId); " is 197.
Long Statement,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,Defragment,The length of the statement  "                    logger.Info($"Finished shrinking block database: {((float)actualPages * SystemParameters.DatabasePageSize / 1.MILLION()):N0} MB"); " is 130.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,ReadBlockTransactions,The length of the statement  "                        Api.RetrieveColumns(cursor.jetSession' cursor.blocksTableId' txIndexColumn' blockDepthColumn' blockTxHashColumn' blockTxBytesColumn); " is 133.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' globalsTableId' "BlockCount"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out blockCountColumnId); " is 209.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' globalsTableId' "Flush"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out flushColumnId); " is 199.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' blockIndexTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockIndexBlockHashColumnId); " is 232.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' blockIndexTableId' "BlockIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed | ColumndefGrbit.ColumnAutoincrement }' null' 0' out blockIndexBlockIndexColumnId); " is 257.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' blocksTableId' "BlockIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockIndexColumnId); " is 177.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' blocksTableId' "TxIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockTxIndexColumnId); " is 176.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' blocksTableId' "Depth"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockDepthColumnId); " is 172.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' blocksTableId' "TxHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockTxHashColumnId); " is 217.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,CreateDatabase,The length of the statement  "                Api.JetAddColumn(jetSession' blocksTableId' "TxBytes"' new JET_COLUMNDEF { coltyp = JET_coltyp.LongBinary }' null' 0' out blockTxBytesColumnId); " is 144.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,OpenDatabase,The length of the statement  "                    Api.JetOpenDatabase(jetSession' this.jetDatabase' ""' out blockDbId' readOnly ? OpenDatabaseGrbit.ReadOnly : OpenDatabaseGrbit.None); " is 133.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,Defragment,The length of the statement  "                    logger.Info($"Finished shrinking block txes database: {(float)actualPages * SystemParameters.DatabasePageSize / 1.MILLION():N0} MB"); " is 133.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,TryGetBlockIndex,The length of the statement  "                blockIndex = Api.RetrieveColumnAsInt32(cursor.jetSession' cursor.blockIndexTableId' cursor.blockIndexBlockIndexColumnId).Value; " is 127.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,AddBlockIndex,The length of the statement  "                Api.SetColumn(cursor.jetSession' cursor.blockIndexTableId' cursor.blockIndexBlockHashColumnId' DbEncoder.EncodeUInt256(blockHash)); " is 131.
Long Statement,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,AddBlockIndex,The length of the statement  "                blockIndex = Api.RetrieveColumnAsInt32(cursor.jetSession' cursor.blockIndexTableId' cursor.blockIndexBlockIndexColumnId' RetrieveColumnGrbit.RetrieveCopy).Value; " is 161.
Long Statement,BitSharp.Esent,EsentChainStateCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateCursor.cs,TryGetUnspentTx,The length of the statement  "                    Api.RetrieveColumns(this.jetSession' this.unspentTxTableId' blockIndexColumn' txIndexColumn' txVersionColumn' isCoinbaseColumn' outputStatesColumn' txOutputBytesColumn); " is 169.
Long Statement,BitSharp.Esent,EsentChainStateCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateCursor.cs,TryAddUnspentTx,The length of the statement  "                            new BytesColumnValue { Columnid = this.outputStatesColumnId' Value = DataEncoder.EncodeOutputStates(unspentTx.OutputStates) }); " is 127.
Long Statement,BitSharp.Esent,EsentChainStateCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateCursor.cs,TryUpdateUnspentTx,The length of the statement  "                        Api.SetColumn(this.jetSession' this.unspentTxTableId' this.outputStatesColumnId' DataEncoder.EncodeOutputStates(unspentTx.OutputStates)); " is 137.
Long Statement,BitSharp.Esent,EsentChainStateCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateCursor.cs,ReadUnspentTransactionsInner,The length of the statement  "                        Api.RetrieveColumns(this.jetSession' this.unspentTxTableId' txHashColumn' blockIndexColumn' txIndexColumn' txVersionColumn' isCoinbaseColumn' outputStatesColumn' txOutputBytesColumn); " is 183.
Long Statement,BitSharp.Esent,EsentChainStateCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateCursor.cs,ContainsUnspentTxOutput,The length of the statement  "                Api.MakeKey(this.jetSession' this.unspentTxOutputTableId' DbEncoder.EncodeTxOutputKey(txOutputKey)' MakeKeyGrbit.NewKey); " is 121.
Long Statement,BitSharp.Esent,EsentChainStateCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateCursor.cs,TryGetUnspentTxOutput,The length of the statement  "                Api.MakeKey(this.jetSession' this.unspentTxOutputTableId' DbEncoder.EncodeTxOutputKey(txOutputKey)' MakeKeyGrbit.NewKey); " is 121.
Long Statement,BitSharp.Esent,EsentChainStateCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateCursor.cs,TryRemoveUnspentTxOutput,The length of the statement  "                Api.MakeKey(this.jetSession' this.unspentTxOutputTableId' DbEncoder.EncodeTxOutputKey(txOutputKey)' MakeKeyGrbit.NewKey); " is 121.
Long Statement,BitSharp.Esent,EsentChainStateCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateCursor.cs,Defragment,The length of the statement  "                    logger.Info($"Finished shrinking chain state database: {(float)actualPages * SystemParameters.DatabasePageSize / 1.MILLION():N0} MB"); " is 134.
Long Statement,BitSharp.Esent,EsentChainStateCursor,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateCursor.cs,OpenCursor,The length of the statement  "                Api.JetOpenTable(jetSession' chainStateDbId' "UnspentTxOutput"' null' 0' OpenTableGrbit.None' out unspentTxOutputTableId); " is 122.
Empty Catch Block,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,DeleteDatabase,The method has an empty catch block.
Empty Catch Block,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,DeleteDatabase,The method has an empty catch block.
Empty Catch Block,BitSharp.Esent,EsentChainStateManager,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateManager.cs,CreateOrOpenDatabase,The method has an empty catch block.
Magic Number,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateHeadersTable,The following statement contains a magic number: Api.JetAddColumn(jetSession' headersTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHashColumnId);
Magic Number,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateHeadersTable,The following statement contains a magic number: Api.JetCreateIndex2(jetSession' headersTableId'                  new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_BlockHash"'                              szKey = "+BlockHash\0\0"'                              cbKey = "+BlockHash\0\0".Length                          }                      }' 1);
Magic Number,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnspentTxTable,The following statement contains a magic number: Api.JetAddColumn(jetSession' unspentTxTableId' "TxHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out txHashColumnId);
Magic Number,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnspentTxTable,The following statement contains a magic number: Api.JetCreateIndex2(jetSession' unspentTxTableId'                  new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_TxHash"'                              szKey = "+TxHash\0\0"'                              cbKey = "+TxHash\0\0".Length                          }                      }' 1);
Magic Number,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnspentTxOutputTable,The following statement contains a magic number: Api.JetAddColumn(jetSession' unspentTxOutputTableId' "TxOutputKey"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 36' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out txOutputKeyColumnId);
Magic Number,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnspentTxOutputTable,The following statement contains a magic number: Api.JetCreateIndex2(jetSession' unspentTxOutputTableId'                  new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_TxOutputKey"'                              szKey = "+TxOutputKey\0\0"'                              cbKey = "+TxOutputKey\0\0".Length                          }                      }' 1);
Magic Number,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateSpentTxTable,The following statement contains a magic number: Api.JetCreateIndex2(jetSession' spentTxTableId'                  new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_SpentBlockIndex"'                              szKey = "+SpentBlockIndex\0\0"'                              cbKey = "+SpentBlockIndex\0\0".Length                          }                      }' 1);
Magic Number,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnmintedTxTable,The following statement contains a magic number: Api.JetAddColumn(jetSession' unmintedTxTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out unmintedBlockHashColumnId);
Magic Number,BitSharp.Esent.ChainState,EsentChainStateSchema,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateSchema.cs,CreateUnmintedTxTable,The following statement contains a magic number: Api.JetCreateIndex2(jetSession' unmintedTxTableId'                  new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_UnmintedBlockHash"'                              szKey = "+BlockHash\0\0"'                              cbKey = "+BlockHash\0\0".Length                          }                      }' 1);
Magic Number,BitSharp.Esent,DbEncoder,C:\repos\pmlyon_BitSharp\BitSharp.Esent\DbEncoder.cs,DecodeInt32,The following statement contains a magic number: var bytes = new byte[4];
Magic Number,BitSharp.Esent,DbEncoder,C:\repos\pmlyon_BitSharp\BitSharp.Esent\DbEncoder.cs,DecodeInt32,The following statement contains a magic number: Buffer.BlockCopy(value' 0' bytes' 0' 4);
Magic Number,BitSharp.Esent,DbEncoder,C:\repos\pmlyon_BitSharp\BitSharp.Esent\DbEncoder.cs,EncodeTxOutputKey,The following statement contains a magic number: var buffer = new byte[36];
Magic Number,BitSharp.Esent,DbEncoder,C:\repos\pmlyon_BitSharp\BitSharp.Esent\DbEncoder.cs,EncodeTxOutputKey,The following statement contains a magic number: Buffer.BlockCopy(EncodeInt32((int)txOutputKey.TxOutputIndex)' 0' buffer' 32' 4);
Magic Number,BitSharp.Esent,DbEncoder,C:\repos\pmlyon_BitSharp\BitSharp.Esent\DbEncoder.cs,EncodeTxOutputKey,The following statement contains a magic number: Buffer.BlockCopy(EncodeInt32((int)txOutputKey.TxOutputIndex)' 0' buffer' 32' 4);
Magic Number,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,EsentBlockStorage,The following statement contains a magic number: this.cursorCache = new DisposableCache<EsentBlockCursor>(1024'                  createFunc: () => new EsentBlockCursor(this.jetDatabase' this.jetInstance));
Magic Number,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,CreateDatabase,The following statement contains a magic number: using (var jetSession = new Session(this.jetInstance))              {                  var createGrbit = CreateDatabaseGrbit.None;                  if (EsentVersion.SupportsWindows7Features)                      createGrbit |= Windows7Grbits.EnableCreateDbBackgroundMaintenance;                    Api.JetCreateDatabase(jetSession' jetDatabase' ""' out blockDbId' createGrbit);                    var defaultValue = BitConverter.GetBytes(0);                  Api.JetCreateTable(jetSession' blockDbId' "Globals"' 0' 0' out globalsTableId);                  Api.JetAddColumn(jetSession' globalsTableId' "Flush"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out flushColumnId);                    // initialize global data                  using (var jetUpdate = jetSession.BeginUpdate(globalsTableId' JET_prep.Insert))                  {                      Api.SetColumn(jetSession' globalsTableId' flushColumnId' 0);                        jetUpdate.Save();                  }                    Api.JetCloseTable(jetSession' globalsTableId);                    Api.JetCreateTable(jetSession' blockDbId' "BlockHeaders"' 0' 0' out blockHeadersTableId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockHeaderHashColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "PreviousBlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockHeaderPreviousHashColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "Height"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderHeightColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "TotalWork"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderTotalWorkColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "Valid"' new JET_COLUMNDEF { coltyp = JET_coltyp.Bit' }' null' 0' out blockHeaderValidColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "BlockHeaderBytes"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderBytesColumnId);                    Api.JetCreateIndex2(jetSession' blockHeadersTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_BlockHash"'                              szKey = "+BlockHash\0\0"'                              cbKey = "+BlockHash\0\0".Length                          }                      }' 1);                    //Api.JetCreateIndex2(jetSession' blockHeadersTableId'                  //    new JET_INDEXCREATE[]                  //    {                  //        new JET_INDEXCREATE                  //        {                  //            cbKeyMost = 255'                  //            grbit = CreateIndexGrbit.IndexDisallowNull'                  //            szIndexName = "IX_PreviousBlockHash"'                  //            szKey = "+PreviousBlockHash\0\0"'                  //            cbKey = "+PreviousBlockHash\0\0".Length                  //        }                  //    }' 1);                    //Api.JetCreateIndex2(jetSession' blockHeadersTableId'                  //    new JET_INDEXCREATE[]                  //    {                  //        new JET_INDEXCREATE                  //        {                  //            cbKeyMost = 255'                  //            grbit = CreateIndexGrbit.IndexDisallowNull'                  //            szIndexName = "IX_Height"'                  //            szKey = "+Height\0\0"'                  //            cbKey = "+Height\0\0".Length                  //        }                  //    }' 1);                    Api.JetCreateIndex2(jetSession' blockHeadersTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_TotalWork"'                              szKey = "-TotalWork\0\0"'                              cbKey = "-TotalWork\0\0".Length                          }                      }' 1);                    Api.JetCloseTable(jetSession' blockHeadersTableId);              }
Magic Number,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,CreateDatabase,The following statement contains a magic number: using (var jetSession = new Session(this.jetInstance))              {                  var createGrbit = CreateDatabaseGrbit.None;                  if (EsentVersion.SupportsWindows7Features)                      createGrbit |= Windows7Grbits.EnableCreateDbBackgroundMaintenance;                    Api.JetCreateDatabase(jetSession' jetDatabase' ""' out blockDbId' createGrbit);                    var defaultValue = BitConverter.GetBytes(0);                  Api.JetCreateTable(jetSession' blockDbId' "Globals"' 0' 0' out globalsTableId);                  Api.JetAddColumn(jetSession' globalsTableId' "Flush"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out flushColumnId);                    // initialize global data                  using (var jetUpdate = jetSession.BeginUpdate(globalsTableId' JET_prep.Insert))                  {                      Api.SetColumn(jetSession' globalsTableId' flushColumnId' 0);                        jetUpdate.Save();                  }                    Api.JetCloseTable(jetSession' globalsTableId);                    Api.JetCreateTable(jetSession' blockDbId' "BlockHeaders"' 0' 0' out blockHeadersTableId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockHeaderHashColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "PreviousBlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockHeaderPreviousHashColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "Height"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderHeightColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "TotalWork"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderTotalWorkColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "Valid"' new JET_COLUMNDEF { coltyp = JET_coltyp.Bit' }' null' 0' out blockHeaderValidColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "BlockHeaderBytes"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderBytesColumnId);                    Api.JetCreateIndex2(jetSession' blockHeadersTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_BlockHash"'                              szKey = "+BlockHash\0\0"'                              cbKey = "+BlockHash\0\0".Length                          }                      }' 1);                    //Api.JetCreateIndex2(jetSession' blockHeadersTableId'                  //    new JET_INDEXCREATE[]                  //    {                  //        new JET_INDEXCREATE                  //        {                  //            cbKeyMost = 255'                  //            grbit = CreateIndexGrbit.IndexDisallowNull'                  //            szIndexName = "IX_PreviousBlockHash"'                  //            szKey = "+PreviousBlockHash\0\0"'                  //            cbKey = "+PreviousBlockHash\0\0".Length                  //        }                  //    }' 1);                    //Api.JetCreateIndex2(jetSession' blockHeadersTableId'                  //    new JET_INDEXCREATE[]                  //    {                  //        new JET_INDEXCREATE                  //        {                  //            cbKeyMost = 255'                  //            grbit = CreateIndexGrbit.IndexDisallowNull'                  //            szIndexName = "IX_Height"'                  //            szKey = "+Height\0\0"'                  //            cbKey = "+Height\0\0".Length                  //        }                  //    }' 1);                    Api.JetCreateIndex2(jetSession' blockHeadersTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_TotalWork"'                              szKey = "-TotalWork\0\0"'                              cbKey = "-TotalWork\0\0".Length                          }                      }' 1);                    Api.JetCloseTable(jetSession' blockHeadersTableId);              }
Magic Number,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,CreateDatabase,The following statement contains a magic number: using (var jetSession = new Session(this.jetInstance))              {                  var createGrbit = CreateDatabaseGrbit.None;                  if (EsentVersion.SupportsWindows7Features)                      createGrbit |= Windows7Grbits.EnableCreateDbBackgroundMaintenance;                    Api.JetCreateDatabase(jetSession' jetDatabase' ""' out blockDbId' createGrbit);                    var defaultValue = BitConverter.GetBytes(0);                  Api.JetCreateTable(jetSession' blockDbId' "Globals"' 0' 0' out globalsTableId);                  Api.JetAddColumn(jetSession' globalsTableId' "Flush"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out flushColumnId);                    // initialize global data                  using (var jetUpdate = jetSession.BeginUpdate(globalsTableId' JET_prep.Insert))                  {                      Api.SetColumn(jetSession' globalsTableId' flushColumnId' 0);                        jetUpdate.Save();                  }                    Api.JetCloseTable(jetSession' globalsTableId);                    Api.JetCreateTable(jetSession' blockDbId' "BlockHeaders"' 0' 0' out blockHeadersTableId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockHeaderHashColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "PreviousBlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockHeaderPreviousHashColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "Height"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderHeightColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "TotalWork"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderTotalWorkColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "Valid"' new JET_COLUMNDEF { coltyp = JET_coltyp.Bit' }' null' 0' out blockHeaderValidColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "BlockHeaderBytes"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderBytesColumnId);                    Api.JetCreateIndex2(jetSession' blockHeadersTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_BlockHash"'                              szKey = "+BlockHash\0\0"'                              cbKey = "+BlockHash\0\0".Length                          }                      }' 1);                    //Api.JetCreateIndex2(jetSession' blockHeadersTableId'                  //    new JET_INDEXCREATE[]                  //    {                  //        new JET_INDEXCREATE                  //        {                  //            cbKeyMost = 255'                  //            grbit = CreateIndexGrbit.IndexDisallowNull'                  //            szIndexName = "IX_PreviousBlockHash"'                  //            szKey = "+PreviousBlockHash\0\0"'                  //            cbKey = "+PreviousBlockHash\0\0".Length                  //        }                  //    }' 1);                    //Api.JetCreateIndex2(jetSession' blockHeadersTableId'                  //    new JET_INDEXCREATE[]                  //    {                  //        new JET_INDEXCREATE                  //        {                  //            cbKeyMost = 255'                  //            grbit = CreateIndexGrbit.IndexDisallowNull'                  //            szIndexName = "IX_Height"'                  //            szKey = "+Height\0\0"'                  //            cbKey = "+Height\0\0".Length                  //        }                  //    }' 1);                    Api.JetCreateIndex2(jetSession' blockHeadersTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_TotalWork"'                              szKey = "-TotalWork\0\0"'                              cbKey = "-TotalWork\0\0".Length                          }                      }' 1);                    Api.JetCloseTable(jetSession' blockHeadersTableId);              }
Magic Number,BitSharp.Esent,EsentBlockStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockStorage.cs,CreateDatabase,The following statement contains a magic number: using (var jetSession = new Session(this.jetInstance))              {                  var createGrbit = CreateDatabaseGrbit.None;                  if (EsentVersion.SupportsWindows7Features)                      createGrbit |= Windows7Grbits.EnableCreateDbBackgroundMaintenance;                    Api.JetCreateDatabase(jetSession' jetDatabase' ""' out blockDbId' createGrbit);                    var defaultValue = BitConverter.GetBytes(0);                  Api.JetCreateTable(jetSession' blockDbId' "Globals"' 0' 0' out globalsTableId);                  Api.JetAddColumn(jetSession' globalsTableId' "Flush"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out flushColumnId);                    // initialize global data                  using (var jetUpdate = jetSession.BeginUpdate(globalsTableId' JET_prep.Insert))                  {                      Api.SetColumn(jetSession' globalsTableId' flushColumnId' 0);                        jetUpdate.Save();                  }                    Api.JetCloseTable(jetSession' globalsTableId);                    Api.JetCreateTable(jetSession' blockDbId' "BlockHeaders"' 0' 0' out blockHeadersTableId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockHeaderHashColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "PreviousBlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockHeaderPreviousHashColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "Height"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderHeightColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "TotalWork"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderTotalWorkColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "Valid"' new JET_COLUMNDEF { coltyp = JET_coltyp.Bit' }' null' 0' out blockHeaderValidColumnId);                  Api.JetAddColumn(jetSession' blockHeadersTableId' "BlockHeaderBytes"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockHeaderBytesColumnId);                    Api.JetCreateIndex2(jetSession' blockHeadersTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_BlockHash"'                              szKey = "+BlockHash\0\0"'                              cbKey = "+BlockHash\0\0".Length                          }                      }' 1);                    //Api.JetCreateIndex2(jetSession' blockHeadersTableId'                  //    new JET_INDEXCREATE[]                  //    {                  //        new JET_INDEXCREATE                  //        {                  //            cbKeyMost = 255'                  //            grbit = CreateIndexGrbit.IndexDisallowNull'                  //            szIndexName = "IX_PreviousBlockHash"'                  //            szKey = "+PreviousBlockHash\0\0"'                  //            cbKey = "+PreviousBlockHash\0\0".Length                  //        }                  //    }' 1);                    //Api.JetCreateIndex2(jetSession' blockHeadersTableId'                  //    new JET_INDEXCREATE[]                  //    {                  //        new JET_INDEXCREATE                  //        {                  //            cbKeyMost = 255'                  //            grbit = CreateIndexGrbit.IndexDisallowNull'                  //            szIndexName = "IX_Height"'                  //            szKey = "+Height\0\0"'                  //            cbKey = "+Height\0\0".Length                  //        }                  //    }' 1);                    Api.JetCreateIndex2(jetSession' blockHeadersTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_TotalWork"'                              szKey = "-TotalWork\0\0"'                              cbKey = "-TotalWork\0\0".Length                          }                      }' 1);                    Api.JetCloseTable(jetSession' blockHeadersTableId);              }
Magic Number,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,EsentBlockTxesStorage,The following statement contains a magic number: this.cursorCache = new DisposableCache<EsentBlockTxesCursor>(1024'                  createFunc: () => new EsentBlockTxesCursor(this.jetDatabase' this.jetInstance));
Magic Number,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,CreateDatabase,The following statement contains a magic number: using (var jetSession = new Session(this.jetInstance))              {                  var createGrbit = CreateDatabaseGrbit.None;                  if (EsentVersion.SupportsWindows7Features)                      createGrbit |= Windows7Grbits.EnableCreateDbBackgroundMaintenance;                    Api.JetCreateDatabase(jetSession' jetDatabase' ""' out blockDbId' createGrbit);                    var defaultValue = BitConverter.GetBytes(0);                  Api.JetCreateTable(jetSession' blockDbId' "Globals"' 0' 0' out globalsTableId);                  Api.JetAddColumn(jetSession' globalsTableId' "BlockCount"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out blockCountColumnId);                  Api.JetAddColumn(jetSession' globalsTableId' "Flush"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out flushColumnId);                    // initialize global data                  using (var jetUpdate = jetSession.BeginUpdate(globalsTableId' JET_prep.Insert))                  {                      Api.SetColumn(jetSession' globalsTableId' blockCountColumnId' 0);                      Api.SetColumn(jetSession' globalsTableId' flushColumnId' 0);                        jetUpdate.Save();                  }                    Api.JetCloseTable(jetSession' globalsTableId);                    Api.JetCreateTable(jetSession' blockDbId' "BlockIndex"' 0' 0' out blockIndexTableId);                  Api.JetAddColumn(jetSession' blockIndexTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockIndexBlockHashColumnId);                  Api.JetAddColumn(jetSession' blockIndexTableId' "BlockIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed | ColumndefGrbit.ColumnAutoincrement }' null' 0' out blockIndexBlockIndexColumnId);                    Api.JetCreateIndex2(jetSession' blockIndexTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_BlockHash"'                              szKey = "+BlockHash\0\0"'                              cbKey = "+BlockHash\0\0".Length                          }                      }' 1);                    Api.JetCloseTable(jetSession' blockIndexTableId);                    Api.JetCreateTable(jetSession' blockDbId' "Blocks"' 0' 0' out blocksTableId);                  Api.JetAddColumn(jetSession' blocksTableId' "BlockIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockIndexColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "TxIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockTxIndexColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "Depth"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockDepthColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "TxHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockTxHashColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "TxBytes"' new JET_COLUMNDEF { coltyp = JET_coltyp.LongBinary }' null' 0' out blockTxBytesColumnId);                    Api.JetCreateIndex2(jetSession' blocksTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_BlockIndexTxIndex"'                              szKey = "+BlockIndex\0TxIndex\0\0"'                              cbKey = "+BlockIndex\0TxIndex\0\0".Length                          }                      }' 1);                    Api.JetCloseTable(jetSession' blocksTableId);              }
Magic Number,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,CreateDatabase,The following statement contains a magic number: using (var jetSession = new Session(this.jetInstance))              {                  var createGrbit = CreateDatabaseGrbit.None;                  if (EsentVersion.SupportsWindows7Features)                      createGrbit |= Windows7Grbits.EnableCreateDbBackgroundMaintenance;                    Api.JetCreateDatabase(jetSession' jetDatabase' ""' out blockDbId' createGrbit);                    var defaultValue = BitConverter.GetBytes(0);                  Api.JetCreateTable(jetSession' blockDbId' "Globals"' 0' 0' out globalsTableId);                  Api.JetAddColumn(jetSession' globalsTableId' "BlockCount"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out blockCountColumnId);                  Api.JetAddColumn(jetSession' globalsTableId' "Flush"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out flushColumnId);                    // initialize global data                  using (var jetUpdate = jetSession.BeginUpdate(globalsTableId' JET_prep.Insert))                  {                      Api.SetColumn(jetSession' globalsTableId' blockCountColumnId' 0);                      Api.SetColumn(jetSession' globalsTableId' flushColumnId' 0);                        jetUpdate.Save();                  }                    Api.JetCloseTable(jetSession' globalsTableId);                    Api.JetCreateTable(jetSession' blockDbId' "BlockIndex"' 0' 0' out blockIndexTableId);                  Api.JetAddColumn(jetSession' blockIndexTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockIndexBlockHashColumnId);                  Api.JetAddColumn(jetSession' blockIndexTableId' "BlockIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed | ColumndefGrbit.ColumnAutoincrement }' null' 0' out blockIndexBlockIndexColumnId);                    Api.JetCreateIndex2(jetSession' blockIndexTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_BlockHash"'                              szKey = "+BlockHash\0\0"'                              cbKey = "+BlockHash\0\0".Length                          }                      }' 1);                    Api.JetCloseTable(jetSession' blockIndexTableId);                    Api.JetCreateTable(jetSession' blockDbId' "Blocks"' 0' 0' out blocksTableId);                  Api.JetAddColumn(jetSession' blocksTableId' "BlockIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockIndexColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "TxIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockTxIndexColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "Depth"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockDepthColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "TxHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockTxHashColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "TxBytes"' new JET_COLUMNDEF { coltyp = JET_coltyp.LongBinary }' null' 0' out blockTxBytesColumnId);                    Api.JetCreateIndex2(jetSession' blocksTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_BlockIndexTxIndex"'                              szKey = "+BlockIndex\0TxIndex\0\0"'                              cbKey = "+BlockIndex\0TxIndex\0\0".Length                          }                      }' 1);                    Api.JetCloseTable(jetSession' blocksTableId);              }
Magic Number,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,CreateDatabase,The following statement contains a magic number: using (var jetSession = new Session(this.jetInstance))              {                  var createGrbit = CreateDatabaseGrbit.None;                  if (EsentVersion.SupportsWindows7Features)                      createGrbit |= Windows7Grbits.EnableCreateDbBackgroundMaintenance;                    Api.JetCreateDatabase(jetSession' jetDatabase' ""' out blockDbId' createGrbit);                    var defaultValue = BitConverter.GetBytes(0);                  Api.JetCreateTable(jetSession' blockDbId' "Globals"' 0' 0' out globalsTableId);                  Api.JetAddColumn(jetSession' globalsTableId' "BlockCount"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out blockCountColumnId);                  Api.JetAddColumn(jetSession' globalsTableId' "Flush"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out flushColumnId);                    // initialize global data                  using (var jetUpdate = jetSession.BeginUpdate(globalsTableId' JET_prep.Insert))                  {                      Api.SetColumn(jetSession' globalsTableId' blockCountColumnId' 0);                      Api.SetColumn(jetSession' globalsTableId' flushColumnId' 0);                        jetUpdate.Save();                  }                    Api.JetCloseTable(jetSession' globalsTableId);                    Api.JetCreateTable(jetSession' blockDbId' "BlockIndex"' 0' 0' out blockIndexTableId);                  Api.JetAddColumn(jetSession' blockIndexTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockIndexBlockHashColumnId);                  Api.JetAddColumn(jetSession' blockIndexTableId' "BlockIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed | ColumndefGrbit.ColumnAutoincrement }' null' 0' out blockIndexBlockIndexColumnId);                    Api.JetCreateIndex2(jetSession' blockIndexTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_BlockHash"'                              szKey = "+BlockHash\0\0"'                              cbKey = "+BlockHash\0\0".Length                          }                      }' 1);                    Api.JetCloseTable(jetSession' blockIndexTableId);                    Api.JetCreateTable(jetSession' blockDbId' "Blocks"' 0' 0' out blocksTableId);                  Api.JetAddColumn(jetSession' blocksTableId' "BlockIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockIndexColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "TxIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockTxIndexColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "Depth"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockDepthColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "TxHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockTxHashColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "TxBytes"' new JET_COLUMNDEF { coltyp = JET_coltyp.LongBinary }' null' 0' out blockTxBytesColumnId);                    Api.JetCreateIndex2(jetSession' blocksTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_BlockIndexTxIndex"'                              szKey = "+BlockIndex\0TxIndex\0\0"'                              cbKey = "+BlockIndex\0TxIndex\0\0".Length                          }                      }' 1);                    Api.JetCloseTable(jetSession' blocksTableId);              }
Magic Number,BitSharp.Esent,EsentBlockTxesStorage,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentBlockTxesStorage.cs,CreateDatabase,The following statement contains a magic number: using (var jetSession = new Session(this.jetInstance))              {                  var createGrbit = CreateDatabaseGrbit.None;                  if (EsentVersion.SupportsWindows7Features)                      createGrbit |= Windows7Grbits.EnableCreateDbBackgroundMaintenance;                    Api.JetCreateDatabase(jetSession' jetDatabase' ""' out blockDbId' createGrbit);                    var defaultValue = BitConverter.GetBytes(0);                  Api.JetCreateTable(jetSession' blockDbId' "Globals"' 0' 0' out globalsTableId);                  Api.JetAddColumn(jetSession' globalsTableId' "BlockCount"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out blockCountColumnId);                  Api.JetAddColumn(jetSession' globalsTableId' "Flush"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnEscrowUpdate }' defaultValue' defaultValue.Length' out flushColumnId);                    // initialize global data                  using (var jetUpdate = jetSession.BeginUpdate(globalsTableId' JET_prep.Insert))                  {                      Api.SetColumn(jetSession' globalsTableId' blockCountColumnId' 0);                      Api.SetColumn(jetSession' globalsTableId' flushColumnId' 0);                        jetUpdate.Save();                  }                    Api.JetCloseTable(jetSession' globalsTableId);                    Api.JetCreateTable(jetSession' blockDbId' "BlockIndex"' 0' 0' out blockIndexTableId);                  Api.JetAddColumn(jetSession' blockIndexTableId' "BlockHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockIndexBlockHashColumnId);                  Api.JetAddColumn(jetSession' blockIndexTableId' "BlockIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed | ColumndefGrbit.ColumnAutoincrement }' null' 0' out blockIndexBlockIndexColumnId);                    Api.JetCreateIndex2(jetSession' blockIndexTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_BlockHash"'                              szKey = "+BlockHash\0\0"'                              cbKey = "+BlockHash\0\0".Length                          }                      }' 1);                    Api.JetCloseTable(jetSession' blockIndexTableId);                    Api.JetCreateTable(jetSession' blockDbId' "Blocks"' 0' 0' out blocksTableId);                  Api.JetAddColumn(jetSession' blocksTableId' "BlockIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockIndexColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "TxIndex"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockTxIndexColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "Depth"' new JET_COLUMNDEF { coltyp = JET_coltyp.Long' grbit = ColumndefGrbit.ColumnNotNULL }' null' 0' out blockDepthColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "TxHash"' new JET_COLUMNDEF { coltyp = JET_coltyp.Binary' cbMax = 32' grbit = ColumndefGrbit.ColumnNotNULL | ColumndefGrbit.ColumnFixed }' null' 0' out blockTxHashColumnId);                  Api.JetAddColumn(jetSession' blocksTableId' "TxBytes"' new JET_COLUMNDEF { coltyp = JET_coltyp.LongBinary }' null' 0' out blockTxBytesColumnId);                    Api.JetCreateIndex2(jetSession' blocksTableId'                      new JET_INDEXCREATE[]                      {                          new JET_INDEXCREATE                          {                              cbKeyMost = 255'                              grbit = CreateIndexGrbit.IndexUnique | CreateIndexGrbit.IndexDisallowNull'                              szIndexName = "IX_BlockIndexTxIndex"'                              szKey = "+BlockIndex\0TxIndex\0\0"'                              cbKey = "+BlockIndex\0TxIndex\0\0".Length                          }                      }' 1);                    Api.JetCloseTable(jetSession' blocksTableId);              }
Magic Number,BitSharp.Esent,EsentChainStateManager,C:\repos\pmlyon_BitSharp\BitSharp.Esent\ChainState\EsentChainStateManager.cs,EsentChainStateManager,The following statement contains a magic number: try              {                  EsentStorageManager.InitInstanceParameters(jetInstance' jetDirectory);                  this.jetInstance.Init();                    this.CreateOrOpenDatabase();                    this.cursorCache = new DisposableCache<IChainStateCursor>(1024'                      createFunc: () => new EsentChainStateCursor(this.jetDatabase' this.jetInstance)'                      prepareAction: cursor =>                      {                          // rollback any open transaction before returning the cursor to the cache                          if (cursor.InTransaction)                              cursor.RollbackTransaction();                      });                    success = true;              }              finally              {                  if (!success)                  {                      this.cursorCache?.Dispose();                      this.jetInstance.Dispose();                  }              }
Magic Number,BitSharp.Esent,EsentStorageManager,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentStorageManager.cs,InitSystemParameters,The following statement contains a magic number: SystemParameters.DatabasePageSize = 8 * KiB;
Magic Number,BitSharp.Esent,EsentStorageManager,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentStorageManager.cs,InitInstanceParameters,The following statement contains a magic number: var _0_5KiB = KiB / 2;
Magic Number,BitSharp.Esent,EsentStorageManager,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentStorageManager.cs,InitInstanceParameters,The following statement contains a magic number: var _16KiB = 16 * KiB;
Magic Number,BitSharp.Esent,EsentStorageManager,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentStorageManager.cs,InitInstanceParameters,The following statement contains a magic number: var _16MiB = 16 * MiB;
Magic Number,BitSharp.Esent,EsentStorageManager,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentStorageManager.cs,InitInstanceParameters,The following statement contains a magic number: var _256MiB = 256 * MiB;
Magic Number,BitSharp.Esent,EsentStorageManager,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentStorageManager.cs,InitInstanceParameters,The following statement contains a magic number: var logFileCount = 32;
Magic Number,BitSharp.Esent,EsentStorageManager,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentStorageManager.cs,InitInstanceParameters,The following statement contains a magic number: instance.Parameters.MaxSessions = 30000;
Magic Number,BitSharp.Esent,EsentStorageManager,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentStorageManager.cs,InitInstanceParameters,The following statement contains a magic number: instance.Parameters.MaxOpenTables = int.MaxValue / 2;
Magic Number,BitSharp.Esent,EsentStorageManager,C:\repos\pmlyon_BitSharp\BitSharp.Esent\EsentStorageManager.cs,InitInstanceParameters,The following statement contains a magic number: instance.Parameters.MaxTemporaryTables = 16;
