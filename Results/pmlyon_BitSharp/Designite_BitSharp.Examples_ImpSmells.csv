Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ReplayBlockExample,The length of the parameter inputPrevTxOutputPublicScriptHash is 33.
Long Statement,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,RunAllExamples,The length of the statement  "            foreach (var exampleMethod in GetType().GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.DeclaredOnly)) " is 124.
Long Statement,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ChainStateExample,The length of the statement  "                logger.Info($"Block 1 coinbase output states:    [{string.Join("'"' unspentTx.OutputStates.Select(x => x.ToString()))}]"); " is 122.
Long Statement,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ReplayBlockExample,The length of the statement  "                        // TODO: CoreDaemon will use this information in order to determine how far in the current chainstate it is safe to prune " is 121.
Long Statement,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ReplayBlockExample,The length of the statement  "                        // TODO: wallets can also remain disconnected from CoreDaemon' and just replay blocks to catch up when they are reconnected " is 123.
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ExampleDaemon,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 99))              using (embeddedBlocks)              using (storageManager)              {                  // report core daemon's progress                  logger.Info($"Core daemon height: {coreDaemon.CurrentChain.Height:N0}");              }
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ChainStateExample,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 999))              using (embeddedBlocks)              using (storageManager)              // retrieve an immutable snapshot of the current chainstate' validation won't be blocked by an open snapshot              using (var chainState = coreDaemon.GetChainState())              {                  // retrieve unspent transactions                  var unspentTxes = chainState.ReadUnspentTransactions().ToList();                    // report counts                  logger.Info($"Chain.Height:                      {chainState.Chain.Height'9:N0}");                  logger.Info($"ReadUnspentTransactions().Count(): {unspentTxes.Count'9:N0}");                  logger.Info($"UnspentTxCount:                    {chainState.UnspentTxCount'9:N0}");                  logger.Info($"UnspentOutputCount:                {chainState.UnspentOutputCount'9:N0}");                  logger.Info($"TotalTxCount:                      {chainState.TotalTxCount'9:N0}");                  logger.Info($"TotalInputCount:                   {chainState.TotalInputCount'9:N0}");                  logger.Info($"TotalOutputCount:                  {chainState.TotalOutputCount'9:N0}");                    // look up genesis coinbase output (will be missing)                  UnspentTx unspentTx;                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(0).Transactions[0].Hash' out unspentTx);                  logger.Info($"Genesis coinbase UnspentTx present? {unspentTx != null'9}");                    // look up block 1 coinbase output                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(1).Transactions[0].Hash' out unspentTx);                  logger.Info($"Block 1 coinbase UnspentTx present? {unspentTx != null'9}");                  logger.Info($"Block 1 coinbase output states:    [{string.Join("'"' unspentTx.OutputStates.Select(x => x.ToString()))}]");                    // look up block 381 list of spent txes                  BlockSpentTxes spentTxes;                  chainState.TryGetBlockSpentTxes(381' out spentTxes);                  logger.Info($"Block 381 spent txes count:        {spentTxes.Count'9:N0}");              }
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ChainStateExample,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 999))              using (embeddedBlocks)              using (storageManager)              // retrieve an immutable snapshot of the current chainstate' validation won't be blocked by an open snapshot              using (var chainState = coreDaemon.GetChainState())              {                  // retrieve unspent transactions                  var unspentTxes = chainState.ReadUnspentTransactions().ToList();                    // report counts                  logger.Info($"Chain.Height:                      {chainState.Chain.Height'9:N0}");                  logger.Info($"ReadUnspentTransactions().Count(): {unspentTxes.Count'9:N0}");                  logger.Info($"UnspentTxCount:                    {chainState.UnspentTxCount'9:N0}");                  logger.Info($"UnspentOutputCount:                {chainState.UnspentOutputCount'9:N0}");                  logger.Info($"TotalTxCount:                      {chainState.TotalTxCount'9:N0}");                  logger.Info($"TotalInputCount:                   {chainState.TotalInputCount'9:N0}");                  logger.Info($"TotalOutputCount:                  {chainState.TotalOutputCount'9:N0}");                    // look up genesis coinbase output (will be missing)                  UnspentTx unspentTx;                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(0).Transactions[0].Hash' out unspentTx);                  logger.Info($"Genesis coinbase UnspentTx present? {unspentTx != null'9}");                    // look up block 1 coinbase output                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(1).Transactions[0].Hash' out unspentTx);                  logger.Info($"Block 1 coinbase UnspentTx present? {unspentTx != null'9}");                  logger.Info($"Block 1 coinbase output states:    [{string.Join("'"' unspentTx.OutputStates.Select(x => x.ToString()))}]");                    // look up block 381 list of spent txes                  BlockSpentTxes spentTxes;                  chainState.TryGetBlockSpentTxes(381' out spentTxes);                  logger.Info($"Block 381 spent txes count:        {spentTxes.Count'9:N0}");              }
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ChainStateExample,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 999))              using (embeddedBlocks)              using (storageManager)              // retrieve an immutable snapshot of the current chainstate' validation won't be blocked by an open snapshot              using (var chainState = coreDaemon.GetChainState())              {                  // retrieve unspent transactions                  var unspentTxes = chainState.ReadUnspentTransactions().ToList();                    // report counts                  logger.Info($"Chain.Height:                      {chainState.Chain.Height'9:N0}");                  logger.Info($"ReadUnspentTransactions().Count(): {unspentTxes.Count'9:N0}");                  logger.Info($"UnspentTxCount:                    {chainState.UnspentTxCount'9:N0}");                  logger.Info($"UnspentOutputCount:                {chainState.UnspentOutputCount'9:N0}");                  logger.Info($"TotalTxCount:                      {chainState.TotalTxCount'9:N0}");                  logger.Info($"TotalInputCount:                   {chainState.TotalInputCount'9:N0}");                  logger.Info($"TotalOutputCount:                  {chainState.TotalOutputCount'9:N0}");                    // look up genesis coinbase output (will be missing)                  UnspentTx unspentTx;                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(0).Transactions[0].Hash' out unspentTx);                  logger.Info($"Genesis coinbase UnspentTx present? {unspentTx != null'9}");                    // look up block 1 coinbase output                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(1).Transactions[0].Hash' out unspentTx);                  logger.Info($"Block 1 coinbase UnspentTx present? {unspentTx != null'9}");                  logger.Info($"Block 1 coinbase output states:    [{string.Join("'"' unspentTx.OutputStates.Select(x => x.ToString()))}]");                    // look up block 381 list of spent txes                  BlockSpentTxes spentTxes;                  chainState.TryGetBlockSpentTxes(381' out spentTxes);                  logger.Info($"Block 381 spent txes count:        {spentTxes.Count'9:N0}");              }
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ChainStateExample,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 999))              using (embeddedBlocks)              using (storageManager)              // retrieve an immutable snapshot of the current chainstate' validation won't be blocked by an open snapshot              using (var chainState = coreDaemon.GetChainState())              {                  // retrieve unspent transactions                  var unspentTxes = chainState.ReadUnspentTransactions().ToList();                    // report counts                  logger.Info($"Chain.Height:                      {chainState.Chain.Height'9:N0}");                  logger.Info($"ReadUnspentTransactions().Count(): {unspentTxes.Count'9:N0}");                  logger.Info($"UnspentTxCount:                    {chainState.UnspentTxCount'9:N0}");                  logger.Info($"UnspentOutputCount:                {chainState.UnspentOutputCount'9:N0}");                  logger.Info($"TotalTxCount:                      {chainState.TotalTxCount'9:N0}");                  logger.Info($"TotalInputCount:                   {chainState.TotalInputCount'9:N0}");                  logger.Info($"TotalOutputCount:                  {chainState.TotalOutputCount'9:N0}");                    // look up genesis coinbase output (will be missing)                  UnspentTx unspentTx;                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(0).Transactions[0].Hash' out unspentTx);                  logger.Info($"Genesis coinbase UnspentTx present? {unspentTx != null'9}");                    // look up block 1 coinbase output                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(1).Transactions[0].Hash' out unspentTx);                  logger.Info($"Block 1 coinbase UnspentTx present? {unspentTx != null'9}");                  logger.Info($"Block 1 coinbase output states:    [{string.Join("'"' unspentTx.OutputStates.Select(x => x.ToString()))}]");                    // look up block 381 list of spent txes                  BlockSpentTxes spentTxes;                  chainState.TryGetBlockSpentTxes(381' out spentTxes);                  logger.Info($"Block 381 spent txes count:        {spentTxes.Count'9:N0}");              }
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ChainStateExample,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 999))              using (embeddedBlocks)              using (storageManager)              // retrieve an immutable snapshot of the current chainstate' validation won't be blocked by an open snapshot              using (var chainState = coreDaemon.GetChainState())              {                  // retrieve unspent transactions                  var unspentTxes = chainState.ReadUnspentTransactions().ToList();                    // report counts                  logger.Info($"Chain.Height:                      {chainState.Chain.Height'9:N0}");                  logger.Info($"ReadUnspentTransactions().Count(): {unspentTxes.Count'9:N0}");                  logger.Info($"UnspentTxCount:                    {chainState.UnspentTxCount'9:N0}");                  logger.Info($"UnspentOutputCount:                {chainState.UnspentOutputCount'9:N0}");                  logger.Info($"TotalTxCount:                      {chainState.TotalTxCount'9:N0}");                  logger.Info($"TotalInputCount:                   {chainState.TotalInputCount'9:N0}");                  logger.Info($"TotalOutputCount:                  {chainState.TotalOutputCount'9:N0}");                    // look up genesis coinbase output (will be missing)                  UnspentTx unspentTx;                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(0).Transactions[0].Hash' out unspentTx);                  logger.Info($"Genesis coinbase UnspentTx present? {unspentTx != null'9}");                    // look up block 1 coinbase output                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(1).Transactions[0].Hash' out unspentTx);                  logger.Info($"Block 1 coinbase UnspentTx present? {unspentTx != null'9}");                  logger.Info($"Block 1 coinbase output states:    [{string.Join("'"' unspentTx.OutputStates.Select(x => x.ToString()))}]");                    // look up block 381 list of spent txes                  BlockSpentTxes spentTxes;                  chainState.TryGetBlockSpentTxes(381' out spentTxes);                  logger.Info($"Block 381 spent txes count:        {spentTxes.Count'9:N0}");              }
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ChainStateExample,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 999))              using (embeddedBlocks)              using (storageManager)              // retrieve an immutable snapshot of the current chainstate' validation won't be blocked by an open snapshot              using (var chainState = coreDaemon.GetChainState())              {                  // retrieve unspent transactions                  var unspentTxes = chainState.ReadUnspentTransactions().ToList();                    // report counts                  logger.Info($"Chain.Height:                      {chainState.Chain.Height'9:N0}");                  logger.Info($"ReadUnspentTransactions().Count(): {unspentTxes.Count'9:N0}");                  logger.Info($"UnspentTxCount:                    {chainState.UnspentTxCount'9:N0}");                  logger.Info($"UnspentOutputCount:                {chainState.UnspentOutputCount'9:N0}");                  logger.Info($"TotalTxCount:                      {chainState.TotalTxCount'9:N0}");                  logger.Info($"TotalInputCount:                   {chainState.TotalInputCount'9:N0}");                  logger.Info($"TotalOutputCount:                  {chainState.TotalOutputCount'9:N0}");                    // look up genesis coinbase output (will be missing)                  UnspentTx unspentTx;                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(0).Transactions[0].Hash' out unspentTx);                  logger.Info($"Genesis coinbase UnspentTx present? {unspentTx != null'9}");                    // look up block 1 coinbase output                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(1).Transactions[0].Hash' out unspentTx);                  logger.Info($"Block 1 coinbase UnspentTx present? {unspentTx != null'9}");                  logger.Info($"Block 1 coinbase output states:    [{string.Join("'"' unspentTx.OutputStates.Select(x => x.ToString()))}]");                    // look up block 381 list of spent txes                  BlockSpentTxes spentTxes;                  chainState.TryGetBlockSpentTxes(381' out spentTxes);                  logger.Info($"Block 381 spent txes count:        {spentTxes.Count'9:N0}");              }
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ChainStateExample,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 999))              using (embeddedBlocks)              using (storageManager)              // retrieve an immutable snapshot of the current chainstate' validation won't be blocked by an open snapshot              using (var chainState = coreDaemon.GetChainState())              {                  // retrieve unspent transactions                  var unspentTxes = chainState.ReadUnspentTransactions().ToList();                    // report counts                  logger.Info($"Chain.Height:                      {chainState.Chain.Height'9:N0}");                  logger.Info($"ReadUnspentTransactions().Count(): {unspentTxes.Count'9:N0}");                  logger.Info($"UnspentTxCount:                    {chainState.UnspentTxCount'9:N0}");                  logger.Info($"UnspentOutputCount:                {chainState.UnspentOutputCount'9:N0}");                  logger.Info($"TotalTxCount:                      {chainState.TotalTxCount'9:N0}");                  logger.Info($"TotalInputCount:                   {chainState.TotalInputCount'9:N0}");                  logger.Info($"TotalOutputCount:                  {chainState.TotalOutputCount'9:N0}");                    // look up genesis coinbase output (will be missing)                  UnspentTx unspentTx;                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(0).Transactions[0].Hash' out unspentTx);                  logger.Info($"Genesis coinbase UnspentTx present? {unspentTx != null'9}");                    // look up block 1 coinbase output                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(1).Transactions[0].Hash' out unspentTx);                  logger.Info($"Block 1 coinbase UnspentTx present? {unspentTx != null'9}");                  logger.Info($"Block 1 coinbase output states:    [{string.Join("'"' unspentTx.OutputStates.Select(x => x.ToString()))}]");                    // look up block 381 list of spent txes                  BlockSpentTxes spentTxes;                  chainState.TryGetBlockSpentTxes(381' out spentTxes);                  logger.Info($"Block 381 spent txes count:        {spentTxes.Count'9:N0}");              }
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ChainStateExample,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 999))              using (embeddedBlocks)              using (storageManager)              // retrieve an immutable snapshot of the current chainstate' validation won't be blocked by an open snapshot              using (var chainState = coreDaemon.GetChainState())              {                  // retrieve unspent transactions                  var unspentTxes = chainState.ReadUnspentTransactions().ToList();                    // report counts                  logger.Info($"Chain.Height:                      {chainState.Chain.Height'9:N0}");                  logger.Info($"ReadUnspentTransactions().Count(): {unspentTxes.Count'9:N0}");                  logger.Info($"UnspentTxCount:                    {chainState.UnspentTxCount'9:N0}");                  logger.Info($"UnspentOutputCount:                {chainState.UnspentOutputCount'9:N0}");                  logger.Info($"TotalTxCount:                      {chainState.TotalTxCount'9:N0}");                  logger.Info($"TotalInputCount:                   {chainState.TotalInputCount'9:N0}");                  logger.Info($"TotalOutputCount:                  {chainState.TotalOutputCount'9:N0}");                    // look up genesis coinbase output (will be missing)                  UnspentTx unspentTx;                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(0).Transactions[0].Hash' out unspentTx);                  logger.Info($"Genesis coinbase UnspentTx present? {unspentTx != null'9}");                    // look up block 1 coinbase output                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(1).Transactions[0].Hash' out unspentTx);                  logger.Info($"Block 1 coinbase UnspentTx present? {unspentTx != null'9}");                  logger.Info($"Block 1 coinbase output states:    [{string.Join("'"' unspentTx.OutputStates.Select(x => x.ToString()))}]");                    // look up block 381 list of spent txes                  BlockSpentTxes spentTxes;                  chainState.TryGetBlockSpentTxes(381' out spentTxes);                  logger.Info($"Block 381 spent txes count:        {spentTxes.Count'9:N0}");              }
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ChainStateExample,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 999))              using (embeddedBlocks)              using (storageManager)              // retrieve an immutable snapshot of the current chainstate' validation won't be blocked by an open snapshot              using (var chainState = coreDaemon.GetChainState())              {                  // retrieve unspent transactions                  var unspentTxes = chainState.ReadUnspentTransactions().ToList();                    // report counts                  logger.Info($"Chain.Height:                      {chainState.Chain.Height'9:N0}");                  logger.Info($"ReadUnspentTransactions().Count(): {unspentTxes.Count'9:N0}");                  logger.Info($"UnspentTxCount:                    {chainState.UnspentTxCount'9:N0}");                  logger.Info($"UnspentOutputCount:                {chainState.UnspentOutputCount'9:N0}");                  logger.Info($"TotalTxCount:                      {chainState.TotalTxCount'9:N0}");                  logger.Info($"TotalInputCount:                   {chainState.TotalInputCount'9:N0}");                  logger.Info($"TotalOutputCount:                  {chainState.TotalOutputCount'9:N0}");                    // look up genesis coinbase output (will be missing)                  UnspentTx unspentTx;                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(0).Transactions[0].Hash' out unspentTx);                  logger.Info($"Genesis coinbase UnspentTx present? {unspentTx != null'9}");                    // look up block 1 coinbase output                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(1).Transactions[0].Hash' out unspentTx);                  logger.Info($"Block 1 coinbase UnspentTx present? {unspentTx != null'9}");                  logger.Info($"Block 1 coinbase output states:    [{string.Join("'"' unspentTx.OutputStates.Select(x => x.ToString()))}]");                    // look up block 381 list of spent txes                  BlockSpentTxes spentTxes;                  chainState.TryGetBlockSpentTxes(381' out spentTxes);                  logger.Info($"Block 381 spent txes count:        {spentTxes.Count'9:N0}");              }
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ChainStateExample,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 999))              using (embeddedBlocks)              using (storageManager)              // retrieve an immutable snapshot of the current chainstate' validation won't be blocked by an open snapshot              using (var chainState = coreDaemon.GetChainState())              {                  // retrieve unspent transactions                  var unspentTxes = chainState.ReadUnspentTransactions().ToList();                    // report counts                  logger.Info($"Chain.Height:                      {chainState.Chain.Height'9:N0}");                  logger.Info($"ReadUnspentTransactions().Count(): {unspentTxes.Count'9:N0}");                  logger.Info($"UnspentTxCount:                    {chainState.UnspentTxCount'9:N0}");                  logger.Info($"UnspentOutputCount:                {chainState.UnspentOutputCount'9:N0}");                  logger.Info($"TotalTxCount:                      {chainState.TotalTxCount'9:N0}");                  logger.Info($"TotalInputCount:                   {chainState.TotalInputCount'9:N0}");                  logger.Info($"TotalOutputCount:                  {chainState.TotalOutputCount'9:N0}");                    // look up genesis coinbase output (will be missing)                  UnspentTx unspentTx;                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(0).Transactions[0].Hash' out unspentTx);                  logger.Info($"Genesis coinbase UnspentTx present? {unspentTx != null'9}");                    // look up block 1 coinbase output                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(1).Transactions[0].Hash' out unspentTx);                  logger.Info($"Block 1 coinbase UnspentTx present? {unspentTx != null'9}");                  logger.Info($"Block 1 coinbase output states:    [{string.Join("'"' unspentTx.OutputStates.Select(x => x.ToString()))}]");                    // look up block 381 list of spent txes                  BlockSpentTxes spentTxes;                  chainState.TryGetBlockSpentTxes(381' out spentTxes);                  logger.Info($"Block 381 spent txes count:        {spentTxes.Count'9:N0}");              }
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ChainStateExample,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 999))              using (embeddedBlocks)              using (storageManager)              // retrieve an immutable snapshot of the current chainstate' validation won't be blocked by an open snapshot              using (var chainState = coreDaemon.GetChainState())              {                  // retrieve unspent transactions                  var unspentTxes = chainState.ReadUnspentTransactions().ToList();                    // report counts                  logger.Info($"Chain.Height:                      {chainState.Chain.Height'9:N0}");                  logger.Info($"ReadUnspentTransactions().Count(): {unspentTxes.Count'9:N0}");                  logger.Info($"UnspentTxCount:                    {chainState.UnspentTxCount'9:N0}");                  logger.Info($"UnspentOutputCount:                {chainState.UnspentOutputCount'9:N0}");                  logger.Info($"TotalTxCount:                      {chainState.TotalTxCount'9:N0}");                  logger.Info($"TotalInputCount:                   {chainState.TotalInputCount'9:N0}");                  logger.Info($"TotalOutputCount:                  {chainState.TotalOutputCount'9:N0}");                    // look up genesis coinbase output (will be missing)                  UnspentTx unspentTx;                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(0).Transactions[0].Hash' out unspentTx);                  logger.Info($"Genesis coinbase UnspentTx present? {unspentTx != null'9}");                    // look up block 1 coinbase output                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(1).Transactions[0].Hash' out unspentTx);                  logger.Info($"Block 1 coinbase UnspentTx present? {unspentTx != null'9}");                  logger.Info($"Block 1 coinbase output states:    [{string.Join("'"' unspentTx.OutputStates.Select(x => x.ToString()))}]");                    // look up block 381 list of spent txes                  BlockSpentTxes spentTxes;                  chainState.TryGetBlockSpentTxes(381' out spentTxes);                  logger.Info($"Block 381 spent txes count:        {spentTxes.Count'9:N0}");              }
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ChainStateExample,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 999))              using (embeddedBlocks)              using (storageManager)              // retrieve an immutable snapshot of the current chainstate' validation won't be blocked by an open snapshot              using (var chainState = coreDaemon.GetChainState())              {                  // retrieve unspent transactions                  var unspentTxes = chainState.ReadUnspentTransactions().ToList();                    // report counts                  logger.Info($"Chain.Height:                      {chainState.Chain.Height'9:N0}");                  logger.Info($"ReadUnspentTransactions().Count(): {unspentTxes.Count'9:N0}");                  logger.Info($"UnspentTxCount:                    {chainState.UnspentTxCount'9:N0}");                  logger.Info($"UnspentOutputCount:                {chainState.UnspentOutputCount'9:N0}");                  logger.Info($"TotalTxCount:                      {chainState.TotalTxCount'9:N0}");                  logger.Info($"TotalInputCount:                   {chainState.TotalInputCount'9:N0}");                  logger.Info($"TotalOutputCount:                  {chainState.TotalOutputCount'9:N0}");                    // look up genesis coinbase output (will be missing)                  UnspentTx unspentTx;                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(0).Transactions[0].Hash' out unspentTx);                  logger.Info($"Genesis coinbase UnspentTx present? {unspentTx != null'9}");                    // look up block 1 coinbase output                  chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(1).Transactions[0].Hash' out unspentTx);                  logger.Info($"Block 1 coinbase UnspentTx present? {unspentTx != null'9}");                  logger.Info($"Block 1 coinbase output states:    [{string.Join("'"' unspentTx.OutputStates.Select(x => x.ToString()))}]");                    // look up block 381 list of spent txes                  BlockSpentTxes spentTxes;                  chainState.TryGetBlockSpentTxes(381' out spentTxes);                  logger.Info($"Block 381 spent txes count:        {spentTxes.Count'9:N0}");              }
Magic Number,BitSharp.Examples,ExamplePrograms,C:\repos\pmlyon_BitSharp\BitSharp.Examples\ExamplePrograms.cs,ReplayBlockExample,The following statement contains a magic number: using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks' out storageManager' maxHeight: 999))              using (embeddedBlocks)              using (storageManager)              {                  // start a chain at the genesis block to represent the processed progress                  var processedChain = Chain.CreateForGenesisBlock(coreDaemon.ChainParams.GenesisChainedHeader).ToBuilder();                    // a dictionary of public key script hashes can be created for any addresses of interest' allowing for quick checking                  var scriptHashesOfInterest = new HashSet<UInt256>();                    // retrieve a chainstate to replay blocks with                  using (var chainState = coreDaemon.GetChainState())                  {                      // enumerate the steps needed to take the currently processed chain towards the current chainstate                      foreach (var pathElement in processedChain.NavigateTowards(chainState.Chain))                      {                          // retrieve the next block to replay and whether to replay forwards' or backwards for a re-org                          var replayForward = pathElement.Item1 > 0;                          var replayBlock = pathElement.Item2;                            // begin replaying the transactions in the replay block                          // if this is a re-org' the transactions will be replayed in reverse block order                          var replayTxes = BlockReplayer.ReplayBlock(coreDaemon.CoreStorage' chainState' replayBlock.Hash' replayForward);                            // prepare the tx scanner                          var txScanner = new ActionBlock<ValidatableTx>(                              validatableTx =>                              {                                  // the transaction being replayed                                  var tx = validatableTx.Transaction;                                    // the previous tx outputs for each of the replay transaction's inputs                                  var prevTxOutputs = validatableTx.PrevTxOutputs;                                    // scan the replay transaction's inputs                                  if (!validatableTx.IsCoinbase)                                  {                                      for (var inputIndex = 0; inputIndex < tx.Inputs.Length; inputIndex++)                                      {                                          var input = tx.Inputs[inputIndex];                                          var inputPrevTxOutput = validatableTx.PrevTxOutputs[inputIndex];                                            // check if the input's previous transaction output is of interest                                          var inputPrevTxOutputPublicScriptHash = new UInt256(SHA256Static.ComputeHash(inputPrevTxOutput.ScriptPublicKey));                                          if (scriptHashesOfInterest.Contains(inputPrevTxOutputPublicScriptHash))                                          {                                              if (replayForward)                                              { /* An output for an address of interest is being spent. */ }                                              else                                              { /* An output for an address of interest is being "unspent"' on re-org. */}                                          }                                      }                                  }                                    // scan the replay transaction's outputs                                  for (var outputIndex = 0; outputIndex < tx.Outputs.Length; outputIndex++)                                  {                                      var output = tx.Outputs[outputIndex];                                        // check if the output is of interest                                      var outputPublicScriptHash = new UInt256(SHA256Static.ComputeHash(output.ScriptPublicKey));                                      if (scriptHashesOfInterest.Contains(outputPublicScriptHash))                                      {                                          if (replayForward)                                          { /* An output for an address of interest is being minted. */ }                                          else                                          { /* An output for an address of interest is being "unminted"' on re-org. */}                                      }                                  }                              });                            // hook up and wait for the tx scanner                          replayTxes.LinkTo(txScanner' new DataflowLinkOptions { PropagateCompletion = true });                          txScanner.Completion.Wait();                            // a wallet would now commit its progress                          /*                          walletDatabase.CurrentBlock = replayBlock.Hash;                          walletDatabase.Commit();                          */                            // TODO: after successfully committing' a wallet would notify CoreDaemon of its current progress                          // TODO: CoreDaemon will use this information in order to determine how far in the current chainstate it is safe to prune                          // TODO: with this in place' if a wallet suffers a failure to commit it can just replay the block                          // TODO: wallets can also remain disconnected from CoreDaemon' and just replay blocks to catch up when they are reconnected                            // update the processed chain so that the next step towards the current chainstate can be taken                          if (replayForward)                              processedChain.AddBlock(replayBlock);                          else                              processedChain.RemoveBlock(replayBlock);                      }                  }                    logger.Info("Processed chain height: {0:N0}"' processedChain.Height);              }
