Implementation smell,Namespace,Class,File,Method,Description
Complex Method,IdentityServer3.Core.Models,EntitiesMap,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\Extensions\ModelsMap.cs,ToEntity,Cyclomatic complexity of the method is 10
Long Parameter List,IdentityServer3.EntityFramework,BaseTokenStore<T>,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\Stores\BaseTokenStore.cs,BaseTokenStore,The method has 5 parameters. Parameters: options' context' tokenType' scopeStore' clientStore
Long Identifier,IdentityServer3.EntityFramework.Logging,LogProvider,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\App_Packages\LibLog.4.2\LibLog.cs,,The length of the parameter DisableLoggingEnvironmentVariable is 33.
Long Identifier,IdentityServer3.EntityFramework.Logging,Log4NetLogProvider,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\App_Packages\LibLog.4.2\LibLog.cs,GetOpenNdcMethod,The length of the parameter logicalThreadContextStacksType is 30.
Long Identifier,IdentityServer3.EntityFramework.Logging,Log4NetLogProvider,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\App_Packages\LibLog.4.2\LibLog.cs,GetOpenMdcMethod,The length of the parameter logicalThreadContextPropertiesType is 34.
Long Identifier,IdentityServer3.EntityFramework.Logging.LogProviders,LogProvider,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\App_Packages\LibLog.4.2\LibLog.cs,,The length of the parameter DisableLoggingEnvironmentVariable is 33.
Long Identifier,IdentityServer3.EntityFramework.Logging.LogProviders,Log4NetLogProvider,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\App_Packages\LibLog.4.2\LibLog.cs,GetOpenNdcMethod,The length of the parameter logicalThreadContextStacksType is 30.
Long Identifier,IdentityServer3.EntityFramework.Logging.LogProviders,Log4NetLogProvider,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\App_Packages\LibLog.4.2\LibLog.cs,GetOpenMdcMethod,The length of the parameter logicalThreadContextPropertiesType is 34.
Long Statement,IdentityServer3.EntityFramework.Logging,Log4NetLogProvider,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\App_Packages\LibLog.4.2\LibLog.cs,GetOpenMdcMethod,The length of the statement  "            BinaryExpression setProperties = Expression.Assign(Expression.Property(propertiesExpression' propertiesIndexerProperty' keyParam)' valueParam); " is 143.
Long Statement,IdentityServer3.EntityFramework.Logging.LogProviders,Log4NetLogProvider,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\App_Packages\LibLog.4.2\LibLog.cs,GetOpenMdcMethod,The length of the statement  "            BinaryExpression setProperties = Expression.Assign(Expression.Property(propertiesExpression' propertiesIndexerProperty' keyParam)' valueParam); " is 143.
Long Statement,IdentityServer3.Core.Configuration,IdentityServerServiceFactoryExtensions,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\Extensions\IdentityServerServiceFactoryExtensions.cs,RegisterOperationalServices,The length of the statement  "            factory.Register(new Registration<IOperationalDbContext>(resolver => new OperationalDbContext(options.ConnectionString' options.Schema))); " is 138.
Long Statement,IdentityServer3.Core.Configuration,IdentityServerServiceFactoryExtensions,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\Extensions\IdentityServerServiceFactoryExtensions.cs,RegisterClientStore,The length of the statement  "            factory.Register(new Registration<IClientConfigurationDbContext>(resolver => new ClientConfigurationDbContext(options.ConnectionString' options.Schema))); " is 154.
Long Statement,IdentityServer3.Core.Configuration,IdentityServerServiceFactoryExtensions,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\Extensions\IdentityServerServiceFactoryExtensions.cs,RegisterScopeStore,The length of the statement  "            factory.Register(new Registration<IScopeConfigurationDbContext>(resolver => new ScopeConfigurationDbContext(options.ConnectionString' options.Schema))); " is 152.
Virtual Method Call from Constructor,IdentityServer3.EntityFramework,BaseDbContext,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\DbContexts\BaseDbContext.cs,BaseDbContext,The constructor "BaseDbContext" calls a virtual method "ConfigureChildCollections".
Magic Number,IdentityServer3.EntityFramework.Logging,LoupeLogger,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\App_Packages\LibLog.4.2\LibLog.cs,LoupeLogger,The following statement contains a magic number: _skipLevel = 2;
Magic Number,IdentityServer3.EntityFramework.Logging,LogMessageFormatter,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\App_Packages\LibLog.4.2\LibLog.cs,SimulateStructuredLogging,The following statement contains a magic number: return () =>              {                  string targetMessage = messageBuilder();                  int argumentIndex = 0;                  foreach (Match match in Pattern.Matches(targetMessage))                  {                      int notUsed;                      if (!int.TryParse(match.Value.Substring(1' match.Value.Length -2)' out notUsed))                      {                          targetMessage = ReplaceFirst(targetMessage' match.Value'                              "{" + argumentIndex++ + "}");                      }                  }                  try                  {                      return string.Format(CultureInfo.InvariantCulture' targetMessage' formatParameters);                  }                  catch (FormatException ex)                  {                      throw new FormatException("The input string '" + targetMessage + "' could not be formatted using string.Format"' ex);                  }              };
Magic Number,IdentityServer3.EntityFramework.Logging.LogProviders,LoupeLogger,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\App_Packages\LibLog.4.2\LibLog.cs,LoupeLogger,The following statement contains a magic number: _skipLevel = 2;
Magic Number,IdentityServer3.EntityFramework.Logging.LogProviders,LogMessageFormatter,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\App_Packages\LibLog.4.2\LibLog.cs,SimulateStructuredLogging,The following statement contains a magic number: return () =>              {                  string targetMessage = messageBuilder();                  int argumentIndex = 0;                  foreach (Match match in Pattern.Matches(targetMessage))                  {                      int notUsed;                      if (!int.TryParse(match.Value.Substring(1' match.Value.Length -2)' out notUsed))                      {                          targetMessage = ReplaceFirst(targetMessage' match.Value'                              "{" + argumentIndex++ + "}");                      }                  }                  try                  {                      return string.Format(CultureInfo.InvariantCulture' targetMessage' formatParameters);                  }                  catch (FormatException ex)                  {                      throw new FormatException("The input string '" + targetMessage + "' could not be formatted using string.Format"' ex);                  }              };
Magic Number,IdentityServer3.EntityFramework,StringExtensions,C:\repos\thinktecture_Thinktecture.IdentityServer.v3.EntityFramework\Source\Core.EntityFramework\Extensions\StringExtensions.cs,GetOrigin,The following statement contains a magic number: if (url != null && (url.StartsWith("http://") || url.StartsWith("https://")))              {                  var idx = url.IndexOf("//");                  if (idx > 0)                  {                      idx = url.IndexOf("/"' idx + 2);                      if (idx >= 0)                      {                          url = url.Substring(0' idx);                      }                      return url;                  }              }
