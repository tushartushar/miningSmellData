Implementation smell,Namespace,Class,File,Method,Description
Long Method,SmartConnect,NetStatusUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\NetStatusUpdater.cs,Update,The method has 178 lines of code.
Long Method,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,Load,The method has 106 lines of code.
Complex Method,SmartConnect,NetStatusUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\NetStatusUpdater.cs,Update,Cyclomatic complexity of the method is 30
Complex Method,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,WiFiConnect,Cyclomatic complexity of the method is 11
Complex Method,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,Load,Cyclomatic complexity of the method is 21
Complex Method,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,UpdateConfig,Cyclomatic complexity of the method is 11
Complex Method,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,ValidateConfig,Cyclomatic complexity of the method is 10
Complex Method,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,Config8021X,Cyclomatic complexity of the method is 14
Complex Method,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetLocation,Cyclomatic complexity of the method is 10
Complex Method,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,Connect,Cyclomatic complexity of the method is 15
Complex Method,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,Close,Cyclomatic complexity of the method is 9
Long Parameter List,SmartConnect,AP,C:\repos\nwilder0_SmartConnect\SmartConnect\AP.cs,AP,The method has 6 parameters.
Long Parameter List,SmartConnect,NetStatusUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\NetStatusUpdater.cs,Update,The method has 6 parameters.
Long Parameter List,SmartConnect,Sender,C:\repos\nwilder0_SmartConnect\SmartConnect\Sender.cs,Sender,The method has 5 parameters.
Long Parameter List,SmartConnect,ServerUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\ServerUpdater.cs,ServerUpdater,The method has 5 parameters.
Long Parameter List,SmartConnect,SSID,C:\repos\nwilder0_SmartConnect\SmartConnect\SSID.cs,SSID,The method has 11 parameters.
Long Statement,SmartConnect,DataSender,C:\repos\nwilder0_SmartConnect\SmartConnect\DataSender.cs,Send,The length of the statement  "	if ((main.Iface != null) && (main.State == WiFiConnect.WiFiState.Connected) && (main.Location == WiFiConnect.NetLocation.Local)) { " is 130.
Long Statement,SmartConnect,ErrorSender,C:\repos\nwilder0_SmartConnect\SmartConnect\ErrorSender.cs,Send,The length of the statement  "	if ((main.Iface != null) && (main.State == WiFiConnect.WiFiState.Connected) && (main.Location == WiFiConnect.NetLocation.Local)) { " is 130.
Long Statement,SmartConnect,ServerUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\ServerUpdater.cs,Update,The length of the statement  "	if ((main.Iface != null) && (main.State == WiFiConnect.WiFiState.Connected) && (main.Location == WiFiConnect.NetLocation.Local)) { " is 130.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,Setting,The length of the statement  "		log.Debug ("Setting key = " + key + " and value = " + value + " but value is not Boolean' exact message is " + ex.Message); " is 123.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,UpdateConfig,The length of the statement  "			ConcurrentDictionary<String' String> dTemplate = JsonConvert.DeserializeObject<ConcurrentDictionary<String' String>> (jsonTemplate); " is 132.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,ValidateConfig,The length of the statement  "			log.Debug ("ValidateConfig: invalid value for averageBandwidthInterval' setting value to 10 (minutes); exact message is " + ex.Message); " is 136.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,UpdateCert,The length of the statement  "			X509Certificate2 serverCert = new X509Certificate2 (X509Certificate2.CreateFromCertFile (AppDomain.CurrentDomain.BaseDirectory + tmpFilenameServerCert)); " is 153.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,Config8021X,The length of the statement  "			String strSSIDName = xdocProfile.Element (xNS + "WLANProfile").Element (xNS + "SSIDConfig").Element (xNS + "SSID").Element (xNS + "name").Value; " is 144.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,Config8021X,The length of the statement  "			XElement xAuthEnc = xdocProfile.Element (xNS + "WLANProfile").Element (xNS + "MSM").Element (xNS + "security").Element (xNS + "authEncryption"); " is 144.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,Config8021X,The length of the statement  "				XElement xSharedKey = xdocProfile.Element (xNS + "WLANProfile").Element (xNS + "MSM").Element (xNS + "security").Element (xNS + "sharedKey"); " is 141.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,Config8021X,The length of the statement  "				localSSIDs.TryAdd (profileInfo.profileName' new SSID (strSSIDName' profileInfo.profileName' ""' ""' true' strAuth' strEnc' b1X' strSharedKey' ""' xdocProfile)); " is 160.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetState,The length of the statement  "		SetBandwidth (wlanIface.NetworkInterface.GetIPStatistics ().BytesReceived' wlanIface.NetworkInterface.GetIPStatistics ().BytesSent); " is 132.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,ConnectOrDisconnect,The length of the statement  "		if (wlanIface.InterfaceState == Wlan.WlanInterfaceState.Disconnected || wlanIface.InterfaceState == Wlan.WlanInterfaceState.Disconnecting) { " is 140.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,Connect,The length of the statement  "		if (!(wlanIface.InterfaceState == Wlan.WlanInterfaceState.Disconnected || wlanIface.InterfaceState == Wlan.WlanInterfaceState.Disconnecting)) " is 141.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,GetPostSessionData,The length of the statement  "				connectedSSID = Encoding.ASCII.GetString (wlanIface.CurrentConnection.wlanAssociationAttributes.dot11Ssid.SSID).Replace ("\0"' ""); " is 131.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,GetPostSessionData,The length of the statement  "				foreach (System.Net.NetworkInformation.UnicastIPAddressInformation addr in wlanIface.NetworkInterface.GetIPProperties ().UnicastAddresses) { " is 140.
Long Statement,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,GetPostSessionData,The length of the statement  "		postData = "mac=" + WebUtility.UrlEncode (mac) + "&ip=" + WebUtility.UrlEncode (ip) + "&os=" + WebUtility.UrlEncode (os) + "&connected_ssid=" + WebUtility.UrlEncode (connectedSSID) + "&connected_ap=" + WebUtility.UrlEncode (connectedAP) + "&connected_time=" + WebUtility.UrlEncode (connectedTime); " is 297.
Long Statement,SmartConnect,SSID,C:\repos\nwilder0_SmartConnect\SmartConnect\SSID.cs,SetProfile,The length of the statement  "		xdocProfile.Element (xNS + "WLANProfile").Element (xNS + "SSIDConfig").Element (xNS + "SSID").Element (xNS + "name").Value = name; " is 130.
Long Statement,SmartConnect,SSID,C:\repos\nwilder0_SmartConnect\SmartConnect\SSID.cs,SetProfile,The length of the statement  "		xdocProfile.Element (xNS + "WLANProfile").Element (xNS + "SSIDConfig").Element (xNS + "SSID").Element (xNS + "hex").Value = SCUtility.String2HexStr (name); " is 155.
Long Statement,SmartConnect,SSID,C:\repos\nwilder0_SmartConnect\SmartConnect\SSID.cs,SetProfile,The length of the statement  "			xPSK.Element ("keyMaterial").Value = SCUtility.String2HexStr (SCUtility.Bytes2String (ProtectedData.Protect (SCUtility.String2Bytes (sharedKey)' null' DataProtectionScope.CurrentUser))); " is 186.
Magic Number,SmartConnect,DataSender,C:\repos\nwilder0_SmartConnect\SmartConnect\DataSender.cs,Run,The following statement contains a magic number: try {  	for (; ;) {  		Send ();  		if (interval == 0) {  			break;  		}  		else {  			Thread.Sleep (interval * 1000);  		}  	}  }  finally {  	Stop ();  }  
Magic Number,SmartConnect,DataSender,C:\repos\nwilder0_SmartConnect\SmartConnect\DataSender.cs,Run,The following statement contains a magic number: for (; ;) {  	Send ();  	if (interval == 0) {  		break;  	}  	else {  		Thread.Sleep (interval * 1000);  	}  }  
Magic Number,SmartConnect,DataSender,C:\repos\nwilder0_SmartConnect\SmartConnect\DataSender.cs,Run,The following statement contains a magic number: if (interval == 0) {  	break;  }  else {  	Thread.Sleep (interval * 1000);  }  
Magic Number,SmartConnect,DataSender,C:\repos\nwilder0_SmartConnect\SmartConnect\DataSender.cs,Run,The following statement contains a magic number: Thread.Sleep (interval * 1000);  
Magic Number,SmartConnect,DataSender,C:\repos\nwilder0_SmartConnect\SmartConnect\DataSender.cs,Send,The following statement contains a magic number: if ((main.Iface != null) && (main.State == WiFiConnect.WiFiState.Connected) && (main.Location == WiFiConnect.NetLocation.Local)) {  	if (!sendClient.IsBusy) {  		String netData = main.GetJsonNetData ();  		if (netData.Equals ("")) {  			Thread.Sleep (5000);  			netData = main.GetJsonNetData ();  		}  		String postData = "json=" + WebUtility.UrlEncode (netData) + "&type=data";  		postData += "&" + main.GetPostSessionData ();  		String results = "";  		try {  			sendClient.Headers [HttpRequestHeader.ContentType] = "application/x-www-form-urlencoded";  			results = sendClient.UploadString (urlSend' postData);  		}  		catch (WebException ex) {  			main.Log.Error ("DataSender: Send - " + ex.Message);  		}  		try {  			int success = Convert.ToInt32 (results);  			main.Log.Debug (success.ToString () + " lines of network data sent to the server.");  		}  		catch (FormatException ex) {  			main.Log.Error (ex.Message + ": results = " + results);  		}  	}  }  
Magic Number,SmartConnect,DataSender,C:\repos\nwilder0_SmartConnect\SmartConnect\DataSender.cs,Send,The following statement contains a magic number: if (!sendClient.IsBusy) {  	String netData = main.GetJsonNetData ();  	if (netData.Equals ("")) {  		Thread.Sleep (5000);  		netData = main.GetJsonNetData ();  	}  	String postData = "json=" + WebUtility.UrlEncode (netData) + "&type=data";  	postData += "&" + main.GetPostSessionData ();  	String results = "";  	try {  		sendClient.Headers [HttpRequestHeader.ContentType] = "application/x-www-form-urlencoded";  		results = sendClient.UploadString (urlSend' postData);  	}  	catch (WebException ex) {  		main.Log.Error ("DataSender: Send - " + ex.Message);  	}  	try {  		int success = Convert.ToInt32 (results);  		main.Log.Debug (success.ToString () + " lines of network data sent to the server.");  	}  	catch (FormatException ex) {  		main.Log.Error (ex.Message + ": results = " + results);  	}  }  
Magic Number,SmartConnect,DataSender,C:\repos\nwilder0_SmartConnect\SmartConnect\DataSender.cs,Send,The following statement contains a magic number: if (netData.Equals ("")) {  	Thread.Sleep (5000);  	netData = main.GetJsonNetData ();  }  
Magic Number,SmartConnect,DataSender,C:\repos\nwilder0_SmartConnect\SmartConnect\DataSender.cs,Send,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,SmartConnect,frmSettings,C:\repos\nwilder0_SmartConnect\SmartConnect\frmSettings.cs,frmSettings_Load,The following statement contains a magic number: if (mode.Equals ("advanced")) {  	cbMode.SelectedIndex = 1;  	Height = 400;  	pnlAdv.Visible = true;  }  else {  	cbMode.SelectedIndex = 0;  	pnlAdv.Visible = false;  	Height = 200;  }  
Magic Number,SmartConnect,frmSettings,C:\repos\nwilder0_SmartConnect\SmartConnect\frmSettings.cs,frmSettings_Load,The following statement contains a magic number: if (mode.Equals ("advanced")) {  	cbMode.SelectedIndex = 1;  	Height = 400;  	pnlAdv.Visible = true;  }  else {  	cbMode.SelectedIndex = 0;  	pnlAdv.Visible = false;  	Height = 200;  }  
Magic Number,SmartConnect,frmSettings,C:\repos\nwilder0_SmartConnect\SmartConnect\frmSettings.cs,frmSettings_Load,The following statement contains a magic number: Height = 400;  
Magic Number,SmartConnect,frmSettings,C:\repos\nwilder0_SmartConnect\SmartConnect\frmSettings.cs,frmSettings_Load,The following statement contains a magic number: Height = 200;  
Magic Number,SmartConnect,frmSettings,C:\repos\nwilder0_SmartConnect\SmartConnect\frmSettings.cs,cbMode_SelectedIndexChanged,The following statement contains a magic number: if (cbMode.SelectedIndex == 1) {  	Height = 400;  	pnlAdv.Visible = true;  }  else {  	pnlAdv.Visible = false;  	Height = 200;  }  
Magic Number,SmartConnect,frmSettings,C:\repos\nwilder0_SmartConnect\SmartConnect\frmSettings.cs,cbMode_SelectedIndexChanged,The following statement contains a magic number: if (cbMode.SelectedIndex == 1) {  	Height = 400;  	pnlAdv.Visible = true;  }  else {  	pnlAdv.Visible = false;  	Height = 200;  }  
Magic Number,SmartConnect,frmSettings,C:\repos\nwilder0_SmartConnect\SmartConnect\frmSettings.cs,cbMode_SelectedIndexChanged,The following statement contains a magic number: Height = 400;  
Magic Number,SmartConnect,frmSettings,C:\repos\nwilder0_SmartConnect\SmartConnect\frmSettings.cs,cbMode_SelectedIndexChanged,The following statement contains a magic number: Height = 200;  
Magic Number,SmartConnect,Main,C:\repos\nwilder0_SmartConnect\SmartConnect\Main.cs,TSSetLinks,The following statement contains a magic number: if (pnlLinks.InvokeRequired)  	pnlLinks.Invoke (new Action<SCLink[]> (TSSetLinks)' new Object[] {  		aLinks  	});  else {  	List<LinkLabel> removeList = new List<LinkLabel> ();  	foreach (Control c in pnlLinks.Controls) {  		if (c.GetType ().ToString ().Equals ("System.Windows.Forms.LinkLabel"))  			removeList.Add ((LinkLabel)c);  	}  	foreach (Control c in removeList) {  		pnlLinks.Controls.Remove (c);  	}  	// loop through each link  	int i = 0;  	foreach (SCLink item in aLinks) {  		//create a new label for the link  		LinkLabel ll = new LinkLabel ();  		// text is the name or message that will be displayed  		ll.Text = item.Text;  		// this adds the url data to the message that will open the browser page when clicked  		ll.Links.Add (new LinkLabel.Link (0' ll.Text.Length' item.Link));  		// this adds a handler to the LinkLabel to run the URL just like opening something thru explorer  		ll.LinkClicked += new LinkLabelLinkClickedEventHandler (eventHandlerLinkLabelClicked);  		// each label needs a unique name  		ll.Name = "llbl" + i++;  		// sets the width to the max length' otherwise the label will be locked at the short default width  		ll.Width = 300;  		// add the new link label to the appropriate FlowLayoutPanel  		pnlLinks.Controls.Add (ll);  	}  }  
Magic Number,SmartConnect,Main,C:\repos\nwilder0_SmartConnect\SmartConnect\Main.cs,TSSetLinks,The following statement contains a magic number: foreach (SCLink item in aLinks) {  	//create a new label for the link  	LinkLabel ll = new LinkLabel ();  	// text is the name or message that will be displayed  	ll.Text = item.Text;  	// this adds the url data to the message that will open the browser page when clicked  	ll.Links.Add (new LinkLabel.Link (0' ll.Text.Length' item.Link));  	// this adds a handler to the LinkLabel to run the URL just like opening something thru explorer  	ll.LinkClicked += new LinkLabelLinkClickedEventHandler (eventHandlerLinkLabelClicked);  	// each label needs a unique name  	ll.Name = "llbl" + i++;  	// sets the width to the max length' otherwise the label will be locked at the short default width  	ll.Width = 300;  	// add the new link label to the appropriate FlowLayoutPanel  	pnlLinks.Controls.Add (ll);  }  
Magic Number,SmartConnect,Main,C:\repos\nwilder0_SmartConnect\SmartConnect\Main.cs,TSSetLinks,The following statement contains a magic number: ll.Width = 300;  
Magic Number,SmartConnect,Main,C:\repos\nwilder0_SmartConnect\SmartConnect\Main.cs,LoadVisible,The following statement contains a magic number: if (bNoLinks)  	height -= 192;  
Magic Number,SmartConnect,Main,C:\repos\nwilder0_SmartConnect\SmartConnect\Main.cs,LoadVisible,The following statement contains a magic number: height -= 192;  
Magic Number,SmartConnect,Main,C:\repos\nwilder0_SmartConnect\SmartConnect\Main.cs,LoadVisible,The following statement contains a magic number: if (bNoBandwidth)  	height -= 67;  
Magic Number,SmartConnect,Main,C:\repos\nwilder0_SmartConnect\SmartConnect\Main.cs,LoadVisible,The following statement contains a magic number: height -= 67;  
Magic Number,SmartConnect,Main,C:\repos\nwilder0_SmartConnect\SmartConnect\Main.cs,LoadVisible,The following statement contains a magic number: if (!bAdvanced)  	height -= 110;  
Magic Number,SmartConnect,Main,C:\repos\nwilder0_SmartConnect\SmartConnect\Main.cs,LoadVisible,The following statement contains a magic number: height -= 110;  
Magic Number,SmartConnect,Main,C:\repos\nwilder0_SmartConnect\SmartConnect\Main.cs,Main_Resize,The following statement contains a magic number: if (FormWindowState.Minimized == this.WindowState) {  	notifyIconMain.Visible = true;  	notifyIconMain.ShowBalloonTip (500);  	this.Hide ();  }  else if (FormWindowState.Normal == this.WindowState) {  	notifyIconMain.Visible = false;  }  
Magic Number,SmartConnect,Main,C:\repos\nwilder0_SmartConnect\SmartConnect\Main.cs,Main_Resize,The following statement contains a magic number: notifyIconMain.ShowBalloonTip (500);  
Magic Number,SmartConnect,NetStatusUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\NetStatusUpdater.cs,Run,The following statement contains a magic number: for (; ;) {  	Update ();  	if (updateInterval == 0) {  		break;  	}  	else {  		Thread.Sleep (updateInterval * 1000);  	}  }  
Magic Number,SmartConnect,NetStatusUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\NetStatusUpdater.cs,Run,The following statement contains a magic number: if (updateInterval == 0) {  	break;  }  else {  	Thread.Sleep (updateInterval * 1000);  }  
Magic Number,SmartConnect,NetStatusUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\NetStatusUpdater.cs,Run,The following statement contains a magic number: Thread.Sleep (updateInterval * 1000);  
Magic Number,SmartConnect,SCLog,C:\repos\nwilder0_SmartConnect\SmartConnect\SCLog.cs,Error,The following statement contains a magic number: try {  	DateTime now = DateTime.Now;  	mesg = now.ToString (datePattern) + ": " + mesg;  	lock (fileError)  		fileError.WriteLine (mesg);  	if (sendErrors) {  		qError.Enqueue (mesg);  		if (Monitor.TryEnter (errorQueueNotEmpty' 1000)) {  			Monitor.PulseAll (errorQueueNotEmpty);  			Monitor.Exit (errorQueueNotEmpty);  		}  	}  }  catch (Exception ex) {  	MessageBox.Show ("Error in logging: " + ex.Message);  }  
Magic Number,SmartConnect,SCLog,C:\repos\nwilder0_SmartConnect\SmartConnect\SCLog.cs,Error,The following statement contains a magic number: if (sendErrors) {  	qError.Enqueue (mesg);  	if (Monitor.TryEnter (errorQueueNotEmpty' 1000)) {  		Monitor.PulseAll (errorQueueNotEmpty);  		Monitor.Exit (errorQueueNotEmpty);  	}  }  
Magic Number,SmartConnect,SCLog,C:\repos\nwilder0_SmartConnect\SmartConnect\SCLog.cs,Error,The following statement contains a magic number: if (Monitor.TryEnter (errorQueueNotEmpty' 1000)) {  	Monitor.PulseAll (errorQueueNotEmpty);  	Monitor.Exit (errorQueueNotEmpty);  }  
Magic Number,SmartConnect,SCLog,C:\repos\nwilder0_SmartConnect\SmartConnect\SCLog.cs,DequeueErrors,The following statement contains a magic number: if (num > 0) {  	String mesg;  	int i = 0;  	while (num > 0) {  		i++;  		if (qError.TryDequeue (out mesg))  			num--;  		if (i > 10000)  			break;  	}  	if (num > 0)  		Error ("DequeueErrors: Failure with Dequeuing sent errors");  }  
Magic Number,SmartConnect,SCLog,C:\repos\nwilder0_SmartConnect\SmartConnect\SCLog.cs,DequeueErrors,The following statement contains a magic number: while (num > 0) {  	i++;  	if (qError.TryDequeue (out mesg))  		num--;  	if (i > 10000)  		break;  }  
Magic Number,SmartConnect,SCLog,C:\repos\nwilder0_SmartConnect\SmartConnect\SCLog.cs,DequeueErrors,The following statement contains a magic number: if (i > 10000)  	break;  
Magic Number,SmartConnect,ServerUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\ServerUpdater.cs,Run,The following statement contains a magic number: try {  	if (updateInterval == 0) {  		Update ();  	}  	else {  		for (; ;) {  			if (updateInterval == 0) {  				break;  			}  			Update ();  			Thread.Sleep (updateInterval * 60 * 1000);  		}  	}  }  finally {  	Stop ();  }  
Magic Number,SmartConnect,ServerUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\ServerUpdater.cs,Run,The following statement contains a magic number: try {  	if (updateInterval == 0) {  		Update ();  	}  	else {  		for (; ;) {  			if (updateInterval == 0) {  				break;  			}  			Update ();  			Thread.Sleep (updateInterval * 60 * 1000);  		}  	}  }  finally {  	Stop ();  }  
Magic Number,SmartConnect,ServerUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\ServerUpdater.cs,Run,The following statement contains a magic number: if (updateInterval == 0) {  	Update ();  }  else {  	for (; ;) {  		if (updateInterval == 0) {  			break;  		}  		Update ();  		Thread.Sleep (updateInterval * 60 * 1000);  	}  }  
Magic Number,SmartConnect,ServerUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\ServerUpdater.cs,Run,The following statement contains a magic number: if (updateInterval == 0) {  	Update ();  }  else {  	for (; ;) {  		if (updateInterval == 0) {  			break;  		}  		Update ();  		Thread.Sleep (updateInterval * 60 * 1000);  	}  }  
Magic Number,SmartConnect,ServerUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\ServerUpdater.cs,Run,The following statement contains a magic number: for (; ;) {  	if (updateInterval == 0) {  		break;  	}  	Update ();  	Thread.Sleep (updateInterval * 60 * 1000);  }  
Magic Number,SmartConnect,ServerUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\ServerUpdater.cs,Run,The following statement contains a magic number: for (; ;) {  	if (updateInterval == 0) {  		break;  	}  	Update ();  	Thread.Sleep (updateInterval * 60 * 1000);  }  
Magic Number,SmartConnect,ServerUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\ServerUpdater.cs,Run,The following statement contains a magic number: Thread.Sleep (updateInterval * 60 * 1000);  
Magic Number,SmartConnect,ServerUpdater,C:\repos\nwilder0_SmartConnect\SmartConnect\ServerUpdater.cs,Run,The following statement contains a magic number: Thread.Sleep (updateInterval * 60 * 1000);  
Magic Number,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,WiFiConnect,The following statement contains a magic number: updaterNetStatus = new NetStatusUpdater (20' this);  
Magic Number,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetBandwidth,The following statement contains a magic number: if ((recieved < 0) || (sent < 0) || (wlanIface == null)) {  	lastBytesReceived = 0;  	lastBytesSent = 0;  	lastTimeBytes = 0;  }  else {  	Thread.Sleep (50);  	long recievedNew = wlanIface.NetworkInterface.GetIPStatistics ().BytesReceived;  	long sentNew = wlanIface.NetworkInterface.GetIPStatistics ().BytesSent;  	strRecieved = SCUtility.BytesDisplayString (((double)(recievedNew - recieved)) / 0.05' false) + "/s";  	strSent = SCUtility.BytesDisplayString (((double)(sentNew - sent)) / 0.05' false) + "/s";  	long timeNow = (System.Diagnostics.Stopwatch.GetTimestamp ()) / (TimeSpan.TicksPerMillisecond);  	if (lastTimeBytes == 0)  		lastTimeBytes = timeNow - 50;  	if (lastBytesReceived == 0)  		lastBytesReceived = recieved;  	if (lastBytesSent == 0)  		lastBytesSent = sent;  	double diffSecs = ((double)(timeNow - lastTimeBytes)) / 1000;  	strRecievedAvg = SCUtility.BytesDisplayString (((double)(recievedNew - lastBytesReceived)) / diffSecs' false) + "/s";  	strSentAvg = SCUtility.BytesDisplayString (((double)(sentNew - lastBytesSent)) / diffSecs' false) + "/s";  }  
Magic Number,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetBandwidth,The following statement contains a magic number: if ((recieved < 0) || (sent < 0) || (wlanIface == null)) {  	lastBytesReceived = 0;  	lastBytesSent = 0;  	lastTimeBytes = 0;  }  else {  	Thread.Sleep (50);  	long recievedNew = wlanIface.NetworkInterface.GetIPStatistics ().BytesReceived;  	long sentNew = wlanIface.NetworkInterface.GetIPStatistics ().BytesSent;  	strRecieved = SCUtility.BytesDisplayString (((double)(recievedNew - recieved)) / 0.05' false) + "/s";  	strSent = SCUtility.BytesDisplayString (((double)(sentNew - sent)) / 0.05' false) + "/s";  	long timeNow = (System.Diagnostics.Stopwatch.GetTimestamp ()) / (TimeSpan.TicksPerMillisecond);  	if (lastTimeBytes == 0)  		lastTimeBytes = timeNow - 50;  	if (lastBytesReceived == 0)  		lastBytesReceived = recieved;  	if (lastBytesSent == 0)  		lastBytesSent = sent;  	double diffSecs = ((double)(timeNow - lastTimeBytes)) / 1000;  	strRecievedAvg = SCUtility.BytesDisplayString (((double)(recievedNew - lastBytesReceived)) / diffSecs' false) + "/s";  	strSentAvg = SCUtility.BytesDisplayString (((double)(sentNew - lastBytesSent)) / diffSecs' false) + "/s";  }  
Magic Number,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetBandwidth,The following statement contains a magic number: if ((recieved < 0) || (sent < 0) || (wlanIface == null)) {  	lastBytesReceived = 0;  	lastBytesSent = 0;  	lastTimeBytes = 0;  }  else {  	Thread.Sleep (50);  	long recievedNew = wlanIface.NetworkInterface.GetIPStatistics ().BytesReceived;  	long sentNew = wlanIface.NetworkInterface.GetIPStatistics ().BytesSent;  	strRecieved = SCUtility.BytesDisplayString (((double)(recievedNew - recieved)) / 0.05' false) + "/s";  	strSent = SCUtility.BytesDisplayString (((double)(sentNew - sent)) / 0.05' false) + "/s";  	long timeNow = (System.Diagnostics.Stopwatch.GetTimestamp ()) / (TimeSpan.TicksPerMillisecond);  	if (lastTimeBytes == 0)  		lastTimeBytes = timeNow - 50;  	if (lastBytesReceived == 0)  		lastBytesReceived = recieved;  	if (lastBytesSent == 0)  		lastBytesSent = sent;  	double diffSecs = ((double)(timeNow - lastTimeBytes)) / 1000;  	strRecievedAvg = SCUtility.BytesDisplayString (((double)(recievedNew - lastBytesReceived)) / diffSecs' false) + "/s";  	strSentAvg = SCUtility.BytesDisplayString (((double)(sentNew - lastBytesSent)) / diffSecs' false) + "/s";  }  
Magic Number,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetBandwidth,The following statement contains a magic number: if ((recieved < 0) || (sent < 0) || (wlanIface == null)) {  	lastBytesReceived = 0;  	lastBytesSent = 0;  	lastTimeBytes = 0;  }  else {  	Thread.Sleep (50);  	long recievedNew = wlanIface.NetworkInterface.GetIPStatistics ().BytesReceived;  	long sentNew = wlanIface.NetworkInterface.GetIPStatistics ().BytesSent;  	strRecieved = SCUtility.BytesDisplayString (((double)(recievedNew - recieved)) / 0.05' false) + "/s";  	strSent = SCUtility.BytesDisplayString (((double)(sentNew - sent)) / 0.05' false) + "/s";  	long timeNow = (System.Diagnostics.Stopwatch.GetTimestamp ()) / (TimeSpan.TicksPerMillisecond);  	if (lastTimeBytes == 0)  		lastTimeBytes = timeNow - 50;  	if (lastBytesReceived == 0)  		lastBytesReceived = recieved;  	if (lastBytesSent == 0)  		lastBytesSent = sent;  	double diffSecs = ((double)(timeNow - lastTimeBytes)) / 1000;  	strRecievedAvg = SCUtility.BytesDisplayString (((double)(recievedNew - lastBytesReceived)) / diffSecs' false) + "/s";  	strSentAvg = SCUtility.BytesDisplayString (((double)(sentNew - lastBytesSent)) / diffSecs' false) + "/s";  }  
Magic Number,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetBandwidth,The following statement contains a magic number: if ((recieved < 0) || (sent < 0) || (wlanIface == null)) {  	lastBytesReceived = 0;  	lastBytesSent = 0;  	lastTimeBytes = 0;  }  else {  	Thread.Sleep (50);  	long recievedNew = wlanIface.NetworkInterface.GetIPStatistics ().BytesReceived;  	long sentNew = wlanIface.NetworkInterface.GetIPStatistics ().BytesSent;  	strRecieved = SCUtility.BytesDisplayString (((double)(recievedNew - recieved)) / 0.05' false) + "/s";  	strSent = SCUtility.BytesDisplayString (((double)(sentNew - sent)) / 0.05' false) + "/s";  	long timeNow = (System.Diagnostics.Stopwatch.GetTimestamp ()) / (TimeSpan.TicksPerMillisecond);  	if (lastTimeBytes == 0)  		lastTimeBytes = timeNow - 50;  	if (lastBytesReceived == 0)  		lastBytesReceived = recieved;  	if (lastBytesSent == 0)  		lastBytesSent = sent;  	double diffSecs = ((double)(timeNow - lastTimeBytes)) / 1000;  	strRecievedAvg = SCUtility.BytesDisplayString (((double)(recievedNew - lastBytesReceived)) / diffSecs' false) + "/s";  	strSentAvg = SCUtility.BytesDisplayString (((double)(sentNew - lastBytesSent)) / diffSecs' false) + "/s";  }  
Magic Number,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetBandwidth,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetBandwidth,The following statement contains a magic number: strRecieved = SCUtility.BytesDisplayString (((double)(recievedNew - recieved)) / 0.05' false) + "/s";  
Magic Number,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetBandwidth,The following statement contains a magic number: strSent = SCUtility.BytesDisplayString (((double)(sentNew - sent)) / 0.05' false) + "/s";  
Magic Number,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetBandwidth,The following statement contains a magic number: if (lastTimeBytes == 0)  	lastTimeBytes = timeNow - 50;  
Magic Number,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetBandwidth,The following statement contains a magic number: lastTimeBytes = timeNow - 50;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,HexStr2String,The following statement contains a magic number: for (int i = 0; i < hex.Length; i += 2) {  	bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,HexStr2String,The following statement contains a magic number: for (int i = 0; i < hex.Length; i += 2) {  	bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,HexStr2String,The following statement contains a magic number: for (int i = 0; i < hex.Length; i += 2) {  	bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,HexStr2String,The following statement contains a magic number: for (int i = 0; i < hex.Length; i += 2) {  	bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,HexStr2String,The following statement contains a magic number: i += 2
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,HexStr2String,The following statement contains a magic number: bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,HexStr2String,The following statement contains a magic number: bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,HexStr2String,The following statement contains a magic number: bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,Bytes2MAC,The following statement contains a magic number: if (bytes.Length == 6) {  	foreach (byte value in bytes) {  		string tmp = SCUtility.String2HexStr (Convert.ToChar (value).ToString ());  		if (tmp.Length == 1)  			tmp = "0" + tmp;  		if (tmp.Length == 0)  			tmp = "00" + tmp;  		mac += tmp + ":";  	}  	mac = mac.Substring (0' mac.Length - 1);  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,MAC2Bytes,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	bytes [i] = Convert.ToByte (strBytes [i]' 16);  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,MAC2Bytes,The following statement contains a magic number: bytes [i] = Convert.ToByte (strBytes [i]' 16);  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < 1024) {  	strBytes = bytes.ToString ("n0") + " " + strTail;  }  else if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < 1024) {  	strBytes = bytes.ToString ("n0") + " " + strTail;  }  else if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < 1024) {  	strBytes = bytes.ToString ("n0") + " " + strTail;  }  else if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < 1024) {  	strBytes = bytes.ToString ("n0") + " " + strTail;  }  else if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < 1024) {  	strBytes = bytes.ToString ("n0") + " " + strTail;  }  else if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < 1024) {  	strBytes = bytes.ToString ("n0") + " " + strTail;  }  else if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < 1024) {  	strBytes = bytes.ToString ("n0") + " " + strTail;  }  else if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < 1024) {  	strBytes = bytes.ToString ("n0") + " " + strTail;  }  else if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < 1024) {  	strBytes = bytes.ToString ("n0") + " " + strTail;  }  else if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < 1024) {  	strBytes = bytes.ToString ("n0") + " " + strTail;  }  else if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < 1024) {  	strBytes = bytes.ToString ("n0") + " " + strTail;  }  else if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < 1024) {  	strBytes = bytes.ToString ("n0") + " " + strTail;  }  else if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (1024 * 1024)) {  	strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  }  else if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: strBytes = (bytes / 1024).ToString ("n0") + " K" + strTail;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (Math.Pow (1024' 3))) {  	strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  }  else if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: strBytes = (bytes / (1024 * 1024)).ToString ("n0") + " M" + strTail;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: if (bytes < (Math.Pow (1024' 4))) {  	strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  }  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,BytesDisplayString,The following statement contains a magic number: strBytes = (bytes / (Math.Pow (1024' 3))).ToString ("n0") + " G" + strTail;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,RSSI2SignalPercent,The following statement contains a magic number: if (signalStrength > -100 && signalStrength < -50)  	percent = (int)((signalStrength + 100.0) / 50.0) * 100;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,RSSI2SignalPercent,The following statement contains a magic number: if (signalStrength > -100 && signalStrength < -50)  	percent = (int)((signalStrength + 100.0) / 50.0) * 100;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,RSSI2SignalPercent,The following statement contains a magic number: if (signalStrength > -100 && signalStrength < -50)  	percent = (int)((signalStrength + 100.0) / 50.0) * 100;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,RSSI2SignalPercent,The following statement contains a magic number: if (signalStrength > -100 && signalStrength < -50)  	percent = (int)((signalStrength + 100.0) / 50.0) * 100;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,RSSI2SignalPercent,The following statement contains a magic number: if (signalStrength > -100 && signalStrength < -50)  	percent = (int)((signalStrength + 100.0) / 50.0) * 100;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,RSSI2SignalPercent,The following statement contains a magic number: percent = (int)((signalStrength + 100.0) / 50.0) * 100;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,RSSI2SignalPercent,The following statement contains a magic number: percent = (int)((signalStrength + 100.0) / 50.0) * 100;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,RSSI2SignalPercent,The following statement contains a magic number: percent = (int)((signalStrength + 100.0) / 50.0) * 100;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,RSSI2SignalPercent,The following statement contains a magic number: if (signalStrength >= -50)  	percent = 100;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,RSSI2SignalPercent,The following statement contains a magic number: if (signalStrength >= -50)  	percent = 100;  
Magic Number,SmartConnect,SCUtility,C:\repos\nwilder0_SmartConnect\SmartConnect\SCUtility.cs,RSSI2SignalPercent,The following statement contains a magic number: percent = 100;  
Missing Default,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetState,The following switch statement is missing a default case: switch (wlanIface.InterfaceState) {  case Wlan.WlanInterfaceState.Connected:  	state = WiFiState.Connected;  	strState = "Connected";  	break;  case Wlan.WlanInterfaceState.Disconnected:  	state = WiFiState.Disconnected;  	strState = "Disconnected";  	break;  case Wlan.WlanInterfaceState.Disconnecting:  	state = WiFiState.Disconnecting;  	strState = "Disconnecting";  	break;  case Wlan.WlanInterfaceState.NotReady:  	state = WiFiState.NoWirelessInterface;  	strState = "WiFi Not Available";  	break;  case Wlan.WlanInterfaceState.Associating:  case Wlan.WlanInterfaceState.Authenticating:  	state = WiFiState.Connecting;  	strState = "Connecting";  	break;  }  
Missing Default,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,SetLocation,The following switch statement is missing a default case: switch (location) {  case NetLocation.Unknown:  	strLoc = "Unknown - WiFi Not Available";  	break;  case NetLocation.Foreign:  	strLoc = "Not at " + Setting ("internalLocationName");  	break;  case NetLocation.Local:  	strLoc = Setting ("internalLocationName");  	break;  }  
Missing Default,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,WlanEventHandler,The following switch statement is missing a default case: switch (eventData.notificationSource) {  case Wlan.WlanNotificationSource.ACM:  	switch ((Wlan.WlanNotificationCodeAcm)eventData.notificationCode) {  	case Wlan.WlanNotificationCodeAcm.ConnectionAttemptFail:  		log.Debug ("ConnectionAttemptFail");  		break;  	case Wlan.WlanNotificationCodeAcm.ConnectionComplete:  		log.Debug ("ConnectionComplete");  		break;  	case Wlan.WlanNotificationCodeAcm.ConnectionStart:  		state = WiFiState.Connecting;  		updaterNetStatus.Update ();  		log.Debug ("ConnectionStart");  		break;  	case Wlan.WlanNotificationCodeAcm.Disconnected:  		state = WiFiState.Disconnected;  		updaterNetStatus.Update ();  		log.Debug ("ACM.Disconnected");  		break;  	case Wlan.WlanNotificationCodeAcm.Disconnecting:  		state = WiFiState.Disconnecting;  		updaterNetStatus.Update ();  		log.Debug ("Disconnecting");  		break;  	case Wlan.WlanNotificationCodeAcm.InterfaceRemoval:  		state = WiFiState.NoWirelessInterface;  		updaterNetStatus.Update ();  		log.Debug ("InterfaceRemoval");  		break;  	}  	break;  case Wlan.WlanNotificationSource.MSM:  	switch ((Wlan.WlanNotificationCodeMsm)eventData.notificationCode) {  	case Wlan.WlanNotificationCodeMsm.AdapterOperationModeChange:  		log.Debug ("AdapterOperationModeChange");  		break;  	case Wlan.WlanNotificationCodeMsm.AdapterRemoval:  		state = WiFiState.NoWirelessInterface;  		updaterNetStatus.Update ();  		log.Debug ("AdapterRemoval");  		break;  	case Wlan.WlanNotificationCodeMsm.SignalQualityChange:  		log.Debug ("SignalQualityChange");  		break;  	case Wlan.WlanNotificationCodeMsm.Associated:  		log.Debug ("Associated");  		break;  	case Wlan.WlanNotificationCodeMsm.Associating:  		log.Debug ("Associating");  		break;  	case Wlan.WlanNotificationCodeMsm.Authenticating:  		log.Debug ("Authenticating");  		break;  	case Wlan.WlanNotificationCodeMsm.Connected:  		state = WiFiState.Connected;  		updaterNetStatus.Update ();  		log.Debug ("MSM.Connected");  		break;  	case Wlan.WlanNotificationCodeMsm.Disassociating:  		log.Debug ("Disassociating");  		break;  	case Wlan.WlanNotificationCodeMsm.Disconnected:  		state = WiFiState.Disconnected;  		updaterNetStatus.Update ();  		log.Debug ("MSM.Disconnected");  		break;  	}  	break;  }  
Missing Default,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,WlanEventHandler,The following switch statement is missing a default case: switch ((Wlan.WlanNotificationCodeAcm)eventData.notificationCode) {  case Wlan.WlanNotificationCodeAcm.ConnectionAttemptFail:  	log.Debug ("ConnectionAttemptFail");  	break;  case Wlan.WlanNotificationCodeAcm.ConnectionComplete:  	log.Debug ("ConnectionComplete");  	break;  case Wlan.WlanNotificationCodeAcm.ConnectionStart:  	state = WiFiState.Connecting;  	updaterNetStatus.Update ();  	log.Debug ("ConnectionStart");  	break;  case Wlan.WlanNotificationCodeAcm.Disconnected:  	state = WiFiState.Disconnected;  	updaterNetStatus.Update ();  	log.Debug ("ACM.Disconnected");  	break;  case Wlan.WlanNotificationCodeAcm.Disconnecting:  	state = WiFiState.Disconnecting;  	updaterNetStatus.Update ();  	log.Debug ("Disconnecting");  	break;  case Wlan.WlanNotificationCodeAcm.InterfaceRemoval:  	state = WiFiState.NoWirelessInterface;  	updaterNetStatus.Update ();  	log.Debug ("InterfaceRemoval");  	break;  }  
Missing Default,SmartConnect,WiFiConnect,C:\repos\nwilder0_SmartConnect\SmartConnect\WiFiConnect.cs,WlanEventHandler,The following switch statement is missing a default case: switch ((Wlan.WlanNotificationCodeMsm)eventData.notificationCode) {  case Wlan.WlanNotificationCodeMsm.AdapterOperationModeChange:  	log.Debug ("AdapterOperationModeChange");  	break;  case Wlan.WlanNotificationCodeMsm.AdapterRemoval:  	state = WiFiState.NoWirelessInterface;  	updaterNetStatus.Update ();  	log.Debug ("AdapterRemoval");  	break;  case Wlan.WlanNotificationCodeMsm.SignalQualityChange:  	log.Debug ("SignalQualityChange");  	break;  case Wlan.WlanNotificationCodeMsm.Associated:  	log.Debug ("Associated");  	break;  case Wlan.WlanNotificationCodeMsm.Associating:  	log.Debug ("Associating");  	break;  case Wlan.WlanNotificationCodeMsm.Authenticating:  	log.Debug ("Authenticating");  	break;  case Wlan.WlanNotificationCodeMsm.Connected:  	state = WiFiState.Connected;  	updaterNetStatus.Update ();  	log.Debug ("MSM.Connected");  	break;  case Wlan.WlanNotificationCodeMsm.Disassociating:  	log.Debug ("Disassociating");  	break;  case Wlan.WlanNotificationCodeMsm.Disconnected:  	state = WiFiState.Disconnected;  	updaterNetStatus.Update ();  	log.Debug ("MSM.Disconnected");  	break;  }  
