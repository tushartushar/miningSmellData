Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,NativeWifi,Wlan,C:\repos\nwilder0_SmartConnect\ManagedWiFi\Interop.cs,WlanQueryInterface,The method has 7 parameters.
Long Parameter List,NativeWifi,Wlan,C:\repos\nwilder0_SmartConnect\ManagedWiFi\Interop.cs,WlanSetInterface,The method has 6 parameters.
Long Parameter List,NativeWifi,Wlan,C:\repos\nwilder0_SmartConnect\ManagedWiFi\Interop.cs,WlanScan,The method has 5 parameters.
Long Parameter List,NativeWifi,Wlan,C:\repos\nwilder0_SmartConnect\ManagedWiFi\Interop.cs,WlanGetAvailableNetworkList,The method has 5 parameters.
Long Parameter List,NativeWifi,Wlan,C:\repos\nwilder0_SmartConnect\ManagedWiFi\Interop.cs,WlanSetProfile,The method has 8 parameters.
Long Parameter List,NativeWifi,Wlan,C:\repos\nwilder0_SmartConnect\ManagedWiFi\Interop.cs,WlanGetProfile,The method has 7 parameters.
Long Parameter List,NativeWifi,Wlan,C:\repos\nwilder0_SmartConnect\ManagedWiFi\Interop.cs,WlanRegisterNotification,The method has 7 parameters.
Long Parameter List,NativeWifi,Wlan,C:\repos\nwilder0_SmartConnect\ManagedWiFi\Interop.cs,WlanGetNetworkBssList,The method has 7 parameters.
Long Statement,NativeWifi,WlanClient,C:\repos\nwilder0_SmartConnect\ManagedWiFi\WlanApi.cs,ParseWlanConnectionNotification,The length of the statement  "	Wlan.WlanConnectionNotificationData connNotifyData = (Wlan.WlanConnectionNotificationData)Marshal.PtrToStructure (notifyData.dataPtr' typeof(Wlan.WlanConnectionNotificationData)); " is 179.
Long Statement,NativeWifi,WlanClient,C:\repos\nwilder0_SmartConnect\ManagedWiFi\WlanApi.cs,ParseWlanConnectionNotification,The length of the statement  "		IntPtr profileXmlPtr = new IntPtr (notifyData.dataPtr.ToInt64 () + Marshal.OffsetOf (typeof(Wlan.WlanConnectionNotificationData)' "profileXml").ToInt64 ()); " is 156.
Missing Default,NativeWifi,WlanClient,C:\repos\nwilder0_SmartConnect\ManagedWiFi\WlanApi.cs,OnWlanNotification,The following switch statement is missing a default case: switch (notifyData.notificationSource) {  case Wlan.WlanNotificationSource.ACM:  	switch ((Wlan.WlanNotificationCodeAcm)notifyData.notificationCode) {  	case Wlan.WlanNotificationCodeAcm.ConnectionStart:  	case Wlan.WlanNotificationCodeAcm.ConnectionComplete:  	case Wlan.WlanNotificationCodeAcm.ConnectionAttemptFail:  	case Wlan.WlanNotificationCodeAcm.Disconnecting:  	case Wlan.WlanNotificationCodeAcm.Disconnected:  		Wlan.WlanConnectionNotificationData? connNotifyData = ParseWlanConnectionNotification (ref notifyData);  		if (connNotifyData.HasValue)  			if (wlanIface != null)  				wlanIface.OnWlanConnection (notifyData' connNotifyData.Value);  		break;  	case Wlan.WlanNotificationCodeAcm.ScanFail:  		{  			int expectedSize = Marshal.SizeOf (typeof(Wlan.WlanReasonCode));  			if (notifyData.dataSize >= expectedSize) {  				Wlan.WlanReasonCode reasonCode = (Wlan.WlanReasonCode)Marshal.ReadInt32 (notifyData.dataPtr);  				if (wlanIface != null)  					wlanIface.OnWlanReason (notifyData' reasonCode);  			}  		}  		break;  	}  	break;  case Wlan.WlanNotificationSource.MSM:  	switch ((Wlan.WlanNotificationCodeMsm)notifyData.notificationCode) {  	case Wlan.WlanNotificationCodeMsm.Associating:  	case Wlan.WlanNotificationCodeMsm.Associated:  	case Wlan.WlanNotificationCodeMsm.Authenticating:  	case Wlan.WlanNotificationCodeMsm.Connected:  	case Wlan.WlanNotificationCodeMsm.RoamingStart:  	case Wlan.WlanNotificationCodeMsm.RoamingEnd:  	case Wlan.WlanNotificationCodeMsm.Disassociating:  	case Wlan.WlanNotificationCodeMsm.Disconnected:  	case Wlan.WlanNotificationCodeMsm.PeerJoin:  	case Wlan.WlanNotificationCodeMsm.PeerLeave:  	case Wlan.WlanNotificationCodeMsm.AdapterRemoval:  		Wlan.WlanConnectionNotificationData? connNotifyData = ParseWlanConnectionNotification (ref notifyData);  		if (connNotifyData.HasValue)  			if (wlanIface != null)  				wlanIface.OnWlanConnection (notifyData' connNotifyData.Value);  		break;  	}  	break;  }  
Missing Default,NativeWifi,WlanClient,C:\repos\nwilder0_SmartConnect\ManagedWiFi\WlanApi.cs,OnWlanNotification,The following switch statement is missing a default case: switch ((Wlan.WlanNotificationCodeAcm)notifyData.notificationCode) {  case Wlan.WlanNotificationCodeAcm.ConnectionStart:  case Wlan.WlanNotificationCodeAcm.ConnectionComplete:  case Wlan.WlanNotificationCodeAcm.ConnectionAttemptFail:  case Wlan.WlanNotificationCodeAcm.Disconnecting:  case Wlan.WlanNotificationCodeAcm.Disconnected:  	Wlan.WlanConnectionNotificationData? connNotifyData = ParseWlanConnectionNotification (ref notifyData);  	if (connNotifyData.HasValue)  		if (wlanIface != null)  			wlanIface.OnWlanConnection (notifyData' connNotifyData.Value);  	break;  case Wlan.WlanNotificationCodeAcm.ScanFail:  	{  		int expectedSize = Marshal.SizeOf (typeof(Wlan.WlanReasonCode));  		if (notifyData.dataSize >= expectedSize) {  			Wlan.WlanReasonCode reasonCode = (Wlan.WlanReasonCode)Marshal.ReadInt32 (notifyData.dataPtr);  			if (wlanIface != null)  				wlanIface.OnWlanReason (notifyData' reasonCode);  		}  	}  	break;  }  
Missing Default,NativeWifi,WlanClient,C:\repos\nwilder0_SmartConnect\ManagedWiFi\WlanApi.cs,OnWlanNotification,The following switch statement is missing a default case: switch ((Wlan.WlanNotificationCodeMsm)notifyData.notificationCode) {  case Wlan.WlanNotificationCodeMsm.Associating:  case Wlan.WlanNotificationCodeMsm.Associated:  case Wlan.WlanNotificationCodeMsm.Authenticating:  case Wlan.WlanNotificationCodeMsm.Connected:  case Wlan.WlanNotificationCodeMsm.RoamingStart:  case Wlan.WlanNotificationCodeMsm.RoamingEnd:  case Wlan.WlanNotificationCodeMsm.Disassociating:  case Wlan.WlanNotificationCodeMsm.Disconnected:  case Wlan.WlanNotificationCodeMsm.PeerJoin:  case Wlan.WlanNotificationCodeMsm.PeerLeave:  case Wlan.WlanNotificationCodeMsm.AdapterRemoval:  	Wlan.WlanConnectionNotificationData? connNotifyData = ParseWlanConnectionNotification (ref notifyData);  	if (connNotifyData.HasValue)  		if (wlanIface != null)  			wlanIface.OnWlanConnection (notifyData' connNotifyData.Value);  	break;  }  
