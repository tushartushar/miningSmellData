Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MvcTemplate.Web,MvcApplication,C:\repos\NonFactors_MVC.Template\src\MvcTemplate.Web\Global.asax.cs,Application_Error,The length of the statement  "                    Response.Write(JsonConvert.SerializeObject(new { status = "error"' data = new { message = Strings.SystemError' trace = exception.Message + Environment.NewLine + exception.StackTrace } })); " is 188.
Long Statement,MvcTemplate.Web,MvcApplication,C:\repos\NonFactors_MVC.Template\src\MvcTemplate.Web\Global.asax.cs,RegisterDataTypeValidator,The length of the statement  "            ModelValidatorProviders.Providers.Remove(ModelValidatorProviders.Providers.SingleOrDefault(provider => provider is ClientDataTypeModelValidatorProvider)); " is 154.
Magic Number,MvcTemplate.Web,MvcApplication,C:\repos\NonFactors_MVC.Template\src\MvcTemplate.Web\Global.asax.cs,Application_Error,The following statement contains a magic number: if (Request.RequestContext.HttpContext.Request.IsAjaxRequest())              {                  Response.Clear();                  Server.ClearError();                  Response.StatusCode = 500;                    if (Context.IsCustomErrorEnabled)                      Response.Write(JsonConvert.SerializeObject(new { status = "error"' data = new { message = Strings.SystemError } }));                  else                      Response.Write(JsonConvert.SerializeObject(new { status = "error"' data = new { message = Strings.SystemError' trace = exception.Message + Environment.NewLine + exception.StackTrace } }));              }              else if (Context.IsCustomErrorEnabled)              {                  Server.ClearError();                  UrlHelper url = new UrlHelper(Request.RequestContext);                  RouteValueDictionary route = new RouteValueDictionary();                  HttpException httpException = exception as HttpException;                    route["language"] = Request.RequestContext.RouteData.Values["language"];                  route["controller"] = "Home";                  route["action"] = "Error";                  route["area"] = "";                    if (httpException?.GetHttpCode() == 404)                      route["action"] = "NotFound";                    Response.TrySkipIisCustomErrors = true;                  Response.Redirect(url.RouteUrl(route));              }
Magic Number,MvcTemplate.Web,MvcApplication,C:\repos\NonFactors_MVC.Template\src\MvcTemplate.Web\Global.asax.cs,Application_Error,The following statement contains a magic number: if (Request.RequestContext.HttpContext.Request.IsAjaxRequest())              {                  Response.Clear();                  Server.ClearError();                  Response.StatusCode = 500;                    if (Context.IsCustomErrorEnabled)                      Response.Write(JsonConvert.SerializeObject(new { status = "error"' data = new { message = Strings.SystemError } }));                  else                      Response.Write(JsonConvert.SerializeObject(new { status = "error"' data = new { message = Strings.SystemError' trace = exception.Message + Environment.NewLine + exception.StackTrace } }));              }              else if (Context.IsCustomErrorEnabled)              {                  Server.ClearError();                  UrlHelper url = new UrlHelper(Request.RequestContext);                  RouteValueDictionary route = new RouteValueDictionary();                  HttpException httpException = exception as HttpException;                    route["language"] = Request.RequestContext.RouteData.Values["language"];                  route["controller"] = "Home";                  route["action"] = "Error";                  route["area"] = "";                    if (httpException?.GetHttpCode() == 404)                      route["action"] = "NotFound";                    Response.TrySkipIisCustomErrors = true;                  Response.Redirect(url.RouteUrl(route));              }
