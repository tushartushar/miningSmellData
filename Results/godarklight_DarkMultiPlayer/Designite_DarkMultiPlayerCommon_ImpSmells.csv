Implementation smell,Namespace,Class,File,Method,Description
Long Method,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GetStockParts,The method has 340 lines of code.
Long Parameter List,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The method has 5 parameters. Parameters: requiredFiles' optionalFiles' isWhiteList' whitelistBlacklistFiles' partsList
Long Statement,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The length of the statement  "            sb.AppendLine("#Sections supported are required-files' optional-files' partslist' resource-blacklist and resource-whitelist."); " is 127.
Long Statement,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The length of the statement  "            sb.AppendLine("#The client will be required to have the files found in required-files' and they must match the SHA hash if specified (this is where part mod files and play-altering files should go' like KWRocketry or Ferram Aerospace Research#The client may have the files found in optional-files' but IF they do then they must match the SHA hash (this is where mods that do not affect other players should go' like EditorExtensions or part catalogue managers"); " is 462.
Long Statement,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The length of the statement  "            sb.AppendLine("#resource-whitelist bans ALL resources except those specified in the resource-whitelist section OR in the SHA sections. A file listed in resource-whitelist will NOT be checked for SHA hash. This is useful if you want a mod that modifies files in its own directory as you play."); " is 294.
Long Statement,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The length of the statement  "            sb.AppendLine("#To generate the SHA256 of a file you can use a utility such as this one: http://hash.online-convert.com/sha256-generator (use the 'hex' string)' or use sha256sum on linux."); " is 190.
Long Statement,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The length of the statement  "            sb.AppendLine("#If there is no SHA256 hash listed here (i.e. blank after the equals sign or no equals sign)' SHA matching will not be enforced."); " is 146.
Long Statement,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The length of the statement  "            sb.AppendLine("#You may not specify multiple SHAs for the same file. Do not put spaces around equals sign. Follow the example carefully."); " is 139.
Long Statement,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The length of the statement  "            sb.AppendLine("#Example: MechJeb2/Plugins/MechJeb2.dll=B84BB63AE740F0A25DA047E5EDA35B26F6FD5DF019696AC9D6AF8FC3E031F0B9"); " is 122.
Long Statement,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The length of the statement  "            sb.AppendLine("#Resource blacklist: clients will be allowed to use any dll's' So long as they are not listed in this section"); " is 127.
Long Statement,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The length of the statement  "            sb.AppendLine("#Resource whitelist: clients will only be allowed to use dll's listed here or in the 'required-files' and 'optional-files' sections."); " is 150.
Long Statement,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The length of the statement  "            sb.AppendLine("#If a part the client has doesn't appear on this list' they can still join the server but not use the part."); " is 125.
Long Statement,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The length of the statement  "            sb.AppendLine("#To add a mod part' add the name from the part's .cfg file. The name is the name from the PART{} section' where underscores are replaced with periods."); " is 168.
Long Statement,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The length of the statement  "            sb.AppendLine("#Example: mumech.MJ2.Pod (NOTE: In the part.cfg this MechJeb2 pod is named mumech_MJ2_Pod. The _ have been replaced with .)"); " is 141.
Long Statement,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GenerateModFileStringData,The length of the statement  "            sb.AppendLine("#You can use this application to generate partlists from a KSP installation if you want to add mod parts: http://forum.kerbalspaceprogram.com/threads/57284 "); " is 174.
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,PrependNetworkFrame,The following statement contains a magic number: if (messageData == null || messageData.Length == 0)              {                  returnBytes = new byte[8];                  typeBytes.CopyTo(returnBytes' 0);              }              else              {                  //Get length bytes if we have a payload                  byte[] lengthBytes = BitConverter.GetBytes(messageData.Length);                  if (BitConverter.IsLittleEndian)                  {                      Array.Reverse(lengthBytes);                  }                  returnBytes = new byte[8 + messageData.Length];                  typeBytes.CopyTo(returnBytes' 0);                  lengthBytes.CopyTo(returnBytes' 4);                  messageData.CopyTo(returnBytes' 8);              }
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,PrependNetworkFrame,The following statement contains a magic number: if (messageData == null || messageData.Length == 0)              {                  returnBytes = new byte[8];                  typeBytes.CopyTo(returnBytes' 0);              }              else              {                  //Get length bytes if we have a payload                  byte[] lengthBytes = BitConverter.GetBytes(messageData.Length);                  if (BitConverter.IsLittleEndian)                  {                      Array.Reverse(lengthBytes);                  }                  returnBytes = new byte[8 + messageData.Length];                  typeBytes.CopyTo(returnBytes' 0);                  lengthBytes.CopyTo(returnBytes' 4);                  messageData.CopyTo(returnBytes' 8);              }
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,PrependNetworkFrame,The following statement contains a magic number: if (messageData == null || messageData.Length == 0)              {                  returnBytes = new byte[8];                  typeBytes.CopyTo(returnBytes' 0);              }              else              {                  //Get length bytes if we have a payload                  byte[] lengthBytes = BitConverter.GetBytes(messageData.Length);                  if (BitConverter.IsLittleEndian)                  {                      Array.Reverse(lengthBytes);                  }                  returnBytes = new byte[8 + messageData.Length];                  typeBytes.CopyTo(returnBytes' 0);                  lengthBytes.CopyTo(returnBytes' 4);                  messageData.CopyTo(returnBytes' 8);              }
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,PrependNetworkFrame,The following statement contains a magic number: if (messageData == null || messageData.Length == 0)              {                  returnBytes = new byte[8];                  typeBytes.CopyTo(returnBytes' 0);              }              else              {                  //Get length bytes if we have a payload                  byte[] lengthBytes = BitConverter.GetBytes(messageData.Length);                  if (BitConverter.IsLittleEndian)                  {                      Array.Reverse(lengthBytes);                  }                  returnBytes = new byte[8 + messageData.Length];                  typeBytes.CopyTo(returnBytes' 0);                  lengthBytes.CopyTo(returnBytes' 4);                  messageData.CopyTo(returnBytes' 8);              }
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,ConvertConfigStringToGUIDString,The following statement contains a magic number: if (configNodeString == null || configNodeString.Length != 32)              {                  return null;              }
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,ConvertConfigStringToGUIDString,The following statement contains a magic number: string[] returnString = new string[5];
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,ConvertConfigStringToGUIDString,The following statement contains a magic number: returnString[0] = configNodeString.Substring(0' 8);
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,ConvertConfigStringToGUIDString,The following statement contains a magic number: returnString[1] = configNodeString.Substring(8' 4);
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,ConvertConfigStringToGUIDString,The following statement contains a magic number: returnString[1] = configNodeString.Substring(8' 4);
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,ConvertConfigStringToGUIDString,The following statement contains a magic number: returnString[2] = configNodeString.Substring(12' 4);
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,ConvertConfigStringToGUIDString,The following statement contains a magic number: returnString[2] = configNodeString.Substring(12' 4);
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,ConvertConfigStringToGUIDString,The following statement contains a magic number: returnString[2] = configNodeString.Substring(12' 4);
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,ConvertConfigStringToGUIDString,The following statement contains a magic number: returnString[3] = configNodeString.Substring(16' 4);
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,ConvertConfigStringToGUIDString,The following statement contains a magic number: returnString[3] = configNodeString.Substring(16' 4);
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,ConvertConfigStringToGUIDString,The following statement contains a magic number: returnString[3] = configNodeString.Substring(16' 4);
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,ConvertConfigStringToGUIDString,The following statement contains a magic number: returnString[4] = configNodeString.Substring(20);
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,ConvertConfigStringToGUIDString,The following statement contains a magic number: returnString[4] = configNodeString.Substring(20);
Magic Number,DarkMultiPlayerCommon,Common,C:\repos\godarklight_DarkMultiPlayer\Common\Common.cs,GetCurrentUnixTime,The following statement contains a magic number: return ((DateTime.UtcNow.Ticks - new DateTime(1970' 1' 1).Ticks) / TimeSpan.TicksPerSecond);
Magic Number,DarkMultiPlayerCommon,Compression,C:\repos\godarklight_DarkMultiPlayer\Common\Compression.cs,TestSysIOCompression,The following statement contains a magic number: bool result = mre.WaitOne(1000);
Magic Number,DarkMultiPlayerCommon,Compression,C:\repos\godarklight_DarkMultiPlayer\Common\Compression.cs,CompressionTestWorker,The following statement contains a magic number: try              {                  byte[] smallEmptyTest = new byte[COMPRESSION_THRESHOLD / 2];                  byte[] bigEmptyTest = new byte[COMPRESSION_THRESHOLD * 2];                  byte[] smallRandomTest = new byte[COMPRESSION_THRESHOLD / 2];                  byte[] bigRandomTest = new byte[COMPRESSION_THRESHOLD * 2];                  Random rand = new Random();                  rand.NextBytes(smallRandomTest);                  rand.NextBytes(bigRandomTest);                  byte[] t1 = SysIOCompress(smallEmptyTest);                  byte[] t2 = SysIOCompress(bigEmptyTest);                  byte[] t3 = SysIOCompress(smallRandomTest);                  byte[] t4 = SysIOCompress(bigRandomTest);                  byte[] t5 = SysIODecompress(t1);                  byte[] t6 = SysIODecompress(t2);                  byte[] t7 = SysIODecompress(t3);                  byte[] t8 = SysIODecompress(t4);                  //Fail the test if the byte array doesn't match                  if (!ByteCompare(smallEmptyTest' t5))                  {                      compressionWorks = false;                  }                  if (!ByteCompare(bigEmptyTest' t6))                  {                      compressionWorks = false;                  }                  if (!ByteCompare(smallRandomTest' t7))                  {                      compressionWorks = false;                  }                  if (!ByteCompare(bigRandomTest' t8))                  {                      compressionWorks = false;                  }                  sysIOCompressionWorks = compressionWorks;              }              catch              {                  sysIOCompressionWorks = false;              }
Magic Number,DarkMultiPlayerCommon,Compression,C:\repos\godarklight_DarkMultiPlayer\Common\Compression.cs,CompressionTestWorker,The following statement contains a magic number: try              {                  byte[] smallEmptyTest = new byte[COMPRESSION_THRESHOLD / 2];                  byte[] bigEmptyTest = new byte[COMPRESSION_THRESHOLD * 2];                  byte[] smallRandomTest = new byte[COMPRESSION_THRESHOLD / 2];                  byte[] bigRandomTest = new byte[COMPRESSION_THRESHOLD * 2];                  Random rand = new Random();                  rand.NextBytes(smallRandomTest);                  rand.NextBytes(bigRandomTest);                  byte[] t1 = SysIOCompress(smallEmptyTest);                  byte[] t2 = SysIOCompress(bigEmptyTest);                  byte[] t3 = SysIOCompress(smallRandomTest);                  byte[] t4 = SysIOCompress(bigRandomTest);                  byte[] t5 = SysIODecompress(t1);                  byte[] t6 = SysIODecompress(t2);                  byte[] t7 = SysIODecompress(t3);                  byte[] t8 = SysIODecompress(t4);                  //Fail the test if the byte array doesn't match                  if (!ByteCompare(smallEmptyTest' t5))                  {                      compressionWorks = false;                  }                  if (!ByteCompare(bigEmptyTest' t6))                  {                      compressionWorks = false;                  }                  if (!ByteCompare(smallRandomTest' t7))                  {                      compressionWorks = false;                  }                  if (!ByteCompare(bigRandomTest' t8))                  {                      compressionWorks = false;                  }                  sysIOCompressionWorks = compressionWorks;              }              catch              {                  sysIOCompressionWorks = false;              }
Magic Number,DarkMultiPlayerCommon,Compression,C:\repos\godarklight_DarkMultiPlayer\Common\Compression.cs,CompressionTestWorker,The following statement contains a magic number: try              {                  byte[] smallEmptyTest = new byte[COMPRESSION_THRESHOLD / 2];                  byte[] bigEmptyTest = new byte[COMPRESSION_THRESHOLD * 2];                  byte[] smallRandomTest = new byte[COMPRESSION_THRESHOLD / 2];                  byte[] bigRandomTest = new byte[COMPRESSION_THRESHOLD * 2];                  Random rand = new Random();                  rand.NextBytes(smallRandomTest);                  rand.NextBytes(bigRandomTest);                  byte[] t1 = SysIOCompress(smallEmptyTest);                  byte[] t2 = SysIOCompress(bigEmptyTest);                  byte[] t3 = SysIOCompress(smallRandomTest);                  byte[] t4 = SysIOCompress(bigRandomTest);                  byte[] t5 = SysIODecompress(t1);                  byte[] t6 = SysIODecompress(t2);                  byte[] t7 = SysIODecompress(t3);                  byte[] t8 = SysIODecompress(t4);                  //Fail the test if the byte array doesn't match                  if (!ByteCompare(smallEmptyTest' t5))                  {                      compressionWorks = false;                  }                  if (!ByteCompare(bigEmptyTest' t6))                  {                      compressionWorks = false;                  }                  if (!ByteCompare(smallRandomTest' t7))                  {                      compressionWorks = false;                  }                  if (!ByteCompare(bigRandomTest' t8))                  {                      compressionWorks = false;                  }                  sysIOCompressionWorks = compressionWorks;              }              catch              {                  sysIOCompressionWorks = false;              }
Magic Number,DarkMultiPlayerCommon,Compression,C:\repos\godarklight_DarkMultiPlayer\Common\Compression.cs,CompressionTestWorker,The following statement contains a magic number: try              {                  byte[] smallEmptyTest = new byte[COMPRESSION_THRESHOLD / 2];                  byte[] bigEmptyTest = new byte[COMPRESSION_THRESHOLD * 2];                  byte[] smallRandomTest = new byte[COMPRESSION_THRESHOLD / 2];                  byte[] bigRandomTest = new byte[COMPRESSION_THRESHOLD * 2];                  Random rand = new Random();                  rand.NextBytes(smallRandomTest);                  rand.NextBytes(bigRandomTest);                  byte[] t1 = SysIOCompress(smallEmptyTest);                  byte[] t2 = SysIOCompress(bigEmptyTest);                  byte[] t3 = SysIOCompress(smallRandomTest);                  byte[] t4 = SysIOCompress(bigRandomTest);                  byte[] t5 = SysIODecompress(t1);                  byte[] t6 = SysIODecompress(t2);                  byte[] t7 = SysIODecompress(t3);                  byte[] t8 = SysIODecompress(t4);                  //Fail the test if the byte array doesn't match                  if (!ByteCompare(smallEmptyTest' t5))                  {                      compressionWorks = false;                  }                  if (!ByteCompare(bigEmptyTest' t6))                  {                      compressionWorks = false;                  }                  if (!ByteCompare(smallRandomTest' t7))                  {                      compressionWorks = false;                  }                  if (!ByteCompare(bigRandomTest' t8))                  {                      compressionWorks = false;                  }                  sysIOCompressionWorks = compressionWorks;              }              catch              {                  sysIOCompressionWorks = false;              }
Magic Number,DarkMultiPlayerCommon,Compression,C:\repos\godarklight_DarkMultiPlayer\Common\Compression.cs,SysIODecompress,The following statement contains a magic number: using (MemoryStream outputStream = new MemoryStream())              {                  using (MemoryStream ms = new MemoryStream(inputBytes))                  {                      using (GZipStream gs = new GZipStream(ms' CompressionMode.Decompress))                      {                          //Stream.CopyTo is a .NET 4 feature?                          byte[] buffer = new byte[4096];                          int numRead;                          while ((numRead = gs.Read(buffer' 0' buffer.Length)) != 0)                          {                              outputStream.Write(buffer' 0' numRead);                          }                      }                  }                  returnBytes = outputStream.ToArray();              }
Magic Number,DarkMultiPlayerCommon,Compression,C:\repos\godarklight_DarkMultiPlayer\Common\Compression.cs,ICSharpDecompress,The following statement contains a magic number: using (MemoryStream outputStream = new MemoryStream())              {                  using (MemoryStream ms = new MemoryStream(inputBytes))                  {                      using (GZipInputStream gs = new GZipInputStream(ms))                      {                          //Stream.CopyTo is a .NET 4 feature?                          byte[] buffer = new byte[4096];                          int numRead;                          while ((numRead = gs.Read(buffer' 0' buffer.Length)) != 0)                          {                              outputStream.Write(buffer' 0' numRead);                          }                      }                  }                  returnBytes = outputStream.ToArray();              }
