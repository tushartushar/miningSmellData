Implementation smell,Namespace,Class,File,Method,Description
Long Method,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,Update,The method has 177 lines of code.
Long Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,DetectReverting,The method has 113 lines of code.
Long Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The method has 145 lines of code.
Long Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleMessage,The method has 104 lines of code.
Long Method,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The method has 107 lines of code.
Long Method,DarkMultiPlayer,Settings,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Settings.cs,LoadSettings,The method has 129 lines of code.
Long Method,DarkMultiPlayer,PlayerStatusWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWorker.cs,Update,The method has 137 lines of code.
Long Method,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The method has 257 lines of code.
Long Method,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,HandleChatEvents,The method has 156 lines of code.
Long Method,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,DrawContent,The method has 128 lines of code.
Long Method,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The method has 178 lines of code.
Long Method,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The method has 137 lines of code.
Complex Method,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,HandleCommandLineArgs,Cyclomatic complexity of the method is 11
Complex Method,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,Update,Cyclomatic complexity of the method is 34
Complex Method,DarkMultiPlayer,ConfigNodeSerializer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConfigNodeSerializer.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,Cyclomatic complexity of the method is 17
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,HandleDocking,Cyclomatic complexity of the method is 10
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,ReleaseOldUpdateLocks,Cyclomatic complexity of the method is 9
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,ProcessNewVesselMessages,Cyclomatic complexity of the method is 11
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,DetectReverting,Cyclomatic complexity of the method is 27
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,Cyclomatic complexity of the method is 10
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateActiveVesselStatus,Cyclomatic complexity of the method is 11
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CheckVesselHasChanged,Cyclomatic complexity of the method is 11
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,SendVesselUpdates,Cyclomatic complexity of the method is 23
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,SendVesselUpdateIfNeeded,Cyclomatic complexity of the method is 17
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadKerbalsIntoGame,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadKerbal,Cyclomatic complexity of the method is 12
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,Cyclomatic complexity of the method is 30
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CreateSafeProtoVesselFromConfigNode,Cyclomatic complexity of the method is 9
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,DodgeVesselLandedStatus,Cyclomatic complexity of the method is 9
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselDestroyed,Cyclomatic complexity of the method is 15
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,KillVessel,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,RemoveVessel,Cyclomatic complexity of the method is 10
Complex Method,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,SyncTime,Cyclomatic complexity of the method is 10
Complex Method,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,StepClock,Cyclomatic complexity of the method is 12
Complex Method,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,SafeToStepClock,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,CanSyncTime,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,Update,Cyclomatic complexity of the method is 12
Complex Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,ConnectToServerMain,Cyclomatic complexity of the method is 10
Complex Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,Cyclomatic complexity of the method is 19
Complex Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleMessage,Cyclomatic complexity of the method is 96
Complex Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,Cyclomatic complexity of the method is 21
Complex Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleChatMessage,Cyclomatic complexity of the method is 23
Complex Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleVesselList,Cyclomatic complexity of the method is 11
Complex Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleVesselProto,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleCraftLibrary,Cyclomatic complexity of the method is 22
Complex Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleScreenshotLibrary,Cyclomatic complexity of the method is 14
Complex Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,VesselHasNaNPosition,Cyclomatic complexity of the method is 12
Complex Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SendVesselProtoMessage,Cyclomatic complexity of the method is 10
Complex Method,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,GetStatistics,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,Cyclomatic complexity of the method is 20
Complex Method,DarkMultiPlayer,Settings,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Settings.cs,LoadOldSettings,Cyclomatic complexity of the method is 10
Complex Method,DarkMultiPlayer,Settings,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Settings.cs,LoadSettings,Cyclomatic complexity of the method is 22
Complex Method,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,Update,Cyclomatic complexity of the method is 18
Complex Method,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,UpdateScreenMessage,Cyclomatic complexity of the method is 14
Complex Method,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,CheckWarp,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,HandleInput,Cyclomatic complexity of the method is 16
Complex Method,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,HandleMCWVoteInput,Cyclomatic complexity of the method is 13
Complex Method,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,HandleMCWLowestInput,Cyclomatic complexity of the method is 11
Complex Method,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,HandleWarpMessage,Cyclomatic complexity of the method is 31
Complex Method,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,GetSubspaceDisplayEntriesSubspace,Cyclomatic complexity of the method is 13
Complex Method,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,SubpaceDisplayEntrySorter,Cyclomatic complexity of the method is 11
Complex Method,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,DrawContent,Cyclomatic complexity of the method is 15
Complex Method,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,Cyclomatic complexity of the method is 20
Complex Method,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,Cyclomatic complexity of the method is 9
Complex Method,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,Cyclomatic complexity of the method is 14
Complex Method,DarkMultiPlayer,PlayerStatusWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWorker.cs,Update,Cyclomatic complexity of the method is 60
Complex Method,DarkMultiPlayer,ScenarioWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScenarioWorker.cs,OnContractAccepted,Cyclomatic complexity of the method is 12
Complex Method,DarkMultiPlayer,ScenarioWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScenarioWorker.cs,IsScenarioModuleAllowed,Cyclomatic complexity of the method is 9
Complex Method,DarkMultiPlayer,ScenarioWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScenarioWorker.cs,SendScenarioModules,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,ScenarioWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScenarioWorker.cs,LoadScenarioData,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,DrawContent,Cyclomatic complexity of the method is 9
Complex Method,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,Cyclomatic complexity of the method is 76
Complex Method,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,GenerateModControlFile,Cyclomatic complexity of the method is 19
Complex Method,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,Update,Cyclomatic complexity of the method is 13
Complex Method,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,UploadCraftFile,Cyclomatic complexity of the method is 12
Complex Method,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,DeleteCraftEntry,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,SaveCraftFile,Cyclomatic complexity of the method is 10
Complex Method,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,DrawDownloadScreen,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,Cyclomatic complexity of the method is 36
Complex Method,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,HandleChatInput,Cyclomatic complexity of the method is 20
Complex Method,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,HandleChatEvents,Cyclomatic complexity of the method is 46
Complex Method,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,DrawContent,Cyclomatic complexity of the method is 35
Complex Method,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,DrawRooms,Cyclomatic complexity of the method is 15
Complex Method,DarkMultiPlayer,UniverseSyncCache,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseSyncCache.cs,ExpireCache,Cyclomatic complexity of the method is 12
Complex Method,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,Update,Cyclomatic complexity of the method is 24
Complex Method,DarkMultiPlayer,AsteroidWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\AsteroidWorker.cs,Update,Cyclomatic complexity of the method is 18
Complex Method,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,HandlePlayerColorMessage,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,Cyclomatic complexity of the method is 17
Complex Method,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,UpdateToolbarString,Cyclomatic complexity of the method is 12
Complex Method,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,Cyclomatic complexity of the method is 34
Complex Method,DarkMultiPlayer,UniverseConverter,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverter.cs,GenerateUniverse,Cyclomatic complexity of the method is 13
Complex Method,DarkMultiPlayer,FlagSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\FlagSyncer.cs,HandleMessage,Cyclomatic complexity of the method is 15
Complex Method,DarkMultiPlayer,FlagSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\FlagSyncer.cs,HandleFlagChangeEvent,Cyclomatic complexity of the method is 9
Complex Method,DarkMultiPlayer,ProfilerData,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Profiler.cs,ReportTime,Cyclomatic complexity of the method is 10
Complex Method,DarkMultiPlayer,AdminSystem,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\AdminSystem.cs,HandleAdminMessage,Cyclomatic complexity of the method is 12
Complex Method,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,Cyclomatic complexity of the method is 19
Complex Method,DarkMultiPlayer,VesselUtil,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUtil.cs,RaycastGround,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,ToolbarSupport,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ToolbarSupport.cs,EnableToolbar,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,HackyInAtmoLoader,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\HackyInAtmoLoader.cs,UpdateVessels,Cyclomatic complexity of the method is 12
Complex Method,DarkMultiPlayer,PartKiller,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PartKiller.cs,OnVesselCreate,Cyclomatic complexity of the method is 10
Complex Method,DarkMultiPlayer,PartKiller,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PartKiller.cs,OnVesselWasModified,Cyclomatic complexity of the method is 8
Complex Method,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,DodgeKerbals,Cyclomatic complexity of the method is 17
Complex Method,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,GetKerbalGender,Cyclomatic complexity of the method is 16
Long Parameter List,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,VesselWorker,The method has 9 parameters.
Long Parameter List,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,SetDependencies,The method has 5 parameters.
Long Parameter List,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,NetworkWorker,The method has 5 parameters.
Long Parameter List,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SetDependencies,The method has 20 parameters.
Long Parameter List,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,WarpWorker,The method has 5 parameters.
Long Parameter List,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,HandleChangeWarp,The method has 5 parameters.
Long Parameter List,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,PlayerStatusWindow,The method has 11 parameters.
Long Parameter List,DarkMultiPlayer,PlayerStatusWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWorker.cs,PlayerStatusWorker,The method has 5 parameters.
Long Parameter List,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,DebugWindow,The method has 7 parameters.
Long Parameter List,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ChatWorker,The method has 5 parameters.
Long Parameter List,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,ScreenshotWorker,The method has 5 parameters.
Long Parameter List,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,OptionsWindow,The method has 5 parameters.
Long Parameter List,DarkMultiPlayer,DMPGame,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DMPGame.cs,DMPGame,The method has 7 parameters.
Long Identifier,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,SetupDirectoriesIfNeeded,The length of the parameter darkMultiPlayerIncomingCacheDirectory is 37.
Long Statement,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,Start,The length of the statement  "	DarkLog.Debug ("System.IO compression works: " + Compression.sysIOCompressionWorks + "' test time: " + testTime + " ms."); " is 122.
Long Statement,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,Start,The length of the statement  "	DarkLog.Debug ("DarkMultiPlayer " + Common.PROGRAM_VERSION + "' protocol " + Common.PROTOCOL_VERSION + " Initialized!"); " is 120.
Long Statement,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,Update,The length of the statement  "			dmpGame = new DMPGame (dmpSettings' universeSyncCache' modWorker' connectionWindow' dmpModInterface' toolbarSupport' optionsWindow); " is 132.
Long Statement,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,Update,The length of the statement  "			dmpGame.networkWorker.ConnectToServer (dmpSettings.servers [connectionWindow.selected].address' dmpSettings.servers [connectionWindow.selected].port); " is 150.
Long Statement,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,Update,The length of the statement  "			dmpGame = new DMPGame (dmpSettings' universeSyncCache' modWorker' connectionWindow' dmpModInterface' toolbarSupport' optionsWindow); " is 132.
Long Statement,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,Update,The length of the statement  "					disconnectMessage = ScreenMessages.PostScreenMessage ("You have been disconnected!"' 2f' ScreenMessageStyle.UPPER_CENTER); " is 122.
Long Statement,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,Update,The length of the statement  "				HighLogic.CurrentGame.Parameters.Flight.CanLeaveToSpaceCenter = !dmpGame.vesselWorker.isSpectating && dmpSettings.revertEnabled || (PauseMenu.canSaveAndExit == ClearToSaveStatus.CLEAR); " is 185.
Long Statement,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,SetupDirectoriesIfNeeded,The length of the statement  "	string darkMultiPlayerSavesDirectory = Path.Combine (Path.Combine (KSPUtil.ApplicationRootPath' "saves")' "DarkMultiPlayer"); " is 125.
Long Statement,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,SetupDirectoriesIfNeeded,The length of the statement  "	string darkMultiPlayerCacheDirectory = Path.Combine (Path.Combine (Path.Combine (KSPUtil.ApplicationRootPath' "GameData")' "DarkMultiPlayer")' "Cache"); " is 152.
Long Statement,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,SetupDirectoriesIfNeeded,The length of the statement  "	string darkMultiPlayerIncomingCacheDirectory = Path.Combine (Path.Combine (Path.Combine (Path.Combine (KSPUtil.ApplicationRootPath' "GameData")' "DarkMultiPlayer")' "Cache")' "Incoming"); " is 187.
Long Statement,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,SetupDirectoriesIfNeeded,The length of the statement  "	string darkMultiPlayerFlagsDirectory = Path.Combine (Path.Combine (Path.Combine (KSPUtil.ApplicationRootPath' "GameData")' "DarkMultiPlayer")' "Flags"); " is 152.
Long Statement,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,SetupBlankGameIfNeeded,The length of the statement  "	string persistentFile = Path.Combine (Path.Combine (Path.Combine (KSPUtil.ApplicationRootPath' "saves")' "DarkMultiPlayer")' "persistent.sfs"); " is 143.
Long Statement,DarkMultiPlayer,ConfigNodeSerializer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConfigNodeSerializer.cs,CreateDelegates,The length of the statement  "	MethodInfo writeNodeMethodInfo = configNodeType.GetMethod ("WriteNode"' BindingFlags.NonPublic | BindingFlags.Instance); " is 120.
Long Statement,DarkMultiPlayer,ConfigNodeSerializer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConfigNodeSerializer.cs,CreateDelegates,The length of the statement  "	MethodInfo preFormatConfigMethodInfo = configNodeType.GetMethod ("PreFormatConfig"' BindingFlags.NonPublic | BindingFlags.Static); " is 130.
Long Statement,DarkMultiPlayer,ConfigNodeSerializer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConfigNodeSerializer.cs,CreateDelegates,The length of the statement  "	PreFormatConfigThunk = (PreFormatConfigDelegate)Delegate.CreateDelegate (typeof(PreFormatConfigDelegate)' null' preFormatConfigMethodInfo); " is 139.
Long Statement,DarkMultiPlayer,ConfigNodeSerializer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConfigNodeSerializer.cs,CreateDelegates,The length of the statement  "	MethodInfo recurseFormatMethodInfo = configNodeType.GetMethod ("RecurseFormat"' BindingFlags.NonPublic | BindingFlags.Static' null' new[] { " is 139.
Long Statement,DarkMultiPlayer,ConfigNodeSerializer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConfigNodeSerializer.cs,CreateDelegates,The length of the statement  "	RecurseFormatThunk = (RecurseFormatDelegate)Delegate.CreateDelegate (typeof(RecurseFormatDelegate)' null' recurseFormatMethodInfo); " is 131.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The length of the statement  "				ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER); " is 124.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,HandleDocking,The length of the statement  "					dockingMessage = ScreenMessages.PostScreenMessage ("Error sending vessel - vessel contains invalid parts!"' 3f' ScreenMessageStyle.UPPER_CENTER); " is 145.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,ProcessNewVesselMessages,The length of the statement  "			while (vesselRemoveSubspace.Value.Count > 0 ? (vesselRemoveSubspace.Value.Peek ().planetTime < Planetarium.GetUniversalTime ()) : false) { " is 138.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,ProcessNewVesselMessages,The length of the statement  "		while (kerbalProtoSubspace.Value.Count > 0 ? (kerbalProtoSubspace.Value.Peek ().planetTime < Planetarium.GetUniversalTime ()) : false) { " is 136.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,ProcessNewVesselMessages,The length of the statement  "		while (vesselQueue.Value.Count > 0 ? (vesselQueue.Value.Peek ().planetTime < Planetarium.GetUniversalTime ()) : false) { " is 120.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,ProcessNewVesselMessages,The length of the statement  "		while (vesselQueue.Value.Count > 0 ? (vesselQueue.Value.Peek ().planetTime < Planetarium.GetUniversalTime ()) : false) { " is 120.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The length of the statement  "				spectateMessage = ScreenMessages.PostScreenMessage ("This vessel is controlled by another player."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER); " is 169.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The length of the statement  "				spectateMessage = ScreenMessages.PostScreenMessage ("This vessel has been changed in the future."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER); " is 168.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateActiveVesselStatus,The length of the statement  "	bool isActiveVesselOk = FlightGlobals.fetch.activeVessel != null ? (FlightGlobals.fetch.activeVessel.loaded && !FlightGlobals.fetch.activeVessel.packed) : false; " is 161.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CheckVesselHasChanged,The length of the statement  "				bool partCountChanged = vesselPartCount.ContainsKey (checkVessel.id) ? checkVessel.parts.Count != vesselPartCount [checkVessel.id] : true; " is 138.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CheckVesselHasChanged,The length of the statement  "				bool vesselNotRecentlyUpdated = serverVesselsPositionUpdate.ContainsKey (checkVessel.id) ? ((Client.realtimeSinceStartup - serverVesselsProtoUpdate [checkVessel.id]) > 10f) : true; " is 180.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CheckVesselHasChanged,The length of the statement  "				bool recentlyLanded = vesselSituations [checkVessel.id] != Vessel.Situations.LANDED && checkVessel.situation == Vessel.Situations.LANDED; " is 137.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CheckVesselHasChanged,The length of the statement  "				bool recentlySplashed = vesselSituations [checkVessel.id] != Vessel.Situations.SPLASHED && checkVessel.situation == Vessel.Situations.SPLASHED; " is 143.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,SendVesselUpdates,The length of the statement  "					bannedPartsMessage = ScreenMessages.PostScreenMessage ("Active vessel contains the following banned parts' it will not be saved to the server:\n" + bannedPartsString' 2f' ScreenMessageStyle.UPPER_CENTER); " is 204.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,SendVesselUpdates,The length of the statement  "					bannedPartsMessage = ScreenMessages.PostScreenMessage ("Active vessel contains the following banned parts' you will be unable to launch on this server:\n" + bannedPartsString' 2f' ScreenMessageStyle.UPPER_CENTER); " is 213.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,SendVesselUpdates,The length of the statement  "		if (checkVessel.loaded && !checkVessel.packed && (checkVessel.id.ToString () != FlightGlobals.fetch.activeVessel.id.ToString ()) && (checkVessel.state != Vessel.State.DEAD)) { " is 175.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,SendVesselUpdates,The length of the statement  "						double currentDistance = Vector3d.Distance (FlightGlobals.fetch.activeVessel.GetWorldPos3D ()' checkVessel.GetWorldPos3D ()); " is 125.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CheckVesselParts,The length of the statement  "	DarkLog.Debug ("Checked vessel " + checkVessel.id.ToString () + " for banned parts' is ok: " + (bannedParts.Count == 0)); " is 121.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,SendVesselUpdateIfNeeded,The length of the statement  "			if (lockSystem.LockExists ("update-" + checkVessel.id.ToString ()) && !lockSystem.LockIsOurs ("update-" + checkVessel.id.ToString ()) && lockSystem.LockIsOurs ("control-" + checkVessel.id.ToString ())) { " is 203.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,SendVesselUpdateIfNeeded,The length of the statement  "	bool notRecentlySentProtoUpdate = serverVesselsProtoUpdate.ContainsKey (checkVessel.id) ? ((Client.realtimeSinceStartup - serverVesselsProtoUpdate [checkVessel.id]) > VESSEL_PROTOVESSEL_UPDATE_INTERVAL) : true; " is 210.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,SendVesselUpdateIfNeeded,The length of the statement  "	bool notRecentlySentPositionUpdate = serverVesselsPositionUpdate.ContainsKey (checkVessel.id) ? ((Client.realtimeSinceStartup - serverVesselsPositionUpdate [checkVessel.id]) > (1f / (float)dynamicTickWorker.sendTickRate)) : true; " is 229.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,isProtoVesselInSafetyBubble,The length of the statement  "	Vector3d protoVesselPosition = kerbinBody.GetWorldSurfacePosition (protovessel.latitude' protovessel.longitude' protovessel.altitude); " is 134.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The length of the statement  "	if ((currentProto.vesselType == VesselType.EVA) && (FlightGlobals.fetch.vessels.Find (v => v.id == currentProto.vesselID) != null)) { " is 133.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The length of the statement  "		DarkLog.Debug ("Skipped loading protovessel " + currentProto.vesselID.ToString () + "' name: " + currentProto.vesselName + " because it is inside the safety bubble"); " is 166.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The length of the statement  "			DarkLog.Debug ("Skipping flying vessel load - Could not find celestial body index " + currentProto.orbitSnapShot.ReferenceBodyIndex); " is 133.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The length of the statement  "			if (!ignoreFlyingKill && (FlightGlobals.fetch.vessels.Find (v => v.id == currentProto.vesselID) != null) && vesselPartCount.ContainsKey (currentProto.vesselID) ? currentProto.protoPartSnapshots.Count == vesselPartCount [currentProto.vesselID] : false) { " is 253.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The length of the statement  "	DarkLog.Debug ("Loading " + currentProto.vesselID + "' name: " + currentProto.vesselName + "' type: " + currentProto.vesselType); " is 129.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The length of the statement  "		wasActive = (FlightGlobals.fetch.activeVessel != null) ? (FlightGlobals.fetch.activeVessel.id == currentProto.vesselID) : false; " is 128.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The length of the statement  "			if (oldVessel.loaded && !oldVessel.packed && !oldVessel.Landed && (hft != -1) && (hft < 1000) && (currentProto.protoPartSnapshots.Count == oldVessel.parts.Count)) { " is 164.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The length of the statement  "				DarkLog.Debug ("Skipped loading protovessel " + currentProto.vesselID.ToString () + " because it is flying close to the ground and may get destroyed"); " is 151.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The length of the statement  "                            but taking it off rails will allow the vessel to collide with others while it's in the incorrect spot for that fixed update." is 124.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The length of the statement  "                            If the vessel is the selected target' close (unpacked)' and has the same number of parts' we'll skip the protovessel load." is 122.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The length of the statement  "                        */if (wasTarget && !oldVessel.LandedOrSplashed && oldVessel.loaded && !oldVessel.packed && (oldVessel.parts.Count == currentProto.protoPartSnapshots.Count)) { " is 158.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The length of the statement  "					DarkLog.Debug ("Skipping loading protovessel " + currentProto.vesselID.ToString () + " because it is the selected target and may crash into us"); " is 145.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CreateSafeProtoVesselFromConfigNode,The length of the statement  "					DarkLog.Debug ("WARNING: Protovessel " + protovesselID + " (" + pv.vesselName + ") contains the banned part '" + pps.partName + "'!. Skipping load."); " is 150.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CreateSafeProtoVesselFromConfigNode,The length of the statement  "					chatWorker.PMMessageServer ("WARNING: Protovessel " + protovesselID + " (" + pv.vesselName + ") contains the banned part '" + pps.partName + "'!. Skipping load."); " is 163.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CreateSafeProtoVesselFromConfigNode,The length of the statement  "				DarkLog.Debug ("WARNING: Protovessel " + protovesselID + " (" + pv.vesselName + ") contains the missing part '" + pps.partName + "'!. Skipping load."); " is 151.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CreateSafeProtoVesselFromConfigNode,The length of the statement  "				chatWorker.PMMessageServer ("WARNING: Protovessel " + protovesselID + " (" + pv.vesselName + ") contains the missing part '" + pps.partName + "'!. Skipping load."); " is 164.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CreateSafeProtoVesselFromConfigNode,The length of the statement  "				ScreenMessages.PostScreenMessage ("Cannot load '" + pv.vesselName + "' - you are missing " + pps.partName' 10f' ScreenMessageStyle.UPPER_CENTER); " is 145.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CreateSafeProtoVesselFromConfigNode,The length of the statement  "					DarkLog.Debug ("WARNING: Protovessel " + protovesselID + " (" + pv.vesselName + ") contains the missing resource '" + resource.resourceName + "'!. Skipping load."); " is 164.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CreateSafeProtoVesselFromConfigNode,The length of the statement  "					chatWorker.PMMessageServer ("WARNING: Protovessel " + protovesselID + " (" + pv.vesselName + ") contains the missing resource '" + resource.resourceName + "'!. Skipping load."); " is 177.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,CreateSafeProtoVesselFromConfigNode,The length of the statement  "					ScreenMessages.PostScreenMessage ("Cannot load '" + pv.vesselName + "' - you are missing the resource " + resource.resourceName' 10f' ScreenMessageStyle.UPPER_CENTER); " is 167.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselDestroyed,The length of the statement  "		DarkLog.Debug ("Skipping the removal of vessel " + dyingVesselID + "' name: " + dyingVessel.vesselName + "' vessel has been recently loaded."); " is 143.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselDestroyed,The length of the statement  "		DarkLog.Debug ("Skipping the removal of vessel " + dyingVesselID + "' name: " + dyingVessel.vesselName + "' vessel has been recently killed."); " is 143.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselDestroyed,The length of the statement  "		DarkLog.Debug ("Skipping the removal of vessel " + dyingVesselID + "' name: " + dyingVessel.vesselName + "' vessel has been changed in the future."); " is 149.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselDestroyed,The length of the statement  "		DarkLog.Debug ("Skipping the removal of vessel " + dyingVesselID + "' name: " + dyingVessel.vesselName + "' update lock owned by another player."); " is 147.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselDestroyed,The length of the statement  "		DarkLog.Debug ("Skipping the removal of vessel " + dyingVesselID + "' name: " + dyingVessel.vesselName + "' not a server vessel."); " is 131.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselDestroyed,The length of the statement  "	DarkLog.Debug ("Removing vessel " + dyingVesselID + "' name: " + dyingVessel.vesselName + " from the server: Destroyed"); " is 121.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselRecovered,The length of the statement  "	if (lockSystem.LockExists ("control-" + recoveredVesselID) && !lockSystem.LockIsOurs ("control-" + recoveredVesselID)) { " is 120.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselRecovered,The length of the statement  "		ScreenMessages.PostScreenMessage ("Cannot recover vessel' the vessel been changed in the future."' 5f' ScreenMessageStyle.UPPER_CENTER); " is 136.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselRecovered,The length of the statement  "	DarkLog.Debug ("Removing vessel " + recoveredVesselID + "' name: " + recoveredVessel.vesselName + " from the server: Recovered"); " is 129.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselTerminated,The length of the statement  "	if (lockSystem.LockExists ("control-" + terminatedVesselID) && !lockSystem.LockIsOurs ("control-" + terminatedVesselID)) { " is 122.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselTerminated,The length of the statement  "		ScreenMessages.PostScreenMessage ("Cannot terminate vessel' the vessel is in use."' 5f' ScreenMessageStyle.UPPER_CENTER); " is 121.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselTerminated,The length of the statement  "		ScreenMessages.PostScreenMessage ("Cannot terminate vessel' the vessel been changed in the future."' 5f' ScreenMessageStyle.UPPER_CENTER); " is 138.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselTerminated,The length of the statement  "	DarkLog.Debug ("Removing vessel " + terminatedVesselID + "' name: " + terminatedVessel.vesselName + " from the server: Terminated"); " is 132.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,SendKerbalsInVessel,The length of the statement  "			if ((pcm.type == ProtoCrewMember.KerbalType.Tourist && !pcm.hasToured) || pcm.type != ProtoCrewMember.KerbalType.Tourist) " is 121.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,SendKerbalsInVessel,The length of the statement  "			if ((pcm.type == ProtoCrewMember.KerbalType.Tourist && !pcm.hasToured) || pcm.type != ProtoCrewMember.KerbalType.Tourist) " is 121.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,VesselRecentlyLoaded,The length of the statement  "	return lastLoadVessel.ContainsKey (vesselID) ? ((Client.realtimeSinceStartup - lastLoadVessel [vesselID]) < 10f) : false; " is 121.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,VesselRecentlyKilled,The length of the statement  "	return lastKillVesselDestroy.ContainsKey (vesselID) ? ((Client.realtimeSinceStartup - lastKillVesselDestroy [vesselID]) < 10f) : false; " is 135.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,VesselUpdatedInFuture,The length of the statement  "	return latestVesselUpdate.ContainsKey (vesselID) ? ((latestVesselUpdate [vesselID] + 3f) > Planetarium.GetUniversalTime ()) : false; " is 132.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LenientVesselUpdatedInFuture,The length of the statement  "	return latestVesselUpdate.ContainsKey (vesselID) ? ((latestVesselUpdate [vesselID] - 3f) > Planetarium.GetUniversalTime ()) : false; " is 132.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselDock,The length of the statement  "			if (fromVesselUpdateLockIsOurs || toVesselUpdateLockIsOurs || !fromVesselUpdateLockExists || !toVesselUpdateLockExists) { " is 121.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,RemoveVessel,The length of the statement  "				if (FlightGlobals.fetch.activeVessel != null ? FlightGlobals.fetch.activeVessel.id.ToString () == checkVessel.id.ToString () : false) { " is 135.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,RemoveVessel,The length of the statement  "						ScreenMessages.PostScreenMessage ("Kicked to tracking station' a player docked with you but they were not loaded into the game."); " is 130.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,RemoveVessel,The length of the statement  "				if (FlightGlobals.fetch.activeVessel != null ? FlightGlobals.fetch.activeVessel.id.ToString () == checkVessel.id.ToString () : false) { " is 135.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,QueueKerbal,The length of the statement  "			//If we get a remove older than the current queue peek' then someone has gone back in time and the timeline needs to be fixed. " is 126.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,QueueVesselRemove,The length of the statement  "			//If we get a remove older than the current queue peek' then someone has gone back in time and the timeline needs to be fixed. " is 126.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,QueueVesselProto,The length of the statement  "				//If we get an update older than the current queue peek' then someone has gone back in time and the timeline needs to be fixed. " is 127.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,QueueVesselUpdate,The length of the statement  "			//If we get an update older than the current queue peek' then someone has gone back in time and the timeline needs to be fixed. " is 127.
Long Statement,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,QueueVesselUpdate,The length of the statement  "		if (latestVesselUpdate.ContainsKey (update.vesselID) ? latestVesselUpdate [update.vesselID] < update.planetTime : true) { " is 121.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,Update,The length of the statement  "		//The subspaces are held in the warp control messages' but the warp worker will create a new subspace if we aren't locked. " is 122.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,ConnectToServerMain,The length of the statement  "						if (testAddress.AddressFamily == AddressFamily.InterNetwork || testAddress.AddressFamily == AddressFamily.InterNetworkV6) { " is 123.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The length of the statement  "			int bytesRead = clientConnection.GetStream ().Read (receiveMessage.data' receiveMessage.data.Length - receiveMessageBytesLeft' receiveMessageBytesLeft); " is 152.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The length of the statement  "						//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange. " is 126.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SplitAndRewriteMessage,The length of the statement  "			Array.Copy (message.data' message.data.Length - splitBytesLeft' currentSplitMessage.data' 0' currentSplitMessage.data.Length); " is 126.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleServerSettings,The length of the statement  "			dmpGame.serverParameters = GameParameters.GetDefaultParameters (Client.ConvertGameMode (dmpGame.gameMode)' (GameParameters.Preset)dmpGame.serverDifficulty); " is 156.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleServerSettings,The length of the statement  "			newParameters.Flight.CanQuickLoad = newParameters.Flight.CanRestart = newParameters.Flight.CanLeaveToEditor = mr.Read<bool> (); " is 127.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleServerSettings,The length of the statement  "			newParameters.CustomParams<GameParameters.AdvancedParams> ().PartUpgradesInCareer = newParameters.CustomParams<GameParameters.AdvancedParams> ().PartUpgradesInSandbox = mr.Read<bool> (); " is 186.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleServerSettings,The length of the statement  "			newParameters.CustomParams<GameParameters.AdvancedParams> ().PressurePartLimits = newParameters.CustomParams<GameParameters.AdvancedParams> ().GPartLimits = newParameters.CustomParams<GameParameters.AdvancedParams> ().GKerbalLimits = mr.Read<bool> (); " is 251.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleScenarioModuleData,The length of the statement  "				ScreenMessages.PostScreenMessage ("Scenario data has been lost for " + scenarioName [i]' 5f' ScreenMessageStyle.UPPER_CENTER); " is 126.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleKerbalReply,The length of the statement  "			connectionWindow.status = "Syncing kerbals " + numberOfKerbalsReceived + "/" + numberOfKerbals + " (" + (int)((numberOfKerbalsReceived / (float)numberOfKerbals) * 100) + "%)"; " is 175.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleKerbalRemove,The length of the statement  "		ScreenMessages.PostScreenMessage ("Kerbal " + kerbalName + " removed from game at " + planetTime' 5f' ScreenMessageStyle.UPPER_CENTER); " is 135.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleVesselList,The length of the statement  "			connectionWindow.status = "Syncing vessels " + numberOfVesselsReceived + "/" + numberOfVessels + " (" + (int)((numberOfVesselsReceived / (float)numberOfVessels) * 100) + "%)"; " is 175.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleVesselProto,The length of the statement  "			connectionWindow.status = "Syncing vessels " + numberOfVesselsReceived + "/" + numberOfVessels + " (" + (int)((numberOfVesselsReceived / (float)numberOfVessels) * 100) + "%)"; " is 175.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleCraftLibrary,The length of the statement  "					DarkLog.Debug ("Player: " + player + "' VAB: " + vabExists + "' SPH: " + sphExists + "' SUBASSEMBLY: " + subassemblyExists); " is 124.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleCraftLibrary,The length of the statement  "				chatWorker.QueueChannelMessage (chatWorker.consoleIdentifier' ""' cce.playerName + " shared " + cce.craftName + " (" + cce.craftType + ")"); " is 140.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleCraftLibrary,The length of the statement  "					ScreenMessages.PostScreenMessage ("Craft " + cre.craftName + " from " + cre.playerName + " not available"' 5f' ScreenMessageStyle.UPPER_CENTER); " is 144.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SendVesselProtoMessage,The length of the statement  "	if (!asteroidWorker.VesselIsAsteroid (vessel) && (DiscoveryLevels)int.Parse (vessel.discoveryInfo.GetValue ("state")) != DiscoveryLevels.Owned) { " is 145.
Long Statement,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SendVesselProtoMessage,The length of the statement  "		DarkLog.Debug ("Sending vessel " + vessel.vesselID + "' name " + vessel.vesselName + "' type: " + vessel.vesselType + "' size: " + newMessage.data.Length); " is 155.
Long Statement,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,InitGUI,The length of the statement  "	windowRect = new Rect (Screen.width * 0.9f - WINDOW_WIDTH' Screen.height / 2f - WINDOW_HEIGHT / 2f' WINDOW_WIDTH' WINDOW_HEIGHT); " is 129.
Long Statement,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,Draw,The length of the statement  "		windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6702 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer " + version ()' windowStyle' layoutOptions)); " is 182.
Long Statement,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The length of the statement  "	scrollPos = GUILayout.BeginScrollView (scrollPos' GUILayout.Width (WINDOW_WIDTH - 5)' GUILayout.Height (WINDOW_HEIGHT - 100)); " is 126.
Long Statement,DarkMultiPlayer,Settings,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Settings.cs,LoadSettings,The length of the statement  "		if (File.Exists (backupPublicKeyFile) && File.Exists (backupPrivateKeyFile) && (!File.Exists (publicKeyFile) || !File.Exists (privateKeyFile))) { " is 145.
Long Statement,DarkMultiPlayer,Settings,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Settings.cs,newXMLString,The length of the statement  "	return String.Format ("<?xml version=\"1.0\"?><settings><global username=\"{0}\" cache-size=\"{1}\"/><servers></servers></settings>"' DEFAULT_PLAYER_NAME' DEFAULT_CACHE_SIZE); " is 175.
Long Statement,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,Update,The length of the statement  "	//Switch to new subspace if told to - this needs to be before the workerEnabled check as it fires during the initial sync " is 121.
Long Statement,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,Update,The length of the statement  "	if ((warpMode == WarpMode.MCW_FORCE) || (warpMode == WarpMode.MCW_VOTE) || (warpMode == WarpMode.SUBSPACE) || warpMode == WarpMode.SUBSPACE_SIMPLE) { " is 149.
Long Statement,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,Update,The length of the statement  "		if ((ourRate.rateIndex != TimeWarp.CurrentRateIndex) || (ourRate.isPhysWarp != (TimeWarp.WarpMode == TimeWarp.Modes.LOW))) { " is 124.
Long Statement,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,UpdateScreenMessage,The length of the statement  "					DisplayMessage ("Waiting for vote replies... Yes: " + voteYesCount + "' No: " + voteNoCount + "' Needed: " + voteNeededCount + " (" + timeLeft + "s left)"' 1f); " is 160.
Long Statement,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,UpdateScreenMessage,The length of the statement  "						DisplayMessage (voteMaster + " has started a warp vote' reply with '<' for no or '>' for yes (Yes: " + voteYesCount + "' No: " + voteNoCount + "' Timeout: " + timeLeft + "s)"' 1f); " is 180.
Long Statement,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,UpdateScreenMessage,The length of the statement  "			displayMessage += "\n" + fastestPlayer + " is requesting rate " + GetRateAtIndex (fastestRate.rateIndex' fastestRate.isPhysWarp) + "x"; " is 135.
Long Statement,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,CheckWarp,The length of the statement  "	if ((TimeWarp.CurrentRateIndex == 0) && (TimeWarp.CurrentRate < 1.1f) && !timeSyncer.locked && ((warpMode == WarpMode.SUBSPACE) || (warpMode == WarpMode.SUBSPACE_SIMPLE)) && (timeSyncer.currentSubspace == -1)) { " is 211.
Long Statement,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,InitGUI,The length of the statement  "	windowRect = new Rect (Screen.width * 0.9f - WINDOW_WIDTH' Screen.height / 2f - WINDOW_HEIGHT / 2f' WINDOW_WIDTH' WINDOW_HEIGHT); " is 129.
Long Statement,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,Draw,The length of the statement  "			minWindowRect = GUILayout.Window (6701 + Client.WINDOW_OFFSET' minWindowRect' DrawMaximize' "DMP"' windowStyle' minLayoutOptions); " is 130.
Long Statement,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,Draw,The length of the statement  "			windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Status"' windowStyle' layoutOptions)); " is 177.
Long Statement,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,Draw,The length of the statement  "			minWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' minWindowRect' DrawMaximize' "DMP"' windowStyle' minLayoutOptions)); " is 166.
Long Statement,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,DrawContent,The length of the statement  "					diffState = (diffTime > 0) ? SecondsToVeryShortString ((int)diffTime) + " in the future" : SecondsToVeryShortString (-(int)diffTime) + " in the past"; " is 150.
Long Statement,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,DrawContent,The length of the statement  "					diffState = (diffTime > 0) ? SecondsToVeryShortString ((int)diffTime) + " in the future" : SecondsToVeryShortString (-(int)diffTime) + " in the past"; " is 150.
Long Statement,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,DrawContent,The length of the statement  "		if ((warpWorker.warpMode == WarpMode.SUBSPACE) && !currentEntry.isUs && !currentEntry.isWarping && (currentEntry.subspaceEntry != null) && (diffTime > 0)) { " is 156.
Long Statement,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,DrawPlayerEntry,The length of the statement  "		playerNameStyle [playerStatus.playerName].normal.textColor = playerColorWorker.GetPlayerColor (playerStatus.playerName); " is 120.
Long Statement,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,DrawPlayerEntry,The length of the statement  "		playerNameStyle [playerStatus.playerName].active.textColor = playerColorWorker.GetPlayerColor (playerStatus.playerName); " is 120.
Long Statement,DarkMultiPlayer,PlayerStatusWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWorker.cs,Update,The length of the statement  "							if (!vesselWorker.isInSafetyBubble (FlightGlobals.fetch.activeVessel.GetWorldPos3D ()' FlightGlobals.fetch.activeVessel.mainBody)) { " is 132.
Long Statement,DarkMultiPlayer,PlayerStatusWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWorker.cs,Update,The length of the statement  "							if (!vesselWorker.isInSafetyBubble (FlightGlobals.fetch.activeVessel.GetWorldPos3D ()' FlightGlobals.fetch.activeVessel.mainBody)) { " is 132.
Long Statement,DarkMultiPlayer,PlayerStatusWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWorker.cs,Update,The length of the statement  "							if (!vesselWorker.isInSafetyBubble (FlightGlobals.fetch.activeVessel.GetWorldPos3D ()' FlightGlobals.fetch.activeVessel.mainBody)) { " is 132.
Long Statement,DarkMultiPlayer,PlayerStatusWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWorker.cs,Update,The length of the statement  "								myPlayerStatus.statusText = "Spectating " + lockSystem.LockOwner ("control-" + FlightGlobals.ActiveVessel.id.ToString ()); " is 122.
Long Statement,DarkMultiPlayer,ScenarioWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScenarioWorker.cs,UpgradeTheAstronautComplexSoTheGameDoesntBugOut,The length of the statement  "	ProtoScenarioModule sm = HighLogic.CurrentGame.scenarios.Find (psm => psm.moduleName == "ScenarioUpgradeableFacilities"); " is 121.
Long Statement,DarkMultiPlayer,ScenarioWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScenarioWorker.cs,UpgradeTheAstronautComplexSoTheGameDoesntBugOut,The length of the statement  "			foreach (Upgradeables.UpgradeableFacility uf in ScenarioUpgradeableFacilities.protoUpgradeables ["SpaceCenter/AstronautComplex"].facilityRefs) { " is 144.
Long Statement,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,InitGUI,The length of the statement  "	windowRect = new Rect (Screen.width - (WINDOW_WIDTH + 50)' (Screen.height / 2f) - (WINDOW_HEIGHT / 2f)' WINDOW_WIDTH' WINDOW_HEIGHT); " is 133.
Long Statement,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Draw,The length of the statement  "		windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6705 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Debug"' windowStyle' layoutOptions)); " is 176.
Long Statement,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The length of the statement  "				vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n"; " is 124.
Long Statement,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The length of the statement  "				vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n"; " is 124.
Long Statement,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The length of the statement  "					vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n"; " is 161.
Long Statement,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The length of the statement  "				vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n"; " is 120.
Long Statement,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The length of the statement  "				vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n"; " is 126.
Long Statement,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The length of the statement  "			connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n"; " is 120.
Long Statement,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The length of the statement  "			connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n"; " is 122.
Long Statement,DarkMultiPlayer,DynamicTickWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DynamicTickWorker.cs,CalculateRates,The length of the statement  "	long newTickRate = MASTER_MAX_TICKS_PER_SECOND - (currentQueuedBytes / (MASTER_TICK_SCALING / (MASTER_MAX_TICKS_PER_SECOND - MASTER_MIN_TICKS_PER_SECOND))); " is 156.
Long Statement,DarkMultiPlayer,DynamicTickWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DynamicTickWorker.cs,CalculateRates,The length of the statement  "	long newSecondryVesselsPerTick = MASTER_MAX_SECONDARY_VESSELS - (currentQueuedBytes / (MASTER_SECONDARY_VESSELS_SCALING / (MASTER_MAX_SECONDARY_VESSELS - MASTER_MIN_SECONDARY_VESSELS))); " is 186.
Long Statement,DarkMultiPlayer,DynamicTickWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DynamicTickWorker.cs,CalculateRates,The length of the statement  "	maxSecondryVesselsPerTick = newSecondryVesselsPerTick > MASTER_MIN_SECONDARY_VESSELS ? (int)newSecondryVesselsPerTick : MASTER_MIN_SECONDARY_VESSELS; " is 149.
Long Statement,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,BuildDllFileList,The length of the statement  "	string[] checkList = Directory.GetFiles (Path.Combine (KSPUtil.ApplicationRootPath' "GameData")' "*"' SearchOption.AllDirectories); " is 131.
Long Statement,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,BuildDllFileList,The length of the statement  "			string relativeFilePath = checkFile.ToLowerInvariant ().Substring (checkFile.ToLowerInvariant ().IndexOf ("gamedata") + 9).Replace ('\\'' '/'); " is 143.
Long Statement,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The length of the statement  "	string tempModFilePath = Path.Combine (Path.Combine (Path.Combine (Path.Combine (Path.Combine (KSPUtil.ApplicationRootPath' "GameData")' "DarkMultiPlayer")' "Plugins")' "Data")' "DMPModControl.txt"); " is 199.
Long Statement,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The length of the statement  "	string[] currentGameDataFiles = Directory.GetFiles (Path.Combine (KSPUtil.ApplicationRootPath' "GameData")' "*"' SearchOption.AllDirectories); " is 142.
Long Statement,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The length of the statement  "		string relativeFilePath = currentFile.Substring (currentFile.ToLowerInvariant ().IndexOf ("gamedata") + 9).Replace ('\\'' '/'); " is 127.
Long Statement,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,GenerateModControlFile,The length of the statement  "	string modFileData = Common.GenerateModFileStringData (requiredFiles.ToArray ()' optionalFiles.ToArray ()' whitelistMode' new string[0]' partsList.ToArray ()); " is 159.
Long Statement,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,GenerateModControlFile,The length of the statement  "	ScreenMessages.PostScreenMessage ("DMPModFile.txt file generated in your KSP folder"' 5f' ScreenMessageStyle.UPPER_CENTER); " is 123.
Long Statement,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,CheckCommonStockParts,The length of the statement  "		ScreenMessages.PostScreenMessage (missingParts + " missing part(s) from Common.dll printed to debug log (" + totalParts + " total)"' 5f' ScreenMessageStyle.UPPER_CENTER); " is 170.
Long Statement,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,CheckCommonStockParts,The length of the statement  "		ScreenMessages.PostScreenMessage ("No missing parts out of from Common.dll (" + totalParts + " total)"' 5f' ScreenMessageStyle.UPPER_CENTER); " is 141.
Long Statement,DarkMultiPlayer,ModWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWindow.cs,InitGUI,The length of the statement  "	windowRect = new Rect (((Screen.width / 2f) - (WINDOW_WIDTH / 2f))' ((Screen.height / 2f) - (WINDOW_HEIGHT / 2f))' WINDOW_WIDTH' WINDOW_HEIGHT); " is 144.
Long Statement,DarkMultiPlayer,ModWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWindow.cs,Draw,The length of the statement  "		windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6706 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Mod Control"' windowStyle' layoutOptions)); " is 182.
Long Statement,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,Update,The length of the statement  "		if (displayCraftUploadingMessage && ((Client.realtimeSinceStartup - lastCraftMessageCheck) > CRAFT_MESSAGE_CHECK_INTERVAL)) { " is 125.
Long Statement,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,DeleteCraftEntry,The length of the statement  "			DarkLog.Debug ("Cannot remove craft entry " + craftName + " for player " + playerName + "' player does not have any " + craftType + " entries"); " is 144.
Long Statement,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,InitGUI,The length of the statement  "	playerWindowRect = new Rect (50' (Screen.height / 2f) - (PLAYER_WINDOW_HEIGHT / 2f)' PLAYER_WINDOW_WIDTH' PLAYER_WINDOW_HEIGHT); " is 128.
Long Statement,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,InitGUI,The length of the statement  "	libraryWindowRect = new Rect ((Screen.width / 2f) - (LIBRARY_WINDOW_WIDTH / 2f)' (Screen.height / 2f) - (LIBRARY_WINDOW_HEIGHT / 2f)' LIBRARY_WINDOW_WIDTH' LIBRARY_WINDOW_HEIGHT); " is 179.
Long Statement,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,Draw,The length of the statement  "		playerWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6707 + Client.WINDOW_OFFSET' playerWindowRect' DrawPlayerContent' "DarkMultiPlayer - Craft Library"' windowStyle' playerLayoutOptions)); " is 208.
Long Statement,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,Draw,The length of the statement  "			libraryWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6708 + Client.WINDOW_OFFSET' libraryWindowRect' DrawLibraryContent' "DarkMultiPlayer - " + selectedPlayer + " Craft Library"' windowStyle' libraryLayoutOptions)); " is 235.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,DisplayVersion,The length of the statement  "	string versionMessage = (Common.PROGRAM_VERSION.Length == 40) ? "DarkMultiPlayer development build " + Common.PROGRAM_VERSION.Substring (0' 7) : "DarkMultiPlayer " + Common.PROGRAM_VERSION; " is 189.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,JoinChannel,The length of the statement  "	if (commandArgs != "" && commandArgs != "Global" && commandArgs != consoleIdentifier && commandArgs != "#Global" && commandArgs != "#" + consoleIdentifier) { " is 157.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The length of the statement  "		PrintToSelectedChannel ("Undefined function. Usage: /resize [default|medium|large]' /resize [x|y] size' or /resize show"); " is 122.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,HandleChatEvents,The length of the statement  "				ScreenMessages.PostScreenMessage (ce.fromPlayer + " -> #" + ce.channel + ": " + ce.message' 5f' ScreenMessageStyle.UPPER_LEFT); " is 127.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,HandleChatEvents,The length of the statement  "		if (!string.IsNullOrEmpty (selectedChannel) && string.IsNullOrEmpty (ce.channel) && ce.fromPlayer != consoleIdentifier) { " is 121.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,HandleChatEvents,The length of the statement  "		if (string.IsNullOrEmpty (selectedChannel) && string.IsNullOrEmpty (selectedPMChannel) && string.IsNullOrEmpty (ce.channel)) { " is 126.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,HandleChatEvents,The length of the statement  "		if (!string.IsNullOrEmpty (selectedChannel) && string.IsNullOrEmpty (selectedPMChannel) && ce.channel == selectedChannel) { " is 123.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,HandleChatEvents,The length of the statement  "		if (!string.IsNullOrEmpty (selectedPMChannel) && string.IsNullOrEmpty (selectedChannel) && (pe.fromPlayer == selectedPMChannel || pe.fromPlayer == dmpSettings.playerName)) { " is 173.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,HandleChatEvents,The length of the statement  "				ScreenMessages.PostScreenMessage (pe.fromPlayer + " -> @" + pe.toPlayer + ": " + pe.message' 5f' ScreenMessageStyle.UPPER_LEFT); " is 128.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,HandleChatEvents,The length of the statement  "		if (!string.IsNullOrEmpty (selectedChannel) && string.IsNullOrEmpty (selectedPMChannel) && consoleIdentifier == selectedChannel) { " is 130.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,Draw,The length of the statement  "		bool pressedChatShortcutKey = (Event.current.type == EventType.KeyDown && Event.current.keyCode == dmpSettings.chatKey); " is 120.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,Draw,The length of the statement  "		windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6704 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer Chat"' windowStyle' windowLayoutOptions)); " is 179.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,DrawContent,The length of the statement  "	bool pressedEnter = (Event.current.type == EventType.KeyDown && !Event.current.shift && Event.current.character == '\n'); " is 121.
Long Statement,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,DrawContent,The length of the statement  "	//When a control is inserted or removed from the GUI' Unity's focusing starts tripping balls. This is a horrible workaround for unity that shouldn't exist... " is 157.
Long Statement,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,Update,The length of the statement  "					screenshotUploadMessage = ScreenMessages.PostScreenMessage ("Screenshot uploaded!"' 2f' ScreenMessageStyle.UPPER_CENTER); " is 121.
Long Statement,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,Update,The length of the statement  "					screenshotUploadMessage = ScreenMessages.PostScreenMessage ("Uploading screenshot..."' 1f' ScreenMessageStyle.UPPER_CENTER); " is 124.
Long Statement,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,Update,The length of the statement  "				screenshotDownloadMessage = ScreenMessages.PostScreenMessage ("Downloading screenshot..."' 1f' ScreenMessageStyle.UPPER_CENTER); " is 128.
Long Statement,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,Draw,The length of the statement  "		windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6710 + Client.WINDOW_OFFSET' windowRect' DrawContent' "Screenshots"' windowStyle' windowLayoutOption)); " is 169.
Long Statement,DarkMultiPlayer,LockSystem,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\LockSystem.cs,ThrottledAcquireLock,The length of the statement  "	if (lastAcquireTime.ContainsKey (lockname) ? ((Client.realtimeSinceStartup - lastAcquireTime [lockname]) > 5f) : true) { " is 120.
Long Statement,DarkMultiPlayer,AsteroidWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\AsteroidWorker.cs,Update,The length of the statement  "								DarkLog.Debug ("Spawning asteroid' have " + (beforeSpawn + asteroidsSpawned) + "' need " + maxNumberOfUntrackedAsteroids); " is 122.
Long Statement,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,SetVesselColor,The length of the statement  "		if (lockSystem.LockExists ("control-" + colorVessel.id.ToString ()) && !lockSystem.LockIsOurs ("control-" + colorVessel.id.ToString ())) { " is 138.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The length of the statement  "	windowRect = new Rect (Screen.width / 2f + WINDOW_WIDTH / 2f' Screen.height / 2f - WINDOW_HEIGHT / 2f' WINDOW_WIDTH' WINDOW_HEIGHT); " is 132.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,Draw,The length of the statement  "		windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6711 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Options"' windowStyle' layoutOptions)); " is 178.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "			GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle); " is 142.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "			string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle); " is 158.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "		playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1); " is 168.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "		playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1); " is 168.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "		playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1); " is 168.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "			if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING) " is 123.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB"); " is 182.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "		string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle); " is 189.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "		GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle); " is 224.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "		if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) { " is 133.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "		if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) { " is 139.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "		if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle)) " is 135.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "		if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle)) " is 135.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "		bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic"); " is 146.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "		bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert"); " is 125.
Long Statement,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The length of the statement  "		universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle); " is 185.
Long Statement,DarkMultiPlayer,UniverseConverter,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverter.cs,GenerateUniverse,The length of the statement  "		ScreenMessages.PostScreenMessage ("Failed to generate a DMP universe for '" + saveName + "'' Save directory doesn't exist"' 5f' ScreenMessageStyle.UPPER_CENTER); " is 161.
Long Statement,DarkMultiPlayer,UniverseConverter,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverter.cs,GenerateUniverse,The length of the statement  "		ScreenMessages.PostScreenMessage ("Failed to generate a DMP universe for '" + saveName + "'' persistent.sfs doesn't exist"' 5f' ScreenMessageStyle.UPPER_CENTER); " is 161.
Long Statement,DarkMultiPlayer,UniverseConverter,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverter.cs,GenerateUniverse,The length of the statement  "		ScreenMessages.PostScreenMessage ("Failed to generate a DMP universe for '" + saveName + "'' failed to load persistent data"' 5f' ScreenMessageStyle.UPPER_CENTER); " is 163.
Long Statement,DarkMultiPlayer,UniverseConverter,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverter.cs,GenerateUniverse,The length of the statement  "		ScreenMessages.PostScreenMessage ("Failed to generate a DMP universe for '" + saveName + "'' failed to load game data"' 5f' ScreenMessageStyle.UPPER_CENTER); " is 157.
Long Statement,DarkMultiPlayer,UniverseConverter,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverter.cs,GenerateUniverse,The length of the statement  "		ScreenMessages.PostScreenMessage ("Failed to generate a DMP universe for '" + saveName + "'' failed to load flight state data"' 5f' ScreenMessageStyle.UPPER_CENTER); " is 165.
Long Statement,DarkMultiPlayer,UniverseConverter,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverter.cs,GenerateUniverse,The length of the statement  "	ScreenMessages.PostScreenMessage ("Generated KSP_folder/Universe from " + saveName' 5f' ScreenMessageStyle.UPPER_CENTER); " is 121.
Long Statement,DarkMultiPlayer,UniverseConverterWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverterWindow.cs,InitGUI,The length of the statement  "	windowRect = new Rect (Screen.width / 4f - WINDOW_WIDTH / 2f' Screen.height / 2f - WINDOW_HEIGHT / 2f' WINDOW_WIDTH' WINDOW_HEIGHT); " is 132.
Long Statement,DarkMultiPlayer,UniverseConverterWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverterWindow.cs,Draw,The length of the statement  "		windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6712 + Client.WINDOW_OFFSET' windowRect' DrawContent' "Universe Converter"' windowStyle' layoutOptions)); " is 171.
Long Statement,DarkMultiPlayer,DisclaimerWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DisclaimerWindow.cs,SpawnDialog,The length of the statement  "	string disclaimerText = "DarkMultiPlayer shares the following possibly personally identifiable information with any server you connect to:\n"; " is 142.
Long Statement,DarkMultiPlayer,DisclaimerWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DisclaimerWindow.cs,SpawnDialog,The length of the statement  "	PopupDialog.SpawnPopupDialog (new MultiOptionDialog ("DisclaimerWindow"' disclaimerText' "DarkMultiPlayer - Disclaimer"' HighLogic.UISkin' new Rect (.5f' .5f' 425f' 150f)' new DialogGUIFlexibleSpace ()' new DialogGUIVerticalLayout (new DialogGUIHorizontalLayout (new DialogGUIButton ("Accept"' delegate { " is 304.
Long Statement,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The length of the statement  "			VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody); " is 138.
Long Statement,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The length of the statement  "			Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration; " is 121.
Long Statement,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The length of the statement  "	if (!vesselWorker.isSpectating && (FlightGlobals.fetch.activeVessel != null ? FlightGlobals.fetch.activeVessel.id == vesselID : false) && HighLogic.LoadedScene == GameScenes.FLIGHT) { " is 183.
Long Statement,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The length of the statement  "		Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]); " is 134.
Long Statement,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The length of the statement  "		Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge; " is 134.
Long Statement,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The length of the statement  "			positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference); " is 135.
Long Statement,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The length of the statement  "		Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge; " is 135.
Long Statement,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The length of the statement  "				updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ()); " is 132.
Long Statement,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The length of the statement  "		Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody); " is 120.
Long Statement,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The length of the statement  "			Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ()); " is 165.
Long Statement,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The length of the statement  "			Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy; " is 187.
Long Statement,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The length of the statement  "	Vector3 angularVelocity = updateVessel.mainBody.bodyTransform.rotation * updateRotation * new Vector3 (this.angularVelocity [0]' this.angularVelocity [1]' this.angularVelocity [2]); " is 181.
Long Statement,DarkMultiPlayer,VesselUtil,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUtil.cs,RaycastGround,The length of the statement  "	Vector3d surfaceRadial = new Vector3d (Math.Cos (latRadians) * Math.Cos (longRadians)' Math.Sin (latRadians)' Math.Cos (latRadians) * Math.Sin (longRadians)); " is 158.
Long Statement,DarkMultiPlayer,ToolbarTypes,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ToolbarWrapper.cs,getType,The length of the statement  "	return AssemblyLoader.loadedAssemblies.SelectMany (a => a.assembly.GetExportedTypes ()).SingleOrDefault (t => t.FullName == name); " is 130.
Long Statement,DarkMultiPlayer,ToolbarSupport,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ToolbarSupport.cs,EnableBlizzyToolbar,The length of the statement  "	blizzyButton.Visibility = new GameScenesVisibility (GameScenes.EDITOR' GameScenes.FLIGHT' GameScenes.SPACECENTER' GameScenes.TRACKSTATION); " is 139.
Long Statement,DarkMultiPlayer,ToolbarSupport,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ToolbarSupport.cs,EnableStockForRealsies,The length of the statement  "	stockDmpButton = ApplicationLauncher.Instance.AddModApplication (HandleButtonClick' HandleButtonClick' DoNothing' DoNothing' DoNothing' DoNothing' ApplicationLauncher.AppScenes.ALWAYS' buttonTexture); " is 200.
Long Statement,DarkMultiPlayer,HackyInAtmoLoader,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\HackyInAtmoLoader.cs,OnVesselWillDestroy,The length of the statement  "	bool pilotedByAnotherPlayer = lockSystem.LockExists ("control-" + vessel.id) && !lockSystem.LockIsOurs ("control-" + vessel.id); " is 128.
Long Statement,DarkMultiPlayer,HackyInAtmoLoader,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\HackyInAtmoLoader.cs,OnVesselWillDestroy,The length of the statement  "	bool updatedByAnotherPlayer = lockSystem.LockExists ("update-" + vessel.id) && !lockSystem.LockIsOurs ("update-" + vessel.id); " is 126.
Long Statement,DarkMultiPlayer,HackyInAtmoLoader,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\HackyInAtmoLoader.cs,OnVesselWillDestroy,The length of the statement  "		if (vessel.situation == Vessel.Situations.FLYING && (pilotedByAnotherPlayer || updatedByAnotherPlayer || updatedInTheFuture)) { " is 127.
Long Statement,DarkMultiPlayer,PartKiller,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PartKiller.cs,OnVesselCreate,The length of the statement  "				if (lockSystem.LockIsOurs ("control-" + otherVessel.id) || lockSystem.LockIsOurs ("update-" + otherVessel.id) || (!lockSystem.LockExists ("control-" + otherVessel.id) && !lockSystem.LockExists ("update-" + otherVessel.id))) { " is 225.
Long Statement,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,DodgeKerbals,The length of the statement  "					if (kerbalOk && kerbalToVessel.ContainsKey (possibleKerbal.name) && (takenKerbals.Contains (possibleKerbal.name) || kerbalToVessel [possibleKerbal.name] != protovesselID)) { " is 173.
Long Statement,DarkMultiPlayer.Utilities,CompatibilityChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\CompatibilityChecker.cs,IsCompatible,The length of the statement  "	return (Versioning.version_major == compatibleMajor) && (Versioning.version_minor == compatibleMinor) && (Versioning.Revision == compatibleRevision); " is 149.
Long Statement,DarkMultiPlayer.Utilities,CompatibilityChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "	FieldInfo[] fields = getAllTypes ().Where (t => t.Name == "CompatibilityChecker").Select (t => t.GetField ("_version"' BindingFlags.Static | BindingFlags.NonPublic)).Where (f => f != null).Where (f => f.FieldType == typeof(int)).ToArray (); " is 240.
Long Statement,DarkMultiPlayer.Utilities,CompatibilityChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "	Debug.Log (String.Format ("[CompatibilityChecker] Running checker version {0} from '{1}'"' _version' Assembly.GetExecutingAssembly ().GetName ().Name)); " is 152.
Long Statement,DarkMultiPlayer.Utilities,CompatibilityChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "	String[] incompatible = fields.Select (f => f.DeclaringType.GetMethod ("IsCompatible"' Type.EmptyTypes)).Where (m => m.IsStatic).Where (m => m.ReturnType == typeof(bool)).Where (m => { " is 184.
Long Statement,DarkMultiPlayer.Utilities,CompatibilityChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "			Debug.LogWarning (String.Format ("[CompatibilityChecker] Exception while invoking IsCompatible() from '{0}':\n\n{1}"' m.DeclaringType.Assembly.GetName ().Name' e)); " is 164.
Long Statement,DarkMultiPlayer.Utilities,CompatibilityChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "	String[] incompatibleUnity = fields.Select (f => f.DeclaringType.GetMethod ("IsUnityCompatible"' Type.EmptyTypes)).Where (m => m != null)// Mods without IsUnityCompatible() are assumed to be compatible. " is 202.
Long Statement,DarkMultiPlayer.Utilities,CompatibilityChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "			Debug.LogWarning (String.Format ("[CompatibilityChecker] Exception while invoking IsUnityCompatible() from '{0}':\n\n{1}"' m.DeclaringType.Assembly.GetName ().Name' e)); " is 169.
Long Statement,DarkMultiPlayer.Utilities,CompatibilityChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "	String message = "Some installed mods may be incompatible with this version of Kerbal Space Program. Features may be broken or disabled. Please check for updates to the listed mods."; " is 183.
Long Statement,DarkMultiPlayer.Utilities,CompatibilityChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "		message += String.Format ("\n\nThese mods are incompatible with KSP {0}.{1}.{2}:\n\n"' Versioning.version_major' Versioning.version_minor' Versioning.Revision); " is 160.
Long Statement,DarkMultiPlayer.Utilities,CompatibilityChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "		Debug.LogWarning ("[CompatibilityChecker] Incompatible mods (Unity) detected: " + String.Join ("' "' incompatibleUnity)); " is 121.
Long Statement,DarkMultiPlayer.Utilities,CompatibilityChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "		PopupDialog.SpawnPopupDialog (new MultiOptionDialog ("CompatibilityChecker"' message' "Incompatible Mods Detected"' HighLogic.UISkin)' true' HighLogic.UISkin); " is 159.
Long Statement,DarkMultiPlayer.Utilities,InstallChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\InstallChecker.cs,Start,The length of the statement  "	Debug.Log (String.Format ("[InstallChecker] Running checker from '{0}'"' Assembly.GetExecutingAssembly ().GetName ().Name)); " is 124.
Long Statement,DarkMultiPlayer.Utilities,InstallChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\InstallChecker.cs,Start,The length of the statement  "		Debug.Log (String.Format ("[InstallChecker] Mod '{0}' is not correctly installed."' Assembly.GetExecutingAssembly ().GetName ().Name)); " is 135.
Long Statement,DarkMultiPlayer.Utilities,InstallChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\InstallChecker.cs,Start,The length of the statement  "		Debug.Log (String.Format ("[InstallChecker] DMP is Currently installed on '{0}'' should be installed at '{1}'"' currentPath' correctPath)); " is 139.
Long Statement,DarkMultiPlayer.Utilities,InstallChecker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Utilities\InstallChecker.cs,Start,The length of the statement  "		PopupDialog.SpawnPopupDialog (new MultiOptionDialog ("InstallChecker"' String.Format ("DarkMultiPlayer is not correctly installed.\n\nCurrent location: {0}\n\nCorrect location: {1}\n"' currentPath' correctPath)' "Incorrect Install Detected"' HighLogic.UISkin)' true' HighLogic.UISkin); " is 285.
Complex Conditional,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,SendVesselUpdates,The conditional expression  "checkVessel.loaded && !checkVessel.packed && (checkVessel.id.ToString () != FlightGlobals.fetch.activeVessel.id.ToString ()) && (checkVessel.state != Vessel.State.DEAD)"  is complex.
Complex Conditional,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The conditional expression  "oldVessel.loaded && !oldVessel.packed && !oldVessel.Landed && (hft != -1) && (hft < 1000) && (currentProto.protoPartSnapshots.Count == oldVessel.parts.Count)"  is complex.
Complex Conditional,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The conditional expression  "wasTarget && !oldVessel.LandedOrSplashed && oldVessel.loaded && !oldVessel.packed && (oldVessel.parts.Count == currentProto.protoPartSnapshots.Count)"  is complex.
Complex Conditional,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,OnVesselDock,The conditional expression  "fromVesselUpdateLockIsOurs || toVesselUpdateLockIsOurs || !fromVesselUpdateLockExists || !toVesselUpdateLockExists"  is complex.
Complex Conditional,DarkMultiPlayer,Settings,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Settings.cs,LoadSettings,The conditional expression  "File.Exists (backupPublicKeyFile) && File.Exists (backupPrivateKeyFile) && (!File.Exists (publicKeyFile) || !File.Exists (privateKeyFile))"  is complex.
Complex Conditional,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,Update,The conditional expression  "(warpMode == WarpMode.MCW_FORCE) || (warpMode == WarpMode.MCW_VOTE) || (warpMode == WarpMode.SUBSPACE) || warpMode == WarpMode.SUBSPACE_SIMPLE"  is complex.
Complex Conditional,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,CheckWarp,The conditional expression  "(TimeWarp.CurrentRateIndex > 0) && (TimeWarp.CurrentRate > 1.1f) && !resetWarp && timeSyncer.locked"  is complex.
Complex Conditional,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,CheckWarp,The conditional expression  "(TimeWarp.CurrentRateIndex == 0) && (TimeWarp.CurrentRate < 1.1f) && !timeSyncer.locked && ((warpMode == WarpMode.SUBSPACE) || (warpMode == WarpMode.SUBSPACE_SIMPLE)) && (timeSyncer.currentSubspace == -1)"  is complex.
Complex Conditional,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,DrawContent,The conditional expression  "(warpWorker.warpMode == WarpMode.SUBSPACE) && !currentEntry.isUs && !currentEntry.isWarping && (currentEntry.subspaceEntry != null) && (diffTime > 0)"  is complex.
Complex Conditional,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,JoinChannel,The conditional expression  "commandArgs != "" && commandArgs != "Global" && commandArgs != consoleIdentifier && commandArgs != "#Global" && commandArgs != "#" + consoleIdentifier"  is complex.
Complex Conditional,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,HandleChatEvents,The conditional expression  "!string.IsNullOrEmpty (selectedPMChannel) && string.IsNullOrEmpty (selectedChannel) && (pe.fromPlayer == selectedPMChannel || pe.fromPlayer == dmpSettings.playerName)"  is complex.
Complex Conditional,DarkMultiPlayer,HackyInAtmoLoader,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\HackyInAtmoLoader.cs,OnVesselWillDestroy,The conditional expression  "vessel.situation == Vessel.Situations.FLYING && (pilotedByAnotherPlayer || updatedByAnotherPlayer || updatedInTheFuture)"  is complex.
Complex Conditional,DarkMultiPlayer,PartKiller,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PartKiller.cs,OnVesselCreate,The conditional expression  "lockSystem.LockIsOurs ("control-" + otherVessel.id) || lockSystem.LockIsOurs ("update-" + otherVessel.id) || (!lockSystem.LockExists ("control-" + otherVessel.id) && !lockSystem.LockExists ("update-" + otherVessel.id))"  is complex.
Complex Conditional,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,DodgeKerbals,The conditional expression  "kerbalOk && kerbalToVessel.ContainsKey (possibleKerbal.name) && (takenKerbals.Contains (possibleKerbal.name) || kerbalToVessel [possibleKerbal.name] != protovesselID)"  is complex.
Empty Catch Block,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The method has an empty catch block.
Empty Catch Block,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SendThreadMain,The method has an empty catch block.
Empty Catch Block,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,CheckInitialDisconnection,The method has an empty catch block.
Empty Catch Block,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,TerminateThreads,The method has an empty catch block.
Empty Catch Block,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,TerminateThreads,The method has an empty catch block.
Empty Catch Block,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,TerminateThreads,The method has an empty catch block.
Empty Catch Block,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,TerminateThreads,The method has an empty catch block.
Empty Catch Block,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The method has an empty catch block.
Magic Number,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,CreateBlankGame,The following statement contains a magic number: if (returnGame.flightState.mapViewFilterState == 0) {  	returnGame.flightState.mapViewFilterState = -1026;  }  
Magic Number,DarkMultiPlayer,Client,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Main.cs,CreateBlankGame,The following statement contains a magic number: returnGame.flightState.mapViewFilterState = -1026;  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (workerEnabled) {  	//Switch to a new active vessel if needed.  	if (newActiveVessel != null) {  		if (FlightGlobals.fetch.vessels.Contains (newActiveVessel)) {  			//Hold unpack so we don't collide with the old copy  			try {  				OrbitPhysicsManager.HoldVesselUnpack (2);  			} catch {  			}  			//If the vessel failed to load in a reasonable time' go through the loading screen  			if (activeVesselLoadUpdates > 100) {  				DarkLog.Debug ("Active vessel must not be within load distance' go through the loading screen method");  				activeVesselLoadUpdates = 0;  				FlightGlobals.ForceSetActiveVessel (newActiveVessel);  				newActiveVessel = null;  			}  			if (!newActiveVessel.loaded) {  				activeVesselLoadUpdates++;  				return;  			}  			//Wait 10 updates maybe?  			if (activeVesselLoadUpdates < 10) {  				activeVesselLoadUpdates++;  				return;  			}  			activeVesselLoadUpdates = 0;  			DarkLog.Debug ("Switching to active vessel!");  			FlightGlobals.ForceSetActiveVessel (newActiveVessel);  			newActiveVessel = null;  			return;  		} else {  			DarkLog.Debug ("switchActiveVesselOnNextUpdate Vessel failed to spawn into game!");  			ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER);  			HighLogic.LoadScene (GameScenes.TRACKSTATION);  		}  	}  	//Kill any queued vessels  	foreach (Vessel dyingVessel in delayKillVessels.ToArray ()) {  		if (FlightGlobals.fetch.vessels.Contains (dyingVessel) && dyingVessel.state != Vessel.State.DEAD) {  			DarkLog.Debug ("Delay killing " + dyingVessel.id.ToString ());  			KillVessel (dyingVessel);  		} else {  			delayKillVessels.Remove (dyingVessel);  		}  	}  	if (fromDockedVesselID != Guid.Empty || toDockedVesselID != Guid.Empty) {  		HandleDocking ();  	}  	//Process new messages  	lock (updateQueueLock) {  		ProcessNewVesselMessages ();  	}  	//Update the screen spectate message.  	UpdateOnScreenSpectateMessage ();  	//Lock and unlock spectate state  	UpdateSpectateLock ();  	//Release old update locks  	ReleaseOldUpdateLocks ();  	//Tell other players we have taken a vessel  	UpdateActiveVesselStatus ();  	//Check for vessel changes  	CheckVesselHasChanged ();  	//Send updates of needed vessels  	SendVesselUpdates ();  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (workerEnabled) {  	//Switch to a new active vessel if needed.  	if (newActiveVessel != null) {  		if (FlightGlobals.fetch.vessels.Contains (newActiveVessel)) {  			//Hold unpack so we don't collide with the old copy  			try {  				OrbitPhysicsManager.HoldVesselUnpack (2);  			} catch {  			}  			//If the vessel failed to load in a reasonable time' go through the loading screen  			if (activeVesselLoadUpdates > 100) {  				DarkLog.Debug ("Active vessel must not be within load distance' go through the loading screen method");  				activeVesselLoadUpdates = 0;  				FlightGlobals.ForceSetActiveVessel (newActiveVessel);  				newActiveVessel = null;  			}  			if (!newActiveVessel.loaded) {  				activeVesselLoadUpdates++;  				return;  			}  			//Wait 10 updates maybe?  			if (activeVesselLoadUpdates < 10) {  				activeVesselLoadUpdates++;  				return;  			}  			activeVesselLoadUpdates = 0;  			DarkLog.Debug ("Switching to active vessel!");  			FlightGlobals.ForceSetActiveVessel (newActiveVessel);  			newActiveVessel = null;  			return;  		} else {  			DarkLog.Debug ("switchActiveVesselOnNextUpdate Vessel failed to spawn into game!");  			ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER);  			HighLogic.LoadScene (GameScenes.TRACKSTATION);  		}  	}  	//Kill any queued vessels  	foreach (Vessel dyingVessel in delayKillVessels.ToArray ()) {  		if (FlightGlobals.fetch.vessels.Contains (dyingVessel) && dyingVessel.state != Vessel.State.DEAD) {  			DarkLog.Debug ("Delay killing " + dyingVessel.id.ToString ());  			KillVessel (dyingVessel);  		} else {  			delayKillVessels.Remove (dyingVessel);  		}  	}  	if (fromDockedVesselID != Guid.Empty || toDockedVesselID != Guid.Empty) {  		HandleDocking ();  	}  	//Process new messages  	lock (updateQueueLock) {  		ProcessNewVesselMessages ();  	}  	//Update the screen spectate message.  	UpdateOnScreenSpectateMessage ();  	//Lock and unlock spectate state  	UpdateSpectateLock ();  	//Release old update locks  	ReleaseOldUpdateLocks ();  	//Tell other players we have taken a vessel  	UpdateActiveVesselStatus ();  	//Check for vessel changes  	CheckVesselHasChanged ();  	//Send updates of needed vessels  	SendVesselUpdates ();  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (workerEnabled) {  	//Switch to a new active vessel if needed.  	if (newActiveVessel != null) {  		if (FlightGlobals.fetch.vessels.Contains (newActiveVessel)) {  			//Hold unpack so we don't collide with the old copy  			try {  				OrbitPhysicsManager.HoldVesselUnpack (2);  			} catch {  			}  			//If the vessel failed to load in a reasonable time' go through the loading screen  			if (activeVesselLoadUpdates > 100) {  				DarkLog.Debug ("Active vessel must not be within load distance' go through the loading screen method");  				activeVesselLoadUpdates = 0;  				FlightGlobals.ForceSetActiveVessel (newActiveVessel);  				newActiveVessel = null;  			}  			if (!newActiveVessel.loaded) {  				activeVesselLoadUpdates++;  				return;  			}  			//Wait 10 updates maybe?  			if (activeVesselLoadUpdates < 10) {  				activeVesselLoadUpdates++;  				return;  			}  			activeVesselLoadUpdates = 0;  			DarkLog.Debug ("Switching to active vessel!");  			FlightGlobals.ForceSetActiveVessel (newActiveVessel);  			newActiveVessel = null;  			return;  		} else {  			DarkLog.Debug ("switchActiveVesselOnNextUpdate Vessel failed to spawn into game!");  			ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER);  			HighLogic.LoadScene (GameScenes.TRACKSTATION);  		}  	}  	//Kill any queued vessels  	foreach (Vessel dyingVessel in delayKillVessels.ToArray ()) {  		if (FlightGlobals.fetch.vessels.Contains (dyingVessel) && dyingVessel.state != Vessel.State.DEAD) {  			DarkLog.Debug ("Delay killing " + dyingVessel.id.ToString ());  			KillVessel (dyingVessel);  		} else {  			delayKillVessels.Remove (dyingVessel);  		}  	}  	if (fromDockedVesselID != Guid.Empty || toDockedVesselID != Guid.Empty) {  		HandleDocking ();  	}  	//Process new messages  	lock (updateQueueLock) {  		ProcessNewVesselMessages ();  	}  	//Update the screen spectate message.  	UpdateOnScreenSpectateMessage ();  	//Lock and unlock spectate state  	UpdateSpectateLock ();  	//Release old update locks  	ReleaseOldUpdateLocks ();  	//Tell other players we have taken a vessel  	UpdateActiveVesselStatus ();  	//Check for vessel changes  	CheckVesselHasChanged ();  	//Send updates of needed vessels  	SendVesselUpdates ();  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (workerEnabled) {  	//Switch to a new active vessel if needed.  	if (newActiveVessel != null) {  		if (FlightGlobals.fetch.vessels.Contains (newActiveVessel)) {  			//Hold unpack so we don't collide with the old copy  			try {  				OrbitPhysicsManager.HoldVesselUnpack (2);  			} catch {  			}  			//If the vessel failed to load in a reasonable time' go through the loading screen  			if (activeVesselLoadUpdates > 100) {  				DarkLog.Debug ("Active vessel must not be within load distance' go through the loading screen method");  				activeVesselLoadUpdates = 0;  				FlightGlobals.ForceSetActiveVessel (newActiveVessel);  				newActiveVessel = null;  			}  			if (!newActiveVessel.loaded) {  				activeVesselLoadUpdates++;  				return;  			}  			//Wait 10 updates maybe?  			if (activeVesselLoadUpdates < 10) {  				activeVesselLoadUpdates++;  				return;  			}  			activeVesselLoadUpdates = 0;  			DarkLog.Debug ("Switching to active vessel!");  			FlightGlobals.ForceSetActiveVessel (newActiveVessel);  			newActiveVessel = null;  			return;  		} else {  			DarkLog.Debug ("switchActiveVesselOnNextUpdate Vessel failed to spawn into game!");  			ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER);  			HighLogic.LoadScene (GameScenes.TRACKSTATION);  		}  	}  	//Kill any queued vessels  	foreach (Vessel dyingVessel in delayKillVessels.ToArray ()) {  		if (FlightGlobals.fetch.vessels.Contains (dyingVessel) && dyingVessel.state != Vessel.State.DEAD) {  			DarkLog.Debug ("Delay killing " + dyingVessel.id.ToString ());  			KillVessel (dyingVessel);  		} else {  			delayKillVessels.Remove (dyingVessel);  		}  	}  	if (fromDockedVesselID != Guid.Empty || toDockedVesselID != Guid.Empty) {  		HandleDocking ();  	}  	//Process new messages  	lock (updateQueueLock) {  		ProcessNewVesselMessages ();  	}  	//Update the screen spectate message.  	UpdateOnScreenSpectateMessage ();  	//Lock and unlock spectate state  	UpdateSpectateLock ();  	//Release old update locks  	ReleaseOldUpdateLocks ();  	//Tell other players we have taken a vessel  	UpdateActiveVesselStatus ();  	//Check for vessel changes  	CheckVesselHasChanged ();  	//Send updates of needed vessels  	SendVesselUpdates ();  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (newActiveVessel != null) {  	if (FlightGlobals.fetch.vessels.Contains (newActiveVessel)) {  		//Hold unpack so we don't collide with the old copy  		try {  			OrbitPhysicsManager.HoldVesselUnpack (2);  		} catch {  		}  		//If the vessel failed to load in a reasonable time' go through the loading screen  		if (activeVesselLoadUpdates > 100) {  			DarkLog.Debug ("Active vessel must not be within load distance' go through the loading screen method");  			activeVesselLoadUpdates = 0;  			FlightGlobals.ForceSetActiveVessel (newActiveVessel);  			newActiveVessel = null;  		}  		if (!newActiveVessel.loaded) {  			activeVesselLoadUpdates++;  			return;  		}  		//Wait 10 updates maybe?  		if (activeVesselLoadUpdates < 10) {  			activeVesselLoadUpdates++;  			return;  		}  		activeVesselLoadUpdates = 0;  		DarkLog.Debug ("Switching to active vessel!");  		FlightGlobals.ForceSetActiveVessel (newActiveVessel);  		newActiveVessel = null;  		return;  	} else {  		DarkLog.Debug ("switchActiveVesselOnNextUpdate Vessel failed to spawn into game!");  		ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER);  		HighLogic.LoadScene (GameScenes.TRACKSTATION);  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (newActiveVessel != null) {  	if (FlightGlobals.fetch.vessels.Contains (newActiveVessel)) {  		//Hold unpack so we don't collide with the old copy  		try {  			OrbitPhysicsManager.HoldVesselUnpack (2);  		} catch {  		}  		//If the vessel failed to load in a reasonable time' go through the loading screen  		if (activeVesselLoadUpdates > 100) {  			DarkLog.Debug ("Active vessel must not be within load distance' go through the loading screen method");  			activeVesselLoadUpdates = 0;  			FlightGlobals.ForceSetActiveVessel (newActiveVessel);  			newActiveVessel = null;  		}  		if (!newActiveVessel.loaded) {  			activeVesselLoadUpdates++;  			return;  		}  		//Wait 10 updates maybe?  		if (activeVesselLoadUpdates < 10) {  			activeVesselLoadUpdates++;  			return;  		}  		activeVesselLoadUpdates = 0;  		DarkLog.Debug ("Switching to active vessel!");  		FlightGlobals.ForceSetActiveVessel (newActiveVessel);  		newActiveVessel = null;  		return;  	} else {  		DarkLog.Debug ("switchActiveVesselOnNextUpdate Vessel failed to spawn into game!");  		ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER);  		HighLogic.LoadScene (GameScenes.TRACKSTATION);  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (newActiveVessel != null) {  	if (FlightGlobals.fetch.vessels.Contains (newActiveVessel)) {  		//Hold unpack so we don't collide with the old copy  		try {  			OrbitPhysicsManager.HoldVesselUnpack (2);  		} catch {  		}  		//If the vessel failed to load in a reasonable time' go through the loading screen  		if (activeVesselLoadUpdates > 100) {  			DarkLog.Debug ("Active vessel must not be within load distance' go through the loading screen method");  			activeVesselLoadUpdates = 0;  			FlightGlobals.ForceSetActiveVessel (newActiveVessel);  			newActiveVessel = null;  		}  		if (!newActiveVessel.loaded) {  			activeVesselLoadUpdates++;  			return;  		}  		//Wait 10 updates maybe?  		if (activeVesselLoadUpdates < 10) {  			activeVesselLoadUpdates++;  			return;  		}  		activeVesselLoadUpdates = 0;  		DarkLog.Debug ("Switching to active vessel!");  		FlightGlobals.ForceSetActiveVessel (newActiveVessel);  		newActiveVessel = null;  		return;  	} else {  		DarkLog.Debug ("switchActiveVesselOnNextUpdate Vessel failed to spawn into game!");  		ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER);  		HighLogic.LoadScene (GameScenes.TRACKSTATION);  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (newActiveVessel != null) {  	if (FlightGlobals.fetch.vessels.Contains (newActiveVessel)) {  		//Hold unpack so we don't collide with the old copy  		try {  			OrbitPhysicsManager.HoldVesselUnpack (2);  		} catch {  		}  		//If the vessel failed to load in a reasonable time' go through the loading screen  		if (activeVesselLoadUpdates > 100) {  			DarkLog.Debug ("Active vessel must not be within load distance' go through the loading screen method");  			activeVesselLoadUpdates = 0;  			FlightGlobals.ForceSetActiveVessel (newActiveVessel);  			newActiveVessel = null;  		}  		if (!newActiveVessel.loaded) {  			activeVesselLoadUpdates++;  			return;  		}  		//Wait 10 updates maybe?  		if (activeVesselLoadUpdates < 10) {  			activeVesselLoadUpdates++;  			return;  		}  		activeVesselLoadUpdates = 0;  		DarkLog.Debug ("Switching to active vessel!");  		FlightGlobals.ForceSetActiveVessel (newActiveVessel);  		newActiveVessel = null;  		return;  	} else {  		DarkLog.Debug ("switchActiveVesselOnNextUpdate Vessel failed to spawn into game!");  		ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER);  		HighLogic.LoadScene (GameScenes.TRACKSTATION);  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (FlightGlobals.fetch.vessels.Contains (newActiveVessel)) {  	//Hold unpack so we don't collide with the old copy  	try {  		OrbitPhysicsManager.HoldVesselUnpack (2);  	} catch {  	}  	//If the vessel failed to load in a reasonable time' go through the loading screen  	if (activeVesselLoadUpdates > 100) {  		DarkLog.Debug ("Active vessel must not be within load distance' go through the loading screen method");  		activeVesselLoadUpdates = 0;  		FlightGlobals.ForceSetActiveVessel (newActiveVessel);  		newActiveVessel = null;  	}  	if (!newActiveVessel.loaded) {  		activeVesselLoadUpdates++;  		return;  	}  	//Wait 10 updates maybe?  	if (activeVesselLoadUpdates < 10) {  		activeVesselLoadUpdates++;  		return;  	}  	activeVesselLoadUpdates = 0;  	DarkLog.Debug ("Switching to active vessel!");  	FlightGlobals.ForceSetActiveVessel (newActiveVessel);  	newActiveVessel = null;  	return;  } else {  	DarkLog.Debug ("switchActiveVesselOnNextUpdate Vessel failed to spawn into game!");  	ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER);  	HighLogic.LoadScene (GameScenes.TRACKSTATION);  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (FlightGlobals.fetch.vessels.Contains (newActiveVessel)) {  	//Hold unpack so we don't collide with the old copy  	try {  		OrbitPhysicsManager.HoldVesselUnpack (2);  	} catch {  	}  	//If the vessel failed to load in a reasonable time' go through the loading screen  	if (activeVesselLoadUpdates > 100) {  		DarkLog.Debug ("Active vessel must not be within load distance' go through the loading screen method");  		activeVesselLoadUpdates = 0;  		FlightGlobals.ForceSetActiveVessel (newActiveVessel);  		newActiveVessel = null;  	}  	if (!newActiveVessel.loaded) {  		activeVesselLoadUpdates++;  		return;  	}  	//Wait 10 updates maybe?  	if (activeVesselLoadUpdates < 10) {  		activeVesselLoadUpdates++;  		return;  	}  	activeVesselLoadUpdates = 0;  	DarkLog.Debug ("Switching to active vessel!");  	FlightGlobals.ForceSetActiveVessel (newActiveVessel);  	newActiveVessel = null;  	return;  } else {  	DarkLog.Debug ("switchActiveVesselOnNextUpdate Vessel failed to spawn into game!");  	ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER);  	HighLogic.LoadScene (GameScenes.TRACKSTATION);  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (FlightGlobals.fetch.vessels.Contains (newActiveVessel)) {  	//Hold unpack so we don't collide with the old copy  	try {  		OrbitPhysicsManager.HoldVesselUnpack (2);  	} catch {  	}  	//If the vessel failed to load in a reasonable time' go through the loading screen  	if (activeVesselLoadUpdates > 100) {  		DarkLog.Debug ("Active vessel must not be within load distance' go through the loading screen method");  		activeVesselLoadUpdates = 0;  		FlightGlobals.ForceSetActiveVessel (newActiveVessel);  		newActiveVessel = null;  	}  	if (!newActiveVessel.loaded) {  		activeVesselLoadUpdates++;  		return;  	}  	//Wait 10 updates maybe?  	if (activeVesselLoadUpdates < 10) {  		activeVesselLoadUpdates++;  		return;  	}  	activeVesselLoadUpdates = 0;  	DarkLog.Debug ("Switching to active vessel!");  	FlightGlobals.ForceSetActiveVessel (newActiveVessel);  	newActiveVessel = null;  	return;  } else {  	DarkLog.Debug ("switchActiveVesselOnNextUpdate Vessel failed to spawn into game!");  	ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER);  	HighLogic.LoadScene (GameScenes.TRACKSTATION);  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (FlightGlobals.fetch.vessels.Contains (newActiveVessel)) {  	//Hold unpack so we don't collide with the old copy  	try {  		OrbitPhysicsManager.HoldVesselUnpack (2);  	} catch {  	}  	//If the vessel failed to load in a reasonable time' go through the loading screen  	if (activeVesselLoadUpdates > 100) {  		DarkLog.Debug ("Active vessel must not be within load distance' go through the loading screen method");  		activeVesselLoadUpdates = 0;  		FlightGlobals.ForceSetActiveVessel (newActiveVessel);  		newActiveVessel = null;  	}  	if (!newActiveVessel.loaded) {  		activeVesselLoadUpdates++;  		return;  	}  	//Wait 10 updates maybe?  	if (activeVesselLoadUpdates < 10) {  		activeVesselLoadUpdates++;  		return;  	}  	activeVesselLoadUpdates = 0;  	DarkLog.Debug ("Switching to active vessel!");  	FlightGlobals.ForceSetActiveVessel (newActiveVessel);  	newActiveVessel = null;  	return;  } else {  	DarkLog.Debug ("switchActiveVesselOnNextUpdate Vessel failed to spawn into game!");  	ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER);  	HighLogic.LoadScene (GameScenes.TRACKSTATION);  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: try {  	OrbitPhysicsManager.HoldVesselUnpack (2);  } catch {  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: OrbitPhysicsManager.HoldVesselUnpack (2);  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (activeVesselLoadUpdates > 100) {  	DarkLog.Debug ("Active vessel must not be within load distance' go through the loading screen method");  	activeVesselLoadUpdates = 0;  	FlightGlobals.ForceSetActiveVessel (newActiveVessel);  	newActiveVessel = null;  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: if (activeVesselLoadUpdates < 10) {  	activeVesselLoadUpdates++;  	return;  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,FixedUpdate,The following statement contains a magic number: ScreenMessages.PostScreenMessage ("Active vessel update failed to load into the game!"' 5' ScreenMessageStyle.UPPER_CENTER);  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The following statement contains a magic number: if ((Client.realtimeSinceStartup - lastSpectateMessageUpdate) > UPDATE_SCREEN_MESSAGE_INTERVAL) {  	lastSpectateMessageUpdate = Client.realtimeSinceStartup;  	if (isSpectating) {  		if (spectateMessage != null) {  			spectateMessage.duration = 0f;  		}  		switch (spectateType) {  		case 1:  			spectateMessage = ScreenMessages.PostScreenMessage ("This vessel is controlled by another player."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  			break;  		case 2:  			spectateMessage = ScreenMessages.PostScreenMessage ("This vessel has been changed in the future."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  			break;  		}  	} else {  		if (spectateMessage != null) {  			spectateMessage.duration = 0f;  			spectateMessage = null;  		}  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The following statement contains a magic number: if ((Client.realtimeSinceStartup - lastSpectateMessageUpdate) > UPDATE_SCREEN_MESSAGE_INTERVAL) {  	lastSpectateMessageUpdate = Client.realtimeSinceStartup;  	if (isSpectating) {  		if (spectateMessage != null) {  			spectateMessage.duration = 0f;  		}  		switch (spectateType) {  		case 1:  			spectateMessage = ScreenMessages.PostScreenMessage ("This vessel is controlled by another player."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  			break;  		case 2:  			spectateMessage = ScreenMessages.PostScreenMessage ("This vessel has been changed in the future."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  			break;  		}  	} else {  		if (spectateMessage != null) {  			spectateMessage.duration = 0f;  			spectateMessage = null;  		}  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The following statement contains a magic number: if ((Client.realtimeSinceStartup - lastSpectateMessageUpdate) > UPDATE_SCREEN_MESSAGE_INTERVAL) {  	lastSpectateMessageUpdate = Client.realtimeSinceStartup;  	if (isSpectating) {  		if (spectateMessage != null) {  			spectateMessage.duration = 0f;  		}  		switch (spectateType) {  		case 1:  			spectateMessage = ScreenMessages.PostScreenMessage ("This vessel is controlled by another player."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  			break;  		case 2:  			spectateMessage = ScreenMessages.PostScreenMessage ("This vessel has been changed in the future."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  			break;  		}  	} else {  		if (spectateMessage != null) {  			spectateMessage.duration = 0f;  			spectateMessage = null;  		}  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The following statement contains a magic number: if (isSpectating) {  	if (spectateMessage != null) {  		spectateMessage.duration = 0f;  	}  	switch (spectateType) {  	case 1:  		spectateMessage = ScreenMessages.PostScreenMessage ("This vessel is controlled by another player."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  		break;  	case 2:  		spectateMessage = ScreenMessages.PostScreenMessage ("This vessel has been changed in the future."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  		break;  	}  } else {  	if (spectateMessage != null) {  		spectateMessage.duration = 0f;  		spectateMessage = null;  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The following statement contains a magic number: if (isSpectating) {  	if (spectateMessage != null) {  		spectateMessage.duration = 0f;  	}  	switch (spectateType) {  	case 1:  		spectateMessage = ScreenMessages.PostScreenMessage ("This vessel is controlled by another player."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  		break;  	case 2:  		spectateMessage = ScreenMessages.PostScreenMessage ("This vessel has been changed in the future."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  		break;  	}  } else {  	if (spectateMessage != null) {  		spectateMessage.duration = 0f;  		spectateMessage = null;  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The following statement contains a magic number: if (isSpectating) {  	if (spectateMessage != null) {  		spectateMessage.duration = 0f;  	}  	switch (spectateType) {  	case 1:  		spectateMessage = ScreenMessages.PostScreenMessage ("This vessel is controlled by another player."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  		break;  	case 2:  		spectateMessage = ScreenMessages.PostScreenMessage ("This vessel has been changed in the future."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  		break;  	}  } else {  	if (spectateMessage != null) {  		spectateMessage.duration = 0f;  		spectateMessage = null;  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The following statement contains a magic number: switch (spectateType) {  case 1:  	spectateMessage = ScreenMessages.PostScreenMessage ("This vessel is controlled by another player."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  	break;  case 2:  	spectateMessage = ScreenMessages.PostScreenMessage ("This vessel has been changed in the future."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  	break;  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The following statement contains a magic number: switch (spectateType) {  case 1:  	spectateMessage = ScreenMessages.PostScreenMessage ("This vessel is controlled by another player."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  	break;  case 2:  	spectateMessage = ScreenMessages.PostScreenMessage ("This vessel has been changed in the future."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  	break;  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The following statement contains a magic number: switch (spectateType) {  case 1:  	spectateMessage = ScreenMessages.PostScreenMessage ("This vessel is controlled by another player."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  	break;  case 2:  	spectateMessage = ScreenMessages.PostScreenMessage ("This vessel has been changed in the future."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  	break;  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The following statement contains a magic number: spectateMessage = ScreenMessages.PostScreenMessage ("This vessel is controlled by another player."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The following statement contains a magic number: spectateMessage = ScreenMessages.PostScreenMessage ("This vessel has been changed in the future."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateActiveVesselStatus,The following statement contains a magic number: if (HighLogic.LoadedScene == GameScenes.FLIGHT && isActiveVesselOk) {  	if (isSpectating && spectateType == 2) {  		if (!lockSystem.LockExists ("control-" + FlightGlobals.fetch.activeVessel.id.ToString ())) {  			lockSystem.ThrottledAcquireLock ("control-" + FlightGlobals.fetch.activeVessel.id.ToString ());  		}  	}  	if (!isSpectating) {  		//When we change vessel' send the previous flown vessel as soon as possible.  		if (lastVesselID != FlightGlobals.fetch.activeVessel.id) {  			if (lastVesselID != Guid.Empty) {  				DarkLog.Debug ("Resetting last send time for " + lastVesselID);  				serverVesselsProtoUpdate [lastVesselID] = 0f;  				lockSystem.ReleasePlayerLocksWithPrefix (dmpSettings.playerName' "control-");  			}  			//Reset the send time of the vessel we just switched to  			serverVesselsProtoUpdate [FlightGlobals.fetch.activeVessel.id] = 0f;  			//Nobody else is flying the vessel - let's take it  			playerStatusWorker.myPlayerStatus.vesselText = FlightGlobals.fetch.activeVessel.vesselName;  			lastVesselID = FlightGlobals.fetch.activeVessel.id;  		}  		if (!lockSystem.LockExists ("control-" + FlightGlobals.fetch.activeVessel.id.ToString ())) {  			lockSystem.ThrottledAcquireLock ("control-" + FlightGlobals.fetch.activeVessel.id.ToString ());  		}  	} else {  		if (lastVesselID != Guid.Empty) {  			lockSystem.ReleasePlayerLocksWithPrefix (dmpSettings.playerName' "control-");  			lastVesselID = Guid.Empty;  			playerStatusWorker.myPlayerStatus.vesselText = "";  		}  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateActiveVesselStatus,The following statement contains a magic number: if (isSpectating && spectateType == 2) {  	if (!lockSystem.LockExists ("control-" + FlightGlobals.fetch.activeVessel.id.ToString ())) {  		lockSystem.ThrottledAcquireLock ("control-" + FlightGlobals.fetch.activeVessel.id.ToString ());  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadKerbalsIntoGame,The following statement contains a magic number: if (serverKerbals.Count < 20) {  	generateKerbals = 20 - serverKerbals.Count;  	DarkLog.Debug ("Generating " + generateKerbals + " new kerbals");  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadKerbalsIntoGame,The following statement contains a magic number: if (serverKerbals.Count < 20) {  	generateKerbals = 20 - serverKerbals.Count;  	DarkLog.Debug ("Generating " + generateKerbals + " new kerbals");  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadKerbalsIntoGame,The following statement contains a magic number: generateKerbals = 20 - serverKerbals.Count;  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The following statement contains a magic number: for (int vesselID = FlightGlobals.fetch.vessels.Count - 1; vesselID >= 0; vesselID--) {  	Vessel oldVessel = FlightGlobals.fetch.vessels [vesselID];  	if (oldVessel.id == currentProto.vesselID) {  		//Don't replace the vessel if it's unpacked' not landed' close to the ground' and has the same amount of parts.  		double hft = oldVessel.GetHeightFromTerrain ();  		if (oldVessel.loaded && !oldVessel.packed && !oldVessel.Landed && (hft != -1) && (hft < 1000) && (currentProto.protoPartSnapshots.Count == oldVessel.parts.Count)) {  			DarkLog.Debug ("Skipped loading protovessel " + currentProto.vesselID.ToString () + " because it is flying close to the ground and may get destroyed");  			return;  		}  		//Don't kill the active vessel - Kill it after we switch.  		//Killing the active vessel causes all sorts of crazy problems.  		if (wasActive) {  			delayKillVessels.Add (oldVessel);  		} else {  			/*                             Sorry guys - KSP's protovessel positioning is not as accurate as it could be.                              The loading vessel needs to come off rails in order for the error to be corrected'                             but taking it off rails will allow the vessel to collide with others while it's in the incorrect spot for that fixed update.                                                      If the vessel is the selected target' close (unpacked)' and has the same number of parts' we'll skip the protovessel load.                         */if (wasTarget && !oldVessel.LandedOrSplashed && oldVessel.loaded && !oldVessel.packed && (oldVessel.parts.Count == currentProto.protoPartSnapshots.Count)) {  				DarkLog.Debug ("Skipping loading protovessel " + currentProto.vesselID.ToString () + " because it is the selected target and may crash into us");  				return;  			}  			KillVessel (oldVessel);  		}  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The following statement contains a magic number: if (oldVessel.id == currentProto.vesselID) {  	//Don't replace the vessel if it's unpacked' not landed' close to the ground' and has the same amount of parts.  	double hft = oldVessel.GetHeightFromTerrain ();  	if (oldVessel.loaded && !oldVessel.packed && !oldVessel.Landed && (hft != -1) && (hft < 1000) && (currentProto.protoPartSnapshots.Count == oldVessel.parts.Count)) {  		DarkLog.Debug ("Skipped loading protovessel " + currentProto.vesselID.ToString () + " because it is flying close to the ground and may get destroyed");  		return;  	}  	//Don't kill the active vessel - Kill it after we switch.  	//Killing the active vessel causes all sorts of crazy problems.  	if (wasActive) {  		delayKillVessels.Add (oldVessel);  	} else {  		/*                             Sorry guys - KSP's protovessel positioning is not as accurate as it could be.                              The loading vessel needs to come off rails in order for the error to be corrected'                             but taking it off rails will allow the vessel to collide with others while it's in the incorrect spot for that fixed update.                                                      If the vessel is the selected target' close (unpacked)' and has the same number of parts' we'll skip the protovessel load.                         */if (wasTarget && !oldVessel.LandedOrSplashed && oldVessel.loaded && !oldVessel.packed && (oldVessel.parts.Count == currentProto.protoPartSnapshots.Count)) {  			DarkLog.Debug ("Skipping loading protovessel " + currentProto.vesselID.ToString () + " because it is the selected target and may crash into us");  			return;  		}  		KillVessel (oldVessel);  	}  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The following statement contains a magic number: if (oldVessel.loaded && !oldVessel.packed && !oldVessel.Landed && (hft != -1) && (hft < 1000) && (currentProto.protoPartSnapshots.Count == oldVessel.parts.Count)) {  	DarkLog.Debug ("Skipped loading protovessel " + currentProto.vesselID.ToString () + " because it is flying close to the ground and may get destroyed");  	return;  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The following statement contains a magic number: if (wasActive) {  	DarkLog.Debug ("ProtoVessel update for active vessel!");  	try {  		OrbitPhysicsManager.HoldVesselUnpack (5);  		FlightGlobals.fetch.activeVessel.GoOnRails ();  		//Put our vessel on rails so we don't collide with the new copy  	} catch {  		DarkLog.Debug ("WARNING: Something very bad happened trying to replace the vessel' skipping update!");  		return;  	}  	newActiveVessel = currentProto.vesselRef;  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The following statement contains a magic number: try {  	OrbitPhysicsManager.HoldVesselUnpack (5);  	FlightGlobals.fetch.activeVessel.GoOnRails ();  	//Put our vessel on rails so we don't collide with the new copy  } catch {  	DarkLog.Debug ("WARNING: Something very bad happened trying to replace the vessel' skipping update!");  	return;  }  
Magic Number,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,LoadVessel,The following statement contains a magic number: OrbitPhysicsManager.HoldVesselUnpack (5);  
Magic Number,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,StepClock,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight) {  	if (FlightGlobals.fetch.activeVessel == null || !FlightGlobals.ready) {  		DarkLog.Debug ("Skipping StepClock (active vessel is null or not ready)");  		return;  	}  	try {  		OrbitPhysicsManager.HoldVesselUnpack (5);  	} catch {  		DarkLog.Debug ("Failed to hold vessel unpack");  		return;  	}  	foreach (Vessel v in FlightGlobals.fetch.vessels) {  		if (!v.packed) {  			if (v != FlightGlobals.fetch.activeVessel) {  				try {  					v.GoOnRails ();  				} catch {  					DarkLog.Debug ("Error packing vessel " + v.id.ToString ());  				}  			}  			if (v == FlightGlobals.fetch.activeVessel) {  				if (SafeToStepClock (v' targetTick)) {  					try {  						v.GoOnRails ();  					} catch {  						DarkLog.Debug ("Error packing active vessel " + v.id.ToString ());  					}  				}  			}  		}  	}  }  
Magic Number,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,StepClock,The following statement contains a magic number: try {  	OrbitPhysicsManager.HoldVesselUnpack (5);  } catch {  	DarkLog.Debug ("Failed to hold vessel unpack");  	return;  }  
Magic Number,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,StepClock,The following statement contains a magic number: OrbitPhysicsManager.HoldVesselUnpack (5);  
Magic Number,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,SafeToStepClock,The following statement contains a magic number: switch (checkVessel.situation) {  case Vessel.Situations.LANDED:  case Vessel.Situations.PRELAUNCH:  case Vessel.Situations.SPLASHED:  	return (checkVessel.srf_velocity.magnitude < 2);  case Vessel.Situations.ORBITING:  case Vessel.Situations.ESCAPING:  	return true;  case Vessel.Situations.SUB_ORBITAL:  	double altitudeAtUT = checkVessel.orbit.getRelativePositionAtUT (targetTick).magnitude;  	return (altitudeAtUT > checkVessel.mainBody.Radius + 10000 && checkVessel.altitude > 10000);  default:  	return false;  }  
Magic Number,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,SafeToStepClock,The following statement contains a magic number: switch (checkVessel.situation) {  case Vessel.Situations.LANDED:  case Vessel.Situations.PRELAUNCH:  case Vessel.Situations.SPLASHED:  	return (checkVessel.srf_velocity.magnitude < 2);  case Vessel.Situations.ORBITING:  case Vessel.Situations.ESCAPING:  	return true;  case Vessel.Situations.SUB_ORBITAL:  	double altitudeAtUT = checkVessel.orbit.getRelativePositionAtUT (targetTick).magnitude;  	return (altitudeAtUT > checkVessel.mainBody.Radius + 10000 && checkVessel.altitude > 10000);  default:  	return false;  }  
Magic Number,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,SafeToStepClock,The following statement contains a magic number: switch (checkVessel.situation) {  case Vessel.Situations.LANDED:  case Vessel.Situations.PRELAUNCH:  case Vessel.Situations.SPLASHED:  	return (checkVessel.srf_velocity.magnitude < 2);  case Vessel.Situations.ORBITING:  case Vessel.Situations.ESCAPING:  	return true;  case Vessel.Situations.SUB_ORBITAL:  	double altitudeAtUT = checkVessel.orbit.getRelativePositionAtUT (targetTick).magnitude;  	return (altitudeAtUT > checkVessel.mainBody.Radius + 10000 && checkVessel.altitude > 10000);  default:  	return false;  }  
Magic Number,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,SafeToStepClock,The following statement contains a magic number: return (checkVessel.srf_velocity.magnitude < 2);  
Magic Number,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,SafeToStepClock,The following statement contains a magic number: return (altitudeAtUT > checkVessel.mainBody.Radius + 10000 && checkVessel.altitude > 10000);  
Magic Number,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,SafeToStepClock,The following statement contains a magic number: return (altitudeAtUT > checkVessel.mainBody.Radius + 10000 && checkVessel.altitude > 10000);  
Magic Number,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,SkewClock,The following statement contains a magic number: while (requestedRatesList.Count > 50) {  	requestedRatesList.RemoveAt (0);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SendThreadMain,The following statement contains a magic number: try {  	while (true) {  		CheckDisconnection ();  		SendHeartBeat ();  		bool sentMessage = SendOutgoingMessages ();  		if (!sentMessage) {  			sendEvent.WaitOne (100);  		}  	}  } catch (ThreadAbortException) {  	//Don't care  } catch (Exception e) {  	DarkLog.Debug ("Send thread error: " + e);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SendThreadMain,The following statement contains a magic number: while (true) {  	CheckDisconnection ();  	SendHeartBeat ();  	bool sentMessage = SendOutgoingMessages ();  	if (!sentMessage) {  		sendEvent.WaitOne (100);  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SendThreadMain,The following statement contains a magic number: if (!sentMessage) {  	sendEvent.WaitOne (100);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SendThreadMain,The following statement contains a magic number: sendEvent.WaitOne (100);  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,ConnectToServerMain,The following statement contains a magic number: while (state == ClientState.CONNECTING) {  	Thread.Sleep (500);  	CheckInitialDisconnection ();  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,ConnectToServerMain,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,CheckInitialDisconnection,The following statement contains a magic number: if (state == ClientState.CONNECTING) {  	if ((Common.GetCurrentUnixTime () - lastReceiveTime) > (Common.INITIAL_CONNECTION_TIMEOUT / 1000)) {  		Disconnect ("Failed to connect!");  		connectionWindow.status = "Failed to connect - no reply";  		if (connectThread != null) {  			try {  				lock (parallelConnectThreads) {  					foreach (Thread parallelConnectThread in parallelConnectThreads) {  						parallelConnectThread.Abort ();  					}  					parallelConnectThreads.Clear ();  					connectingThreads = 0;  				}  			} catch {  			}  		}  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,CheckInitialDisconnection,The following statement contains a magic number: if ((Common.GetCurrentUnixTime () - lastReceiveTime) > (Common.INITIAL_CONNECTION_TIMEOUT / 1000)) {  	Disconnect ("Failed to connect!");  	connectionWindow.status = "Failed to connect - no reply";  	if (connectThread != null) {  		try {  			lock (parallelConnectThreads) {  				foreach (Thread parallelConnectThread in parallelConnectThreads) {  					parallelConnectThread.Abort ();  				}  				parallelConnectThreads.Clear ();  				connectingThreads = 0;  			}  		} catch {  		}  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,CheckDisconnection,The following statement contains a magic number: if (state >= ClientState.CONNECTED) {  	if ((Common.GetCurrentUnixTime () - lastReceiveTime) > (Common.CONNECTION_TIMEOUT / 1000)) {  		Disconnect ("Connection timeout");  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,CheckDisconnection,The following statement contains a magic number: if ((Common.GetCurrentUnixTime () - lastReceiveTime) > (Common.CONNECTION_TIMEOUT / 1000)) {  	Disconnect ("Connection timeout");  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: receiveMessage.data = new byte[8];  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: try {  	while (true) {  		int bytesRead = clientConnection.GetStream ().Read (receiveMessage.data' receiveMessage.data.Length - receiveMessageBytesLeft' receiveMessageBytesLeft);  		bytesReceived += bytesRead;  		receiveMessageBytesLeft -= bytesRead;  		if (bytesRead > 0) {  			lastReceiveTime = Common.GetCurrentUnixTime ();  		} else {  			Thread.Sleep (10);  		}  		if (receiveMessageBytesLeft == 0) {  			//We either have the header or the message data' let's do something  			if (!isReceivingMessage) {  				//We have the header  				using (MessageReader mr = new MessageReader (receiveMessage.data)) {  					int messageType = mr.Read<int> ();  					int messageLength = mr.Read<int> ();  					//This is from the little endian -> big endian format change.  					//The handshake challange type is 1' and the payload length is always 1032 bytes.  					//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  					if (messageType == 16777216 && messageLength == 134479872) {  						Disconnect ("Disconnected from pre-v0.2 DMP server");  						return;  					}  					if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  						//Malformed message' most likely from a non DMP-server.  						Disconnect ("Disconnected from non-DMP server");  						//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  						return;  					}  					receiveMessage.type = (ServerMessageType)messageType;  					if (messageLength == 0) {  						receiveMessage.data = null;  						switch (receiveMessage.type) {  						case ServerMessageType.HEARTBEAT:  						case ServerMessageType.KERBAL_COMPLETE:  						case ServerMessageType.VESSEL_COMPLETE:  							HandleMessage (receiveMessage);  							break;  						default:  							break;  						}  						receiveMessage.type = 0;  						receiveMessage.data = new byte[8];  						receiveMessageBytesLeft = receiveMessage.data.Length;  					} else {  						if (messageLength < Common.MAX_MESSAGE_SIZE) {  							isReceivingMessage = true;  							receiveMessage.data = new byte[messageLength];  							receiveMessageBytesLeft = receiveMessage.data.Length;  						} else {  							//Malformed message' most likely from a non DMP-server.  							Disconnect ("Disconnected from non-DMP server");  							//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  							return;  						}  					}  				}  			} else {  				//We have the message data to a non-null message' handle it  				isReceivingMessage = false;  				HandleMessage (receiveMessage);  				receiveMessage.type = 0;  				receiveMessage.data = new byte[8];  				receiveMessageBytesLeft = receiveMessage.data.Length;  			}  		}  		if (state < ClientState.CONNECTED || state == ClientState.DISCONNECTING) {  			return;  		}  	}  } catch (Exception e) {  	HandleDisconnectException (e);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: try {  	while (true) {  		int bytesRead = clientConnection.GetStream ().Read (receiveMessage.data' receiveMessage.data.Length - receiveMessageBytesLeft' receiveMessageBytesLeft);  		bytesReceived += bytesRead;  		receiveMessageBytesLeft -= bytesRead;  		if (bytesRead > 0) {  			lastReceiveTime = Common.GetCurrentUnixTime ();  		} else {  			Thread.Sleep (10);  		}  		if (receiveMessageBytesLeft == 0) {  			//We either have the header or the message data' let's do something  			if (!isReceivingMessage) {  				//We have the header  				using (MessageReader mr = new MessageReader (receiveMessage.data)) {  					int messageType = mr.Read<int> ();  					int messageLength = mr.Read<int> ();  					//This is from the little endian -> big endian format change.  					//The handshake challange type is 1' and the payload length is always 1032 bytes.  					//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  					if (messageType == 16777216 && messageLength == 134479872) {  						Disconnect ("Disconnected from pre-v0.2 DMP server");  						return;  					}  					if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  						//Malformed message' most likely from a non DMP-server.  						Disconnect ("Disconnected from non-DMP server");  						//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  						return;  					}  					receiveMessage.type = (ServerMessageType)messageType;  					if (messageLength == 0) {  						receiveMessage.data = null;  						switch (receiveMessage.type) {  						case ServerMessageType.HEARTBEAT:  						case ServerMessageType.KERBAL_COMPLETE:  						case ServerMessageType.VESSEL_COMPLETE:  							HandleMessage (receiveMessage);  							break;  						default:  							break;  						}  						receiveMessage.type = 0;  						receiveMessage.data = new byte[8];  						receiveMessageBytesLeft = receiveMessage.data.Length;  					} else {  						if (messageLength < Common.MAX_MESSAGE_SIZE) {  							isReceivingMessage = true;  							receiveMessage.data = new byte[messageLength];  							receiveMessageBytesLeft = receiveMessage.data.Length;  						} else {  							//Malformed message' most likely from a non DMP-server.  							Disconnect ("Disconnected from non-DMP server");  							//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  							return;  						}  					}  				}  			} else {  				//We have the message data to a non-null message' handle it  				isReceivingMessage = false;  				HandleMessage (receiveMessage);  				receiveMessage.type = 0;  				receiveMessage.data = new byte[8];  				receiveMessageBytesLeft = receiveMessage.data.Length;  			}  		}  		if (state < ClientState.CONNECTED || state == ClientState.DISCONNECTING) {  			return;  		}  	}  } catch (Exception e) {  	HandleDisconnectException (e);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: try {  	while (true) {  		int bytesRead = clientConnection.GetStream ().Read (receiveMessage.data' receiveMessage.data.Length - receiveMessageBytesLeft' receiveMessageBytesLeft);  		bytesReceived += bytesRead;  		receiveMessageBytesLeft -= bytesRead;  		if (bytesRead > 0) {  			lastReceiveTime = Common.GetCurrentUnixTime ();  		} else {  			Thread.Sleep (10);  		}  		if (receiveMessageBytesLeft == 0) {  			//We either have the header or the message data' let's do something  			if (!isReceivingMessage) {  				//We have the header  				using (MessageReader mr = new MessageReader (receiveMessage.data)) {  					int messageType = mr.Read<int> ();  					int messageLength = mr.Read<int> ();  					//This is from the little endian -> big endian format change.  					//The handshake challange type is 1' and the payload length is always 1032 bytes.  					//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  					if (messageType == 16777216 && messageLength == 134479872) {  						Disconnect ("Disconnected from pre-v0.2 DMP server");  						return;  					}  					if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  						//Malformed message' most likely from a non DMP-server.  						Disconnect ("Disconnected from non-DMP server");  						//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  						return;  					}  					receiveMessage.type = (ServerMessageType)messageType;  					if (messageLength == 0) {  						receiveMessage.data = null;  						switch (receiveMessage.type) {  						case ServerMessageType.HEARTBEAT:  						case ServerMessageType.KERBAL_COMPLETE:  						case ServerMessageType.VESSEL_COMPLETE:  							HandleMessage (receiveMessage);  							break;  						default:  							break;  						}  						receiveMessage.type = 0;  						receiveMessage.data = new byte[8];  						receiveMessageBytesLeft = receiveMessage.data.Length;  					} else {  						if (messageLength < Common.MAX_MESSAGE_SIZE) {  							isReceivingMessage = true;  							receiveMessage.data = new byte[messageLength];  							receiveMessageBytesLeft = receiveMessage.data.Length;  						} else {  							//Malformed message' most likely from a non DMP-server.  							Disconnect ("Disconnected from non-DMP server");  							//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  							return;  						}  					}  				}  			} else {  				//We have the message data to a non-null message' handle it  				isReceivingMessage = false;  				HandleMessage (receiveMessage);  				receiveMessage.type = 0;  				receiveMessage.data = new byte[8];  				receiveMessageBytesLeft = receiveMessage.data.Length;  			}  		}  		if (state < ClientState.CONNECTED || state == ClientState.DISCONNECTING) {  			return;  		}  	}  } catch (Exception e) {  	HandleDisconnectException (e);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: try {  	while (true) {  		int bytesRead = clientConnection.GetStream ().Read (receiveMessage.data' receiveMessage.data.Length - receiveMessageBytesLeft' receiveMessageBytesLeft);  		bytesReceived += bytesRead;  		receiveMessageBytesLeft -= bytesRead;  		if (bytesRead > 0) {  			lastReceiveTime = Common.GetCurrentUnixTime ();  		} else {  			Thread.Sleep (10);  		}  		if (receiveMessageBytesLeft == 0) {  			//We either have the header or the message data' let's do something  			if (!isReceivingMessage) {  				//We have the header  				using (MessageReader mr = new MessageReader (receiveMessage.data)) {  					int messageType = mr.Read<int> ();  					int messageLength = mr.Read<int> ();  					//This is from the little endian -> big endian format change.  					//The handshake challange type is 1' and the payload length is always 1032 bytes.  					//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  					if (messageType == 16777216 && messageLength == 134479872) {  						Disconnect ("Disconnected from pre-v0.2 DMP server");  						return;  					}  					if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  						//Malformed message' most likely from a non DMP-server.  						Disconnect ("Disconnected from non-DMP server");  						//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  						return;  					}  					receiveMessage.type = (ServerMessageType)messageType;  					if (messageLength == 0) {  						receiveMessage.data = null;  						switch (receiveMessage.type) {  						case ServerMessageType.HEARTBEAT:  						case ServerMessageType.KERBAL_COMPLETE:  						case ServerMessageType.VESSEL_COMPLETE:  							HandleMessage (receiveMessage);  							break;  						default:  							break;  						}  						receiveMessage.type = 0;  						receiveMessage.data = new byte[8];  						receiveMessageBytesLeft = receiveMessage.data.Length;  					} else {  						if (messageLength < Common.MAX_MESSAGE_SIZE) {  							isReceivingMessage = true;  							receiveMessage.data = new byte[messageLength];  							receiveMessageBytesLeft = receiveMessage.data.Length;  						} else {  							//Malformed message' most likely from a non DMP-server.  							Disconnect ("Disconnected from non-DMP server");  							//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  							return;  						}  					}  				}  			} else {  				//We have the message data to a non-null message' handle it  				isReceivingMessage = false;  				HandleMessage (receiveMessage);  				receiveMessage.type = 0;  				receiveMessage.data = new byte[8];  				receiveMessageBytesLeft = receiveMessage.data.Length;  			}  		}  		if (state < ClientState.CONNECTED || state == ClientState.DISCONNECTING) {  			return;  		}  	}  } catch (Exception e) {  	HandleDisconnectException (e);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: try {  	while (true) {  		int bytesRead = clientConnection.GetStream ().Read (receiveMessage.data' receiveMessage.data.Length - receiveMessageBytesLeft' receiveMessageBytesLeft);  		bytesReceived += bytesRead;  		receiveMessageBytesLeft -= bytesRead;  		if (bytesRead > 0) {  			lastReceiveTime = Common.GetCurrentUnixTime ();  		} else {  			Thread.Sleep (10);  		}  		if (receiveMessageBytesLeft == 0) {  			//We either have the header or the message data' let's do something  			if (!isReceivingMessage) {  				//We have the header  				using (MessageReader mr = new MessageReader (receiveMessage.data)) {  					int messageType = mr.Read<int> ();  					int messageLength = mr.Read<int> ();  					//This is from the little endian -> big endian format change.  					//The handshake challange type is 1' and the payload length is always 1032 bytes.  					//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  					if (messageType == 16777216 && messageLength == 134479872) {  						Disconnect ("Disconnected from pre-v0.2 DMP server");  						return;  					}  					if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  						//Malformed message' most likely from a non DMP-server.  						Disconnect ("Disconnected from non-DMP server");  						//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  						return;  					}  					receiveMessage.type = (ServerMessageType)messageType;  					if (messageLength == 0) {  						receiveMessage.data = null;  						switch (receiveMessage.type) {  						case ServerMessageType.HEARTBEAT:  						case ServerMessageType.KERBAL_COMPLETE:  						case ServerMessageType.VESSEL_COMPLETE:  							HandleMessage (receiveMessage);  							break;  						default:  							break;  						}  						receiveMessage.type = 0;  						receiveMessage.data = new byte[8];  						receiveMessageBytesLeft = receiveMessage.data.Length;  					} else {  						if (messageLength < Common.MAX_MESSAGE_SIZE) {  							isReceivingMessage = true;  							receiveMessage.data = new byte[messageLength];  							receiveMessageBytesLeft = receiveMessage.data.Length;  						} else {  							//Malformed message' most likely from a non DMP-server.  							Disconnect ("Disconnected from non-DMP server");  							//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  							return;  						}  					}  				}  			} else {  				//We have the message data to a non-null message' handle it  				isReceivingMessage = false;  				HandleMessage (receiveMessage);  				receiveMessage.type = 0;  				receiveMessage.data = new byte[8];  				receiveMessageBytesLeft = receiveMessage.data.Length;  			}  		}  		if (state < ClientState.CONNECTED || state == ClientState.DISCONNECTING) {  			return;  		}  	}  } catch (Exception e) {  	HandleDisconnectException (e);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: while (true) {  	int bytesRead = clientConnection.GetStream ().Read (receiveMessage.data' receiveMessage.data.Length - receiveMessageBytesLeft' receiveMessageBytesLeft);  	bytesReceived += bytesRead;  	receiveMessageBytesLeft -= bytesRead;  	if (bytesRead > 0) {  		lastReceiveTime = Common.GetCurrentUnixTime ();  	} else {  		Thread.Sleep (10);  	}  	if (receiveMessageBytesLeft == 0) {  		//We either have the header or the message data' let's do something  		if (!isReceivingMessage) {  			//We have the header  			using (MessageReader mr = new MessageReader (receiveMessage.data)) {  				int messageType = mr.Read<int> ();  				int messageLength = mr.Read<int> ();  				//This is from the little endian -> big endian format change.  				//The handshake challange type is 1' and the payload length is always 1032 bytes.  				//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  				if (messageType == 16777216 && messageLength == 134479872) {  					Disconnect ("Disconnected from pre-v0.2 DMP server");  					return;  				}  				if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  					//Malformed message' most likely from a non DMP-server.  					Disconnect ("Disconnected from non-DMP server");  					//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  					return;  				}  				receiveMessage.type = (ServerMessageType)messageType;  				if (messageLength == 0) {  					receiveMessage.data = null;  					switch (receiveMessage.type) {  					case ServerMessageType.HEARTBEAT:  					case ServerMessageType.KERBAL_COMPLETE:  					case ServerMessageType.VESSEL_COMPLETE:  						HandleMessage (receiveMessage);  						break;  					default:  						break;  					}  					receiveMessage.type = 0;  					receiveMessage.data = new byte[8];  					receiveMessageBytesLeft = receiveMessage.data.Length;  				} else {  					if (messageLength < Common.MAX_MESSAGE_SIZE) {  						isReceivingMessage = true;  						receiveMessage.data = new byte[messageLength];  						receiveMessageBytesLeft = receiveMessage.data.Length;  					} else {  						//Malformed message' most likely from a non DMP-server.  						Disconnect ("Disconnected from non-DMP server");  						//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  						return;  					}  				}  			}  		} else {  			//We have the message data to a non-null message' handle it  			isReceivingMessage = false;  			HandleMessage (receiveMessage);  			receiveMessage.type = 0;  			receiveMessage.data = new byte[8];  			receiveMessageBytesLeft = receiveMessage.data.Length;  		}  	}  	if (state < ClientState.CONNECTED || state == ClientState.DISCONNECTING) {  		return;  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: while (true) {  	int bytesRead = clientConnection.GetStream ().Read (receiveMessage.data' receiveMessage.data.Length - receiveMessageBytesLeft' receiveMessageBytesLeft);  	bytesReceived += bytesRead;  	receiveMessageBytesLeft -= bytesRead;  	if (bytesRead > 0) {  		lastReceiveTime = Common.GetCurrentUnixTime ();  	} else {  		Thread.Sleep (10);  	}  	if (receiveMessageBytesLeft == 0) {  		//We either have the header or the message data' let's do something  		if (!isReceivingMessage) {  			//We have the header  			using (MessageReader mr = new MessageReader (receiveMessage.data)) {  				int messageType = mr.Read<int> ();  				int messageLength = mr.Read<int> ();  				//This is from the little endian -> big endian format change.  				//The handshake challange type is 1' and the payload length is always 1032 bytes.  				//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  				if (messageType == 16777216 && messageLength == 134479872) {  					Disconnect ("Disconnected from pre-v0.2 DMP server");  					return;  				}  				if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  					//Malformed message' most likely from a non DMP-server.  					Disconnect ("Disconnected from non-DMP server");  					//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  					return;  				}  				receiveMessage.type = (ServerMessageType)messageType;  				if (messageLength == 0) {  					receiveMessage.data = null;  					switch (receiveMessage.type) {  					case ServerMessageType.HEARTBEAT:  					case ServerMessageType.KERBAL_COMPLETE:  					case ServerMessageType.VESSEL_COMPLETE:  						HandleMessage (receiveMessage);  						break;  					default:  						break;  					}  					receiveMessage.type = 0;  					receiveMessage.data = new byte[8];  					receiveMessageBytesLeft = receiveMessage.data.Length;  				} else {  					if (messageLength < Common.MAX_MESSAGE_SIZE) {  						isReceivingMessage = true;  						receiveMessage.data = new byte[messageLength];  						receiveMessageBytesLeft = receiveMessage.data.Length;  					} else {  						//Malformed message' most likely from a non DMP-server.  						Disconnect ("Disconnected from non-DMP server");  						//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  						return;  					}  				}  			}  		} else {  			//We have the message data to a non-null message' handle it  			isReceivingMessage = false;  			HandleMessage (receiveMessage);  			receiveMessage.type = 0;  			receiveMessage.data = new byte[8];  			receiveMessageBytesLeft = receiveMessage.data.Length;  		}  	}  	if (state < ClientState.CONNECTED || state == ClientState.DISCONNECTING) {  		return;  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: while (true) {  	int bytesRead = clientConnection.GetStream ().Read (receiveMessage.data' receiveMessage.data.Length - receiveMessageBytesLeft' receiveMessageBytesLeft);  	bytesReceived += bytesRead;  	receiveMessageBytesLeft -= bytesRead;  	if (bytesRead > 0) {  		lastReceiveTime = Common.GetCurrentUnixTime ();  	} else {  		Thread.Sleep (10);  	}  	if (receiveMessageBytesLeft == 0) {  		//We either have the header or the message data' let's do something  		if (!isReceivingMessage) {  			//We have the header  			using (MessageReader mr = new MessageReader (receiveMessage.data)) {  				int messageType = mr.Read<int> ();  				int messageLength = mr.Read<int> ();  				//This is from the little endian -> big endian format change.  				//The handshake challange type is 1' and the payload length is always 1032 bytes.  				//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  				if (messageType == 16777216 && messageLength == 134479872) {  					Disconnect ("Disconnected from pre-v0.2 DMP server");  					return;  				}  				if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  					//Malformed message' most likely from a non DMP-server.  					Disconnect ("Disconnected from non-DMP server");  					//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  					return;  				}  				receiveMessage.type = (ServerMessageType)messageType;  				if (messageLength == 0) {  					receiveMessage.data = null;  					switch (receiveMessage.type) {  					case ServerMessageType.HEARTBEAT:  					case ServerMessageType.KERBAL_COMPLETE:  					case ServerMessageType.VESSEL_COMPLETE:  						HandleMessage (receiveMessage);  						break;  					default:  						break;  					}  					receiveMessage.type = 0;  					receiveMessage.data = new byte[8];  					receiveMessageBytesLeft = receiveMessage.data.Length;  				} else {  					if (messageLength < Common.MAX_MESSAGE_SIZE) {  						isReceivingMessage = true;  						receiveMessage.data = new byte[messageLength];  						receiveMessageBytesLeft = receiveMessage.data.Length;  					} else {  						//Malformed message' most likely from a non DMP-server.  						Disconnect ("Disconnected from non-DMP server");  						//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  						return;  					}  				}  			}  		} else {  			//We have the message data to a non-null message' handle it  			isReceivingMessage = false;  			HandleMessage (receiveMessage);  			receiveMessage.type = 0;  			receiveMessage.data = new byte[8];  			receiveMessageBytesLeft = receiveMessage.data.Length;  		}  	}  	if (state < ClientState.CONNECTED || state == ClientState.DISCONNECTING) {  		return;  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: while (true) {  	int bytesRead = clientConnection.GetStream ().Read (receiveMessage.data' receiveMessage.data.Length - receiveMessageBytesLeft' receiveMessageBytesLeft);  	bytesReceived += bytesRead;  	receiveMessageBytesLeft -= bytesRead;  	if (bytesRead > 0) {  		lastReceiveTime = Common.GetCurrentUnixTime ();  	} else {  		Thread.Sleep (10);  	}  	if (receiveMessageBytesLeft == 0) {  		//We either have the header or the message data' let's do something  		if (!isReceivingMessage) {  			//We have the header  			using (MessageReader mr = new MessageReader (receiveMessage.data)) {  				int messageType = mr.Read<int> ();  				int messageLength = mr.Read<int> ();  				//This is from the little endian -> big endian format change.  				//The handshake challange type is 1' and the payload length is always 1032 bytes.  				//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  				if (messageType == 16777216 && messageLength == 134479872) {  					Disconnect ("Disconnected from pre-v0.2 DMP server");  					return;  				}  				if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  					//Malformed message' most likely from a non DMP-server.  					Disconnect ("Disconnected from non-DMP server");  					//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  					return;  				}  				receiveMessage.type = (ServerMessageType)messageType;  				if (messageLength == 0) {  					receiveMessage.data = null;  					switch (receiveMessage.type) {  					case ServerMessageType.HEARTBEAT:  					case ServerMessageType.KERBAL_COMPLETE:  					case ServerMessageType.VESSEL_COMPLETE:  						HandleMessage (receiveMessage);  						break;  					default:  						break;  					}  					receiveMessage.type = 0;  					receiveMessage.data = new byte[8];  					receiveMessageBytesLeft = receiveMessage.data.Length;  				} else {  					if (messageLength < Common.MAX_MESSAGE_SIZE) {  						isReceivingMessage = true;  						receiveMessage.data = new byte[messageLength];  						receiveMessageBytesLeft = receiveMessage.data.Length;  					} else {  						//Malformed message' most likely from a non DMP-server.  						Disconnect ("Disconnected from non-DMP server");  						//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  						return;  					}  				}  			}  		} else {  			//We have the message data to a non-null message' handle it  			isReceivingMessage = false;  			HandleMessage (receiveMessage);  			receiveMessage.type = 0;  			receiveMessage.data = new byte[8];  			receiveMessageBytesLeft = receiveMessage.data.Length;  		}  	}  	if (state < ClientState.CONNECTED || state == ClientState.DISCONNECTING) {  		return;  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: while (true) {  	int bytesRead = clientConnection.GetStream ().Read (receiveMessage.data' receiveMessage.data.Length - receiveMessageBytesLeft' receiveMessageBytesLeft);  	bytesReceived += bytesRead;  	receiveMessageBytesLeft -= bytesRead;  	if (bytesRead > 0) {  		lastReceiveTime = Common.GetCurrentUnixTime ();  	} else {  		Thread.Sleep (10);  	}  	if (receiveMessageBytesLeft == 0) {  		//We either have the header or the message data' let's do something  		if (!isReceivingMessage) {  			//We have the header  			using (MessageReader mr = new MessageReader (receiveMessage.data)) {  				int messageType = mr.Read<int> ();  				int messageLength = mr.Read<int> ();  				//This is from the little endian -> big endian format change.  				//The handshake challange type is 1' and the payload length is always 1032 bytes.  				//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  				if (messageType == 16777216 && messageLength == 134479872) {  					Disconnect ("Disconnected from pre-v0.2 DMP server");  					return;  				}  				if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  					//Malformed message' most likely from a non DMP-server.  					Disconnect ("Disconnected from non-DMP server");  					//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  					return;  				}  				receiveMessage.type = (ServerMessageType)messageType;  				if (messageLength == 0) {  					receiveMessage.data = null;  					switch (receiveMessage.type) {  					case ServerMessageType.HEARTBEAT:  					case ServerMessageType.KERBAL_COMPLETE:  					case ServerMessageType.VESSEL_COMPLETE:  						HandleMessage (receiveMessage);  						break;  					default:  						break;  					}  					receiveMessage.type = 0;  					receiveMessage.data = new byte[8];  					receiveMessageBytesLeft = receiveMessage.data.Length;  				} else {  					if (messageLength < Common.MAX_MESSAGE_SIZE) {  						isReceivingMessage = true;  						receiveMessage.data = new byte[messageLength];  						receiveMessageBytesLeft = receiveMessage.data.Length;  					} else {  						//Malformed message' most likely from a non DMP-server.  						Disconnect ("Disconnected from non-DMP server");  						//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  						return;  					}  				}  			}  		} else {  			//We have the message data to a non-null message' handle it  			isReceivingMessage = false;  			HandleMessage (receiveMessage);  			receiveMessage.type = 0;  			receiveMessage.data = new byte[8];  			receiveMessageBytesLeft = receiveMessage.data.Length;  		}  	}  	if (state < ClientState.CONNECTED || state == ClientState.DISCONNECTING) {  		return;  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: if (bytesRead > 0) {  	lastReceiveTime = Common.GetCurrentUnixTime ();  } else {  	Thread.Sleep (10);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: if (receiveMessageBytesLeft == 0) {  	//We either have the header or the message data' let's do something  	if (!isReceivingMessage) {  		//We have the header  		using (MessageReader mr = new MessageReader (receiveMessage.data)) {  			int messageType = mr.Read<int> ();  			int messageLength = mr.Read<int> ();  			//This is from the little endian -> big endian format change.  			//The handshake challange type is 1' and the payload length is always 1032 bytes.  			//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  			if (messageType == 16777216 && messageLength == 134479872) {  				Disconnect ("Disconnected from pre-v0.2 DMP server");  				return;  			}  			if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  				//Malformed message' most likely from a non DMP-server.  				Disconnect ("Disconnected from non-DMP server");  				//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  				return;  			}  			receiveMessage.type = (ServerMessageType)messageType;  			if (messageLength == 0) {  				receiveMessage.data = null;  				switch (receiveMessage.type) {  				case ServerMessageType.HEARTBEAT:  				case ServerMessageType.KERBAL_COMPLETE:  				case ServerMessageType.VESSEL_COMPLETE:  					HandleMessage (receiveMessage);  					break;  				default:  					break;  				}  				receiveMessage.type = 0;  				receiveMessage.data = new byte[8];  				receiveMessageBytesLeft = receiveMessage.data.Length;  			} else {  				if (messageLength < Common.MAX_MESSAGE_SIZE) {  					isReceivingMessage = true;  					receiveMessage.data = new byte[messageLength];  					receiveMessageBytesLeft = receiveMessage.data.Length;  				} else {  					//Malformed message' most likely from a non DMP-server.  					Disconnect ("Disconnected from non-DMP server");  					//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  					return;  				}  			}  		}  	} else {  		//We have the message data to a non-null message' handle it  		isReceivingMessage = false;  		HandleMessage (receiveMessage);  		receiveMessage.type = 0;  		receiveMessage.data = new byte[8];  		receiveMessageBytesLeft = receiveMessage.data.Length;  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: if (receiveMessageBytesLeft == 0) {  	//We either have the header or the message data' let's do something  	if (!isReceivingMessage) {  		//We have the header  		using (MessageReader mr = new MessageReader (receiveMessage.data)) {  			int messageType = mr.Read<int> ();  			int messageLength = mr.Read<int> ();  			//This is from the little endian -> big endian format change.  			//The handshake challange type is 1' and the payload length is always 1032 bytes.  			//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  			if (messageType == 16777216 && messageLength == 134479872) {  				Disconnect ("Disconnected from pre-v0.2 DMP server");  				return;  			}  			if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  				//Malformed message' most likely from a non DMP-server.  				Disconnect ("Disconnected from non-DMP server");  				//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  				return;  			}  			receiveMessage.type = (ServerMessageType)messageType;  			if (messageLength == 0) {  				receiveMessage.data = null;  				switch (receiveMessage.type) {  				case ServerMessageType.HEARTBEAT:  				case ServerMessageType.KERBAL_COMPLETE:  				case ServerMessageType.VESSEL_COMPLETE:  					HandleMessage (receiveMessage);  					break;  				default:  					break;  				}  				receiveMessage.type = 0;  				receiveMessage.data = new byte[8];  				receiveMessageBytesLeft = receiveMessage.data.Length;  			} else {  				if (messageLength < Common.MAX_MESSAGE_SIZE) {  					isReceivingMessage = true;  					receiveMessage.data = new byte[messageLength];  					receiveMessageBytesLeft = receiveMessage.data.Length;  				} else {  					//Malformed message' most likely from a non DMP-server.  					Disconnect ("Disconnected from non-DMP server");  					//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  					return;  				}  			}  		}  	} else {  		//We have the message data to a non-null message' handle it  		isReceivingMessage = false;  		HandleMessage (receiveMessage);  		receiveMessage.type = 0;  		receiveMessage.data = new byte[8];  		receiveMessageBytesLeft = receiveMessage.data.Length;  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: if (receiveMessageBytesLeft == 0) {  	//We either have the header or the message data' let's do something  	if (!isReceivingMessage) {  		//We have the header  		using (MessageReader mr = new MessageReader (receiveMessage.data)) {  			int messageType = mr.Read<int> ();  			int messageLength = mr.Read<int> ();  			//This is from the little endian -> big endian format change.  			//The handshake challange type is 1' and the payload length is always 1032 bytes.  			//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  			if (messageType == 16777216 && messageLength == 134479872) {  				Disconnect ("Disconnected from pre-v0.2 DMP server");  				return;  			}  			if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  				//Malformed message' most likely from a non DMP-server.  				Disconnect ("Disconnected from non-DMP server");  				//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  				return;  			}  			receiveMessage.type = (ServerMessageType)messageType;  			if (messageLength == 0) {  				receiveMessage.data = null;  				switch (receiveMessage.type) {  				case ServerMessageType.HEARTBEAT:  				case ServerMessageType.KERBAL_COMPLETE:  				case ServerMessageType.VESSEL_COMPLETE:  					HandleMessage (receiveMessage);  					break;  				default:  					break;  				}  				receiveMessage.type = 0;  				receiveMessage.data = new byte[8];  				receiveMessageBytesLeft = receiveMessage.data.Length;  			} else {  				if (messageLength < Common.MAX_MESSAGE_SIZE) {  					isReceivingMessage = true;  					receiveMessage.data = new byte[messageLength];  					receiveMessageBytesLeft = receiveMessage.data.Length;  				} else {  					//Malformed message' most likely from a non DMP-server.  					Disconnect ("Disconnected from non-DMP server");  					//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  					return;  				}  			}  		}  	} else {  		//We have the message data to a non-null message' handle it  		isReceivingMessage = false;  		HandleMessage (receiveMessage);  		receiveMessage.type = 0;  		receiveMessage.data = new byte[8];  		receiveMessageBytesLeft = receiveMessage.data.Length;  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: if (receiveMessageBytesLeft == 0) {  	//We either have the header or the message data' let's do something  	if (!isReceivingMessage) {  		//We have the header  		using (MessageReader mr = new MessageReader (receiveMessage.data)) {  			int messageType = mr.Read<int> ();  			int messageLength = mr.Read<int> ();  			//This is from the little endian -> big endian format change.  			//The handshake challange type is 1' and the payload length is always 1032 bytes.  			//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  			if (messageType == 16777216 && messageLength == 134479872) {  				Disconnect ("Disconnected from pre-v0.2 DMP server");  				return;  			}  			if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  				//Malformed message' most likely from a non DMP-server.  				Disconnect ("Disconnected from non-DMP server");  				//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  				return;  			}  			receiveMessage.type = (ServerMessageType)messageType;  			if (messageLength == 0) {  				receiveMessage.data = null;  				switch (receiveMessage.type) {  				case ServerMessageType.HEARTBEAT:  				case ServerMessageType.KERBAL_COMPLETE:  				case ServerMessageType.VESSEL_COMPLETE:  					HandleMessage (receiveMessage);  					break;  				default:  					break;  				}  				receiveMessage.type = 0;  				receiveMessage.data = new byte[8];  				receiveMessageBytesLeft = receiveMessage.data.Length;  			} else {  				if (messageLength < Common.MAX_MESSAGE_SIZE) {  					isReceivingMessage = true;  					receiveMessage.data = new byte[messageLength];  					receiveMessageBytesLeft = receiveMessage.data.Length;  				} else {  					//Malformed message' most likely from a non DMP-server.  					Disconnect ("Disconnected from non-DMP server");  					//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  					return;  				}  			}  		}  	} else {  		//We have the message data to a non-null message' handle it  		isReceivingMessage = false;  		HandleMessage (receiveMessage);  		receiveMessage.type = 0;  		receiveMessage.data = new byte[8];  		receiveMessageBytesLeft = receiveMessage.data.Length;  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: if (!isReceivingMessage) {  	//We have the header  	using (MessageReader mr = new MessageReader (receiveMessage.data)) {  		int messageType = mr.Read<int> ();  		int messageLength = mr.Read<int> ();  		//This is from the little endian -> big endian format change.  		//The handshake challange type is 1' and the payload length is always 1032 bytes.  		//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  		if (messageType == 16777216 && messageLength == 134479872) {  			Disconnect ("Disconnected from pre-v0.2 DMP server");  			return;  		}  		if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  			//Malformed message' most likely from a non DMP-server.  			Disconnect ("Disconnected from non-DMP server");  			//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  			return;  		}  		receiveMessage.type = (ServerMessageType)messageType;  		if (messageLength == 0) {  			receiveMessage.data = null;  			switch (receiveMessage.type) {  			case ServerMessageType.HEARTBEAT:  			case ServerMessageType.KERBAL_COMPLETE:  			case ServerMessageType.VESSEL_COMPLETE:  				HandleMessage (receiveMessage);  				break;  			default:  				break;  			}  			receiveMessage.type = 0;  			receiveMessage.data = new byte[8];  			receiveMessageBytesLeft = receiveMessage.data.Length;  		} else {  			if (messageLength < Common.MAX_MESSAGE_SIZE) {  				isReceivingMessage = true;  				receiveMessage.data = new byte[messageLength];  				receiveMessageBytesLeft = receiveMessage.data.Length;  			} else {  				//Malformed message' most likely from a non DMP-server.  				Disconnect ("Disconnected from non-DMP server");  				//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  				return;  			}  		}  	}  } else {  	//We have the message data to a non-null message' handle it  	isReceivingMessage = false;  	HandleMessage (receiveMessage);  	receiveMessage.type = 0;  	receiveMessage.data = new byte[8];  	receiveMessageBytesLeft = receiveMessage.data.Length;  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: if (!isReceivingMessage) {  	//We have the header  	using (MessageReader mr = new MessageReader (receiveMessage.data)) {  		int messageType = mr.Read<int> ();  		int messageLength = mr.Read<int> ();  		//This is from the little endian -> big endian format change.  		//The handshake challange type is 1' and the payload length is always 1032 bytes.  		//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  		if (messageType == 16777216 && messageLength == 134479872) {  			Disconnect ("Disconnected from pre-v0.2 DMP server");  			return;  		}  		if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  			//Malformed message' most likely from a non DMP-server.  			Disconnect ("Disconnected from non-DMP server");  			//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  			return;  		}  		receiveMessage.type = (ServerMessageType)messageType;  		if (messageLength == 0) {  			receiveMessage.data = null;  			switch (receiveMessage.type) {  			case ServerMessageType.HEARTBEAT:  			case ServerMessageType.KERBAL_COMPLETE:  			case ServerMessageType.VESSEL_COMPLETE:  				HandleMessage (receiveMessage);  				break;  			default:  				break;  			}  			receiveMessage.type = 0;  			receiveMessage.data = new byte[8];  			receiveMessageBytesLeft = receiveMessage.data.Length;  		} else {  			if (messageLength < Common.MAX_MESSAGE_SIZE) {  				isReceivingMessage = true;  				receiveMessage.data = new byte[messageLength];  				receiveMessageBytesLeft = receiveMessage.data.Length;  			} else {  				//Malformed message' most likely from a non DMP-server.  				Disconnect ("Disconnected from non-DMP server");  				//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  				return;  			}  		}  	}  } else {  	//We have the message data to a non-null message' handle it  	isReceivingMessage = false;  	HandleMessage (receiveMessage);  	receiveMessage.type = 0;  	receiveMessage.data = new byte[8];  	receiveMessageBytesLeft = receiveMessage.data.Length;  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: if (!isReceivingMessage) {  	//We have the header  	using (MessageReader mr = new MessageReader (receiveMessage.data)) {  		int messageType = mr.Read<int> ();  		int messageLength = mr.Read<int> ();  		//This is from the little endian -> big endian format change.  		//The handshake challange type is 1' and the payload length is always 1032 bytes.  		//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  		if (messageType == 16777216 && messageLength == 134479872) {  			Disconnect ("Disconnected from pre-v0.2 DMP server");  			return;  		}  		if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  			//Malformed message' most likely from a non DMP-server.  			Disconnect ("Disconnected from non-DMP server");  			//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  			return;  		}  		receiveMessage.type = (ServerMessageType)messageType;  		if (messageLength == 0) {  			receiveMessage.data = null;  			switch (receiveMessage.type) {  			case ServerMessageType.HEARTBEAT:  			case ServerMessageType.KERBAL_COMPLETE:  			case ServerMessageType.VESSEL_COMPLETE:  				HandleMessage (receiveMessage);  				break;  			default:  				break;  			}  			receiveMessage.type = 0;  			receiveMessage.data = new byte[8];  			receiveMessageBytesLeft = receiveMessage.data.Length;  		} else {  			if (messageLength < Common.MAX_MESSAGE_SIZE) {  				isReceivingMessage = true;  				receiveMessage.data = new byte[messageLength];  				receiveMessageBytesLeft = receiveMessage.data.Length;  			} else {  				//Malformed message' most likely from a non DMP-server.  				Disconnect ("Disconnected from non-DMP server");  				//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  				return;  			}  		}  	}  } else {  	//We have the message data to a non-null message' handle it  	isReceivingMessage = false;  	HandleMessage (receiveMessage);  	receiveMessage.type = 0;  	receiveMessage.data = new byte[8];  	receiveMessageBytesLeft = receiveMessage.data.Length;  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: if (!isReceivingMessage) {  	//We have the header  	using (MessageReader mr = new MessageReader (receiveMessage.data)) {  		int messageType = mr.Read<int> ();  		int messageLength = mr.Read<int> ();  		//This is from the little endian -> big endian format change.  		//The handshake challange type is 1' and the payload length is always 1032 bytes.  		//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  		if (messageType == 16777216 && messageLength == 134479872) {  			Disconnect ("Disconnected from pre-v0.2 DMP server");  			return;  		}  		if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  			//Malformed message' most likely from a non DMP-server.  			Disconnect ("Disconnected from non-DMP server");  			//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  			return;  		}  		receiveMessage.type = (ServerMessageType)messageType;  		if (messageLength == 0) {  			receiveMessage.data = null;  			switch (receiveMessage.type) {  			case ServerMessageType.HEARTBEAT:  			case ServerMessageType.KERBAL_COMPLETE:  			case ServerMessageType.VESSEL_COMPLETE:  				HandleMessage (receiveMessage);  				break;  			default:  				break;  			}  			receiveMessage.type = 0;  			receiveMessage.data = new byte[8];  			receiveMessageBytesLeft = receiveMessage.data.Length;  		} else {  			if (messageLength < Common.MAX_MESSAGE_SIZE) {  				isReceivingMessage = true;  				receiveMessage.data = new byte[messageLength];  				receiveMessageBytesLeft = receiveMessage.data.Length;  			} else {  				//Malformed message' most likely from a non DMP-server.  				Disconnect ("Disconnected from non-DMP server");  				//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  				return;  			}  		}  	}  } else {  	//We have the message data to a non-null message' handle it  	isReceivingMessage = false;  	HandleMessage (receiveMessage);  	receiveMessage.type = 0;  	receiveMessage.data = new byte[8];  	receiveMessageBytesLeft = receiveMessage.data.Length;  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: using (MessageReader mr = new MessageReader (receiveMessage.data)) {  	int messageType = mr.Read<int> ();  	int messageLength = mr.Read<int> ();  	//This is from the little endian -> big endian format change.  	//The handshake challange type is 1' and the payload length is always 1032 bytes.  	//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  	if (messageType == 16777216 && messageLength == 134479872) {  		Disconnect ("Disconnected from pre-v0.2 DMP server");  		return;  	}  	if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  		//Malformed message' most likely from a non DMP-server.  		Disconnect ("Disconnected from non-DMP server");  		//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  		return;  	}  	receiveMessage.type = (ServerMessageType)messageType;  	if (messageLength == 0) {  		receiveMessage.data = null;  		switch (receiveMessage.type) {  		case ServerMessageType.HEARTBEAT:  		case ServerMessageType.KERBAL_COMPLETE:  		case ServerMessageType.VESSEL_COMPLETE:  			HandleMessage (receiveMessage);  			break;  		default:  			break;  		}  		receiveMessage.type = 0;  		receiveMessage.data = new byte[8];  		receiveMessageBytesLeft = receiveMessage.data.Length;  	} else {  		if (messageLength < Common.MAX_MESSAGE_SIZE) {  			isReceivingMessage = true;  			receiveMessage.data = new byte[messageLength];  			receiveMessageBytesLeft = receiveMessage.data.Length;  		} else {  			//Malformed message' most likely from a non DMP-server.  			Disconnect ("Disconnected from non-DMP server");  			//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  			return;  		}  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: using (MessageReader mr = new MessageReader (receiveMessage.data)) {  	int messageType = mr.Read<int> ();  	int messageLength = mr.Read<int> ();  	//This is from the little endian -> big endian format change.  	//The handshake challange type is 1' and the payload length is always 1032 bytes.  	//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  	if (messageType == 16777216 && messageLength == 134479872) {  		Disconnect ("Disconnected from pre-v0.2 DMP server");  		return;  	}  	if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  		//Malformed message' most likely from a non DMP-server.  		Disconnect ("Disconnected from non-DMP server");  		//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  		return;  	}  	receiveMessage.type = (ServerMessageType)messageType;  	if (messageLength == 0) {  		receiveMessage.data = null;  		switch (receiveMessage.type) {  		case ServerMessageType.HEARTBEAT:  		case ServerMessageType.KERBAL_COMPLETE:  		case ServerMessageType.VESSEL_COMPLETE:  			HandleMessage (receiveMessage);  			break;  		default:  			break;  		}  		receiveMessage.type = 0;  		receiveMessage.data = new byte[8];  		receiveMessageBytesLeft = receiveMessage.data.Length;  	} else {  		if (messageLength < Common.MAX_MESSAGE_SIZE) {  			isReceivingMessage = true;  			receiveMessage.data = new byte[messageLength];  			receiveMessageBytesLeft = receiveMessage.data.Length;  		} else {  			//Malformed message' most likely from a non DMP-server.  			Disconnect ("Disconnected from non-DMP server");  			//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  			return;  		}  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: using (MessageReader mr = new MessageReader (receiveMessage.data)) {  	int messageType = mr.Read<int> ();  	int messageLength = mr.Read<int> ();  	//This is from the little endian -> big endian format change.  	//The handshake challange type is 1' and the payload length is always 1032 bytes.  	//Little endian (the previous format) DMPServer sends 01 00 00 00 | 08 04 00 00 as the first message' the handshake challange.  	if (messageType == 16777216 && messageLength == 134479872) {  		Disconnect ("Disconnected from pre-v0.2 DMP server");  		return;  	}  	if (messageType > (Enum.GetNames (typeof(ServerMessageType)).Length - 1)) {  		//Malformed message' most likely from a non DMP-server.  		Disconnect ("Disconnected from non-DMP server");  		//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  		return;  	}  	receiveMessage.type = (ServerMessageType)messageType;  	if (messageLength == 0) {  		receiveMessage.data = null;  		switch (receiveMessage.type) {  		case ServerMessageType.HEARTBEAT:  		case ServerMessageType.KERBAL_COMPLETE:  		case ServerMessageType.VESSEL_COMPLETE:  			HandleMessage (receiveMessage);  			break;  		default:  			break;  		}  		receiveMessage.type = 0;  		receiveMessage.data = new byte[8];  		receiveMessageBytesLeft = receiveMessage.data.Length;  	} else {  		if (messageLength < Common.MAX_MESSAGE_SIZE) {  			isReceivingMessage = true;  			receiveMessage.data = new byte[messageLength];  			receiveMessageBytesLeft = receiveMessage.data.Length;  		} else {  			//Malformed message' most likely from a non DMP-server.  			Disconnect ("Disconnected from non-DMP server");  			//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  			return;  		}  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: if (messageType == 16777216 && messageLength == 134479872) {  	Disconnect ("Disconnected from pre-v0.2 DMP server");  	return;  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: if (messageType == 16777216 && messageLength == 134479872) {  	Disconnect ("Disconnected from pre-v0.2 DMP server");  	return;  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: if (messageLength == 0) {  	receiveMessage.data = null;  	switch (receiveMessage.type) {  	case ServerMessageType.HEARTBEAT:  	case ServerMessageType.KERBAL_COMPLETE:  	case ServerMessageType.VESSEL_COMPLETE:  		HandleMessage (receiveMessage);  		break;  	default:  		break;  	}  	receiveMessage.type = 0;  	receiveMessage.data = new byte[8];  	receiveMessageBytesLeft = receiveMessage.data.Length;  } else {  	if (messageLength < Common.MAX_MESSAGE_SIZE) {  		isReceivingMessage = true;  		receiveMessage.data = new byte[messageLength];  		receiveMessageBytesLeft = receiveMessage.data.Length;  	} else {  		//Malformed message' most likely from a non DMP-server.  		Disconnect ("Disconnected from non-DMP server");  		//Returning from ReceiveCallback will break the receive loop and stop processing any further messages.  		return;  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: receiveMessage.data = new byte[8];  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,StartReceivingIncomingMessages,The following statement contains a magic number: receiveMessage.data = new byte[8];  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,QueueOutgoingMessage,The following statement contains a magic number: lock (messageQueueLock) {  	//All messages have an 8 byte header  	bytesQueuedOut += 8;  	if (message.data != null && message.data.Length > 0) {  		//Count the payload if we have one.  		bytesQueuedOut += message.data.Length;  	}  	if (highPriority) {  		sendMessageQueueHigh.Enqueue (message);  	} else {  		sendMessageQueueLow.Enqueue (message);  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,QueueOutgoingMessage,The following statement contains a magic number: bytesQueuedOut += 8;  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SplitAndRewriteMessage,The following statement contains a magic number: if (message.data.Length > Common.SPLIT_MESSAGE_LENGTH) {  	lastSplitMessageType = message.type;  	ClientMessage newSplitMessage = new ClientMessage ();  	newSplitMessage.type = ClientMessageType.SPLIT_MESSAGE;  	int splitBytesLeft = message.data.Length;  	using (MessageWriter mw = new MessageWriter ()) {  		mw.Write<int> ((int)message.type);  		mw.Write<int> (message.data.Length);  		byte[] firstSplit = new byte[Common.SPLIT_MESSAGE_LENGTH];  		Array.Copy (message.data' 0' firstSplit' 0' Common.SPLIT_MESSAGE_LENGTH);  		mw.Write<byte[]> (firstSplit);  		splitBytesLeft -= Common.SPLIT_MESSAGE_LENGTH;  		newSplitMessage.data = mw.GetMessageBytes ();  		//SPLIT_MESSAGE adds a 12 byte header.  		bytesQueuedOut += 12;  		sendMessageQueueSplit.Enqueue (newSplitMessage);  	}  	while (splitBytesLeft > 0) {  		ClientMessage currentSplitMessage = new ClientMessage ();  		currentSplitMessage.type = ClientMessageType.SPLIT_MESSAGE;  		currentSplitMessage.data = new byte[Math.Min (splitBytesLeft' Common.SPLIT_MESSAGE_LENGTH)];  		Array.Copy (message.data' message.data.Length - splitBytesLeft' currentSplitMessage.data' 0' currentSplitMessage.data.Length);  		splitBytesLeft -= currentSplitMessage.data.Length;  		//Add the SPLIT_MESSAGE header to the out queue count.  		bytesQueuedOut += 8;  		sendMessageQueueSplit.Enqueue (currentSplitMessage);  	}  	message = sendMessageQueueSplit.Dequeue ();  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SplitAndRewriteMessage,The following statement contains a magic number: if (message.data.Length > Common.SPLIT_MESSAGE_LENGTH) {  	lastSplitMessageType = message.type;  	ClientMessage newSplitMessage = new ClientMessage ();  	newSplitMessage.type = ClientMessageType.SPLIT_MESSAGE;  	int splitBytesLeft = message.data.Length;  	using (MessageWriter mw = new MessageWriter ()) {  		mw.Write<int> ((int)message.type);  		mw.Write<int> (message.data.Length);  		byte[] firstSplit = new byte[Common.SPLIT_MESSAGE_LENGTH];  		Array.Copy (message.data' 0' firstSplit' 0' Common.SPLIT_MESSAGE_LENGTH);  		mw.Write<byte[]> (firstSplit);  		splitBytesLeft -= Common.SPLIT_MESSAGE_LENGTH;  		newSplitMessage.data = mw.GetMessageBytes ();  		//SPLIT_MESSAGE adds a 12 byte header.  		bytesQueuedOut += 12;  		sendMessageQueueSplit.Enqueue (newSplitMessage);  	}  	while (splitBytesLeft > 0) {  		ClientMessage currentSplitMessage = new ClientMessage ();  		currentSplitMessage.type = ClientMessageType.SPLIT_MESSAGE;  		currentSplitMessage.data = new byte[Math.Min (splitBytesLeft' Common.SPLIT_MESSAGE_LENGTH)];  		Array.Copy (message.data' message.data.Length - splitBytesLeft' currentSplitMessage.data' 0' currentSplitMessage.data.Length);  		splitBytesLeft -= currentSplitMessage.data.Length;  		//Add the SPLIT_MESSAGE header to the out queue count.  		bytesQueuedOut += 8;  		sendMessageQueueSplit.Enqueue (currentSplitMessage);  	}  	message = sendMessageQueueSplit.Dequeue ();  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SplitAndRewriteMessage,The following statement contains a magic number: using (MessageWriter mw = new MessageWriter ()) {  	mw.Write<int> ((int)message.type);  	mw.Write<int> (message.data.Length);  	byte[] firstSplit = new byte[Common.SPLIT_MESSAGE_LENGTH];  	Array.Copy (message.data' 0' firstSplit' 0' Common.SPLIT_MESSAGE_LENGTH);  	mw.Write<byte[]> (firstSplit);  	splitBytesLeft -= Common.SPLIT_MESSAGE_LENGTH;  	newSplitMessage.data = mw.GetMessageBytes ();  	//SPLIT_MESSAGE adds a 12 byte header.  	bytesQueuedOut += 12;  	sendMessageQueueSplit.Enqueue (newSplitMessage);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SplitAndRewriteMessage,The following statement contains a magic number: bytesQueuedOut += 12;  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SplitAndRewriteMessage,The following statement contains a magic number: while (splitBytesLeft > 0) {  	ClientMessage currentSplitMessage = new ClientMessage ();  	currentSplitMessage.type = ClientMessageType.SPLIT_MESSAGE;  	currentSplitMessage.data = new byte[Math.Min (splitBytesLeft' Common.SPLIT_MESSAGE_LENGTH)];  	Array.Copy (message.data' message.data.Length - splitBytesLeft' currentSplitMessage.data' 0' currentSplitMessage.data.Length);  	splitBytesLeft -= currentSplitMessage.data.Length;  	//Add the SPLIT_MESSAGE header to the out queue count.  	bytesQueuedOut += 8;  	sendMessageQueueSplit.Enqueue (currentSplitMessage);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SplitAndRewriteMessage,The following statement contains a magic number: bytesQueuedOut += 8;  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeChallange,The following statement contains a magic number: try {  	using (MessageReader mr = new MessageReader (messageData)) {  		byte[] challange = mr.Read<byte[]> ();  		using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider (1024)) {  			rsa.PersistKeyInCsp = false;  			rsa.FromXmlString (dmpSettings.playerPrivateKey);  			byte[] signature = rsa.SignData (challange' CryptoConfig.CreateFromName ("SHA256"));  			SendHandshakeResponse (signature);  			state = ClientState.HANDSHAKING;  		}  	}  } catch (Exception e) {  	DarkLog.Debug ("Error handling HANDSHAKE_CHALLANGE message' exception: " + e);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeChallange,The following statement contains a magic number: using (MessageReader mr = new MessageReader (messageData)) {  	byte[] challange = mr.Read<byte[]> ();  	using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider (1024)) {  		rsa.PersistKeyInCsp = false;  		rsa.FromXmlString (dmpSettings.playerPrivateKey);  		byte[] signature = rsa.SignData (challange' CryptoConfig.CreateFromName ("SHA256"));  		SendHandshakeResponse (signature);  		state = ClientState.HANDSHAKING;  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeChallange,The following statement contains a magic number: using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider (1024)) {  	rsa.PersistKeyInCsp = false;  	rsa.FromXmlString (dmpSettings.playerPrivateKey);  	byte[] signature = rsa.SignData (challange' CryptoConfig.CreateFromName ("SHA256"));  	SendHandshakeResponse (signature);  	state = ClientState.HANDSHAKING;  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: try {  	using (MessageReader mr = new MessageReader (messageData)) {  		reply = mr.Read<int> ();  		reason = mr.Read<string> ();  		try {  			serverProtocolVersion = mr.Read<int> ();  			serverVersion = mr.Read<string> ();  		} catch {  			//We don't care about this throw on pre-protocol-9 servers.  		}  		//If we handshook successfully' the mod data will be available to read.  		if (reply == 0) {  			Compression.compressionEnabled = mr.Read<bool> () && dmpSettings.compressionEnabled;  			modWorker.modControl = (ModControlMode)mr.Read<int> ();  			if (modWorker.modControl != ModControlMode.DISABLED) {  				modFileData = mr.Read<string> ();  			}  		}  	}  } catch (Exception e) {  	DarkLog.Debug ("Error handling HANDSHAKE_REPLY message' exception: " + e);  	reply = 99;  	reason = "Incompatible HANDSHAKE_REPLY message";  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: reply = 99;  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: switch (reply) {  case 0:  	{  		if (modWorker.ParseModFile (modFileData)) {  			DarkLog.Debug ("Handshake successful");  			state = ClientState.AUTHENTICATED;  		} else {  			DarkLog.Debug ("Failed to pass mod validation");  			SendDisconnect ("Failed mod validation");  		}  	}  	break;  default:  	string disconnectReason = "Handshake failure: " + reason;  	//If it's a protocol mismatch' append the client/server version.  	if (reply == 1) {  		string clientTrimmedVersion = Common.PROGRAM_VERSION;  		//Trim git tags  		if (Common.PROGRAM_VERSION.Length == 40) {  			clientTrimmedVersion = Common.PROGRAM_VERSION.Substring (0' 7);  		}  		string serverTrimmedVersion = serverVersion;  		if (serverVersion.Length == 40) {  			serverTrimmedVersion = serverVersion.Substring (0' 7);  		}  		disconnectReason += "\nClient: " + clientTrimmedVersion + "' Server: " + serverTrimmedVersion;  		//If they both aren't a release version' display the actual protocol version.  		if (!serverVersion.Contains ("v") || !Common.PROGRAM_VERSION.Contains ("v")) {  			if (serverProtocolVersion != -1) {  				disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: " + serverProtocolVersion;  			} else {  				disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: 8-";  			}  		}  	}  	DarkLog.Debug (disconnectReason);  	Disconnect (disconnectReason);  	break;  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: switch (reply) {  case 0:  	{  		if (modWorker.ParseModFile (modFileData)) {  			DarkLog.Debug ("Handshake successful");  			state = ClientState.AUTHENTICATED;  		} else {  			DarkLog.Debug ("Failed to pass mod validation");  			SendDisconnect ("Failed mod validation");  		}  	}  	break;  default:  	string disconnectReason = "Handshake failure: " + reason;  	//If it's a protocol mismatch' append the client/server version.  	if (reply == 1) {  		string clientTrimmedVersion = Common.PROGRAM_VERSION;  		//Trim git tags  		if (Common.PROGRAM_VERSION.Length == 40) {  			clientTrimmedVersion = Common.PROGRAM_VERSION.Substring (0' 7);  		}  		string serverTrimmedVersion = serverVersion;  		if (serverVersion.Length == 40) {  			serverTrimmedVersion = serverVersion.Substring (0' 7);  		}  		disconnectReason += "\nClient: " + clientTrimmedVersion + "' Server: " + serverTrimmedVersion;  		//If they both aren't a release version' display the actual protocol version.  		if (!serverVersion.Contains ("v") || !Common.PROGRAM_VERSION.Contains ("v")) {  			if (serverProtocolVersion != -1) {  				disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: " + serverProtocolVersion;  			} else {  				disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: 8-";  			}  		}  	}  	DarkLog.Debug (disconnectReason);  	Disconnect (disconnectReason);  	break;  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: switch (reply) {  case 0:  	{  		if (modWorker.ParseModFile (modFileData)) {  			DarkLog.Debug ("Handshake successful");  			state = ClientState.AUTHENTICATED;  		} else {  			DarkLog.Debug ("Failed to pass mod validation");  			SendDisconnect ("Failed mod validation");  		}  	}  	break;  default:  	string disconnectReason = "Handshake failure: " + reason;  	//If it's a protocol mismatch' append the client/server version.  	if (reply == 1) {  		string clientTrimmedVersion = Common.PROGRAM_VERSION;  		//Trim git tags  		if (Common.PROGRAM_VERSION.Length == 40) {  			clientTrimmedVersion = Common.PROGRAM_VERSION.Substring (0' 7);  		}  		string serverTrimmedVersion = serverVersion;  		if (serverVersion.Length == 40) {  			serverTrimmedVersion = serverVersion.Substring (0' 7);  		}  		disconnectReason += "\nClient: " + clientTrimmedVersion + "' Server: " + serverTrimmedVersion;  		//If they both aren't a release version' display the actual protocol version.  		if (!serverVersion.Contains ("v") || !Common.PROGRAM_VERSION.Contains ("v")) {  			if (serverProtocolVersion != -1) {  				disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: " + serverProtocolVersion;  			} else {  				disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: 8-";  			}  		}  	}  	DarkLog.Debug (disconnectReason);  	Disconnect (disconnectReason);  	break;  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: switch (reply) {  case 0:  	{  		if (modWorker.ParseModFile (modFileData)) {  			DarkLog.Debug ("Handshake successful");  			state = ClientState.AUTHENTICATED;  		} else {  			DarkLog.Debug ("Failed to pass mod validation");  			SendDisconnect ("Failed mod validation");  		}  	}  	break;  default:  	string disconnectReason = "Handshake failure: " + reason;  	//If it's a protocol mismatch' append the client/server version.  	if (reply == 1) {  		string clientTrimmedVersion = Common.PROGRAM_VERSION;  		//Trim git tags  		if (Common.PROGRAM_VERSION.Length == 40) {  			clientTrimmedVersion = Common.PROGRAM_VERSION.Substring (0' 7);  		}  		string serverTrimmedVersion = serverVersion;  		if (serverVersion.Length == 40) {  			serverTrimmedVersion = serverVersion.Substring (0' 7);  		}  		disconnectReason += "\nClient: " + clientTrimmedVersion + "' Server: " + serverTrimmedVersion;  		//If they both aren't a release version' display the actual protocol version.  		if (!serverVersion.Contains ("v") || !Common.PROGRAM_VERSION.Contains ("v")) {  			if (serverProtocolVersion != -1) {  				disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: " + serverProtocolVersion;  			} else {  				disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: 8-";  			}  		}  	}  	DarkLog.Debug (disconnectReason);  	Disconnect (disconnectReason);  	break;  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: if (reply == 1) {  	string clientTrimmedVersion = Common.PROGRAM_VERSION;  	//Trim git tags  	if (Common.PROGRAM_VERSION.Length == 40) {  		clientTrimmedVersion = Common.PROGRAM_VERSION.Substring (0' 7);  	}  	string serverTrimmedVersion = serverVersion;  	if (serverVersion.Length == 40) {  		serverTrimmedVersion = serverVersion.Substring (0' 7);  	}  	disconnectReason += "\nClient: " + clientTrimmedVersion + "' Server: " + serverTrimmedVersion;  	//If they both aren't a release version' display the actual protocol version.  	if (!serverVersion.Contains ("v") || !Common.PROGRAM_VERSION.Contains ("v")) {  		if (serverProtocolVersion != -1) {  			disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: " + serverProtocolVersion;  		} else {  			disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: 8-";  		}  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: if (reply == 1) {  	string clientTrimmedVersion = Common.PROGRAM_VERSION;  	//Trim git tags  	if (Common.PROGRAM_VERSION.Length == 40) {  		clientTrimmedVersion = Common.PROGRAM_VERSION.Substring (0' 7);  	}  	string serverTrimmedVersion = serverVersion;  	if (serverVersion.Length == 40) {  		serverTrimmedVersion = serverVersion.Substring (0' 7);  	}  	disconnectReason += "\nClient: " + clientTrimmedVersion + "' Server: " + serverTrimmedVersion;  	//If they both aren't a release version' display the actual protocol version.  	if (!serverVersion.Contains ("v") || !Common.PROGRAM_VERSION.Contains ("v")) {  		if (serverProtocolVersion != -1) {  			disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: " + serverProtocolVersion;  		} else {  			disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: 8-";  		}  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: if (reply == 1) {  	string clientTrimmedVersion = Common.PROGRAM_VERSION;  	//Trim git tags  	if (Common.PROGRAM_VERSION.Length == 40) {  		clientTrimmedVersion = Common.PROGRAM_VERSION.Substring (0' 7);  	}  	string serverTrimmedVersion = serverVersion;  	if (serverVersion.Length == 40) {  		serverTrimmedVersion = serverVersion.Substring (0' 7);  	}  	disconnectReason += "\nClient: " + clientTrimmedVersion + "' Server: " + serverTrimmedVersion;  	//If they both aren't a release version' display the actual protocol version.  	if (!serverVersion.Contains ("v") || !Common.PROGRAM_VERSION.Contains ("v")) {  		if (serverProtocolVersion != -1) {  			disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: " + serverProtocolVersion;  		} else {  			disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: 8-";  		}  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: if (reply == 1) {  	string clientTrimmedVersion = Common.PROGRAM_VERSION;  	//Trim git tags  	if (Common.PROGRAM_VERSION.Length == 40) {  		clientTrimmedVersion = Common.PROGRAM_VERSION.Substring (0' 7);  	}  	string serverTrimmedVersion = serverVersion;  	if (serverVersion.Length == 40) {  		serverTrimmedVersion = serverVersion.Substring (0' 7);  	}  	disconnectReason += "\nClient: " + clientTrimmedVersion + "' Server: " + serverTrimmedVersion;  	//If they both aren't a release version' display the actual protocol version.  	if (!serverVersion.Contains ("v") || !Common.PROGRAM_VERSION.Contains ("v")) {  		if (serverProtocolVersion != -1) {  			disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: " + serverProtocolVersion;  		} else {  			disconnectReason += "\nClient protocol: " + Common.PROTOCOL_VERSION + "' Server: 8-";  		}  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: if (Common.PROGRAM_VERSION.Length == 40) {  	clientTrimmedVersion = Common.PROGRAM_VERSION.Substring (0' 7);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: if (Common.PROGRAM_VERSION.Length == 40) {  	clientTrimmedVersion = Common.PROGRAM_VERSION.Substring (0' 7);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: clientTrimmedVersion = Common.PROGRAM_VERSION.Substring (0' 7);  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: if (serverVersion.Length == 40) {  	serverTrimmedVersion = serverVersion.Substring (0' 7);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: if (serverVersion.Length == 40) {  	serverTrimmedVersion = serverVersion.Substring (0' 7);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleHandshakeReply,The following statement contains a magic number: serverTrimmedVersion = serverVersion.Substring (0' 7);  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleKerbalReply,The following statement contains a magic number: if (state == ClientState.SYNCING_KERBALS) {  	if (numberOfKerbals != 0) {  		connectionWindow.status = "Syncing kerbals " + numberOfKerbalsReceived + "/" + numberOfKerbals + " (" + (int)((numberOfKerbalsReceived / (float)numberOfKerbals) * 100) + "%)";  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleKerbalReply,The following statement contains a magic number: if (numberOfKerbals != 0) {  	connectionWindow.status = "Syncing kerbals " + numberOfKerbalsReceived + "/" + numberOfKerbals + " (" + (int)((numberOfKerbalsReceived / (float)numberOfKerbals) * 100) + "%)";  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleKerbalReply,The following statement contains a magic number: connectionWindow.status = "Syncing kerbals " + numberOfKerbalsReceived + "/" + numberOfKerbals + " (" + (int)((numberOfKerbalsReceived / (float)numberOfKerbals) * 100) + "%)";  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleVesselList,The following statement contains a magic number: using (MessageReader mr = new MessageReader (messageData)) {  	List<string> serverVessels = new List<string> (mr.Read<string[]> ());  	List<string> cacheObjects = new List<string> (universeSyncCache.GetCachedObjects ());  	List<string> requestedObjects = new List<string> ();  	foreach (string serverVessel in serverVessels) {  		if (!cacheObjects.Contains (serverVessel)) {  			requestedObjects.Add (serverVessel);  		} else {  			bool added = false;  			byte[] vesselBytes = universeSyncCache.GetFromCache (serverVessel);  			if (vesselBytes.Length != 0) {  				ConfigNode vesselNode = configNodeSerializer.Deserialize (vesselBytes);  				if (vesselNode != null) {  					string vesselIDString = Common.ConvertConfigStringToGUIDString (vesselNode.GetValue ("pid"));  					if (vesselIDString != null) {  						Guid vesselID = new Guid (vesselIDString);  						if (vesselID != Guid.Empty) {  							vesselWorker.QueueVesselProto (vesselID' 0' vesselNode);  							added = true;  							numberOfVesselsReceived++;  						} else {  							DarkLog.Debug ("Cached object " + serverVessel + " is damaged - Returned GUID.Empty");  						}  					} else {  						DarkLog.Debug ("Cached object " + serverVessel + " is damaged - Failed to get vessel ID");  					}  				} else {  					DarkLog.Debug ("Cached object " + serverVessel + " is damaged - Failed to create a config node");  				}  			} else {  				DarkLog.Debug ("Cached object " + serverVessel + " is damaged - Object is a 0 length file!");  			}  			if (!added) {  				requestedObjects.Add (serverVessel);  			}  		}  	}  	if (numberOfVessels != 0) {  		connectionWindow.status = "Syncing vessels " + numberOfVesselsReceived + "/" + numberOfVessels + " (" + (int)((numberOfVesselsReceived / (float)numberOfVessels) * 100) + "%)";  	}  	SendVesselsRequest (requestedObjects.ToArray ());  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleVesselList,The following statement contains a magic number: if (numberOfVessels != 0) {  	connectionWindow.status = "Syncing vessels " + numberOfVesselsReceived + "/" + numberOfVessels + " (" + (int)((numberOfVesselsReceived / (float)numberOfVessels) * 100) + "%)";  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleVesselList,The following statement contains a magic number: connectionWindow.status = "Syncing vessels " + numberOfVesselsReceived + "/" + numberOfVessels + " (" + (int)((numberOfVesselsReceived / (float)numberOfVessels) * 100) + "%)";  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleVesselProto,The following statement contains a magic number: if (state == ClientState.SYNCING_VESSELS) {  	if (numberOfVessels != 0) {  		if (numberOfVesselsReceived > numberOfVessels) {  			//Received 102 / 101 vessels!  			numberOfVessels = numberOfVesselsReceived;  		}  		connectionWindow.status = "Syncing vessels " + numberOfVesselsReceived + "/" + numberOfVessels + " (" + (int)((numberOfVesselsReceived / (float)numberOfVessels) * 100) + "%)";  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleVesselProto,The following statement contains a magic number: if (numberOfVessels != 0) {  	if (numberOfVesselsReceived > numberOfVessels) {  		//Received 102 / 101 vessels!  		numberOfVessels = numberOfVesselsReceived;  	}  	connectionWindow.status = "Syncing vessels " + numberOfVesselsReceived + "/" + numberOfVessels + " (" + (int)((numberOfVesselsReceived / (float)numberOfVessels) * 100) + "%)";  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleVesselProto,The following statement contains a magic number: connectionWindow.status = "Syncing vessels " + numberOfVesselsReceived + "/" + numberOfVessels + " (" + (int)((numberOfVesselsReceived / (float)numberOfVessels) * 100) + "%)";  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SendHeartBeat,The following statement contains a magic number: if (state >= ClientState.CONNECTED && sendMessageQueueHigh.Count == 0) {  	if ((Common.GetCurrentUnixTime () - lastSendTime) > (Common.HEART_BEAT_INTERVAL / 1000)) {  		lastSendTime = Common.GetCurrentUnixTime ();  		ClientMessage newMessage = new ClientMessage ();  		newMessage.type = ClientMessageType.HEARTBEAT;  		QueueOutgoingMessage (newMessage' true);  	}  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,SendHeartBeat,The following statement contains a magic number: if ((Common.GetCurrentUnixTime () - lastSendTime) > (Common.HEART_BEAT_INTERVAL / 1000)) {  	lastSendTime = Common.GetCurrentUnixTime ();  	ClientMessage newMessage = new ClientMessage ();  	newMessage.type = ClientMessageType.HEARTBEAT;  	QueueOutgoingMessage (newMessage' true);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,GetStatistics,The following statement contains a magic number: switch (statType) {  case "HighPriorityQueueLength":  	return sendMessageQueueHigh.Count;  case "SplitPriorityQueueLength":  	return sendMessageQueueSplit.Count;  case "LowPriorityQueueLength":  	return sendMessageQueueLow.Count;  case "QueuedOutBytes":  	return bytesQueuedOut;  case "SentBytes":  	return bytesSent;  case "ReceivedBytes":  	return bytesReceived;  case "LastReceiveTime":  	return ((Common.GetCurrentUnixTime () - lastReceiveTime) * 1000);  case "LastSendTime":  	return ((Common.GetCurrentUnixTime () - lastSendTime) * 1000);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,GetStatistics,The following statement contains a magic number: switch (statType) {  case "HighPriorityQueueLength":  	return sendMessageQueueHigh.Count;  case "SplitPriorityQueueLength":  	return sendMessageQueueSplit.Count;  case "LowPriorityQueueLength":  	return sendMessageQueueLow.Count;  case "QueuedOutBytes":  	return bytesQueuedOut;  case "SentBytes":  	return bytesSent;  case "ReceivedBytes":  	return bytesReceived;  case "LastReceiveTime":  	return ((Common.GetCurrentUnixTime () - lastReceiveTime) * 1000);  case "LastSendTime":  	return ((Common.GetCurrentUnixTime () - lastSendTime) * 1000);  }  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,GetStatistics,The following statement contains a magic number: return ((Common.GetCurrentUnixTime () - lastReceiveTime) * 1000);  
Magic Number,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,GetStatistics,The following statement contains a magic number: return ((Common.GetCurrentUnixTime () - lastSendTime) * 1000);  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,version,The following statement contains a magic number: if (Common.PROGRAM_VERSION.Length == 40) {  	return "build " + Common.PROGRAM_VERSION.Substring (0' 7);  }  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,version,The following statement contains a magic number: if (Common.PROGRAM_VERSION.Length == 40) {  	return "build " + Common.PROGRAM_VERSION.Substring (0' 7);  }  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,version,The following statement contains a magic number: return "build " + Common.PROGRAM_VERSION.Substring (0' 7);  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions = new GUILayoutOption[4];  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions [2] = GUILayout.MinHeight (WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions [3] = GUILayout.MaxHeight (WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,InitGUI,The following statement contains a magic number: labelOptions [0] = GUILayout.Width (100);  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,Draw,The following statement contains a magic number: if (display) {  	windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6702 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer " + version ()' windowStyle' layoutOptions));  }  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,Draw,The following statement contains a magic number: windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6702 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer " + version ()' windowStyle' layoutOptions));  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: GUILayout.Space (20);  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: dmpSettings.playerName = GUILayout.TextArea (dmpSettings.playerName' 32' textAreaStyle);  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: if (addingServerSafe) {  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Name:"' labelOptions);  	serverName = GUILayout.TextArea (serverName' textAreaStyle);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Address:"' labelOptions);  	serverAddress = GUILayout.TextArea (serverAddress' textAreaStyle).Trim ();  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Port:"' labelOptions);  	serverPort = GUILayout.TextArea (serverPort' textAreaStyle).Trim ();  	GUILayout.EndHorizontal ();  	if (GUILayout.Button (addMode + " server"' buttonStyle)) {  		if (addEventHandled == true) {  			if (selected == -1) {  				addEntry = new ServerEntry ();  				addEntry.name = serverName;  				addEntry.address = serverAddress;  				addEntry.port = 6702;  				Int32.TryParse (serverPort' out addEntry.port);  				addEventHandled = false;  			} else {  				editEntry = new ServerEntry ();  				editEntry.name = serverName;  				editEntry.address = serverAddress;  				editEntry.port = 6702;  				Int32.TryParse (serverPort' out editEntry.port);  				editEventHandled = false;  			}  		}  	}  }  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: if (addingServerSafe) {  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Name:"' labelOptions);  	serverName = GUILayout.TextArea (serverName' textAreaStyle);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Address:"' labelOptions);  	serverAddress = GUILayout.TextArea (serverAddress' textAreaStyle).Trim ();  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Port:"' labelOptions);  	serverPort = GUILayout.TextArea (serverPort' textAreaStyle).Trim ();  	GUILayout.EndHorizontal ();  	if (GUILayout.Button (addMode + " server"' buttonStyle)) {  		if (addEventHandled == true) {  			if (selected == -1) {  				addEntry = new ServerEntry ();  				addEntry.name = serverName;  				addEntry.address = serverAddress;  				addEntry.port = 6702;  				Int32.TryParse (serverPort' out addEntry.port);  				addEventHandled = false;  			} else {  				editEntry = new ServerEntry ();  				editEntry.name = serverName;  				editEntry.address = serverAddress;  				editEntry.port = 6702;  				Int32.TryParse (serverPort' out editEntry.port);  				editEventHandled = false;  			}  		}  	}  }  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: if (GUILayout.Button (addMode + " server"' buttonStyle)) {  	if (addEventHandled == true) {  		if (selected == -1) {  			addEntry = new ServerEntry ();  			addEntry.name = serverName;  			addEntry.address = serverAddress;  			addEntry.port = 6702;  			Int32.TryParse (serverPort' out addEntry.port);  			addEventHandled = false;  		} else {  			editEntry = new ServerEntry ();  			editEntry.name = serverName;  			editEntry.address = serverAddress;  			editEntry.port = 6702;  			Int32.TryParse (serverPort' out editEntry.port);  			editEventHandled = false;  		}  	}  }  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: if (GUILayout.Button (addMode + " server"' buttonStyle)) {  	if (addEventHandled == true) {  		if (selected == -1) {  			addEntry = new ServerEntry ();  			addEntry.name = serverName;  			addEntry.address = serverAddress;  			addEntry.port = 6702;  			Int32.TryParse (serverPort' out addEntry.port);  			addEventHandled = false;  		} else {  			editEntry = new ServerEntry ();  			editEntry.name = serverName;  			editEntry.address = serverAddress;  			editEntry.port = 6702;  			Int32.TryParse (serverPort' out editEntry.port);  			editEventHandled = false;  		}  	}  }  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: if (addEventHandled == true) {  	if (selected == -1) {  		addEntry = new ServerEntry ();  		addEntry.name = serverName;  		addEntry.address = serverAddress;  		addEntry.port = 6702;  		Int32.TryParse (serverPort' out addEntry.port);  		addEventHandled = false;  	} else {  		editEntry = new ServerEntry ();  		editEntry.name = serverName;  		editEntry.address = serverAddress;  		editEntry.port = 6702;  		Int32.TryParse (serverPort' out editEntry.port);  		editEventHandled = false;  	}  }  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: if (addEventHandled == true) {  	if (selected == -1) {  		addEntry = new ServerEntry ();  		addEntry.name = serverName;  		addEntry.address = serverAddress;  		addEntry.port = 6702;  		Int32.TryParse (serverPort' out addEntry.port);  		addEventHandled = false;  	} else {  		editEntry = new ServerEntry ();  		editEntry.name = serverName;  		editEntry.address = serverAddress;  		editEntry.port = 6702;  		Int32.TryParse (serverPort' out editEntry.port);  		editEventHandled = false;  	}  }  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: if (selected == -1) {  	addEntry = new ServerEntry ();  	addEntry.name = serverName;  	addEntry.address = serverAddress;  	addEntry.port = 6702;  	Int32.TryParse (serverPort' out addEntry.port);  	addEventHandled = false;  } else {  	editEntry = new ServerEntry ();  	editEntry.name = serverName;  	editEntry.address = serverAddress;  	editEntry.port = 6702;  	Int32.TryParse (serverPort' out editEntry.port);  	editEventHandled = false;  }  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: if (selected == -1) {  	addEntry = new ServerEntry ();  	addEntry.name = serverName;  	addEntry.address = serverAddress;  	addEntry.port = 6702;  	Int32.TryParse (serverPort' out addEntry.port);  	addEventHandled = false;  } else {  	editEntry = new ServerEntry ();  	editEntry.name = serverName;  	editEntry.address = serverAddress;  	editEntry.port = 6702;  	Int32.TryParse (serverPort' out editEntry.port);  	editEventHandled = false;  }  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: addEntry.port = 6702;  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: editEntry.port = 6702;  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: scrollPos = GUILayout.BeginScrollView (scrollPos' GUILayout.Width (WINDOW_WIDTH - 5)' GUILayout.Height (WINDOW_HEIGHT - 100));  
Magic Number,DarkMultiPlayer,ConnectionWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ConnectionWindow.cs,DrawContent,The following statement contains a magic number: scrollPos = GUILayout.BeginScrollView (scrollPos' GUILayout.Width (WINDOW_WIDTH - 5)' GUILayout.Height (WINDOW_HEIGHT - 100));  
Magic Number,DarkMultiPlayer,Settings,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Settings.cs,LoadOldSettings,The following statement contains a magic number: try {  	XmlDocument xmlDoc = new XmlDocument ();  	if (File.Exists (backupOldSettingsFile) && !File.Exists (oldSettingsFile)) {  		DarkLog.Debug ("[Settings]: Restoring old player settings file!");  		File.Move (backupOldSettingsFile' oldSettingsFile);  	}  	xmlDoc.Load (oldSettingsFile);  	playerName = xmlDoc.SelectSingleNode ("/settings/global/@username").Value;  	cacheSize = int.Parse (xmlDoc.SelectSingleNode ("/settings/global/@cache-size").Value);  	disclaimerAccepted = Int32.Parse (xmlDoc.SelectSingleNode ("/settings/global/@disclaimer").Value);  	string floatArrayString = xmlDoc.SelectSingleNode ("/settings/global/@player-color").Value;  	string[] floatArrayStringSplit = floatArrayString.Split (''');  	float redColor = float.Parse (floatArrayStringSplit [0].Trim ());  	float greenColor = float.Parse (floatArrayStringSplit [1].Trim ());  	float blueColor = float.Parse (floatArrayStringSplit [2].Trim ());  	//Bounds checking - Gotta check up on those players :)  	if (redColor < 0f) {  		redColor = 0f;  	}  	if (redColor > 1f) {  		redColor = 1f;  	}  	if (greenColor < 0f) {  		greenColor = 0f;  	}  	if (greenColor > 1f) {  		greenColor = 1f;  	}  	if (blueColor < 0f) {  		blueColor = 0f;  	}  	if (blueColor > 1f) {  		blueColor = 1f;  	}  	playerColor = new Color (redColor' greenColor' blueColor' 1f);  	chatKey = (KeyCode)Int32.Parse (xmlDoc.SelectSingleNode ("/settings/global/@chat-key").Value);  	screenshotKey = (KeyCode)Int32.Parse (xmlDoc.SelectSingleNode ("/settings/global/@screenshot-key").Value);  	selectedFlag = xmlDoc.SelectSingleNode ("/settings/global/@selected-flag").Value;  	compressionEnabled = Boolean.Parse (xmlDoc.SelectSingleNode ("/settings/global/@compression").Value);  	revertEnabled = Boolean.Parse (xmlDoc.SelectSingleNode ("/settings/global/@revert").Value);  	toolbarType = (DMPToolbarType)Int32.Parse (xmlDoc.SelectSingleNode ("/settings/global/@toolbar").Value);  	XmlNodeList serverNodeList = xmlDoc.GetElementsByTagName ("server");  	servers = new List<ServerEntry> ();  	foreach (XmlNode xmlNode in serverNodeList) {  		ServerEntry newServer = new ServerEntry ();  		newServer.name = xmlNode.Attributes ["name"].Value;  		newServer.address = xmlNode.Attributes ["address"].Value;  		Int32.TryParse (xmlNode.Attributes ["port"].Value' out newServer.port);  		servers.Add (newServer);  	}  	SaveSettings ();  } catch (Exception e) {  	DarkLog.Debug ("Error loading old settings: " + e);  }  
Magic Number,DarkMultiPlayer,Settings,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Settings.cs,GenerateNewKeypair,The following statement contains a magic number: using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider (1024)) {  	try {  		playerPublicKey = rsa.ToXmlString (false);  		playerPrivateKey = rsa.ToXmlString (true);  	} catch (Exception e) {  		Console.WriteLine ("Error: " + e);  	} finally {  		//Don't save the key in the machine store.  		rsa.PersistKeyInCsp = false;  	}  }  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions = new GUILayoutOption[4];  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions [2] = GUILayout.MinHeight (WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions [3] = GUILayout.MaxHeight (WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,InitGUI,The following statement contains a magic number: minLayoutOptions = new GUILayoutOption[4];  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,InitGUI,The following statement contains a magic number: minLayoutOptions [2] = GUILayout.ExpandHeight (true);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,InitGUI,The following statement contains a magic number: minLayoutOptions [3] = GUILayout.ExpandWidth (true);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,InitGUI,The following statement contains a magic number: vesselNameStyle.fontSize = 12;  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,InitGUI,The following statement contains a magic number: stateTextStyle.fontSize = 12;  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,Draw,The following statement contains a magic number: if (display) {  	//Calculate the minimum size of the minimize window by drawing it off the screen  	if (!calculatedMinSize) {  		minWindowRect = GUILayout.Window (6701 + Client.WINDOW_OFFSET' minWindowRect' DrawMaximize' "DMP"' windowStyle' minLayoutOptions);  	}  	if (!safeMinimized) {  		windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Status"' windowStyle' layoutOptions));  	} else {  		minWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' minWindowRect' DrawMaximize' "DMP"' windowStyle' minLayoutOptions));  	}  }  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,Draw,The following statement contains a magic number: if (display) {  	//Calculate the minimum size of the minimize window by drawing it off the screen  	if (!calculatedMinSize) {  		minWindowRect = GUILayout.Window (6701 + Client.WINDOW_OFFSET' minWindowRect' DrawMaximize' "DMP"' windowStyle' minLayoutOptions);  	}  	if (!safeMinimized) {  		windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Status"' windowStyle' layoutOptions));  	} else {  		minWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' minWindowRect' DrawMaximize' "DMP"' windowStyle' minLayoutOptions));  	}  }  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,Draw,The following statement contains a magic number: if (display) {  	//Calculate the minimum size of the minimize window by drawing it off the screen  	if (!calculatedMinSize) {  		minWindowRect = GUILayout.Window (6701 + Client.WINDOW_OFFSET' minWindowRect' DrawMaximize' "DMP"' windowStyle' minLayoutOptions);  	}  	if (!safeMinimized) {  		windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Status"' windowStyle' layoutOptions));  	} else {  		minWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' minWindowRect' DrawMaximize' "DMP"' windowStyle' minLayoutOptions));  	}  }  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,Draw,The following statement contains a magic number: if (!calculatedMinSize) {  	minWindowRect = GUILayout.Window (6701 + Client.WINDOW_OFFSET' minWindowRect' DrawMaximize' "DMP"' windowStyle' minLayoutOptions);  }  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,Draw,The following statement contains a magic number: minWindowRect = GUILayout.Window (6701 + Client.WINDOW_OFFSET' minWindowRect' DrawMaximize' "DMP"' windowStyle' minLayoutOptions);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,Draw,The following statement contains a magic number: if (!safeMinimized) {  	windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Status"' windowStyle' layoutOptions));  } else {  	minWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' minWindowRect' DrawMaximize' "DMP"' windowStyle' minLayoutOptions));  }  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,Draw,The following statement contains a magic number: if (!safeMinimized) {  	windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Status"' windowStyle' layoutOptions));  } else {  	minWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' minWindowRect' DrawMaximize' "DMP"' windowStyle' minLayoutOptions));  }  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,Draw,The following statement contains a magic number: windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Status"' windowStyle' layoutOptions));  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,Draw,The following statement contains a magic number: minWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6703 + Client.WINDOW_OFFSET' minWindowRect' DrawMaximize' "DMP"' windowStyle' minLayoutOptions));  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= weeks * (60 * 60 * 24 * 7);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= weeks * (60 * 60 * 24 * 7);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= weeks * (60 * 60 * 24 * 7);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= weeks * (60 * 60 * 24 * 7);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= days * (60 * 60 * 24);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= days * (60 * 60 * 24);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= days * (60 * 60 * 24);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= hours * (60 * 60);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= hours * (60 * 60);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToLongString,The following statement contains a magic number: time -= minutes * 60;  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= weeks * (60 * 60 * 24 * 7);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= weeks * (60 * 60 * 24 * 7);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= weeks * (60 * 60 * 24 * 7);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= weeks * (60 * 60 * 24 * 7);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= days * (60 * 60 * 24);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= days * (60 * 60 * 24);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= days * (60 * 60 * 24);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= hours * (60 * 60);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= hours * (60 * 60);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToShortString,The following statement contains a magic number: time -= minutes * 60;  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= years * (60 * 60 * 24 * 7 * 4 * 12);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= months * (60 * 60 * 24 * 7 * 4);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= weeks * (60 * 60 * 24 * 7);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= weeks * (60 * 60 * 24 * 7);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= weeks * (60 * 60 * 24 * 7);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= weeks * (60 * 60 * 24 * 7);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= days * (60 * 60 * 24);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= days * (60 * 60 * 24);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= days * (60 * 60 * 24);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= hours * (60 * 60);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= hours * (60 * 60);  
Magic Number,DarkMultiPlayer,PlayerStatusWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWindow.cs,SecondsToVeryShortString,The following statement contains a magic number: time -= minutes * 60;  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,InitGUI,The following statement contains a magic number: windowRect = new Rect (Screen.width - (WINDOW_WIDTH + 50)' (Screen.height / 2f) - (WINDOW_HEIGHT / 2f)' WINDOW_WIDTH' WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions = new GUILayoutOption[4];  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions [2] = GUILayout.MinHeight (WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions [3] = GUILayout.MaxHeight (WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Draw,The following statement contains a magic number: if (safeDisplay) {  	if (!initialized) {  		initialized = true;  		InitGUI ();  	}  	windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6705 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Debug"' windowStyle' layoutOptions));  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Draw,The following statement contains a magic number: windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6705 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Debug"' windowStyle' layoutOptions));  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (display) {  	if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  		lastUpdateTime = Client.realtimeSinceStartup;  		//Vector text  		if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  			Vessel ourVessel = FlightGlobals.fetch.activeVessel;  			vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  			vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  			vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  			vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  			vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  			vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  			vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  			vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  			vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  			if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  				vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  			}  			vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  			vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  			vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  		} else {  			vectorText = "You have to be in flight";  		}  		//NTP text  		ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  		ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  		if (timeSyncer.locked) {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  		} else {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		}  		ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  		ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  		ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  		//Connection queue text  		connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  		connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  		connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  		connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  		connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  		connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  		connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  		connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  		//Dynamic tick text  		dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  		dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  		//Requested rates text  		requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  			requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  		}  		profilerText = "Update: \n" + Profiler.updateData;  		profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  		profilerText += "GUI: \n" + Profiler.guiData;  	}  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (display) {  	if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  		lastUpdateTime = Client.realtimeSinceStartup;  		//Vector text  		if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  			Vessel ourVessel = FlightGlobals.fetch.activeVessel;  			vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  			vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  			vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  			vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  			vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  			vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  			vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  			vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  			vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  			if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  				vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  			}  			vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  			vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  			vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  		} else {  			vectorText = "You have to be in flight";  		}  		//NTP text  		ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  		ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  		if (timeSyncer.locked) {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  		} else {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		}  		ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  		ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  		ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  		//Connection queue text  		connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  		connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  		connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  		connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  		connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  		connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  		connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  		connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  		//Dynamic tick text  		dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  		dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  		//Requested rates text  		requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  			requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  		}  		profilerText = "Update: \n" + Profiler.updateData;  		profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  		profilerText += "GUI: \n" + Profiler.guiData;  	}  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (display) {  	if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  		lastUpdateTime = Client.realtimeSinceStartup;  		//Vector text  		if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  			Vessel ourVessel = FlightGlobals.fetch.activeVessel;  			vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  			vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  			vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  			vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  			vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  			vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  			vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  			vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  			vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  			if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  				vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  			}  			vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  			vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  			vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  		} else {  			vectorText = "You have to be in flight";  		}  		//NTP text  		ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  		ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  		if (timeSyncer.locked) {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  		} else {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		}  		ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  		ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  		ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  		//Connection queue text  		connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  		connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  		connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  		connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  		connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  		connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  		connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  		connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  		//Dynamic tick text  		dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  		dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  		//Requested rates text  		requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  			requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  		}  		profilerText = "Update: \n" + Profiler.updateData;  		profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  		profilerText += "GUI: \n" + Profiler.guiData;  	}  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (display) {  	if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  		lastUpdateTime = Client.realtimeSinceStartup;  		//Vector text  		if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  			Vessel ourVessel = FlightGlobals.fetch.activeVessel;  			vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  			vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  			vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  			vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  			vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  			vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  			vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  			vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  			vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  			if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  				vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  			}  			vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  			vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  			vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  		} else {  			vectorText = "You have to be in flight";  		}  		//NTP text  		ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  		ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  		if (timeSyncer.locked) {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  		} else {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		}  		ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  		ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  		ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  		//Connection queue text  		connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  		connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  		connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  		connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  		connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  		connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  		connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  		connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  		//Dynamic tick text  		dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  		dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  		//Requested rates text  		requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  			requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  		}  		profilerText = "Update: \n" + Profiler.updateData;  		profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  		profilerText += "GUI: \n" + Profiler.guiData;  	}  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (display) {  	if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  		lastUpdateTime = Client.realtimeSinceStartup;  		//Vector text  		if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  			Vessel ourVessel = FlightGlobals.fetch.activeVessel;  			vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  			vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  			vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  			vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  			vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  			vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  			vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  			vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  			vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  			if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  				vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  			}  			vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  			vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  			vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  		} else {  			vectorText = "You have to be in flight";  		}  		//NTP text  		ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  		ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  		if (timeSyncer.locked) {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  		} else {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		}  		ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  		ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  		ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  		//Connection queue text  		connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  		connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  		connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  		connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  		connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  		connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  		connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  		connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  		//Dynamic tick text  		dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  		dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  		//Requested rates text  		requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  			requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  		}  		profilerText = "Update: \n" + Profiler.updateData;  		profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  		profilerText += "GUI: \n" + Profiler.guiData;  	}  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (display) {  	if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  		lastUpdateTime = Client.realtimeSinceStartup;  		//Vector text  		if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  			Vessel ourVessel = FlightGlobals.fetch.activeVessel;  			vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  			vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  			vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  			vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  			vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  			vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  			vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  			vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  			vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  			if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  				vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  			}  			vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  			vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  			vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  		} else {  			vectorText = "You have to be in flight";  		}  		//NTP text  		ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  		ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  		if (timeSyncer.locked) {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  		} else {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		}  		ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  		ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  		ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  		//Connection queue text  		connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  		connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  		connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  		connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  		connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  		connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  		connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  		connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  		//Dynamic tick text  		dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  		dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  		//Requested rates text  		requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  			requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  		}  		profilerText = "Update: \n" + Profiler.updateData;  		profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  		profilerText += "GUI: \n" + Profiler.guiData;  	}  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (display) {  	if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  		lastUpdateTime = Client.realtimeSinceStartup;  		//Vector text  		if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  			Vessel ourVessel = FlightGlobals.fetch.activeVessel;  			vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  			vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  			vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  			vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  			vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  			vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  			vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  			vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  			vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  			if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  				vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  			}  			vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  			vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  			vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  		} else {  			vectorText = "You have to be in flight";  		}  		//NTP text  		ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  		ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  		if (timeSyncer.locked) {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  		} else {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		}  		ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  		ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  		ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  		//Connection queue text  		connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  		connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  		connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  		connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  		connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  		connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  		connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  		connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  		//Dynamic tick text  		dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  		dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  		//Requested rates text  		requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  			requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  		}  		profilerText = "Update: \n" + Profiler.updateData;  		profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  		profilerText += "GUI: \n" + Profiler.guiData;  	}  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (display) {  	if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  		lastUpdateTime = Client.realtimeSinceStartup;  		//Vector text  		if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  			Vessel ourVessel = FlightGlobals.fetch.activeVessel;  			vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  			vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  			vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  			vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  			vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  			vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  			vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  			vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  			vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  			if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  				vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  			}  			vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  			vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  			vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  		} else {  			vectorText = "You have to be in flight";  		}  		//NTP text  		ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  		ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  		if (timeSyncer.locked) {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  		} else {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		}  		ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  		ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  		ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  		//Connection queue text  		connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  		connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  		connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  		connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  		connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  		connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  		connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  		connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  		//Dynamic tick text  		dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  		dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  		//Requested rates text  		requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  			requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  		}  		profilerText = "Update: \n" + Profiler.updateData;  		profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  		profilerText += "GUI: \n" + Profiler.guiData;  	}  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (display) {  	if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  		lastUpdateTime = Client.realtimeSinceStartup;  		//Vector text  		if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  			Vessel ourVessel = FlightGlobals.fetch.activeVessel;  			vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  			vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  			vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  			vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  			vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  			vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  			vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  			vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  			vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  			if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  				vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  			}  			vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  			vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  			vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  		} else {  			vectorText = "You have to be in flight";  		}  		//NTP text  		ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  		ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  		if (timeSyncer.locked) {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  		} else {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		}  		ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  		ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  		ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  		//Connection queue text  		connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  		connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  		connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  		connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  		connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  		connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  		connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  		connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  		//Dynamic tick text  		dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  		dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  		//Requested rates text  		requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  			requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  		}  		profilerText = "Update: \n" + Profiler.updateData;  		profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  		profilerText += "GUI: \n" + Profiler.guiData;  	}  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (display) {  	if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  		lastUpdateTime = Client.realtimeSinceStartup;  		//Vector text  		if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  			Vessel ourVessel = FlightGlobals.fetch.activeVessel;  			vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  			vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  			vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  			vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  			vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  			vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  			vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  			vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  			vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  			if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  				vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  			}  			vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  			vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  			vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  		} else {  			vectorText = "You have to be in flight";  		}  		//NTP text  		ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  		ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  		if (timeSyncer.locked) {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  		} else {  			ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		}  		ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  		ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  		ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  		ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  		//Connection queue text  		connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  		connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  		connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  		connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  		connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  		connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  		connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  		connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  		connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  		//Dynamic tick text  		dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  		dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  		//Requested rates text  		requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  		foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  			requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  		}  		profilerText = "Update: \n" + Profiler.updateData;  		profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  		profilerText += "GUI: \n" + Profiler.guiData;  	}  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  	lastUpdateTime = Client.realtimeSinceStartup;  	//Vector text  	if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  		Vessel ourVessel = FlightGlobals.fetch.activeVessel;  		vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  		vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  		vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  		vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  		vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  		vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  		vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  		vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  		vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  		if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  			vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  		}  		vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  		vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  		vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  	} else {  		vectorText = "You have to be in flight";  	}  	//NTP text  	ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  	ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  	if (timeSyncer.locked) {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  	} else {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	}  	ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  	ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  	ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  	//Connection queue text  	connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  	connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  	connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  	connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  	connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  	connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  	connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  	connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  	//Dynamic tick text  	dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  	dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  	//Requested rates text  	requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  		requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  	}  	profilerText = "Update: \n" + Profiler.updateData;  	profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  	profilerText += "GUI: \n" + Profiler.guiData;  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  	lastUpdateTime = Client.realtimeSinceStartup;  	//Vector text  	if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  		Vessel ourVessel = FlightGlobals.fetch.activeVessel;  		vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  		vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  		vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  		vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  		vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  		vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  		vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  		vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  		vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  		if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  			vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  		}  		vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  		vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  		vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  	} else {  		vectorText = "You have to be in flight";  	}  	//NTP text  	ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  	ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  	if (timeSyncer.locked) {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  	} else {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	}  	ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  	ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  	ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  	//Connection queue text  	connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  	connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  	connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  	connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  	connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  	connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  	connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  	connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  	//Dynamic tick text  	dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  	dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  	//Requested rates text  	requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  		requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  	}  	profilerText = "Update: \n" + Profiler.updateData;  	profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  	profilerText += "GUI: \n" + Profiler.guiData;  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  	lastUpdateTime = Client.realtimeSinceStartup;  	//Vector text  	if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  		Vessel ourVessel = FlightGlobals.fetch.activeVessel;  		vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  		vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  		vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  		vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  		vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  		vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  		vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  		vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  		vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  		if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  			vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  		}  		vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  		vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  		vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  	} else {  		vectorText = "You have to be in flight";  	}  	//NTP text  	ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  	ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  	if (timeSyncer.locked) {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  	} else {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	}  	ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  	ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  	ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  	//Connection queue text  	connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  	connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  	connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  	connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  	connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  	connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  	connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  	connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  	//Dynamic tick text  	dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  	dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  	//Requested rates text  	requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  		requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  	}  	profilerText = "Update: \n" + Profiler.updateData;  	profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  	profilerText += "GUI: \n" + Profiler.guiData;  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  	lastUpdateTime = Client.realtimeSinceStartup;  	//Vector text  	if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  		Vessel ourVessel = FlightGlobals.fetch.activeVessel;  		vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  		vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  		vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  		vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  		vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  		vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  		vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  		vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  		vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  		if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  			vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  		}  		vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  		vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  		vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  	} else {  		vectorText = "You have to be in flight";  	}  	//NTP text  	ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  	ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  	if (timeSyncer.locked) {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  	} else {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	}  	ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  	ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  	ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  	//Connection queue text  	connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  	connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  	connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  	connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  	connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  	connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  	connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  	connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  	//Dynamic tick text  	dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  	dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  	//Requested rates text  	requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  		requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  	}  	profilerText = "Update: \n" + Profiler.updateData;  	profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  	profilerText += "GUI: \n" + Profiler.guiData;  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  	lastUpdateTime = Client.realtimeSinceStartup;  	//Vector text  	if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  		Vessel ourVessel = FlightGlobals.fetch.activeVessel;  		vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  		vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  		vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  		vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  		vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  		vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  		vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  		vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  		vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  		if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  			vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  		}  		vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  		vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  		vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  	} else {  		vectorText = "You have to be in flight";  	}  	//NTP text  	ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  	ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  	if (timeSyncer.locked) {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  	} else {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	}  	ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  	ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  	ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  	//Connection queue text  	connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  	connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  	connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  	connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  	connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  	connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  	connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  	connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  	//Dynamic tick text  	dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  	dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  	//Requested rates text  	requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  		requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  	}  	profilerText = "Update: \n" + Profiler.updateData;  	profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  	profilerText += "GUI: \n" + Profiler.guiData;  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  	lastUpdateTime = Client.realtimeSinceStartup;  	//Vector text  	if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  		Vessel ourVessel = FlightGlobals.fetch.activeVessel;  		vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  		vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  		vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  		vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  		vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  		vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  		vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  		vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  		vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  		if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  			vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  		}  		vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  		vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  		vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  	} else {  		vectorText = "You have to be in flight";  	}  	//NTP text  	ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  	ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  	if (timeSyncer.locked) {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  	} else {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	}  	ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  	ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  	ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  	//Connection queue text  	connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  	connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  	connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  	connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  	connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  	connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  	connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  	connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  	//Dynamic tick text  	dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  	dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  	//Requested rates text  	requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  		requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  	}  	profilerText = "Update: \n" + Profiler.updateData;  	profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  	profilerText += "GUI: \n" + Profiler.guiData;  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  	lastUpdateTime = Client.realtimeSinceStartup;  	//Vector text  	if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  		Vessel ourVessel = FlightGlobals.fetch.activeVessel;  		vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  		vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  		vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  		vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  		vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  		vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  		vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  		vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  		vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  		if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  			vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  		}  		vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  		vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  		vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  	} else {  		vectorText = "You have to be in flight";  	}  	//NTP text  	ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  	ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  	if (timeSyncer.locked) {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  	} else {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	}  	ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  	ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  	ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  	//Connection queue text  	connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  	connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  	connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  	connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  	connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  	connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  	connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  	connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  	//Dynamic tick text  	dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  	dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  	//Requested rates text  	requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  		requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  	}  	profilerText = "Update: \n" + Profiler.updateData;  	profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  	profilerText += "GUI: \n" + Profiler.guiData;  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  	lastUpdateTime = Client.realtimeSinceStartup;  	//Vector text  	if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  		Vessel ourVessel = FlightGlobals.fetch.activeVessel;  		vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  		vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  		vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  		vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  		vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  		vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  		vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  		vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  		vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  		if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  			vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  		}  		vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  		vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  		vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  	} else {  		vectorText = "You have to be in flight";  	}  	//NTP text  	ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  	ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  	if (timeSyncer.locked) {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  	} else {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	}  	ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  	ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  	ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  	//Connection queue text  	connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  	connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  	connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  	connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  	connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  	connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  	connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  	connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  	//Dynamic tick text  	dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  	dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  	//Requested rates text  	requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  		requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  	}  	profilerText = "Update: \n" + Profiler.updateData;  	profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  	profilerText += "GUI: \n" + Profiler.guiData;  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  	lastUpdateTime = Client.realtimeSinceStartup;  	//Vector text  	if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  		Vessel ourVessel = FlightGlobals.fetch.activeVessel;  		vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  		vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  		vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  		vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  		vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  		vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  		vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  		vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  		vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  		if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  			vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  		}  		vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  		vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  		vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  	} else {  		vectorText = "You have to be in flight";  	}  	//NTP text  	ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  	ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  	if (timeSyncer.locked) {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  	} else {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	}  	ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  	ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  	ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  	//Connection queue text  	connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  	connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  	connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  	connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  	connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  	connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  	connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  	connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  	//Dynamic tick text  	dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  	dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  	//Requested rates text  	requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  		requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  	}  	profilerText = "Update: \n" + Profiler.updateData;  	profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  	profilerText += "GUI: \n" + Profiler.guiData;  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (((Client.realtimeSinceStartup - lastUpdateTime) > DISPLAY_UPDATE_INTERVAL) || displayFast) {  	lastUpdateTime = Client.realtimeSinceStartup;  	//Vector text  	if (HighLogic.LoadedScene == GameScenes.FLIGHT && FlightGlobals.ready && FlightGlobals.fetch.activeVessel != null) {  		Vessel ourVessel = FlightGlobals.fetch.activeVessel;  		vectorText = "Forward vector: " + ourVessel.GetFwdVector () + "\n";  		vectorText += "Up vector: " + (Vector3)ourVessel.upAxis + "\n";  		vectorText += "Srf Rotation: " + ourVessel.srfRelRotation + "\n";  		vectorText += "Vessel Rotation: " + ourVessel.transform.rotation + "\n";  		vectorText += "Vessel Local Rotation: " + ourVessel.transform.localRotation + "\n";  		vectorText += "mainBody Rotation: " + (Quaternion)ourVessel.mainBody.rotation + "\n";  		vectorText += "mainBody Transform Rotation: " + (Quaternion)ourVessel.mainBody.bodyTransform.rotation + "\n";  		vectorText += "Surface Velocity: " + ourVessel.GetSrfVelocity () + "' |v|: " + ourVessel.GetSrfVelocity ().magnitude + "\n";  		vectorText += "Orbital Velocity: " + ourVessel.GetObtVelocity () + "' |v|: " + ourVessel.GetObtVelocity ().magnitude + "\n";  		if (ourVessel.orbitDriver != null && ourVessel.orbitDriver.orbit != null) {  			vectorText += "Frame Velocity: " + (Vector3)ourVessel.orbitDriver.orbit.GetFrameVel () + "' |v|: " + ourVessel.orbitDriver.orbit.GetFrameVel ().magnitude + "\n";  		}  		vectorText += "CoM offset vector: " + ourVessel.CoM.ToString () + "\n";  		vectorText += "Angular Velocity: " + ourVessel.angularVelocity + "' |v|: " + ourVessel.angularVelocity.magnitude + "\n";  		vectorText += "World Pos: " + (Vector3)ourVessel.GetWorldPos3D () + "' |pos|: " + ourVessel.GetWorldPos3D ().magnitude + "\n";  	} else {  		vectorText = "You have to be in flight";  	}  	//NTP text  	ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  	ntpText += "Current subspace: " + timeSyncer.currentSubspace + ".\n";  	if (timeSyncer.locked) {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  	} else {  		ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	}  	ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  	ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  	ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  	ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  	//Connection queue text  	connectionText = "Last send time: " + networkWorker.GetStatistics ("LastSendTime") + "ms.\n";  	connectionText += "Last receive time: " + networkWorker.GetStatistics ("LastReceiveTime") + "ms.\n";  	connectionText += "Queued outgoing messages (High): " + networkWorker.GetStatistics ("HighPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Split): " + networkWorker.GetStatistics ("SplitPriorityQueueLength") + ".\n";  	connectionText += "Queued outgoing messages (Low): " + networkWorker.GetStatistics ("LowPriorityQueueLength") + ".\n";  	connectionText += "Queued out bytes: " + networkWorker.GetStatistics ("QueuedOutBytes") + ".\n";  	connectionText += "Sent bytes: " + networkWorker.GetStatistics ("SentBytes") + ".\n";  	connectionText += "Received bytes: " + networkWorker.GetStatistics ("ReceivedBytes") + ".\n";  	connectionText += "Stored future updates: " + vesselWorker.GetStatistics ("StoredFutureUpdates") + "\n";  	connectionText += "Stored future proto updates: " + vesselWorker.GetStatistics ("StoredFutureProtoUpdates") + ".\n";  	//Dynamic tick text  	dynamicTickText = "Current tick rate: " + dynamicTickWorker.sendTickRate + "hz.\n";  	dynamicTickText += "Current max secondry vessels: " + dynamicTickWorker.maxSecondryVesselsPerTick + ".\n";  	//Requested rates text  	requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  	foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  		requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  	}  	profilerText = "Update: \n" + Profiler.updateData;  	profilerText += "Fixed Update: \n" + Profiler.fixedUpdateData;  	profilerText += "GUI: \n" + Profiler.guiData;  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: ntpText = "Warp rate: " + Math.Round (Time.timeScale' 3) + "x.\n";  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (timeSyncer.locked) {  	ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  } else {  	ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: if (timeSyncer.locked) {  	ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  } else {  	ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: ntpText += "Current subspace rate: " + Math.Round (timeSyncer.lockedSubspace.subspaceSpeed' 3) + "x.\n";  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: ntpText += "Current subspace rate: " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: ntpText += "Current Error: " + Math.Round ((timeSyncer.GetCurrentError () * 1000)' 0) + " ms.\n";  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: ntpText += "Current universe time: " + Math.Round (Planetarium.GetUniversalTime ()' 3) + " UT\n";  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: ntpText += "Network latency: " + Math.Round ((timeSyncer.networkLatencyAverage / 10000f)' 3) + " ms\n";  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: ntpText += "Server clock difference: " + Math.Round ((timeSyncer.clockOffsetAverage / 10000f)' 3) + " ms\n";  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: ntpText += "Server lag: " + Math.Round ((timeSyncer.serverLag / 10000f)' 3) + " ms\n";  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: requestedRateText = dmpSettings.playerName + ": " + Math.Round (timeSyncer.requestedRate' 3) + "x.\n";  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: foreach (KeyValuePair<string' float> playerEntry in warpWorker.clientSkewList) {  	requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  }  
Magic Number,DarkMultiPlayer,DebugWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\DebugWindow.cs,Update,The following statement contains a magic number: requestedRateText += playerEntry.Key + ": " + Math.Round (playerEntry.Value' 3) + "x.\n";  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,BuildDllFileList,The following statement contains a magic number: foreach (string checkFile in checkList) {  	//Only check DLL's  	if (checkFile.ToLower ().EndsWith (".dll")) {  		//We want the relative path to check against' example: DarkMultiPlayer/Plugins/DarkMultiPlayer.dll  		//Strip off everything from GameData  		//Replace windows backslashes with mac/linux forward slashes.  		//Make it lowercase so we don't worry about case sensitivity.  		string relativeFilePath = checkFile.ToLowerInvariant ().Substring (checkFile.ToLowerInvariant ().IndexOf ("gamedata") + 9).Replace ('\\'' '/');  		string fileHash = Common.CalculateSHA256Hash (checkFile);  		dllList.Add (relativeFilePath' fileHash);  		DarkLog.Debug ("Hashed file: " + relativeFilePath + "' hash: " + fileHash);  	}  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,BuildDllFileList,The following statement contains a magic number: if (checkFile.ToLower ().EndsWith (".dll")) {  	//We want the relative path to check against' example: DarkMultiPlayer/Plugins/DarkMultiPlayer.dll  	//Strip off everything from GameData  	//Replace windows backslashes with mac/linux forward slashes.  	//Make it lowercase so we don't worry about case sensitivity.  	string relativeFilePath = checkFile.ToLowerInvariant ().Substring (checkFile.ToLowerInvariant ().IndexOf ("gamedata") + 9).Replace ('\\'' '/');  	string fileHash = Common.CalculateSHA256Hash (checkFile);  	dllList.Add (relativeFilePath' fileHash);  	DarkLog.Debug ("Hashed file: " + relativeFilePath + "' hash: " + fileHash);  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following statement contains a magic number: using (StringReader sr = new StringReader (modFileData)) {  	while (true) {  		string currentLine = sr.ReadLine ();  		if (currentLine == null) {  			//Done reading  			break;  		}  		//Remove tabs/spaces from the start & end.  		string trimmedLine = currentLine.Trim ();  		if (trimmedLine.StartsWith ("#") || String.IsNullOrEmpty (trimmedLine)) {  			//Skip comments or empty lines.  			continue;  		}  		if (trimmedLine.StartsWith ("!")) {  			//New section  			switch (trimmedLine.Substring (1)) {  			case "required-files":  			case "optional-files":  			case "partslist":  				readMode = trimmedLine.Substring (1);  				break;  			case "resource-blacklist":  				readMode = trimmedLine.Substring (1);  				isWhiteList = false;  				break;  			case "resource-whitelist":  				readMode = trimmedLine.Substring (1);  				isWhiteList = true;  				break;  			}  		} else {  			switch (readMode) {  			case "required-files":  				{  					string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  					if (lowerFixedLine.Contains ("=")) {  						string[] splitLine = lowerFixedLine.Split ('=');  						if (splitLine.Length == 2) {  							if (!parseRequired.ContainsKey (splitLine [0])) {  								parseRequired.Add (splitLine [0]' splitLine [1].ToLowerInvariant ());  							}  						} else {  							if (splitLine.Length == 1) {  								if (!parseRequired.ContainsKey (splitLine [0])) {  									parseRequired.Add (splitLine [0]' "");  								}  							}  						}  					} else {  						if (!parseRequired.ContainsKey (lowerFixedLine)) {  							parseRequired.Add (lowerFixedLine' "");  						}  					}  				}  				break;  			case "optional-files":  				{  					string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  					if (lowerFixedLine.Contains ("=")) {  						string[] splitLine = lowerFixedLine.Split ('=');  						if (splitLine.Length == 2) {  							if (!parseOptional.ContainsKey (splitLine [0])) {  								parseOptional.Add (splitLine [0]' splitLine [1]);  							}  						} else {  							if (splitLine.Length == 1) {  								if (!parseOptional.ContainsKey (splitLine [0])) {  									parseOptional.Add (splitLine [0]' "");  								}  							}  						}  					} else {  						if (!parseOptional.ContainsKey (lowerFixedLine)) {  							parseOptional.Add (lowerFixedLine' "");  						}  					}  				}  				break;  			case "resource-whitelist":  			case "resource-blacklist":  				{  					string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  					//Resource is dll's only.  					if (lowerFixedLine.ToLowerInvariant ().EndsWith (".dll")) {  						if (parseWhiteBlackList.Contains (lowerFixedLine)) {  							parseWhiteBlackList.Add (lowerFixedLine);  						}  					}  				}  				break;  			case "partslist":  				if (!parsePartsList.Contains (trimmedLine)) {  					parsePartsList.Add (trimmedLine);  				}  				break;  			}  		}  	}  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following statement contains a magic number: using (StringReader sr = new StringReader (modFileData)) {  	while (true) {  		string currentLine = sr.ReadLine ();  		if (currentLine == null) {  			//Done reading  			break;  		}  		//Remove tabs/spaces from the start & end.  		string trimmedLine = currentLine.Trim ();  		if (trimmedLine.StartsWith ("#") || String.IsNullOrEmpty (trimmedLine)) {  			//Skip comments or empty lines.  			continue;  		}  		if (trimmedLine.StartsWith ("!")) {  			//New section  			switch (trimmedLine.Substring (1)) {  			case "required-files":  			case "optional-files":  			case "partslist":  				readMode = trimmedLine.Substring (1);  				break;  			case "resource-blacklist":  				readMode = trimmedLine.Substring (1);  				isWhiteList = false;  				break;  			case "resource-whitelist":  				readMode = trimmedLine.Substring (1);  				isWhiteList = true;  				break;  			}  		} else {  			switch (readMode) {  			case "required-files":  				{  					string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  					if (lowerFixedLine.Contains ("=")) {  						string[] splitLine = lowerFixedLine.Split ('=');  						if (splitLine.Length == 2) {  							if (!parseRequired.ContainsKey (splitLine [0])) {  								parseRequired.Add (splitLine [0]' splitLine [1].ToLowerInvariant ());  							}  						} else {  							if (splitLine.Length == 1) {  								if (!parseRequired.ContainsKey (splitLine [0])) {  									parseRequired.Add (splitLine [0]' "");  								}  							}  						}  					} else {  						if (!parseRequired.ContainsKey (lowerFixedLine)) {  							parseRequired.Add (lowerFixedLine' "");  						}  					}  				}  				break;  			case "optional-files":  				{  					string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  					if (lowerFixedLine.Contains ("=")) {  						string[] splitLine = lowerFixedLine.Split ('=');  						if (splitLine.Length == 2) {  							if (!parseOptional.ContainsKey (splitLine [0])) {  								parseOptional.Add (splitLine [0]' splitLine [1]);  							}  						} else {  							if (splitLine.Length == 1) {  								if (!parseOptional.ContainsKey (splitLine [0])) {  									parseOptional.Add (splitLine [0]' "");  								}  							}  						}  					} else {  						if (!parseOptional.ContainsKey (lowerFixedLine)) {  							parseOptional.Add (lowerFixedLine' "");  						}  					}  				}  				break;  			case "resource-whitelist":  			case "resource-blacklist":  				{  					string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  					//Resource is dll's only.  					if (lowerFixedLine.ToLowerInvariant ().EndsWith (".dll")) {  						if (parseWhiteBlackList.Contains (lowerFixedLine)) {  							parseWhiteBlackList.Add (lowerFixedLine);  						}  					}  				}  				break;  			case "partslist":  				if (!parsePartsList.Contains (trimmedLine)) {  					parsePartsList.Add (trimmedLine);  				}  				break;  			}  		}  	}  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following statement contains a magic number: while (true) {  	string currentLine = sr.ReadLine ();  	if (currentLine == null) {  		//Done reading  		break;  	}  	//Remove tabs/spaces from the start & end.  	string trimmedLine = currentLine.Trim ();  	if (trimmedLine.StartsWith ("#") || String.IsNullOrEmpty (trimmedLine)) {  		//Skip comments or empty lines.  		continue;  	}  	if (trimmedLine.StartsWith ("!")) {  		//New section  		switch (trimmedLine.Substring (1)) {  		case "required-files":  		case "optional-files":  		case "partslist":  			readMode = trimmedLine.Substring (1);  			break;  		case "resource-blacklist":  			readMode = trimmedLine.Substring (1);  			isWhiteList = false;  			break;  		case "resource-whitelist":  			readMode = trimmedLine.Substring (1);  			isWhiteList = true;  			break;  		}  	} else {  		switch (readMode) {  		case "required-files":  			{  				string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  				if (lowerFixedLine.Contains ("=")) {  					string[] splitLine = lowerFixedLine.Split ('=');  					if (splitLine.Length == 2) {  						if (!parseRequired.ContainsKey (splitLine [0])) {  							parseRequired.Add (splitLine [0]' splitLine [1].ToLowerInvariant ());  						}  					} else {  						if (splitLine.Length == 1) {  							if (!parseRequired.ContainsKey (splitLine [0])) {  								parseRequired.Add (splitLine [0]' "");  							}  						}  					}  				} else {  					if (!parseRequired.ContainsKey (lowerFixedLine)) {  						parseRequired.Add (lowerFixedLine' "");  					}  				}  			}  			break;  		case "optional-files":  			{  				string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  				if (lowerFixedLine.Contains ("=")) {  					string[] splitLine = lowerFixedLine.Split ('=');  					if (splitLine.Length == 2) {  						if (!parseOptional.ContainsKey (splitLine [0])) {  							parseOptional.Add (splitLine [0]' splitLine [1]);  						}  					} else {  						if (splitLine.Length == 1) {  							if (!parseOptional.ContainsKey (splitLine [0])) {  								parseOptional.Add (splitLine [0]' "");  							}  						}  					}  				} else {  					if (!parseOptional.ContainsKey (lowerFixedLine)) {  						parseOptional.Add (lowerFixedLine' "");  					}  				}  			}  			break;  		case "resource-whitelist":  		case "resource-blacklist":  			{  				string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  				//Resource is dll's only.  				if (lowerFixedLine.ToLowerInvariant ().EndsWith (".dll")) {  					if (parseWhiteBlackList.Contains (lowerFixedLine)) {  						parseWhiteBlackList.Add (lowerFixedLine);  					}  				}  			}  			break;  		case "partslist":  			if (!parsePartsList.Contains (trimmedLine)) {  				parsePartsList.Add (trimmedLine);  			}  			break;  		}  	}  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following statement contains a magic number: while (true) {  	string currentLine = sr.ReadLine ();  	if (currentLine == null) {  		//Done reading  		break;  	}  	//Remove tabs/spaces from the start & end.  	string trimmedLine = currentLine.Trim ();  	if (trimmedLine.StartsWith ("#") || String.IsNullOrEmpty (trimmedLine)) {  		//Skip comments or empty lines.  		continue;  	}  	if (trimmedLine.StartsWith ("!")) {  		//New section  		switch (trimmedLine.Substring (1)) {  		case "required-files":  		case "optional-files":  		case "partslist":  			readMode = trimmedLine.Substring (1);  			break;  		case "resource-blacklist":  			readMode = trimmedLine.Substring (1);  			isWhiteList = false;  			break;  		case "resource-whitelist":  			readMode = trimmedLine.Substring (1);  			isWhiteList = true;  			break;  		}  	} else {  		switch (readMode) {  		case "required-files":  			{  				string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  				if (lowerFixedLine.Contains ("=")) {  					string[] splitLine = lowerFixedLine.Split ('=');  					if (splitLine.Length == 2) {  						if (!parseRequired.ContainsKey (splitLine [0])) {  							parseRequired.Add (splitLine [0]' splitLine [1].ToLowerInvariant ());  						}  					} else {  						if (splitLine.Length == 1) {  							if (!parseRequired.ContainsKey (splitLine [0])) {  								parseRequired.Add (splitLine [0]' "");  							}  						}  					}  				} else {  					if (!parseRequired.ContainsKey (lowerFixedLine)) {  						parseRequired.Add (lowerFixedLine' "");  					}  				}  			}  			break;  		case "optional-files":  			{  				string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  				if (lowerFixedLine.Contains ("=")) {  					string[] splitLine = lowerFixedLine.Split ('=');  					if (splitLine.Length == 2) {  						if (!parseOptional.ContainsKey (splitLine [0])) {  							parseOptional.Add (splitLine [0]' splitLine [1]);  						}  					} else {  						if (splitLine.Length == 1) {  							if (!parseOptional.ContainsKey (splitLine [0])) {  								parseOptional.Add (splitLine [0]' "");  							}  						}  					}  				} else {  					if (!parseOptional.ContainsKey (lowerFixedLine)) {  						parseOptional.Add (lowerFixedLine' "");  					}  				}  			}  			break;  		case "resource-whitelist":  		case "resource-blacklist":  			{  				string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  				//Resource is dll's only.  				if (lowerFixedLine.ToLowerInvariant ().EndsWith (".dll")) {  					if (parseWhiteBlackList.Contains (lowerFixedLine)) {  						parseWhiteBlackList.Add (lowerFixedLine);  					}  				}  			}  			break;  		case "partslist":  			if (!parsePartsList.Contains (trimmedLine)) {  				parsePartsList.Add (trimmedLine);  			}  			break;  		}  	}  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following statement contains a magic number: if (trimmedLine.StartsWith ("!")) {  	//New section  	switch (trimmedLine.Substring (1)) {  	case "required-files":  	case "optional-files":  	case "partslist":  		readMode = trimmedLine.Substring (1);  		break;  	case "resource-blacklist":  		readMode = trimmedLine.Substring (1);  		isWhiteList = false;  		break;  	case "resource-whitelist":  		readMode = trimmedLine.Substring (1);  		isWhiteList = true;  		break;  	}  } else {  	switch (readMode) {  	case "required-files":  		{  			string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  			if (lowerFixedLine.Contains ("=")) {  				string[] splitLine = lowerFixedLine.Split ('=');  				if (splitLine.Length == 2) {  					if (!parseRequired.ContainsKey (splitLine [0])) {  						parseRequired.Add (splitLine [0]' splitLine [1].ToLowerInvariant ());  					}  				} else {  					if (splitLine.Length == 1) {  						if (!parseRequired.ContainsKey (splitLine [0])) {  							parseRequired.Add (splitLine [0]' "");  						}  					}  				}  			} else {  				if (!parseRequired.ContainsKey (lowerFixedLine)) {  					parseRequired.Add (lowerFixedLine' "");  				}  			}  		}  		break;  	case "optional-files":  		{  			string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  			if (lowerFixedLine.Contains ("=")) {  				string[] splitLine = lowerFixedLine.Split ('=');  				if (splitLine.Length == 2) {  					if (!parseOptional.ContainsKey (splitLine [0])) {  						parseOptional.Add (splitLine [0]' splitLine [1]);  					}  				} else {  					if (splitLine.Length == 1) {  						if (!parseOptional.ContainsKey (splitLine [0])) {  							parseOptional.Add (splitLine [0]' "");  						}  					}  				}  			} else {  				if (!parseOptional.ContainsKey (lowerFixedLine)) {  					parseOptional.Add (lowerFixedLine' "");  				}  			}  		}  		break;  	case "resource-whitelist":  	case "resource-blacklist":  		{  			string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  			//Resource is dll's only.  			if (lowerFixedLine.ToLowerInvariant ().EndsWith (".dll")) {  				if (parseWhiteBlackList.Contains (lowerFixedLine)) {  					parseWhiteBlackList.Add (lowerFixedLine);  				}  			}  		}  		break;  	case "partslist":  		if (!parsePartsList.Contains (trimmedLine)) {  			parsePartsList.Add (trimmedLine);  		}  		break;  	}  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following statement contains a magic number: if (trimmedLine.StartsWith ("!")) {  	//New section  	switch (trimmedLine.Substring (1)) {  	case "required-files":  	case "optional-files":  	case "partslist":  		readMode = trimmedLine.Substring (1);  		break;  	case "resource-blacklist":  		readMode = trimmedLine.Substring (1);  		isWhiteList = false;  		break;  	case "resource-whitelist":  		readMode = trimmedLine.Substring (1);  		isWhiteList = true;  		break;  	}  } else {  	switch (readMode) {  	case "required-files":  		{  			string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  			if (lowerFixedLine.Contains ("=")) {  				string[] splitLine = lowerFixedLine.Split ('=');  				if (splitLine.Length == 2) {  					if (!parseRequired.ContainsKey (splitLine [0])) {  						parseRequired.Add (splitLine [0]' splitLine [1].ToLowerInvariant ());  					}  				} else {  					if (splitLine.Length == 1) {  						if (!parseRequired.ContainsKey (splitLine [0])) {  							parseRequired.Add (splitLine [0]' "");  						}  					}  				}  			} else {  				if (!parseRequired.ContainsKey (lowerFixedLine)) {  					parseRequired.Add (lowerFixedLine' "");  				}  			}  		}  		break;  	case "optional-files":  		{  			string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  			if (lowerFixedLine.Contains ("=")) {  				string[] splitLine = lowerFixedLine.Split ('=');  				if (splitLine.Length == 2) {  					if (!parseOptional.ContainsKey (splitLine [0])) {  						parseOptional.Add (splitLine [0]' splitLine [1]);  					}  				} else {  					if (splitLine.Length == 1) {  						if (!parseOptional.ContainsKey (splitLine [0])) {  							parseOptional.Add (splitLine [0]' "");  						}  					}  				}  			} else {  				if (!parseOptional.ContainsKey (lowerFixedLine)) {  					parseOptional.Add (lowerFixedLine' "");  				}  			}  		}  		break;  	case "resource-whitelist":  	case "resource-blacklist":  		{  			string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  			//Resource is dll's only.  			if (lowerFixedLine.ToLowerInvariant ().EndsWith (".dll")) {  				if (parseWhiteBlackList.Contains (lowerFixedLine)) {  					parseWhiteBlackList.Add (lowerFixedLine);  				}  			}  		}  		break;  	case "partslist":  		if (!parsePartsList.Contains (trimmedLine)) {  			parsePartsList.Add (trimmedLine);  		}  		break;  	}  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following statement contains a magic number: switch (readMode) {  case "required-files":  	{  		string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  		if (lowerFixedLine.Contains ("=")) {  			string[] splitLine = lowerFixedLine.Split ('=');  			if (splitLine.Length == 2) {  				if (!parseRequired.ContainsKey (splitLine [0])) {  					parseRequired.Add (splitLine [0]' splitLine [1].ToLowerInvariant ());  				}  			} else {  				if (splitLine.Length == 1) {  					if (!parseRequired.ContainsKey (splitLine [0])) {  						parseRequired.Add (splitLine [0]' "");  					}  				}  			}  		} else {  			if (!parseRequired.ContainsKey (lowerFixedLine)) {  				parseRequired.Add (lowerFixedLine' "");  			}  		}  	}  	break;  case "optional-files":  	{  		string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  		if (lowerFixedLine.Contains ("=")) {  			string[] splitLine = lowerFixedLine.Split ('=');  			if (splitLine.Length == 2) {  				if (!parseOptional.ContainsKey (splitLine [0])) {  					parseOptional.Add (splitLine [0]' splitLine [1]);  				}  			} else {  				if (splitLine.Length == 1) {  					if (!parseOptional.ContainsKey (splitLine [0])) {  						parseOptional.Add (splitLine [0]' "");  					}  				}  			}  		} else {  			if (!parseOptional.ContainsKey (lowerFixedLine)) {  				parseOptional.Add (lowerFixedLine' "");  			}  		}  	}  	break;  case "resource-whitelist":  case "resource-blacklist":  	{  		string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  		//Resource is dll's only.  		if (lowerFixedLine.ToLowerInvariant ().EndsWith (".dll")) {  			if (parseWhiteBlackList.Contains (lowerFixedLine)) {  				parseWhiteBlackList.Add (lowerFixedLine);  			}  		}  	}  	break;  case "partslist":  	if (!parsePartsList.Contains (trimmedLine)) {  		parsePartsList.Add (trimmedLine);  	}  	break;  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following statement contains a magic number: switch (readMode) {  case "required-files":  	{  		string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  		if (lowerFixedLine.Contains ("=")) {  			string[] splitLine = lowerFixedLine.Split ('=');  			if (splitLine.Length == 2) {  				if (!parseRequired.ContainsKey (splitLine [0])) {  					parseRequired.Add (splitLine [0]' splitLine [1].ToLowerInvariant ());  				}  			} else {  				if (splitLine.Length == 1) {  					if (!parseRequired.ContainsKey (splitLine [0])) {  						parseRequired.Add (splitLine [0]' "");  					}  				}  			}  		} else {  			if (!parseRequired.ContainsKey (lowerFixedLine)) {  				parseRequired.Add (lowerFixedLine' "");  			}  		}  	}  	break;  case "optional-files":  	{  		string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  		if (lowerFixedLine.Contains ("=")) {  			string[] splitLine = lowerFixedLine.Split ('=');  			if (splitLine.Length == 2) {  				if (!parseOptional.ContainsKey (splitLine [0])) {  					parseOptional.Add (splitLine [0]' splitLine [1]);  				}  			} else {  				if (splitLine.Length == 1) {  					if (!parseOptional.ContainsKey (splitLine [0])) {  						parseOptional.Add (splitLine [0]' "");  					}  				}  			}  		} else {  			if (!parseOptional.ContainsKey (lowerFixedLine)) {  				parseOptional.Add (lowerFixedLine' "");  			}  		}  	}  	break;  case "resource-whitelist":  case "resource-blacklist":  	{  		string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  		//Resource is dll's only.  		if (lowerFixedLine.ToLowerInvariant ().EndsWith (".dll")) {  			if (parseWhiteBlackList.Contains (lowerFixedLine)) {  				parseWhiteBlackList.Add (lowerFixedLine);  			}  		}  	}  	break;  case "partslist":  	if (!parsePartsList.Contains (trimmedLine)) {  		parsePartsList.Add (trimmedLine);  	}  	break;  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following statement contains a magic number: if (lowerFixedLine.Contains ("=")) {  	string[] splitLine = lowerFixedLine.Split ('=');  	if (splitLine.Length == 2) {  		if (!parseRequired.ContainsKey (splitLine [0])) {  			parseRequired.Add (splitLine [0]' splitLine [1].ToLowerInvariant ());  		}  	} else {  		if (splitLine.Length == 1) {  			if (!parseRequired.ContainsKey (splitLine [0])) {  				parseRequired.Add (splitLine [0]' "");  			}  		}  	}  } else {  	if (!parseRequired.ContainsKey (lowerFixedLine)) {  		parseRequired.Add (lowerFixedLine' "");  	}  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following statement contains a magic number: if (splitLine.Length == 2) {  	if (!parseRequired.ContainsKey (splitLine [0])) {  		parseRequired.Add (splitLine [0]' splitLine [1].ToLowerInvariant ());  	}  } else {  	if (splitLine.Length == 1) {  		if (!parseRequired.ContainsKey (splitLine [0])) {  			parseRequired.Add (splitLine [0]' "");  		}  	}  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following statement contains a magic number: if (lowerFixedLine.Contains ("=")) {  	string[] splitLine = lowerFixedLine.Split ('=');  	if (splitLine.Length == 2) {  		if (!parseOptional.ContainsKey (splitLine [0])) {  			parseOptional.Add (splitLine [0]' splitLine [1]);  		}  	} else {  		if (splitLine.Length == 1) {  			if (!parseOptional.ContainsKey (splitLine [0])) {  				parseOptional.Add (splitLine [0]' "");  			}  		}  	}  } else {  	if (!parseOptional.ContainsKey (lowerFixedLine)) {  		parseOptional.Add (lowerFixedLine' "");  	}  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following statement contains a magic number: if (splitLine.Length == 2) {  	if (!parseOptional.ContainsKey (splitLine [0])) {  		parseOptional.Add (splitLine [0]' splitLine [1]);  	}  } else {  	if (splitLine.Length == 1) {  		if (!parseOptional.ContainsKey (splitLine [0])) {  			parseOptional.Add (splitLine [0]' "");  		}  	}  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following statement contains a magic number: foreach (string currentFile in currentGameDataFiles) {  	string relativeFilePath = currentFile.Substring (currentFile.ToLowerInvariant ().IndexOf ("gamedata") + 9).Replace ('\\'' '/');  	currentGameDataFilesNormal.Add (relativeFilePath);  	currentGameDataFilesLower.Add (relativeFilePath.ToLowerInvariant ());  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,GenerateModControlFile,The following statement contains a magic number: foreach (string modDirectory in modDirectories) {  	string lowerDirectoryName = modDirectory.Substring (modDirectory.ToLower ().IndexOf ("gamedata") + 9).ToLower ();  	if (lowerDirectoryName.StartsWith ("squad")) {  		continue;  	}  	if (lowerDirectoryName.StartsWith ("nasamission")) {  		continue;  	}  	if (lowerDirectoryName.StartsWith ("darkmultiplayer")) {  		continue;  	}  	bool modIsRequired = false;  	string[] partFiles = Directory.GetFiles (Path.Combine (gameDataDir' modDirectory)' "*"' SearchOption.AllDirectories);  	List<string> modDllFiles = new List<string> ();  	List<string> modPartCfgFiles = new List<string> ();  	foreach (string partFile in partFiles) {  		bool fileIsPartFile = false;  		string relativeFileName = partFile.Substring (partFile.ToLower ().IndexOf ("gamedata") + 9).Replace (@"\"' "/");  		if (Path.GetExtension (partFile).ToLower () == ".cfg") {  			ConfigNode cn = ConfigNode.Load (partFile);  			if (cn == null) {  				continue;  			}  			foreach (ConfigNode partNode in cn.GetNodes ("PART")) {  				string partName = partNode.GetValue ("name");  				if (partName != null) {  					DarkLog.Debug ("Part detected in " + relativeFileName + " ' name: " + partName);  					partName = partName.Replace ('_'' '.');  					modIsRequired = true;  					fileIsPartFile = true;  					partsList.Add (partName);  				}  			}  		}  		if (fileIsPartFile) {  			modPartCfgFiles.Add (relativeFileName);  		}  		if (Path.GetExtension (partFile).ToLower () == ".dll") {  			modDllFiles.Add (relativeFileName);  		}  	}  	if (modIsRequired) {  		if (modDllFiles.Count > 0) {  			//If the mod as a plugin' just require that. It's clear enough.  			requiredFiles.AddRange (modDllFiles);  		} else {  			//If the mod does *not* have a plugin (Scoop-o-matic is an example)' add the part files to required instead.  			requiredFiles.AddRange (modPartCfgFiles);  		}  	} else {  		if (whitelistMode) {  			optionalFiles.AddRange (modDllFiles);  		}  	}  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,GenerateModControlFile,The following statement contains a magic number: foreach (string modDirectory in modDirectories) {  	string lowerDirectoryName = modDirectory.Substring (modDirectory.ToLower ().IndexOf ("gamedata") + 9).ToLower ();  	if (lowerDirectoryName.StartsWith ("squad")) {  		continue;  	}  	if (lowerDirectoryName.StartsWith ("nasamission")) {  		continue;  	}  	if (lowerDirectoryName.StartsWith ("darkmultiplayer")) {  		continue;  	}  	bool modIsRequired = false;  	string[] partFiles = Directory.GetFiles (Path.Combine (gameDataDir' modDirectory)' "*"' SearchOption.AllDirectories);  	List<string> modDllFiles = new List<string> ();  	List<string> modPartCfgFiles = new List<string> ();  	foreach (string partFile in partFiles) {  		bool fileIsPartFile = false;  		string relativeFileName = partFile.Substring (partFile.ToLower ().IndexOf ("gamedata") + 9).Replace (@"\"' "/");  		if (Path.GetExtension (partFile).ToLower () == ".cfg") {  			ConfigNode cn = ConfigNode.Load (partFile);  			if (cn == null) {  				continue;  			}  			foreach (ConfigNode partNode in cn.GetNodes ("PART")) {  				string partName = partNode.GetValue ("name");  				if (partName != null) {  					DarkLog.Debug ("Part detected in " + relativeFileName + " ' name: " + partName);  					partName = partName.Replace ('_'' '.');  					modIsRequired = true;  					fileIsPartFile = true;  					partsList.Add (partName);  				}  			}  		}  		if (fileIsPartFile) {  			modPartCfgFiles.Add (relativeFileName);  		}  		if (Path.GetExtension (partFile).ToLower () == ".dll") {  			modDllFiles.Add (relativeFileName);  		}  	}  	if (modIsRequired) {  		if (modDllFiles.Count > 0) {  			//If the mod as a plugin' just require that. It's clear enough.  			requiredFiles.AddRange (modDllFiles);  		} else {  			//If the mod does *not* have a plugin (Scoop-o-matic is an example)' add the part files to required instead.  			requiredFiles.AddRange (modPartCfgFiles);  		}  	} else {  		if (whitelistMode) {  			optionalFiles.AddRange (modDllFiles);  		}  	}  }  
Magic Number,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,GenerateModControlFile,The following statement contains a magic number: foreach (string partFile in partFiles) {  	bool fileIsPartFile = false;  	string relativeFileName = partFile.Substring (partFile.ToLower ().IndexOf ("gamedata") + 9).Replace (@"\"' "/");  	if (Path.GetExtension (partFile).ToLower () == ".cfg") {  		ConfigNode cn = ConfigNode.Load (partFile);  		if (cn == null) {  			continue;  		}  		foreach (ConfigNode partNode in cn.GetNodes ("PART")) {  			string partName = partNode.GetValue ("name");  			if (partName != null) {  				DarkLog.Debug ("Part detected in " + relativeFileName + " ' name: " + partName);  				partName = partName.Replace ('_'' '.');  				modIsRequired = true;  				fileIsPartFile = true;  				partsList.Add (partName);  			}  		}  	}  	if (fileIsPartFile) {  		modPartCfgFiles.Add (relativeFileName);  	}  	if (Path.GetExtension (partFile).ToLower () == ".dll") {  		modDllFiles.Add (relativeFileName);  	}  }  
Magic Number,DarkMultiPlayer,ModWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWindow.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,ModWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWindow.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,ModWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions = new GUILayoutOption[4];  
Magic Number,DarkMultiPlayer,ModWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions [2] = GUILayout.MinHeight (WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,ModWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions [3] = GUILayout.MaxHeight (WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,ModWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWindow.cs,Draw,The following statement contains a magic number: if (safeDisplay) {  	windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6706 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Mod Control"' windowStyle' layoutOptions));  }  
Magic Number,DarkMultiPlayer,ModWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWindow.cs,Draw,The following statement contains a magic number: windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6706 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Mod Control"' windowStyle' layoutOptions));  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,InitGUI,The following statement contains a magic number: playerWindowRect = new Rect (50' (Screen.height / 2f) - (PLAYER_WINDOW_HEIGHT / 2f)' PLAYER_WINDOW_WIDTH' PLAYER_WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,InitGUI,The following statement contains a magic number: playerLayoutOptions = new GUILayoutOption[4];  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,InitGUI,The following statement contains a magic number: playerLayoutOptions [2] = GUILayout.MinHeight (PLAYER_WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,InitGUI,The following statement contains a magic number: playerLayoutOptions [3] = GUILayout.MaxHeight (PLAYER_WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,InitGUI,The following statement contains a magic number: libraryLayoutOptions = new GUILayoutOption[4];  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,InitGUI,The following statement contains a magic number: libraryLayoutOptions [2] = GUILayout.MinHeight (LIBRARY_WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,InitGUI,The following statement contains a magic number: libraryLayoutOptions [3] = GUILayout.MaxHeight (LIBRARY_WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,InitGUI,The following statement contains a magic number: textAreaOptions = new GUILayoutOption[2];  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,Draw,The following statement contains a magic number: if (safeDisplay) {  	playerWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6707 + Client.WINDOW_OFFSET' playerWindowRect' DrawPlayerContent' "DarkMultiPlayer - Craft Library"' windowStyle' playerLayoutOptions));  }  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,Draw,The following statement contains a magic number: playerWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6707 + Client.WINDOW_OFFSET' playerWindowRect' DrawPlayerContent' "DarkMultiPlayer - Craft Library"' windowStyle' playerLayoutOptions));  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,Draw,The following statement contains a magic number: if (safeDisplay && selectedPlayer != null) {  	//Sanity check  	if (playersWithCrafts.Contains (selectedPlayer) || selectedPlayer == dmpSettings.playerName) {  		libraryWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6708 + Client.WINDOW_OFFSET' libraryWindowRect' DrawLibraryContent' "DarkMultiPlayer - " + selectedPlayer + " Craft Library"' windowStyle' libraryLayoutOptions));  	} else {  		selectedPlayer = null;  	}  }  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,Draw,The following statement contains a magic number: if (playersWithCrafts.Contains (selectedPlayer) || selectedPlayer == dmpSettings.playerName) {  	libraryWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6708 + Client.WINDOW_OFFSET' libraryWindowRect' DrawLibraryContent' "DarkMultiPlayer - " + selectedPlayer + " Craft Library"' windowStyle' libraryLayoutOptions));  } else {  	selectedPlayer = null;  }  
Magic Number,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,Draw,The following statement contains a magic number: libraryWindowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6708 + Client.WINDOW_OFFSET' libraryWindowRect' DrawLibraryContent' "DarkMultiPlayer - " + selectedPlayer + " Craft Library"' windowStyle' libraryLayoutOptions));  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: switch (func) {  default:  	PrintToSelectedChannel ("Undefined function. Usage: /resize [default|medium|large]' /resize [x|y] size' or /resize show");  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "x":  	if (size <= 800 && size >= 300) {  		WINDOW_WIDTH = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "y":  	if (size <= 800 && size >= 300) {  		WINDOW_HEIGHT = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "default":  	WINDOW_HEIGHT = 300;  	WINDOW_WIDTH = 400;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "medium":  	WINDOW_HEIGHT = 600;  	WINDOW_WIDTH = 600;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "large":  	WINDOW_HEIGHT = 800;  	WINDOW_WIDTH = 800;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "show":  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: switch (func) {  default:  	PrintToSelectedChannel ("Undefined function. Usage: /resize [default|medium|large]' /resize [x|y] size' or /resize show");  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "x":  	if (size <= 800 && size >= 300) {  		WINDOW_WIDTH = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "y":  	if (size <= 800 && size >= 300) {  		WINDOW_HEIGHT = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "default":  	WINDOW_HEIGHT = 300;  	WINDOW_WIDTH = 400;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "medium":  	WINDOW_HEIGHT = 600;  	WINDOW_WIDTH = 600;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "large":  	WINDOW_HEIGHT = 800;  	WINDOW_WIDTH = 800;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "show":  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: switch (func) {  default:  	PrintToSelectedChannel ("Undefined function. Usage: /resize [default|medium|large]' /resize [x|y] size' or /resize show");  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "x":  	if (size <= 800 && size >= 300) {  		WINDOW_WIDTH = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "y":  	if (size <= 800 && size >= 300) {  		WINDOW_HEIGHT = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "default":  	WINDOW_HEIGHT = 300;  	WINDOW_WIDTH = 400;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "medium":  	WINDOW_HEIGHT = 600;  	WINDOW_WIDTH = 600;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "large":  	WINDOW_HEIGHT = 800;  	WINDOW_WIDTH = 800;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "show":  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: switch (func) {  default:  	PrintToSelectedChannel ("Undefined function. Usage: /resize [default|medium|large]' /resize [x|y] size' or /resize show");  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "x":  	if (size <= 800 && size >= 300) {  		WINDOW_WIDTH = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "y":  	if (size <= 800 && size >= 300) {  		WINDOW_HEIGHT = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "default":  	WINDOW_HEIGHT = 300;  	WINDOW_WIDTH = 400;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "medium":  	WINDOW_HEIGHT = 600;  	WINDOW_WIDTH = 600;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "large":  	WINDOW_HEIGHT = 800;  	WINDOW_WIDTH = 800;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "show":  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: switch (func) {  default:  	PrintToSelectedChannel ("Undefined function. Usage: /resize [default|medium|large]' /resize [x|y] size' or /resize show");  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "x":  	if (size <= 800 && size >= 300) {  		WINDOW_WIDTH = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "y":  	if (size <= 800 && size >= 300) {  		WINDOW_HEIGHT = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "default":  	WINDOW_HEIGHT = 300;  	WINDOW_WIDTH = 400;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "medium":  	WINDOW_HEIGHT = 600;  	WINDOW_WIDTH = 600;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "large":  	WINDOW_HEIGHT = 800;  	WINDOW_WIDTH = 800;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "show":  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: switch (func) {  default:  	PrintToSelectedChannel ("Undefined function. Usage: /resize [default|medium|large]' /resize [x|y] size' or /resize show");  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "x":  	if (size <= 800 && size >= 300) {  		WINDOW_WIDTH = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "y":  	if (size <= 800 && size >= 300) {  		WINDOW_HEIGHT = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "default":  	WINDOW_HEIGHT = 300;  	WINDOW_WIDTH = 400;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "medium":  	WINDOW_HEIGHT = 600;  	WINDOW_WIDTH = 600;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "large":  	WINDOW_HEIGHT = 800;  	WINDOW_WIDTH = 800;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "show":  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: switch (func) {  default:  	PrintToSelectedChannel ("Undefined function. Usage: /resize [default|medium|large]' /resize [x|y] size' or /resize show");  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "x":  	if (size <= 800 && size >= 300) {  		WINDOW_WIDTH = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "y":  	if (size <= 800 && size >= 300) {  		WINDOW_HEIGHT = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "default":  	WINDOW_HEIGHT = 300;  	WINDOW_WIDTH = 400;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "medium":  	WINDOW_HEIGHT = 600;  	WINDOW_WIDTH = 600;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "large":  	WINDOW_HEIGHT = 800;  	WINDOW_WIDTH = 800;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "show":  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: switch (func) {  default:  	PrintToSelectedChannel ("Undefined function. Usage: /resize [default|medium|large]' /resize [x|y] size' or /resize show");  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "x":  	if (size <= 800 && size >= 300) {  		WINDOW_WIDTH = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "y":  	if (size <= 800 && size >= 300) {  		WINDOW_HEIGHT = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "default":  	WINDOW_HEIGHT = 300;  	WINDOW_WIDTH = 400;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "medium":  	WINDOW_HEIGHT = 600;  	WINDOW_WIDTH = 600;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "large":  	WINDOW_HEIGHT = 800;  	WINDOW_WIDTH = 800;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "show":  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: switch (func) {  default:  	PrintToSelectedChannel ("Undefined function. Usage: /resize [default|medium|large]' /resize [x|y] size' or /resize show");  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "x":  	if (size <= 800 && size >= 300) {  		WINDOW_WIDTH = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "y":  	if (size <= 800 && size >= 300) {  		WINDOW_HEIGHT = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "default":  	WINDOW_HEIGHT = 300;  	WINDOW_WIDTH = 400;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "medium":  	WINDOW_HEIGHT = 600;  	WINDOW_WIDTH = 600;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "large":  	WINDOW_HEIGHT = 800;  	WINDOW_WIDTH = 800;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "show":  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: switch (func) {  default:  	PrintToSelectedChannel ("Undefined function. Usage: /resize [default|medium|large]' /resize [x|y] size' or /resize show");  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "x":  	if (size <= 800 && size >= 300) {  		WINDOW_WIDTH = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "y":  	if (size <= 800 && size >= 300) {  		WINDOW_HEIGHT = size;  		initialized = false;  		PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	} else {  		PrintToSelectedChannel ("Size is out of range.");  	}  	break;  case "default":  	WINDOW_HEIGHT = 300;  	WINDOW_WIDTH = 400;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "medium":  	WINDOW_HEIGHT = 600;  	WINDOW_WIDTH = 600;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "large":  	WINDOW_HEIGHT = 800;  	WINDOW_WIDTH = 800;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  case "show":  	PrintToSelectedChannel ("Chat window size is currently: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  	break;  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: if (size <= 800 && size >= 300) {  	WINDOW_WIDTH = size;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  } else {  	PrintToSelectedChannel ("Size is out of range.");  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: if (size <= 800 && size >= 300) {  	WINDOW_WIDTH = size;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  } else {  	PrintToSelectedChannel ("Size is out of range.");  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: if (size <= 800 && size >= 300) {  	WINDOW_HEIGHT = size;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  } else {  	PrintToSelectedChannel ("Size is out of range.");  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: if (size <= 800 && size >= 300) {  	WINDOW_HEIGHT = size;  	initialized = false;  	PrintToSelectedChannel ("New window size is: " + WINDOW_WIDTH + "x" + WINDOW_HEIGHT);  } else {  	PrintToSelectedChannel ("Size is out of range.");  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: WINDOW_HEIGHT = 300;  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: WINDOW_WIDTH = 400;  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: WINDOW_HEIGHT = 600;  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: WINDOW_WIDTH = 600;  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: WINDOW_HEIGHT = 800;  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,ResizeChat,The following statement contains a magic number: WINDOW_WIDTH = 800;  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,InitGUI,The following statement contains a magic number: windowRect = new Rect (Screen.width / 10' Screen.height / 2f - WINDOW_HEIGHT / 2f' WINDOW_WIDTH' WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,InitGUI,The following statement contains a magic number: windowLayoutOptions = new GUILayoutOption[4];  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,InitGUI,The following statement contains a magic number: windowLayoutOptions [2] = GUILayout.MinHeight (WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,InitGUI,The following statement contains a magic number: windowLayoutOptions [3] = GUILayout.MaxHeight (WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,Draw,The following statement contains a magic number: if (safeDisplay) {  	bool pressedChatShortcutKey = (Event.current.type == EventType.KeyDown && Event.current.keyCode == dmpSettings.chatKey);  	if (pressedChatShortcutKey) {  		ignoreChatInput = true;  		selectTextBox = true;  	}  	windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6704 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer Chat"' windowStyle' windowLayoutOptions));  }  
Magic Number,DarkMultiPlayer,ChatWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ChatWorker.cs,Draw,The following statement contains a magic number: windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6704 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer Chat"' windowStyle' windowLayoutOptions));  
Magic Number,DarkMultiPlayer,UniverseSyncCache,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseSyncCache.cs,ProcessingThreadMain,The following statement contains a magic number: while (true) {  	if (incomingQueue.Count == 0) {  		incomingEvent.WaitOne (500);  	} else {  		byte[] incomingBytes;  		lock (incomingQueue) {  			incomingBytes = incomingQueue.Dequeue ();  		}  		SaveToCache (incomingBytes);  	}  }  
Magic Number,DarkMultiPlayer,UniverseSyncCache,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseSyncCache.cs,ProcessingThreadMain,The following statement contains a magic number: if (incomingQueue.Count == 0) {  	incomingEvent.WaitOne (500);  } else {  	byte[] incomingBytes;  	lock (incomingQueue) {  		incomingBytes = incomingQueue.Dequeue ();  	}  	SaveToCache (incomingBytes);  }  
Magic Number,DarkMultiPlayer,UniverseSyncCache,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseSyncCache.cs,ProcessingThreadMain,The following statement contains a magic number: incomingEvent.WaitOne (500);  
Magic Number,DarkMultiPlayer,UniverseSyncCache,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseSyncCache.cs,ExpireCache,The following statement contains a magic number: while (currentCacheSize > (dmpSettings.cacheSize * 1024 * 1024)) {  	string deleteObject = null;  	//Find oldest file  	foreach (KeyValuePair<string' DateTime> testFile in fileCreationTimes) {  		if (deleteObject == null) {  			deleteObject = testFile.Key;  		}  		if (testFile.Value < fileCreationTimes [deleteObject]) {  			deleteObject = testFile.Key;  		}  	}  	DarkLog.Debug ("Deleting cached object " + deleteObject + "' reason: Cache full!");  	string deleteFile = Path.Combine (cacheDirectory' deleteObject + ".txt");  	File.Delete (deleteFile);  	currentCacheSize -= fileLengths [deleteObject];  	if (fileCreationTimes.ContainsKey (deleteObject)) {  		fileCreationTimes.Remove (deleteObject);  	}  	if (fileLengths.ContainsKey (deleteObject)) {  		fileLengths.Remove (deleteObject);  	}  }  
Magic Number,DarkMultiPlayer,UniverseSyncCache,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseSyncCache.cs,ExpireCache,The following statement contains a magic number: while (currentCacheSize > (dmpSettings.cacheSize * 1024 * 1024)) {  	string deleteObject = null;  	//Find oldest file  	foreach (KeyValuePair<string' DateTime> testFile in fileCreationTimes) {  		if (deleteObject == null) {  			deleteObject = testFile.Key;  		}  		if (testFile.Value < fileCreationTimes [deleteObject]) {  			deleteObject = testFile.Key;  		}  	}  	DarkLog.Debug ("Deleting cached object " + deleteObject + "' reason: Cache full!");  	string deleteFile = Path.Combine (cacheDirectory' deleteObject + ".txt");  	File.Delete (deleteFile);  	currentCacheSize -= fileLengths [deleteObject];  	if (fileCreationTimes.ContainsKey (deleteObject)) {  		fileCreationTimes.Remove (deleteObject);  	}  	if (fileLengths.ContainsKey (deleteObject)) {  		fileLengths.Remove (deleteObject);  	}  }  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,InitGUI,The following statement contains a magic number: windowRect = new Rect (50' (Screen.height / 2f) - (MIN_WINDOW_HEIGHT / 2f)' MIN_WINDOW_WIDTH' MIN_WINDOW_HEIGHT);  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,InitGUI,The following statement contains a magic number: windowLayoutOption = new GUILayoutOption[4];  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,InitGUI,The following statement contains a magic number: windowLayoutOption [2] = GUILayout.ExpandWidth (true);  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,InitGUI,The following statement contains a magic number: windowLayoutOption [3] = GUILayout.ExpandHeight (true);  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,InitGUI,The following statement contains a magic number: fixedButtonSizeOption = new GUILayoutOption[2];  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,Update,The following statement contains a magic number: if (workerEnabled) {  	while (newScreenshotNotifiyQueue.Count > 0) {  		string notifyPlayer = newScreenshotNotifiyQueue.Dequeue ();  		if (!display) {  			screenshotButtonHighlighted = true;  		}  		if (selectedPlayer != notifyPlayer) {  			if (!highlightedPlayers.Contains (notifyPlayer)) {  				highlightedPlayers.Add (notifyPlayer);  			}  		}  		chatWorker.QueueChannelMessage ("Server"' ""' notifyPlayer + " shared screenshot");  	}  	//Update highlights  	if (screenshotButtonHighlighted && display) {  		screenshotButtonHighlighted = false;  	}  	if (highlightedPlayers.Contains (selectedPlayer)) {  		highlightedPlayers.Remove (selectedPlayer);  	}  	while (newScreenshotQueue.Count > 0) {  		ScreenshotEntry se = newScreenshotQueue.Dequeue ();  		Texture2D screenshotTexture = new Texture2D (4' 4' TextureFormat.RGB24' false' true);  		if (screenshotTexture.LoadImage (se.screenshotData)) {  			screenshotTexture.Apply ();  			//Make sure screenshots aren't bigger than 2/3rds of the screen.  			ResizeTextureIfNeeded (ref screenshotTexture);  			//Save the texture in memory  			screenshots [se.fromPlayer] = screenshotTexture;  			DarkLog.Debug ("Loaded screenshot from " + se.fromPlayer);  		} else {  			DarkLog.Debug ("Error loading screenshot from " + se.fromPlayer);  		}  	}  	while (newScreenshotWatchQueue.Count > 0) {  		ScreenshotWatchEntry swe = newScreenshotWatchQueue.Dequeue ();  		if (swe.watchPlayer != "") {  			watchPlayers [swe.fromPlayer] = swe.watchPlayer;  		} else {  			if (watchPlayers.ContainsKey (swe.fromPlayer)) {  				watchPlayers.Remove (swe.fromPlayer);  			}  		}  	}  	if (safeSelectedPlayer != selectedPlayer) {  		windowRect.height = 0;  		windowRect.width = 0;  		safeSelectedPlayer = selectedPlayer;  		WatchPlayer (selectedPlayer);  	}  	if (Input.GetKey (dmpSettings.screenshotKey)) {  		uploadEventHandled = false;  	}  	if (!uploadEventHandled) {  		uploadEventHandled = true;  		if ((Client.realtimeSinceStartup - lastScreenshotSend) > MIN_SCREENSHOT_SEND_INTERVAL) {  			lastScreenshotSend = Client.realtimeSinceStartup;  			screenshotTaken = false;  			finishedUploadingScreenshot = false;  			uploadScreenshot = true;  			displayScreenshotUploadingMessage = true;  		}  	}  	if ((Client.realtimeSinceStartup - lastScreenshotMessageCheck) > SCREENSHOT_MESSAGE_CHECK_INTERVAL) {  		if (screenshotTaken && displayScreenshotUploadingMessage) {  			lastScreenshotMessageCheck = Client.realtimeSinceStartup;  			if (screenshotUploadMessage != null) {  				screenshotUploadMessage.duration = 0f;  			}  			if (finishedUploadingScreenshot) {  				displayScreenshotUploadingMessage = false;  				screenshotUploadMessage = ScreenMessages.PostScreenMessage ("Screenshot uploaded!"' 2f' ScreenMessageStyle.UPPER_CENTER);  			} else {  				screenshotUploadMessage = ScreenMessages.PostScreenMessage ("Uploading screenshot..."' 1f' ScreenMessageStyle.UPPER_CENTER);  			}  		}  		if (downloadingScreenshotFromPlayer != null) {  			if (screenshotDownloadMessage != null) {  				screenshotDownloadMessage.duration = 0f;  			}  			screenshotDownloadMessage = ScreenMessages.PostScreenMessage ("Downloading screenshot..."' 1f' ScreenMessageStyle.UPPER_CENTER);  		}  	}  	if (downloadingScreenshotFromPlayer == null && screenshotDownloadMessage != null) {  		screenshotDownloadMessage.duration = 0f;  		screenshotDownloadMessage = null;  	}  }  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,Update,The following statement contains a magic number: if (workerEnabled) {  	while (newScreenshotNotifiyQueue.Count > 0) {  		string notifyPlayer = newScreenshotNotifiyQueue.Dequeue ();  		if (!display) {  			screenshotButtonHighlighted = true;  		}  		if (selectedPlayer != notifyPlayer) {  			if (!highlightedPlayers.Contains (notifyPlayer)) {  				highlightedPlayers.Add (notifyPlayer);  			}  		}  		chatWorker.QueueChannelMessage ("Server"' ""' notifyPlayer + " shared screenshot");  	}  	//Update highlights  	if (screenshotButtonHighlighted && display) {  		screenshotButtonHighlighted = false;  	}  	if (highlightedPlayers.Contains (selectedPlayer)) {  		highlightedPlayers.Remove (selectedPlayer);  	}  	while (newScreenshotQueue.Count > 0) {  		ScreenshotEntry se = newScreenshotQueue.Dequeue ();  		Texture2D screenshotTexture = new Texture2D (4' 4' TextureFormat.RGB24' false' true);  		if (screenshotTexture.LoadImage (se.screenshotData)) {  			screenshotTexture.Apply ();  			//Make sure screenshots aren't bigger than 2/3rds of the screen.  			ResizeTextureIfNeeded (ref screenshotTexture);  			//Save the texture in memory  			screenshots [se.fromPlayer] = screenshotTexture;  			DarkLog.Debug ("Loaded screenshot from " + se.fromPlayer);  		} else {  			DarkLog.Debug ("Error loading screenshot from " + se.fromPlayer);  		}  	}  	while (newScreenshotWatchQueue.Count > 0) {  		ScreenshotWatchEntry swe = newScreenshotWatchQueue.Dequeue ();  		if (swe.watchPlayer != "") {  			watchPlayers [swe.fromPlayer] = swe.watchPlayer;  		} else {  			if (watchPlayers.ContainsKey (swe.fromPlayer)) {  				watchPlayers.Remove (swe.fromPlayer);  			}  		}  	}  	if (safeSelectedPlayer != selectedPlayer) {  		windowRect.height = 0;  		windowRect.width = 0;  		safeSelectedPlayer = selectedPlayer;  		WatchPlayer (selectedPlayer);  	}  	if (Input.GetKey (dmpSettings.screenshotKey)) {  		uploadEventHandled = false;  	}  	if (!uploadEventHandled) {  		uploadEventHandled = true;  		if ((Client.realtimeSinceStartup - lastScreenshotSend) > MIN_SCREENSHOT_SEND_INTERVAL) {  			lastScreenshotSend = Client.realtimeSinceStartup;  			screenshotTaken = false;  			finishedUploadingScreenshot = false;  			uploadScreenshot = true;  			displayScreenshotUploadingMessage = true;  		}  	}  	if ((Client.realtimeSinceStartup - lastScreenshotMessageCheck) > SCREENSHOT_MESSAGE_CHECK_INTERVAL) {  		if (screenshotTaken && displayScreenshotUploadingMessage) {  			lastScreenshotMessageCheck = Client.realtimeSinceStartup;  			if (screenshotUploadMessage != null) {  				screenshotUploadMessage.duration = 0f;  			}  			if (finishedUploadingScreenshot) {  				displayScreenshotUploadingMessage = false;  				screenshotUploadMessage = ScreenMessages.PostScreenMessage ("Screenshot uploaded!"' 2f' ScreenMessageStyle.UPPER_CENTER);  			} else {  				screenshotUploadMessage = ScreenMessages.PostScreenMessage ("Uploading screenshot..."' 1f' ScreenMessageStyle.UPPER_CENTER);  			}  		}  		if (downloadingScreenshotFromPlayer != null) {  			if (screenshotDownloadMessage != null) {  				screenshotDownloadMessage.duration = 0f;  			}  			screenshotDownloadMessage = ScreenMessages.PostScreenMessage ("Downloading screenshot..."' 1f' ScreenMessageStyle.UPPER_CENTER);  		}  	}  	if (downloadingScreenshotFromPlayer == null && screenshotDownloadMessage != null) {  		screenshotDownloadMessage.duration = 0f;  		screenshotDownloadMessage = null;  	}  }  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,Update,The following statement contains a magic number: while (newScreenshotQueue.Count > 0) {  	ScreenshotEntry se = newScreenshotQueue.Dequeue ();  	Texture2D screenshotTexture = new Texture2D (4' 4' TextureFormat.RGB24' false' true);  	if (screenshotTexture.LoadImage (se.screenshotData)) {  		screenshotTexture.Apply ();  		//Make sure screenshots aren't bigger than 2/3rds of the screen.  		ResizeTextureIfNeeded (ref screenshotTexture);  		//Save the texture in memory  		screenshots [se.fromPlayer] = screenshotTexture;  		DarkLog.Debug ("Loaded screenshot from " + se.fromPlayer);  	} else {  		DarkLog.Debug ("Error loading screenshot from " + se.fromPlayer);  	}  }  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,Update,The following statement contains a magic number: while (newScreenshotQueue.Count > 0) {  	ScreenshotEntry se = newScreenshotQueue.Dequeue ();  	Texture2D screenshotTexture = new Texture2D (4' 4' TextureFormat.RGB24' false' true);  	if (screenshotTexture.LoadImage (se.screenshotData)) {  		screenshotTexture.Apply ();  		//Make sure screenshots aren't bigger than 2/3rds of the screen.  		ResizeTextureIfNeeded (ref screenshotTexture);  		//Save the texture in memory  		screenshots [se.fromPlayer] = screenshotTexture;  		DarkLog.Debug ("Loaded screenshot from " + se.fromPlayer);  	} else {  		DarkLog.Debug ("Error loading screenshot from " + se.fromPlayer);  	}  }  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,ResizeTextureIfNeeded,The following statement contains a magic number: if (screenshotTexture.width > resizeWidth || screenshotTexture.height > resizeHeight) {  	RenderTexture renderTexture = new RenderTexture (resizeWidth' resizeHeight' 24);  	renderTexture.useMipMap = false;  	Graphics.Blit (screenshotTexture' renderTexture);  	RenderTexture.active = renderTexture;  	Texture2D resizeTexture = new Texture2D (resizeWidth' resizeHeight' TextureFormat.RGB24' false);  	resizeTexture.ReadPixels (new Rect (0' 0' resizeWidth' resizeHeight)' 0' 0);  	resizeTexture.Apply ();  	screenshotTexture = resizeTexture;  	RenderTexture.active = null;  }  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,Draw,The following statement contains a magic number: if (safeDisplay) {  	windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6710 + Client.WINDOW_OFFSET' windowRect' DrawContent' "Screenshots"' windowStyle' windowLayoutOption));  }  
Magic Number,DarkMultiPlayer,ScreenshotWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ScreenshotWorker.cs,Draw,The following statement contains a magic number: windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6710 + Client.WINDOW_OFFSET' windowRect' DrawContent' "Screenshots"' windowStyle' windowLayoutOption));  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,UpdateVesselColorsFromLockName,The following statement contains a magic number: if (lockName.StartsWith ("control-")) {  	string vesselID = lockName.Substring (8);  	foreach (Vessel findVessel in FlightGlobals.fetch.vessels) {  		if (findVessel.id.ToString () == vesselID) {  			SetVesselColor (findVessel);  		}  	}  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,ConvertColorToFloatArray,The following statement contains a magic number: returnArray [2] = convertColour.b;  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,ConvertFloatArrayToColor,The following statement contains a magic number: return new Color (convertArray [0]' convertArray [1]' convertArray [2]);  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,GenerateRandomColor,The following statement contains a magic number: switch (seed % 17) {  case 0:  	return Color.red;  case 1:  	return new Color (1' 0' 0.5f' 1);  //Rosy pink  case 2:  	return new Color (0.6f' 0' 0.5f' 1);  //OU Crimson  case 3:  	return new Color (1' 0.5f' 0' 1);  //Orange  case 4:  	return Color.yellow;  case 5:  	return new Color (1' 0.84f' 0' 1);  //Gold  case 6:  	return Color.green;  case 7:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 8:  	return new Color (0' 0.651f' 0.576f' 1);  //Persian Green  case 9:  	return new Color (0' 0.659f' 0.420f' 1);  //Jade  case 10:  	return new Color (0.043f' 0.855f' 0.318f' 1);  //Malachite  case 11:  	return Color.cyan;  case 12:  	return new Color (0.537f' 0.812f' 0.883f' 1);  //Baby blue;  case 13:  	return new Color (0' 0.529f' 0.741f' 1);  //NCS blue  case 14:  	return new Color (0.255f' 0.412f' 0.882f' 1);  //Royal Blue  case 15:  	return new Color (0.5f' 0' 1' 1);  //Violet  default:  	return Color.magenta;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions = new GUILayoutOption[4];  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions [2] = GUILayout.ExpandWidth (true);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions [3] = GUILayout.ExpandHeight (true);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: smallOption = new GUILayoutOption[2];  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: smallOption [0] = GUILayout.Width (100);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: toolbarBtnStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: toolbarBtnStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: toolbarBtnStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: toolbarBtnStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: buttonStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: buttonStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: buttonStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: buttonStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: descriptorStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: descriptorStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: descriptorStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: descriptorStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: plrNameStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: plrNameStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: plrNameStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: plrNameStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: textFieldStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: textFieldStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: textFieldStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: textFieldStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: noteStyle.fontSize = 12;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: noteStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: noteStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: noteStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: noteStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: sectionHeaderStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: sectionHeaderStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: sectionHeaderStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,InitGUI,The following statement contains a magic number: sectionHeaderStyle.padding = new RectOffset (4' 4' 2' 2);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,Draw,The following statement contains a magic number: if (safeDisplay) {  	windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6711 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Options"' windowStyle' layoutOptions));  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,Draw,The following statement contains a magic number: windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6711 + Client.WINDOW_OFFSET' windowRect' DrawContent' "DarkMultiPlayer - Options"' windowStyle' layoutOptions));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (windowRect.width - 24' 0' 19' 19)' "X")) {  	display = false;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (windowRect.width - 24' 0' 19' 19)' "X")) {  	display = false;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (windowRect.width - 24' 0' 19' 19)' "X")) {  	display = false;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Box (new Rect (2' 20' windowRect.width - 4' 20)' string.Empty' sectionHeaderStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Box (new Rect (2' 20' windowRect.width - 4' 20)' string.Empty' sectionHeaderStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Box (new Rect (2' 20' windowRect.width - 4' 20)' string.Empty' sectionHeaderStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Box (new Rect (2' 20' windowRect.width - 4' 20)' string.Empty' sectionHeaderStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: windowY += 20 + 2;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: windowY += 20 + 2;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.PLAYER) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  	plrNameStyle.normal.textColor = dmpSettings.playerColor;  	if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  		GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	else {  		string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  		if (!newName.Equals (dmpSettings.playerName)) {  			dmpSettings.playerName = newName;  			dmpSettings.SaveSettings ();  		}  	}  	groupY += 20 + 4;  	Color playerColor = dmpSettings.playerColor;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  	playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  	playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  	playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  		playerColor = PlayerColorWorker.GenerateRandomColor ();  	if (!playerColor.Equals (dmpSettings.playerColor)) {  		dmpSettings.playerColor = playerColor;  		dmpSettings.SaveSettings ();  		if (networkWorker != null && playerColorWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  			playerColorWorker.SendPlayerColorToServer ();  	}  	GUI.EndGroup ();  	// windowY += 106 + 5;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 106));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (0' groupY' descWidth' 20)' "Name:"' descriptorStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  else {  	string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	if (!newName.Equals (dmpSettings.playerName)) {  		dmpSettings.playerName = newName;  		dmpSettings.SaveSettings ();  	}  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  else {  	string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	if (!newName.Equals (dmpSettings.playerName)) {  		dmpSettings.playerName = newName;  		dmpSettings.SaveSettings ();  	}  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  else {  	string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	if (!newName.Equals (dmpSettings.playerName)) {  		dmpSettings.playerName = newName;  		dmpSettings.SaveSettings ();  	}  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (networkWorker != null && networkWorker.state == DarkMultiPlayerCommon.ClientState.RUNNING)  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  else {  	string newName = GUI.TextField (new Rect (descWidth + sepWidth' 0' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  	if (!newName.Equals (dmpSettings.playerName)) {  		dmpSettings.playerName = newName;  		dmpSettings.SaveSettings ();  	}  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' dmpSettings.playerName' plrNameStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 20 + 4;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 20 + 4;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (0' groupY' descWidth' 20)' "Red:"' descriptorStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: playerColor.r = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.r' 0' 1);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 20;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (0' groupY' descWidth' 20)' "Green:"' descriptorStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: playerColor.g = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.g' 0' 1);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 20;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (0' groupY' descWidth' 20)' "Blue:"' descriptorStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: playerColor.b = GUI.HorizontalSlider (new Rect (descWidth + sepWidth' groupY + 5' windowRect.width - (descWidth + sepWidth) - 20' 12)' dmpSettings.playerColor.b' 0' 1);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 22;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  	playerColor = PlayerColorWorker.GenerateRandomColor ();  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Random Color"' buttonStyle))  	playerColor = PlayerColorWorker.GenerateRandomColor ();  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CACHE) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  	GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  	groupY += 20;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  	string newSizeStr = GUI.TextField (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 152' 20)' (dmpSettings.cacheSize / 1024).ToString ()' textFieldStyle);  	GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  	int newSize;  	if (string.IsNullOrEmpty (newSizeStr))  		newSize = 1;  	else {  		if (int.TryParse (newSizeStr' out newSize)) {  			if (newSize < 1)  				newSize = 1;  			else if (newSize > 1000000)  				newSize = 1000000;  		} else  			newSize = 100000;  	}  	if (newSize != dmpSettings.cacheSize) {  		dmpSettings.cacheSize = newSize * 1024;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  		universeSyncCache.ExpireCache ();  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  		universeSyncCache.DeleteCache ();  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 84));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (0' groupY' descWidth' 20)' "Current:"' descriptorStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 102' 20)' Mathf.Round (universeSyncCache.currentCacheSize / 1024).ToString () + " KB");  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 20;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (0' groupY' descWidth' 20)' "Maximum:"' descriptorStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (descWidth + sepWidth + 80' groupY' 100' 20)' "kilobytes (KB)");  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (string.IsNullOrEmpty (newSizeStr))  	newSize = 1;  else {  	if (int.TryParse (newSizeStr' out newSize)) {  		if (newSize < 1)  			newSize = 1;  		else if (newSize > 1000000)  			newSize = 1000000;  	} else  		newSize = 100000;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (string.IsNullOrEmpty (newSizeStr))  	newSize = 1;  else {  	if (int.TryParse (newSizeStr' out newSize)) {  		if (newSize < 1)  			newSize = 1;  		else if (newSize > 1000000)  			newSize = 1000000;  	} else  		newSize = 100000;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (string.IsNullOrEmpty (newSizeStr))  	newSize = 1;  else {  	if (int.TryParse (newSizeStr' out newSize)) {  		if (newSize < 1)  			newSize = 1;  		else if (newSize > 1000000)  			newSize = 1000000;  	} else  		newSize = 100000;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (int.TryParse (newSizeStr' out newSize)) {  	if (newSize < 1)  		newSize = 1;  	else if (newSize > 1000000)  		newSize = 1000000;  } else  	newSize = 100000;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (int.TryParse (newSizeStr' out newSize)) {  	if (newSize < 1)  		newSize = 1;  	else if (newSize > 1000000)  		newSize = 1000000;  } else  	newSize = 100000;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (int.TryParse (newSizeStr' out newSize)) {  	if (newSize < 1)  		newSize = 1;  	else if (newSize > 1000000)  		newSize = 1000000;  } else  	newSize = 100000;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (newSize < 1)  	newSize = 1;  else if (newSize > 1000000)  	newSize = 1000000;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (newSize < 1)  	newSize = 1;  else if (newSize > 1000000)  	newSize = 1000000;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (newSize > 1000000)  	newSize = 1000000;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (newSize > 1000000)  	newSize = 1000000;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: newSize = 1000000;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: newSize = 100000;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (newSize != dmpSettings.cacheSize) {  	dmpSettings.cacheSize = newSize * 1024;  	dmpSettings.SaveSettings ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: dmpSettings.cacheSize = newSize * 1024;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 22;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (0' groupY' descWidth' 20)' "Manage:"' descriptorStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  	universeSyncCache.ExpireCache ();  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Expire"))  	universeSyncCache.ExpireCache ();  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 22;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  	universeSyncCache.DeleteCache ();  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Delete"))  	universeSyncCache.DeleteCache ();  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CONTROLS) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  	groupY += 48;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  	string chatKey = dmpSettings.chatKey.ToString ();  	if (settingChat) {  		chatKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.chatKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingChat = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  		settingScreenshot = false;  		settingChat = !settingChat;  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  	string screenshotKey = dmpSettings.screenshotKey.ToString ();  	if (settingScreenshot) {  		screenshotKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.screenshotKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingScreenshot = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  		settingChat = false;  		settingScreenshot = !settingScreenshot;  	}  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CONTROLS) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  	groupY += 48;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  	string chatKey = dmpSettings.chatKey.ToString ();  	if (settingChat) {  		chatKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.chatKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingChat = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  		settingScreenshot = false;  		settingChat = !settingChat;  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  	string screenshotKey = dmpSettings.screenshotKey.ToString ();  	if (settingScreenshot) {  		screenshotKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.screenshotKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingScreenshot = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  		settingChat = false;  		settingScreenshot = !settingScreenshot;  	}  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CONTROLS) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  	groupY += 48;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  	string chatKey = dmpSettings.chatKey.ToString ();  	if (settingChat) {  		chatKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.chatKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingChat = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  		settingScreenshot = false;  		settingChat = !settingChat;  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  	string screenshotKey = dmpSettings.screenshotKey.ToString ();  	if (settingScreenshot) {  		screenshotKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.screenshotKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingScreenshot = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  		settingChat = false;  		settingScreenshot = !settingScreenshot;  	}  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CONTROLS) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  	groupY += 48;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  	string chatKey = dmpSettings.chatKey.ToString ();  	if (settingChat) {  		chatKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.chatKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingChat = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  		settingScreenshot = false;  		settingChat = !settingChat;  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  	string screenshotKey = dmpSettings.screenshotKey.ToString ();  	if (settingScreenshot) {  		screenshotKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.screenshotKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingScreenshot = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  		settingChat = false;  		settingScreenshot = !settingScreenshot;  	}  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CONTROLS) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  	groupY += 48;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  	string chatKey = dmpSettings.chatKey.ToString ();  	if (settingChat) {  		chatKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.chatKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingChat = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  		settingScreenshot = false;  		settingChat = !settingChat;  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  	string screenshotKey = dmpSettings.screenshotKey.ToString ();  	if (settingScreenshot) {  		screenshotKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.screenshotKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingScreenshot = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  		settingChat = false;  		settingScreenshot = !settingScreenshot;  	}  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CONTROLS) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  	groupY += 48;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  	string chatKey = dmpSettings.chatKey.ToString ();  	if (settingChat) {  		chatKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.chatKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingChat = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  		settingScreenshot = false;  		settingChat = !settingChat;  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  	string screenshotKey = dmpSettings.screenshotKey.ToString ();  	if (settingScreenshot) {  		screenshotKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.screenshotKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingScreenshot = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  		settingChat = false;  		settingScreenshot = !settingScreenshot;  	}  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CONTROLS) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  	groupY += 48;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  	string chatKey = dmpSettings.chatKey.ToString ();  	if (settingChat) {  		chatKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.chatKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingChat = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  		settingScreenshot = false;  		settingChat = !settingChat;  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  	string screenshotKey = dmpSettings.screenshotKey.ToString ();  	if (settingScreenshot) {  		screenshotKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.screenshotKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingScreenshot = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  		settingChat = false;  		settingScreenshot = !settingScreenshot;  	}  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CONTROLS) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  	groupY += 48;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  	string chatKey = dmpSettings.chatKey.ToString ();  	if (settingChat) {  		chatKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.chatKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingChat = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  		settingScreenshot = false;  		settingChat = !settingChat;  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  	string screenshotKey = dmpSettings.screenshotKey.ToString ();  	if (settingScreenshot) {  		screenshotKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.screenshotKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingScreenshot = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  		settingChat = false;  		settingScreenshot = !settingScreenshot;  	}  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CONTROLS) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  	groupY += 48;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  	string chatKey = dmpSettings.chatKey.ToString ();  	if (settingChat) {  		chatKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.chatKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingChat = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  		settingScreenshot = false;  		settingChat = !settingChat;  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  	string screenshotKey = dmpSettings.screenshotKey.ToString ();  	if (settingScreenshot) {  		screenshotKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.screenshotKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingScreenshot = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  		settingChat = false;  		settingScreenshot = !settingScreenshot;  	}  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CONTROLS) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  	groupY += 48;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  	string chatKey = dmpSettings.chatKey.ToString ();  	if (settingChat) {  		chatKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.chatKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingChat = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  		settingScreenshot = false;  		settingChat = !settingChat;  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  	string screenshotKey = dmpSettings.screenshotKey.ToString ();  	if (settingScreenshot) {  		screenshotKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.screenshotKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingScreenshot = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  		settingChat = false;  		settingScreenshot = !settingScreenshot;  	}  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CONTROLS) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  	groupY += 48;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  	string chatKey = dmpSettings.chatKey.ToString ();  	if (settingChat) {  		chatKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.chatKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingChat = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  		settingScreenshot = false;  		settingChat = !settingChat;  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  	string screenshotKey = dmpSettings.screenshotKey.ToString ();  	if (settingScreenshot) {  		screenshotKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.screenshotKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingScreenshot = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  		settingChat = false;  		settingScreenshot = !settingScreenshot;  	}  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CONTROLS) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  	groupY += 48;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  	string chatKey = dmpSettings.chatKey.ToString ();  	if (settingChat) {  		chatKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.chatKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingChat = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  		settingScreenshot = false;  		settingChat = !settingChat;  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  	string screenshotKey = dmpSettings.screenshotKey.ToString ();  	if (settingScreenshot) {  		screenshotKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.screenshotKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingScreenshot = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  		settingChat = false;  		settingScreenshot = !settingScreenshot;  	}  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.CONTROLS) {  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  	groupY += 48;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  	string chatKey = dmpSettings.chatKey.ToString ();  	if (settingChat) {  		chatKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.chatKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingChat = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  		settingScreenshot = false;  		settingChat = !settingChat;  	}  	groupY += 22;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  	string screenshotKey = dmpSettings.screenshotKey.ToString ();  	if (settingScreenshot) {  		screenshotKey = settingKeyMessage;  		if (Event.current.isKey) {  			if (Event.current.keyCode != KeyCode.Escape) {  				dmpSettings.screenshotKey = Event.current.keyCode;  				dmpSettings.SaveSettings ();  			}  			settingScreenshot = false;  		}  	}  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  		settingChat = false;  		settingScreenshot = !settingScreenshot;  	}  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 92));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (0' groupY' windowRect.width - 20' 48)' "Click a button below to select the action you want to change. Then press a key to set the binding. To cancel' click the button again or press Escape."' noteStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 48;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (0' groupY' descWidth' 20)' "Chat:"' descriptorStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  	settingScreenshot = false;  	settingChat = !settingChat;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' chatKey' buttonStyle)) {  	settingScreenshot = false;  	settingChat = !settingChat;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 22;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (0' groupY' descWidth' 20)' "Screenshot:"' descriptorStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  	settingChat = false;  	settingScreenshot = !settingScreenshot;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' screenshotKey' buttonStyle)) {  	settingChat = false;  	settingScreenshot = !settingScreenshot;  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (selectedTab == OptionsTab.ADVANCED) {  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  	groupY = 0;  	GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  		modWorker.GenerateModControlFile (true);  	groupY += 22;  	if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  		modWorker.GenerateModControlFile (false);  	GUI.EndGroup ();  	windowY += 47;  	GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  	windowY += 22;  	GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  	groupY = 0;  	bool toggleCompression = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.compressionEnabled' "Compress Network Traffic");  	if (toggleCompression != dmpSettings.compressionEnabled) {  		dmpSettings.compressionEnabled = toggleCompression;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	bool toggleRevert = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' dmpSettings.revertEnabled' "Enable Revert");  	if (toggleRevert != dmpSettings.revertEnabled) {  		dmpSettings.revertEnabled = toggleRevert;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  		dmpSettings.disclaimerAccepted = 0;  		dmpSettings.SaveSettings ();  	}  	groupY += 22;  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  		int newSetting = (int)dmpSettings.toolbarType + 1;  		//Overflow to 0  		if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  			newSetting = 0;  		}  		dmpSettings.toolbarType = (DMPToolbarType)newSetting;  		dmpSettings.SaveSettings ();  		UpdateToolbarString ();  		toolbarSupport.DetectSettingsChange ();  	}  	groupY += 22;  	#if DEBUG  	if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  		modWorker.CheckCommonStockParts ();  	}  	#endif  	GUI.EndGroup ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Mod Control"' sectionHeaderStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: windowY += 22;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 42));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Label (new Rect (0' groupY' descWidth' 20)' "Generate:"' descriptorStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  	modWorker.GenerateModControlFile (true);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Whitelist"' buttonStyle))  	modWorker.GenerateModControlFile (true);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 22;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  	modWorker.GenerateModControlFile (false);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (descWidth + sepWidth' groupY' windowRect.width - (descWidth + sepWidth) - 20' 20)' "Blacklist"' buttonStyle))  	modWorker.GenerateModControlFile (false);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: windowY += 47;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.Box (new Rect (2' windowY' windowRect.width - 4' 20)' "Other"' sectionHeaderStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: windowY += 22;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: GUI.BeginGroup (new Rect (10' windowY' windowRect.width - 20' 148));  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 22;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 22;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: universeConverterWindow.display = GUI.Toggle (new Rect (0' groupY' windowRect.width - 20' 20)' universeConverterWindow.display' "Generate DMP universe from saved game..."' buttonStyle);  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 22;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  	dmpSettings.disclaimerAccepted = 0;  	dmpSettings.SaveSettings ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Reset Disclaimer"' buttonStyle)) {  	dmpSettings.disclaimerAccepted = 0;  	dmpSettings.SaveSettings ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 22;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  	int newSetting = (int)dmpSettings.toolbarType + 1;  	//Overflow to 0  	if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  		newSetting = 0;  	}  	dmpSettings.toolbarType = (DMPToolbarType)newSetting;  	dmpSettings.SaveSettings ();  	UpdateToolbarString ();  	toolbarSupport.DetectSettingsChange ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' toolbarMode' buttonStyle)) {  	int newSetting = (int)dmpSettings.toolbarType + 1;  	//Overflow to 0  	if (!Enum.IsDefined (typeof(DMPToolbarType)' newSetting)) {  		newSetting = 0;  	}  	dmpSettings.toolbarType = (DMPToolbarType)newSetting;  	dmpSettings.SaveSettings ();  	UpdateToolbarString ();  	toolbarSupport.DetectSettingsChange ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: groupY += 22;  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  	modWorker.CheckCommonStockParts ();  }  
Magic Number,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,DrawContent,The following statement contains a magic number: if (GUI.Button (new Rect (0' groupY' windowRect.width - 20' 20)' "Check missing parts"' buttonStyle)) {  	modWorker.CheckCommonStockParts ();  }  
Magic Number,DarkMultiPlayer,UniverseConverter,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverter.cs,GetSavedNames,The following statement contains a magic number: foreach (string saveDirectory in possibleSaves) {  	string trimmedDirectory = saveDirectory;  	//Cut the trailing path character off if we need to  	if (saveDirectory [saveDirectory.Length - 1] == Path.DirectorySeparatorChar) {  		trimmedDirectory = saveDirectory.Substring (0' saveDirectory.Length - 2);  	}  	string saveName = trimmedDirectory.Substring (trimmedDirectory.LastIndexOf (Path.DirectorySeparatorChar) + 1);  	if (saveName.ToLower () != "training" && saveName.ToLower () != "scenarios") {  		if (File.Exists (Path.Combine (saveDirectory' "persistent.sfs"))) {  			returnList.Add (saveName);  		}  	}  }  
Magic Number,DarkMultiPlayer,UniverseConverter,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverter.cs,GetSavedNames,The following statement contains a magic number: if (saveDirectory [saveDirectory.Length - 1] == Path.DirectorySeparatorChar) {  	trimmedDirectory = saveDirectory.Substring (0' saveDirectory.Length - 2);  }  
Magic Number,DarkMultiPlayer,UniverseConverter,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverter.cs,GetSavedNames,The following statement contains a magic number: trimmedDirectory = saveDirectory.Substring (0' saveDirectory.Length - 2);  
Magic Number,DarkMultiPlayer,UniverseConverterWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverterWindow.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,UniverseConverterWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverterWindow.cs,InitGUI,The following statement contains a magic number: moveRect = new Rect (0' 0' 10000' 20);  
Magic Number,DarkMultiPlayer,UniverseConverterWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverterWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions = new GUILayoutOption[4];  
Magic Number,DarkMultiPlayer,UniverseConverterWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverterWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions [2] = GUILayout.ExpandWidth (true);  
Magic Number,DarkMultiPlayer,UniverseConverterWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverterWindow.cs,InitGUI,The following statement contains a magic number: layoutOptions [3] = GUILayout.ExpandHeight (true);  
Magic Number,DarkMultiPlayer,UniverseConverterWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverterWindow.cs,Draw,The following statement contains a magic number: if (safeDisplay) {  	windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6712 + Client.WINDOW_OFFSET' windowRect' DrawContent' "Universe Converter"' windowStyle' layoutOptions));  }  
Magic Number,DarkMultiPlayer,UniverseConverterWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\UniverseConverterWindow.cs,Draw,The following statement contains a magic number: windowRect = DMPGuiUtil.PreventOffscreenWindow (GUILayout.Window (6712 + Client.WINDOW_OFFSET' windowRect' DrawContent' "Universe Converter"' windowStyle' layoutOptions));  
Magic Number,DarkMultiPlayer,ProfilerData,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Profiler.cs,ReportTime,The following statement contains a magic number: if (tickHistory.Count > 300) {  	tickHistory.RemoveAt (0);  }  
Magic Number,DarkMultiPlayer,ProfilerData,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\Profiler.cs,ReportTime,The following statement contains a magic number: if (deltaHistory.Count > 300) {  	deltaHistory.RemoveAt (0);  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: try {  	returnUpdate.vesselID = updateVessel.id;  	returnUpdate.planetTime = Planetarium.GetUniversalTime ();  	returnUpdate.bodyName = updateVessel.mainBody.bodyName;  	returnUpdate.rotation = new float[4];  	returnUpdate.rotation [0] = updateVessel.srfRelRotation.x;  	returnUpdate.rotation [1] = updateVessel.srfRelRotation.y;  	returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  	returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  	returnUpdate.angularVelocity = new float[3];  	returnUpdate.angularVelocity [0] = updateVessel.angularVelocity.x;  	returnUpdate.angularVelocity [1] = updateVessel.angularVelocity.y;  	returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  	//Flight state  	returnUpdate.flightState = new FlightCtrlState ();  	returnUpdate.flightState.CopyFrom (updateVessel.ctrlState);  	returnUpdate.actiongroupControls = new bool[5];  	returnUpdate.actiongroupControls [0] = updateVessel.ActionGroups [KSPActionGroup.Gear];  	returnUpdate.actiongroupControls [1] = updateVessel.ActionGroups [KSPActionGroup.Light];  	returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  	returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  	returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  	if (updateVessel.altitude < 10000) {  		//Use surface position under 10k  		returnUpdate.isSurfaceUpdate = true;  		returnUpdate.position = new double[4];  		returnUpdate.position [0] = updateVessel.latitude;  		returnUpdate.position [1] = updateVessel.longitude;  		returnUpdate.position [2] = updateVessel.altitude;  		VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  		returnUpdate.position [3] = groundRaycast.altitude;  		returnUpdate.terrainNormal = new float[3];  		returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  		returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  		returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  		returnUpdate.velocity = new double[3];  		Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  		returnUpdate.velocity [0] = srfVel.x;  		returnUpdate.velocity [1] = srfVel.y;  		returnUpdate.velocity [2] = srfVel.z;  		returnUpdate.acceleration = new double[3];  		Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  		returnUpdate.acceleration [0] = srfAcceleration.x;  		returnUpdate.acceleration [1] = srfAcceleration.y;  		returnUpdate.acceleration [2] = srfAcceleration.z;  	} else {  		//Use orbital positioning over 10k  		returnUpdate.isSurfaceUpdate = false;  		returnUpdate.orbit = new double[7];  		returnUpdate.orbit [0] = updateVessel.orbit.inclination;  		returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  		returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  		returnUpdate.orbit [3] = updateVessel.orbit.LAN;  		returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  		returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  		returnUpdate.orbit [6] = updateVessel.orbit.epoch;  	}  } catch (Exception e) {  	DarkLog.Debug ("Failed to get vessel update' exception: " + e);  	returnUpdate = null;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.rotation = new float[4];  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.rotation [2] = updateVessel.srfRelRotation.z;  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.rotation [3] = updateVessel.srfRelRotation.w;  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.angularVelocity = new float[3];  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.angularVelocity [2] = updateVessel.angularVelocity.z;  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.actiongroupControls = new bool[5];  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.actiongroupControls [2] = updateVessel.ActionGroups [KSPActionGroup.Brakes];  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.actiongroupControls [3] = updateVessel.ActionGroups [KSPActionGroup.SAS];  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.actiongroupControls [4] = updateVessel.ActionGroups [KSPActionGroup.RCS];  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: if (updateVessel.altitude < 10000) {  	//Use surface position under 10k  	returnUpdate.isSurfaceUpdate = true;  	returnUpdate.position = new double[4];  	returnUpdate.position [0] = updateVessel.latitude;  	returnUpdate.position [1] = updateVessel.longitude;  	returnUpdate.position [2] = updateVessel.altitude;  	VesselUtil.DMPRaycastPair groundRaycast = VesselUtil.RaycastGround (updateVessel.latitude' updateVessel.longitude' updateVessel.mainBody);  	returnUpdate.position [3] = groundRaycast.altitude;  	returnUpdate.terrainNormal = new float[3];  	returnUpdate.terrainNormal [0] = groundRaycast.terrainNormal.x;  	returnUpdate.terrainNormal [1] = groundRaycast.terrainNormal.y;  	returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  	returnUpdate.velocity = new double[3];  	Vector3d srfVel = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.srf_velocity;  	returnUpdate.velocity [0] = srfVel.x;  	returnUpdate.velocity [1] = srfVel.y;  	returnUpdate.velocity [2] = srfVel.z;  	returnUpdate.acceleration = new double[3];  	Vector3d srfAcceleration = Quaternion.Inverse (updateVessel.mainBody.bodyTransform.rotation) * updateVessel.acceleration;  	returnUpdate.acceleration [0] = srfAcceleration.x;  	returnUpdate.acceleration [1] = srfAcceleration.y;  	returnUpdate.acceleration [2] = srfAcceleration.z;  } else {  	//Use orbital positioning over 10k  	returnUpdate.isSurfaceUpdate = false;  	returnUpdate.orbit = new double[7];  	returnUpdate.orbit [0] = updateVessel.orbit.inclination;  	returnUpdate.orbit [1] = updateVessel.orbit.eccentricity;  	returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  	returnUpdate.orbit [3] = updateVessel.orbit.LAN;  	returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  	returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  	returnUpdate.orbit [6] = updateVessel.orbit.epoch;  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.position = new double[4];  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.position [2] = updateVessel.altitude;  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.position [3] = groundRaycast.altitude;  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.terrainNormal = new float[3];  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.terrainNormal [2] = groundRaycast.terrainNormal.z;  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.velocity = new double[3];  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.velocity [2] = srfVel.z;  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.acceleration = new double[3];  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.acceleration [2] = srfAcceleration.z;  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.orbit = new double[7];  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.orbit [2] = updateVessel.orbit.semiMajorAxis;  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.orbit [3] = updateVessel.orbit.LAN;  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.orbit [4] = updateVessel.orbit.argumentOfPeriapsis;  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.orbit [5] = updateVessel.orbit.meanAnomalyAtEpoch;  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,CopyFromVessel,The following statement contains a magic number: returnUpdate.orbit [6] = updateVessel.orbit.epoch;  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (isSurfaceUpdate) {  	//Get the new position/velocity  	double altitudeFudge = 0;  	VesselUtil.DMPRaycastPair dmpRaycast = VesselUtil.RaycastGround (position [0]' position [1]' updateBody);  	if (dmpRaycast.altitude != -1d && position [3] != -1d) {  		Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  		altitudeFudge = dmpRaycast.altitude - position [3];  		if (Math.Abs (position [2] - position [3]) < 50f) {  			normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  		}  	}  	double planetariumDifference = Planetarium.GetUniversalTime () - planetTime;  	//Velocity fudge  	Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]);  	Vector3d velocityFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Velocity = a*t  		velocityFudge = updateAcceleration * planetariumDifference;  	}  	//Position fudge  	Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge;  	Vector3d positionFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Use the average velocity to determine the new position  		//Displacement = v0*t + 1/2at^2.  		positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference);  	}  	Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge;  	double latitude = updateBody.GetLatitude (updatePostion);  	double longitude = updateBody.GetLongitude (updatePostion);  	double altitude = updateBody.GetAltitude (updatePostion);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		if (!updateVessel.LandedOrSplashed) {  			//Not landed but under 10km.  			Vector3d orbitalPos = updatePostion - updateBody.position;  			Vector3d surfaceOrbitVelDiff = updateBody.getRFrmVel (updatePostion);  			Vector3d orbitalVel = updateVelocity + surfaceOrbitVelDiff;  			updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ());  			updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  			updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  		}  	} else {  		Vector3d velocityOffset = updateVelocity - updateVessel.srf_velocity;  		updateVessel.SetPosition (updatePostion' true);  		updateVessel.ChangeWorldVelocity (velocityOffset);  	}  } else {  	Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody);  	updateOrbit.Init ();  	updateOrbit.UpdateFromUT (Planetarium.GetUniversalTime ());  	double latitude = updateBody.GetLatitude (updateOrbit.pos);  	double longitude = updateBody.GetLongitude (updateOrbit.pos);  	double altitude = updateBody.GetAltitude (updateOrbit.pos);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		//The OrbitDriver update call will set the vessel position on the next fixed update  		VesselUtil.CopyOrbit (updateOrbit' updateVessel.orbitDriver.orbit);  		updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  		updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  	} else {  		//Vessel.SetPosition is full of fun and games. Avoid at all costs.  		//Also' It's quite difficult to figure out the world velocity due to Krakensbane' and the reference frame.  		Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ());  		Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy;  		//Vector3d velDelta = updateOrbit.vel.xzy - updateVessel.orbitDriver.orbit.vel.xzy;  		updateVessel.Translate (posDelta);  		updateVessel.ChangeWorldVelocity (velDelta);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (isSurfaceUpdate) {  	//Get the new position/velocity  	double altitudeFudge = 0;  	VesselUtil.DMPRaycastPair dmpRaycast = VesselUtil.RaycastGround (position [0]' position [1]' updateBody);  	if (dmpRaycast.altitude != -1d && position [3] != -1d) {  		Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  		altitudeFudge = dmpRaycast.altitude - position [3];  		if (Math.Abs (position [2] - position [3]) < 50f) {  			normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  		}  	}  	double planetariumDifference = Planetarium.GetUniversalTime () - planetTime;  	//Velocity fudge  	Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]);  	Vector3d velocityFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Velocity = a*t  		velocityFudge = updateAcceleration * planetariumDifference;  	}  	//Position fudge  	Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge;  	Vector3d positionFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Use the average velocity to determine the new position  		//Displacement = v0*t + 1/2at^2.  		positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference);  	}  	Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge;  	double latitude = updateBody.GetLatitude (updatePostion);  	double longitude = updateBody.GetLongitude (updatePostion);  	double altitude = updateBody.GetAltitude (updatePostion);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		if (!updateVessel.LandedOrSplashed) {  			//Not landed but under 10km.  			Vector3d orbitalPos = updatePostion - updateBody.position;  			Vector3d surfaceOrbitVelDiff = updateBody.getRFrmVel (updatePostion);  			Vector3d orbitalVel = updateVelocity + surfaceOrbitVelDiff;  			updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ());  			updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  			updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  		}  	} else {  		Vector3d velocityOffset = updateVelocity - updateVessel.srf_velocity;  		updateVessel.SetPosition (updatePostion' true);  		updateVessel.ChangeWorldVelocity (velocityOffset);  	}  } else {  	Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody);  	updateOrbit.Init ();  	updateOrbit.UpdateFromUT (Planetarium.GetUniversalTime ());  	double latitude = updateBody.GetLatitude (updateOrbit.pos);  	double longitude = updateBody.GetLongitude (updateOrbit.pos);  	double altitude = updateBody.GetAltitude (updateOrbit.pos);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		//The OrbitDriver update call will set the vessel position on the next fixed update  		VesselUtil.CopyOrbit (updateOrbit' updateVessel.orbitDriver.orbit);  		updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  		updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  	} else {  		//Vessel.SetPosition is full of fun and games. Avoid at all costs.  		//Also' It's quite difficult to figure out the world velocity due to Krakensbane' and the reference frame.  		Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ());  		Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy;  		//Vector3d velDelta = updateOrbit.vel.xzy - updateVessel.orbitDriver.orbit.vel.xzy;  		updateVessel.Translate (posDelta);  		updateVessel.ChangeWorldVelocity (velDelta);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (isSurfaceUpdate) {  	//Get the new position/velocity  	double altitudeFudge = 0;  	VesselUtil.DMPRaycastPair dmpRaycast = VesselUtil.RaycastGround (position [0]' position [1]' updateBody);  	if (dmpRaycast.altitude != -1d && position [3] != -1d) {  		Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  		altitudeFudge = dmpRaycast.altitude - position [3];  		if (Math.Abs (position [2] - position [3]) < 50f) {  			normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  		}  	}  	double planetariumDifference = Planetarium.GetUniversalTime () - planetTime;  	//Velocity fudge  	Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]);  	Vector3d velocityFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Velocity = a*t  		velocityFudge = updateAcceleration * planetariumDifference;  	}  	//Position fudge  	Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge;  	Vector3d positionFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Use the average velocity to determine the new position  		//Displacement = v0*t + 1/2at^2.  		positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference);  	}  	Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge;  	double latitude = updateBody.GetLatitude (updatePostion);  	double longitude = updateBody.GetLongitude (updatePostion);  	double altitude = updateBody.GetAltitude (updatePostion);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		if (!updateVessel.LandedOrSplashed) {  			//Not landed but under 10km.  			Vector3d orbitalPos = updatePostion - updateBody.position;  			Vector3d surfaceOrbitVelDiff = updateBody.getRFrmVel (updatePostion);  			Vector3d orbitalVel = updateVelocity + surfaceOrbitVelDiff;  			updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ());  			updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  			updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  		}  	} else {  		Vector3d velocityOffset = updateVelocity - updateVessel.srf_velocity;  		updateVessel.SetPosition (updatePostion' true);  		updateVessel.ChangeWorldVelocity (velocityOffset);  	}  } else {  	Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody);  	updateOrbit.Init ();  	updateOrbit.UpdateFromUT (Planetarium.GetUniversalTime ());  	double latitude = updateBody.GetLatitude (updateOrbit.pos);  	double longitude = updateBody.GetLongitude (updateOrbit.pos);  	double altitude = updateBody.GetAltitude (updateOrbit.pos);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		//The OrbitDriver update call will set the vessel position on the next fixed update  		VesselUtil.CopyOrbit (updateOrbit' updateVessel.orbitDriver.orbit);  		updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  		updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  	} else {  		//Vessel.SetPosition is full of fun and games. Avoid at all costs.  		//Also' It's quite difficult to figure out the world velocity due to Krakensbane' and the reference frame.  		Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ());  		Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy;  		//Vector3d velDelta = updateOrbit.vel.xzy - updateVessel.orbitDriver.orbit.vel.xzy;  		updateVessel.Translate (posDelta);  		updateVessel.ChangeWorldVelocity (velDelta);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (isSurfaceUpdate) {  	//Get the new position/velocity  	double altitudeFudge = 0;  	VesselUtil.DMPRaycastPair dmpRaycast = VesselUtil.RaycastGround (position [0]' position [1]' updateBody);  	if (dmpRaycast.altitude != -1d && position [3] != -1d) {  		Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  		altitudeFudge = dmpRaycast.altitude - position [3];  		if (Math.Abs (position [2] - position [3]) < 50f) {  			normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  		}  	}  	double planetariumDifference = Planetarium.GetUniversalTime () - planetTime;  	//Velocity fudge  	Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]);  	Vector3d velocityFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Velocity = a*t  		velocityFudge = updateAcceleration * planetariumDifference;  	}  	//Position fudge  	Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge;  	Vector3d positionFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Use the average velocity to determine the new position  		//Displacement = v0*t + 1/2at^2.  		positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference);  	}  	Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge;  	double latitude = updateBody.GetLatitude (updatePostion);  	double longitude = updateBody.GetLongitude (updatePostion);  	double altitude = updateBody.GetAltitude (updatePostion);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		if (!updateVessel.LandedOrSplashed) {  			//Not landed but under 10km.  			Vector3d orbitalPos = updatePostion - updateBody.position;  			Vector3d surfaceOrbitVelDiff = updateBody.getRFrmVel (updatePostion);  			Vector3d orbitalVel = updateVelocity + surfaceOrbitVelDiff;  			updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ());  			updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  			updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  		}  	} else {  		Vector3d velocityOffset = updateVelocity - updateVessel.srf_velocity;  		updateVessel.SetPosition (updatePostion' true);  		updateVessel.ChangeWorldVelocity (velocityOffset);  	}  } else {  	Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody);  	updateOrbit.Init ();  	updateOrbit.UpdateFromUT (Planetarium.GetUniversalTime ());  	double latitude = updateBody.GetLatitude (updateOrbit.pos);  	double longitude = updateBody.GetLongitude (updateOrbit.pos);  	double altitude = updateBody.GetAltitude (updateOrbit.pos);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		//The OrbitDriver update call will set the vessel position on the next fixed update  		VesselUtil.CopyOrbit (updateOrbit' updateVessel.orbitDriver.orbit);  		updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  		updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  	} else {  		//Vessel.SetPosition is full of fun and games. Avoid at all costs.  		//Also' It's quite difficult to figure out the world velocity due to Krakensbane' and the reference frame.  		Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ());  		Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy;  		//Vector3d velDelta = updateOrbit.vel.xzy - updateVessel.orbitDriver.orbit.vel.xzy;  		updateVessel.Translate (posDelta);  		updateVessel.ChangeWorldVelocity (velDelta);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (isSurfaceUpdate) {  	//Get the new position/velocity  	double altitudeFudge = 0;  	VesselUtil.DMPRaycastPair dmpRaycast = VesselUtil.RaycastGround (position [0]' position [1]' updateBody);  	if (dmpRaycast.altitude != -1d && position [3] != -1d) {  		Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  		altitudeFudge = dmpRaycast.altitude - position [3];  		if (Math.Abs (position [2] - position [3]) < 50f) {  			normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  		}  	}  	double planetariumDifference = Planetarium.GetUniversalTime () - planetTime;  	//Velocity fudge  	Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]);  	Vector3d velocityFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Velocity = a*t  		velocityFudge = updateAcceleration * planetariumDifference;  	}  	//Position fudge  	Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge;  	Vector3d positionFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Use the average velocity to determine the new position  		//Displacement = v0*t + 1/2at^2.  		positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference);  	}  	Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge;  	double latitude = updateBody.GetLatitude (updatePostion);  	double longitude = updateBody.GetLongitude (updatePostion);  	double altitude = updateBody.GetAltitude (updatePostion);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		if (!updateVessel.LandedOrSplashed) {  			//Not landed but under 10km.  			Vector3d orbitalPos = updatePostion - updateBody.position;  			Vector3d surfaceOrbitVelDiff = updateBody.getRFrmVel (updatePostion);  			Vector3d orbitalVel = updateVelocity + surfaceOrbitVelDiff;  			updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ());  			updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  			updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  		}  	} else {  		Vector3d velocityOffset = updateVelocity - updateVessel.srf_velocity;  		updateVessel.SetPosition (updatePostion' true);  		updateVessel.ChangeWorldVelocity (velocityOffset);  	}  } else {  	Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody);  	updateOrbit.Init ();  	updateOrbit.UpdateFromUT (Planetarium.GetUniversalTime ());  	double latitude = updateBody.GetLatitude (updateOrbit.pos);  	double longitude = updateBody.GetLongitude (updateOrbit.pos);  	double altitude = updateBody.GetAltitude (updateOrbit.pos);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		//The OrbitDriver update call will set the vessel position on the next fixed update  		VesselUtil.CopyOrbit (updateOrbit' updateVessel.orbitDriver.orbit);  		updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  		updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  	} else {  		//Vessel.SetPosition is full of fun and games. Avoid at all costs.  		//Also' It's quite difficult to figure out the world velocity due to Krakensbane' and the reference frame.  		Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ());  		Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy;  		//Vector3d velDelta = updateOrbit.vel.xzy - updateVessel.orbitDriver.orbit.vel.xzy;  		updateVessel.Translate (posDelta);  		updateVessel.ChangeWorldVelocity (velDelta);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (isSurfaceUpdate) {  	//Get the new position/velocity  	double altitudeFudge = 0;  	VesselUtil.DMPRaycastPair dmpRaycast = VesselUtil.RaycastGround (position [0]' position [1]' updateBody);  	if (dmpRaycast.altitude != -1d && position [3] != -1d) {  		Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  		altitudeFudge = dmpRaycast.altitude - position [3];  		if (Math.Abs (position [2] - position [3]) < 50f) {  			normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  		}  	}  	double planetariumDifference = Planetarium.GetUniversalTime () - planetTime;  	//Velocity fudge  	Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]);  	Vector3d velocityFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Velocity = a*t  		velocityFudge = updateAcceleration * planetariumDifference;  	}  	//Position fudge  	Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge;  	Vector3d positionFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Use the average velocity to determine the new position  		//Displacement = v0*t + 1/2at^2.  		positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference);  	}  	Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge;  	double latitude = updateBody.GetLatitude (updatePostion);  	double longitude = updateBody.GetLongitude (updatePostion);  	double altitude = updateBody.GetAltitude (updatePostion);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		if (!updateVessel.LandedOrSplashed) {  			//Not landed but under 10km.  			Vector3d orbitalPos = updatePostion - updateBody.position;  			Vector3d surfaceOrbitVelDiff = updateBody.getRFrmVel (updatePostion);  			Vector3d orbitalVel = updateVelocity + surfaceOrbitVelDiff;  			updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ());  			updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  			updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  		}  	} else {  		Vector3d velocityOffset = updateVelocity - updateVessel.srf_velocity;  		updateVessel.SetPosition (updatePostion' true);  		updateVessel.ChangeWorldVelocity (velocityOffset);  	}  } else {  	Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody);  	updateOrbit.Init ();  	updateOrbit.UpdateFromUT (Planetarium.GetUniversalTime ());  	double latitude = updateBody.GetLatitude (updateOrbit.pos);  	double longitude = updateBody.GetLongitude (updateOrbit.pos);  	double altitude = updateBody.GetAltitude (updateOrbit.pos);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		//The OrbitDriver update call will set the vessel position on the next fixed update  		VesselUtil.CopyOrbit (updateOrbit' updateVessel.orbitDriver.orbit);  		updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  		updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  	} else {  		//Vessel.SetPosition is full of fun and games. Avoid at all costs.  		//Also' It's quite difficult to figure out the world velocity due to Krakensbane' and the reference frame.  		Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ());  		Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy;  		//Vector3d velDelta = updateOrbit.vel.xzy - updateVessel.orbitDriver.orbit.vel.xzy;  		updateVessel.Translate (posDelta);  		updateVessel.ChangeWorldVelocity (velDelta);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (isSurfaceUpdate) {  	//Get the new position/velocity  	double altitudeFudge = 0;  	VesselUtil.DMPRaycastPair dmpRaycast = VesselUtil.RaycastGround (position [0]' position [1]' updateBody);  	if (dmpRaycast.altitude != -1d && position [3] != -1d) {  		Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  		altitudeFudge = dmpRaycast.altitude - position [3];  		if (Math.Abs (position [2] - position [3]) < 50f) {  			normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  		}  	}  	double planetariumDifference = Planetarium.GetUniversalTime () - planetTime;  	//Velocity fudge  	Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]);  	Vector3d velocityFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Velocity = a*t  		velocityFudge = updateAcceleration * planetariumDifference;  	}  	//Position fudge  	Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge;  	Vector3d positionFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Use the average velocity to determine the new position  		//Displacement = v0*t + 1/2at^2.  		positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference);  	}  	Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge;  	double latitude = updateBody.GetLatitude (updatePostion);  	double longitude = updateBody.GetLongitude (updatePostion);  	double altitude = updateBody.GetAltitude (updatePostion);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		if (!updateVessel.LandedOrSplashed) {  			//Not landed but under 10km.  			Vector3d orbitalPos = updatePostion - updateBody.position;  			Vector3d surfaceOrbitVelDiff = updateBody.getRFrmVel (updatePostion);  			Vector3d orbitalVel = updateVelocity + surfaceOrbitVelDiff;  			updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ());  			updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  			updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  		}  	} else {  		Vector3d velocityOffset = updateVelocity - updateVessel.srf_velocity;  		updateVessel.SetPosition (updatePostion' true);  		updateVessel.ChangeWorldVelocity (velocityOffset);  	}  } else {  	Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody);  	updateOrbit.Init ();  	updateOrbit.UpdateFromUT (Planetarium.GetUniversalTime ());  	double latitude = updateBody.GetLatitude (updateOrbit.pos);  	double longitude = updateBody.GetLongitude (updateOrbit.pos);  	double altitude = updateBody.GetAltitude (updateOrbit.pos);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		//The OrbitDriver update call will set the vessel position on the next fixed update  		VesselUtil.CopyOrbit (updateOrbit' updateVessel.orbitDriver.orbit);  		updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  		updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  	} else {  		//Vessel.SetPosition is full of fun and games. Avoid at all costs.  		//Also' It's quite difficult to figure out the world velocity due to Krakensbane' and the reference frame.  		Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ());  		Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy;  		//Vector3d velDelta = updateOrbit.vel.xzy - updateVessel.orbitDriver.orbit.vel.xzy;  		updateVessel.Translate (posDelta);  		updateVessel.ChangeWorldVelocity (velDelta);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (isSurfaceUpdate) {  	//Get the new position/velocity  	double altitudeFudge = 0;  	VesselUtil.DMPRaycastPair dmpRaycast = VesselUtil.RaycastGround (position [0]' position [1]' updateBody);  	if (dmpRaycast.altitude != -1d && position [3] != -1d) {  		Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  		altitudeFudge = dmpRaycast.altitude - position [3];  		if (Math.Abs (position [2] - position [3]) < 50f) {  			normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  		}  	}  	double planetariumDifference = Planetarium.GetUniversalTime () - planetTime;  	//Velocity fudge  	Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]);  	Vector3d velocityFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Velocity = a*t  		velocityFudge = updateAcceleration * planetariumDifference;  	}  	//Position fudge  	Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge;  	Vector3d positionFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Use the average velocity to determine the new position  		//Displacement = v0*t + 1/2at^2.  		positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference);  	}  	Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge;  	double latitude = updateBody.GetLatitude (updatePostion);  	double longitude = updateBody.GetLongitude (updatePostion);  	double altitude = updateBody.GetAltitude (updatePostion);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		if (!updateVessel.LandedOrSplashed) {  			//Not landed but under 10km.  			Vector3d orbitalPos = updatePostion - updateBody.position;  			Vector3d surfaceOrbitVelDiff = updateBody.getRFrmVel (updatePostion);  			Vector3d orbitalVel = updateVelocity + surfaceOrbitVelDiff;  			updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ());  			updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  			updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  		}  	} else {  		Vector3d velocityOffset = updateVelocity - updateVessel.srf_velocity;  		updateVessel.SetPosition (updatePostion' true);  		updateVessel.ChangeWorldVelocity (velocityOffset);  	}  } else {  	Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody);  	updateOrbit.Init ();  	updateOrbit.UpdateFromUT (Planetarium.GetUniversalTime ());  	double latitude = updateBody.GetLatitude (updateOrbit.pos);  	double longitude = updateBody.GetLongitude (updateOrbit.pos);  	double altitude = updateBody.GetAltitude (updateOrbit.pos);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		//The OrbitDriver update call will set the vessel position on the next fixed update  		VesselUtil.CopyOrbit (updateOrbit' updateVessel.orbitDriver.orbit);  		updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  		updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  	} else {  		//Vessel.SetPosition is full of fun and games. Avoid at all costs.  		//Also' It's quite difficult to figure out the world velocity due to Krakensbane' and the reference frame.  		Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ());  		Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy;  		//Vector3d velDelta = updateOrbit.vel.xzy - updateVessel.orbitDriver.orbit.vel.xzy;  		updateVessel.Translate (posDelta);  		updateVessel.ChangeWorldVelocity (velDelta);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (isSurfaceUpdate) {  	//Get the new position/velocity  	double altitudeFudge = 0;  	VesselUtil.DMPRaycastPair dmpRaycast = VesselUtil.RaycastGround (position [0]' position [1]' updateBody);  	if (dmpRaycast.altitude != -1d && position [3] != -1d) {  		Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  		altitudeFudge = dmpRaycast.altitude - position [3];  		if (Math.Abs (position [2] - position [3]) < 50f) {  			normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  		}  	}  	double planetariumDifference = Planetarium.GetUniversalTime () - planetTime;  	//Velocity fudge  	Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]);  	Vector3d velocityFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Velocity = a*t  		velocityFudge = updateAcceleration * planetariumDifference;  	}  	//Position fudge  	Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge;  	Vector3d positionFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Use the average velocity to determine the new position  		//Displacement = v0*t + 1/2at^2.  		positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference);  	}  	Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge;  	double latitude = updateBody.GetLatitude (updatePostion);  	double longitude = updateBody.GetLongitude (updatePostion);  	double altitude = updateBody.GetAltitude (updatePostion);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		if (!updateVessel.LandedOrSplashed) {  			//Not landed but under 10km.  			Vector3d orbitalPos = updatePostion - updateBody.position;  			Vector3d surfaceOrbitVelDiff = updateBody.getRFrmVel (updatePostion);  			Vector3d orbitalVel = updateVelocity + surfaceOrbitVelDiff;  			updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ());  			updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  			updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  		}  	} else {  		Vector3d velocityOffset = updateVelocity - updateVessel.srf_velocity;  		updateVessel.SetPosition (updatePostion' true);  		updateVessel.ChangeWorldVelocity (velocityOffset);  	}  } else {  	Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody);  	updateOrbit.Init ();  	updateOrbit.UpdateFromUT (Planetarium.GetUniversalTime ());  	double latitude = updateBody.GetLatitude (updateOrbit.pos);  	double longitude = updateBody.GetLongitude (updateOrbit.pos);  	double altitude = updateBody.GetAltitude (updateOrbit.pos);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		//The OrbitDriver update call will set the vessel position on the next fixed update  		VesselUtil.CopyOrbit (updateOrbit' updateVessel.orbitDriver.orbit);  		updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  		updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  	} else {  		//Vessel.SetPosition is full of fun and games. Avoid at all costs.  		//Also' It's quite difficult to figure out the world velocity due to Krakensbane' and the reference frame.  		Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ());  		Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy;  		//Vector3d velDelta = updateOrbit.vel.xzy - updateVessel.orbitDriver.orbit.vel.xzy;  		updateVessel.Translate (posDelta);  		updateVessel.ChangeWorldVelocity (velDelta);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (isSurfaceUpdate) {  	//Get the new position/velocity  	double altitudeFudge = 0;  	VesselUtil.DMPRaycastPair dmpRaycast = VesselUtil.RaycastGround (position [0]' position [1]' updateBody);  	if (dmpRaycast.altitude != -1d && position [3] != -1d) {  		Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  		altitudeFudge = dmpRaycast.altitude - position [3];  		if (Math.Abs (position [2] - position [3]) < 50f) {  			normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  		}  	}  	double planetariumDifference = Planetarium.GetUniversalTime () - planetTime;  	//Velocity fudge  	Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]);  	Vector3d velocityFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Velocity = a*t  		velocityFudge = updateAcceleration * planetariumDifference;  	}  	//Position fudge  	Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge;  	Vector3d positionFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Use the average velocity to determine the new position  		//Displacement = v0*t + 1/2at^2.  		positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference);  	}  	Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge;  	double latitude = updateBody.GetLatitude (updatePostion);  	double longitude = updateBody.GetLongitude (updatePostion);  	double altitude = updateBody.GetAltitude (updatePostion);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		if (!updateVessel.LandedOrSplashed) {  			//Not landed but under 10km.  			Vector3d orbitalPos = updatePostion - updateBody.position;  			Vector3d surfaceOrbitVelDiff = updateBody.getRFrmVel (updatePostion);  			Vector3d orbitalVel = updateVelocity + surfaceOrbitVelDiff;  			updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ());  			updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  			updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  		}  	} else {  		Vector3d velocityOffset = updateVelocity - updateVessel.srf_velocity;  		updateVessel.SetPosition (updatePostion' true);  		updateVessel.ChangeWorldVelocity (velocityOffset);  	}  } else {  	Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody);  	updateOrbit.Init ();  	updateOrbit.UpdateFromUT (Planetarium.GetUniversalTime ());  	double latitude = updateBody.GetLatitude (updateOrbit.pos);  	double longitude = updateBody.GetLongitude (updateOrbit.pos);  	double altitude = updateBody.GetAltitude (updateOrbit.pos);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		//The OrbitDriver update call will set the vessel position on the next fixed update  		VesselUtil.CopyOrbit (updateOrbit' updateVessel.orbitDriver.orbit);  		updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  		updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  	} else {  		//Vessel.SetPosition is full of fun and games. Avoid at all costs.  		//Also' It's quite difficult to figure out the world velocity due to Krakensbane' and the reference frame.  		Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ());  		Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy;  		//Vector3d velDelta = updateOrbit.vel.xzy - updateVessel.orbitDriver.orbit.vel.xzy;  		updateVessel.Translate (posDelta);  		updateVessel.ChangeWorldVelocity (velDelta);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (isSurfaceUpdate) {  	//Get the new position/velocity  	double altitudeFudge = 0;  	VesselUtil.DMPRaycastPair dmpRaycast = VesselUtil.RaycastGround (position [0]' position [1]' updateBody);  	if (dmpRaycast.altitude != -1d && position [3] != -1d) {  		Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  		altitudeFudge = dmpRaycast.altitude - position [3];  		if (Math.Abs (position [2] - position [3]) < 50f) {  			normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  		}  	}  	double planetariumDifference = Planetarium.GetUniversalTime () - planetTime;  	//Velocity fudge  	Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]);  	Vector3d velocityFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Velocity = a*t  		velocityFudge = updateAcceleration * planetariumDifference;  	}  	//Position fudge  	Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge;  	Vector3d positionFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Use the average velocity to determine the new position  		//Displacement = v0*t + 1/2at^2.  		positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference);  	}  	Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge;  	double latitude = updateBody.GetLatitude (updatePostion);  	double longitude = updateBody.GetLongitude (updatePostion);  	double altitude = updateBody.GetAltitude (updatePostion);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		if (!updateVessel.LandedOrSplashed) {  			//Not landed but under 10km.  			Vector3d orbitalPos = updatePostion - updateBody.position;  			Vector3d surfaceOrbitVelDiff = updateBody.getRFrmVel (updatePostion);  			Vector3d orbitalVel = updateVelocity + surfaceOrbitVelDiff;  			updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ());  			updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  			updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  		}  	} else {  		Vector3d velocityOffset = updateVelocity - updateVessel.srf_velocity;  		updateVessel.SetPosition (updatePostion' true);  		updateVessel.ChangeWorldVelocity (velocityOffset);  	}  } else {  	Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody);  	updateOrbit.Init ();  	updateOrbit.UpdateFromUT (Planetarium.GetUniversalTime ());  	double latitude = updateBody.GetLatitude (updateOrbit.pos);  	double longitude = updateBody.GetLongitude (updateOrbit.pos);  	double altitude = updateBody.GetAltitude (updateOrbit.pos);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		//The OrbitDriver update call will set the vessel position on the next fixed update  		VesselUtil.CopyOrbit (updateOrbit' updateVessel.orbitDriver.orbit);  		updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  		updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  	} else {  		//Vessel.SetPosition is full of fun and games. Avoid at all costs.  		//Also' It's quite difficult to figure out the world velocity due to Krakensbane' and the reference frame.  		Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ());  		Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy;  		//Vector3d velDelta = updateOrbit.vel.xzy - updateVessel.orbitDriver.orbit.vel.xzy;  		updateVessel.Translate (posDelta);  		updateVessel.ChangeWorldVelocity (velDelta);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (isSurfaceUpdate) {  	//Get the new position/velocity  	double altitudeFudge = 0;  	VesselUtil.DMPRaycastPair dmpRaycast = VesselUtil.RaycastGround (position [0]' position [1]' updateBody);  	if (dmpRaycast.altitude != -1d && position [3] != -1d) {  		Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  		altitudeFudge = dmpRaycast.altitude - position [3];  		if (Math.Abs (position [2] - position [3]) < 50f) {  			normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  		}  	}  	double planetariumDifference = Planetarium.GetUniversalTime () - planetTime;  	//Velocity fudge  	Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]);  	Vector3d velocityFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Velocity = a*t  		velocityFudge = updateAcceleration * planetariumDifference;  	}  	//Position fudge  	Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge;  	Vector3d positionFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Use the average velocity to determine the new position  		//Displacement = v0*t + 1/2at^2.  		positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference);  	}  	Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge;  	double latitude = updateBody.GetLatitude (updatePostion);  	double longitude = updateBody.GetLongitude (updatePostion);  	double altitude = updateBody.GetAltitude (updatePostion);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		if (!updateVessel.LandedOrSplashed) {  			//Not landed but under 10km.  			Vector3d orbitalPos = updatePostion - updateBody.position;  			Vector3d surfaceOrbitVelDiff = updateBody.getRFrmVel (updatePostion);  			Vector3d orbitalVel = updateVelocity + surfaceOrbitVelDiff;  			updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ());  			updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  			updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  		}  	} else {  		Vector3d velocityOffset = updateVelocity - updateVessel.srf_velocity;  		updateVessel.SetPosition (updatePostion' true);  		updateVessel.ChangeWorldVelocity (velocityOffset);  	}  } else {  	Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody);  	updateOrbit.Init ();  	updateOrbit.UpdateFromUT (Planetarium.GetUniversalTime ());  	double latitude = updateBody.GetLatitude (updateOrbit.pos);  	double longitude = updateBody.GetLongitude (updateOrbit.pos);  	double altitude = updateBody.GetAltitude (updateOrbit.pos);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		//The OrbitDriver update call will set the vessel position on the next fixed update  		VesselUtil.CopyOrbit (updateOrbit' updateVessel.orbitDriver.orbit);  		updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  		updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  	} else {  		//Vessel.SetPosition is full of fun and games. Avoid at all costs.  		//Also' It's quite difficult to figure out the world velocity due to Krakensbane' and the reference frame.  		Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ());  		Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy;  		//Vector3d velDelta = updateOrbit.vel.xzy - updateVessel.orbitDriver.orbit.vel.xzy;  		updateVessel.Translate (posDelta);  		updateVessel.ChangeWorldVelocity (velDelta);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (isSurfaceUpdate) {  	//Get the new position/velocity  	double altitudeFudge = 0;  	VesselUtil.DMPRaycastPair dmpRaycast = VesselUtil.RaycastGround (position [0]' position [1]' updateBody);  	if (dmpRaycast.altitude != -1d && position [3] != -1d) {  		Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  		altitudeFudge = dmpRaycast.altitude - position [3];  		if (Math.Abs (position [2] - position [3]) < 50f) {  			normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  		}  	}  	double planetariumDifference = Planetarium.GetUniversalTime () - planetTime;  	//Velocity fudge  	Vector3d updateAcceleration = updateBody.bodyTransform.rotation * new Vector3d (acceleration [0]' acceleration [1]' acceleration [2]);  	Vector3d velocityFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Velocity = a*t  		velocityFudge = updateAcceleration * planetariumDifference;  	}  	//Position fudge  	Vector3d updateVelocity = updateBody.bodyTransform.rotation * new Vector3d (velocity [0]' velocity [1]' velocity [2]) + velocityFudge;  	Vector3d positionFudge = Vector3d.zero;  	if (Math.Abs (planetariumDifference) < 3f) {  		//Use the average velocity to determine the new position  		//Displacement = v0*t + 1/2at^2.  		positionFudge = (updateVelocity * planetariumDifference) + (0.5d * updateAcceleration * planetariumDifference * planetariumDifference);  	}  	Vector3d updatePostion = updateBody.GetWorldSurfacePosition (position [0]' position [1]' position [2] + altitudeFudge) + positionFudge;  	double latitude = updateBody.GetLatitude (updatePostion);  	double longitude = updateBody.GetLongitude (updatePostion);  	double altitude = updateBody.GetAltitude (updatePostion);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		if (!updateVessel.LandedOrSplashed) {  			//Not landed but under 10km.  			Vector3d orbitalPos = updatePostion - updateBody.position;  			Vector3d surfaceOrbitVelDiff = updateBody.getRFrmVel (updatePostion);  			Vector3d orbitalVel = updateVelocity + surfaceOrbitVelDiff;  			updateVessel.orbitDriver.orbit.UpdateFromStateVectors (orbitalPos.xzy' orbitalVel.xzy' updateBody' Planetarium.GetUniversalTime ());  			updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  			updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  		}  	} else {  		Vector3d velocityOffset = updateVelocity - updateVessel.srf_velocity;  		updateVessel.SetPosition (updatePostion' true);  		updateVessel.ChangeWorldVelocity (velocityOffset);  	}  } else {  	Orbit updateOrbit = new Orbit (orbit [0]' orbit [1]' orbit [2]' orbit [3]' orbit [4]' orbit [5]' orbit [6]' updateBody);  	updateOrbit.Init ();  	updateOrbit.UpdateFromUT (Planetarium.GetUniversalTime ());  	double latitude = updateBody.GetLatitude (updateOrbit.pos);  	double longitude = updateBody.GetLongitude (updateOrbit.pos);  	double altitude = updateBody.GetAltitude (updateOrbit.pos);  	updateVessel.latitude = latitude;  	updateVessel.longitude = longitude;  	updateVessel.altitude = altitude;  	updateVessel.protoVessel.latitude = latitude;  	updateVessel.protoVessel.longitude = longitude;  	updateVessel.protoVessel.altitude = altitude;  	if (updateVessel.packed) {  		//The OrbitDriver update call will set the vessel position on the next fixed update  		VesselUtil.CopyOrbit (updateOrbit' updateVessel.orbitDriver.orbit);  		updateVessel.orbitDriver.pos = updateVessel.orbitDriver.orbit.pos.xzy;  		updateVessel.orbitDriver.vel = updateVessel.orbitDriver.orbit.vel;  	} else {  		//Vessel.SetPosition is full of fun and games. Avoid at all costs.  		//Also' It's quite difficult to figure out the world velocity due to Krakensbane' and the reference frame.  		Vector3d posDelta = updateOrbit.getPositionAtUT (Planetarium.GetUniversalTime ()) - updateVessel.orbitDriver.orbit.getPositionAtUT (Planetarium.GetUniversalTime ());  		Vector3d velDelta = updateOrbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy - updateVessel.orbitDriver.orbit.getOrbitalVelocityAtUT (Planetarium.GetUniversalTime ()).xzy;  		//Vector3d velDelta = updateOrbit.vel.xzy - updateVessel.orbitDriver.orbit.vel.xzy;  		updateVessel.Translate (posDelta);  		updateVessel.ChangeWorldVelocity (velDelta);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (dmpRaycast.altitude != -1d && position [3] != -1d) {  	Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  	altitudeFudge = dmpRaycast.altitude - position [3];  	if (Math.Abs (position [2] - position [3]) < 50f) {  		normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (dmpRaycast.altitude != -1d && position [3] != -1d) {  	Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  	altitudeFudge = dmpRaycast.altitude - position [3];  	if (Math.Abs (position [2] - position [3]) < 50f) {  		normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (dmpRaycast.altitude != -1d && position [3] != -1d) {  	Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  	altitudeFudge = dmpRaycast.altitude - position [3];  	if (Math.Abs (position [2] - position [3]) < 50f) {  		normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (dmpRaycast.altitude != -1d && position [3] != -1d) {  	Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  	altitudeFudge = dmpRaycast.altitude - position [3];  	if (Math.Abs (position [2] - position [3]) < 50f) {  		normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (dmpRaycast.altitude != -1d && position [3] != -1d) {  	Vector3 theirNormal = new Vector3 (terrainNormal [0]' terrainNormal [1]' terrainNormal [2]);  	altitudeFudge = dmpRaycast.altitude - position [3];  	if (Math.Abs (position [2] - position [3]) < 50f) {  		normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  	}  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: altitudeFudge = dmpRaycast.altitude - position [3];  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (Math.Abs (position [2] - position [3]) < 50f) {  	normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: if (Math.Abs (position [2] - position [3]) < 50f) {  	normalRotate = Quaternion.FromToRotation (theirNormal' dmpRaycast.terrainNormal);  }  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: updateVessel.ActionGroups.SetGroup (KSPActionGroup.Brakes' actiongroupControls [2]);  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: updateVessel.ActionGroups.SetGroup (KSPActionGroup.SAS' actiongroupControls [3]);  
Magic Number,DarkMultiPlayer,VesselUpdate,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUpdate.cs,Apply,The following statement contains a magic number: updateVessel.ActionGroups.SetGroup (KSPActionGroup.RCS' actiongroupControls [4]);  
Magic Number,DarkMultiPlayer,VesselUtil,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUtil.cs,RaycastGround,The following statement contains a magic number: if (Vector3d.Distance (FlightGlobals.fetch.activeVessel.GetWorldPos3D ()' origin) < 2500) {  	//Down vector  	Vector3d downVector = -body.GetSurfaceNVector (latitude' longitude);  	//Magic numbers!  	LayerMask groundMask = 33792;  	RaycastHit[] raycastHits = Physics.RaycastAll (origin' downVector' 1000f' groundMask);  	foreach (RaycastHit raycastHit in raycastHits) {  		if (raycastHit.collider == null) {  			//I don't think this is technically possible' but unity's weird enough that we should probably check this anyway.  			continue;  		}  		if (raycastHit.collider.name == body.name) {  			continue;  		}  		double hitAltitude = body.GetAltitude (raycastHit.point);  		if ((hitAltitude > highestHit) && (!body.ocean || hitAltitude > 0)) {  			highestHit = hitAltitude;  			rotatedVector = Quaternion.Inverse (body.rotation) * raycastHit.normal;  		}  	}  }  
Magic Number,DarkMultiPlayer,VesselUtil,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselUtil.cs,RaycastGround,The following statement contains a magic number: if (Vector3d.Distance (FlightGlobals.fetch.activeVessel.GetWorldPos3D ()' origin) < 2500) {  	//Down vector  	Vector3d downVector = -body.GetSurfaceNVector (latitude' longitude);  	//Magic numbers!  	LayerMask groundMask = 33792;  	RaycastHit[] raycastHits = Physics.RaycastAll (origin' downVector' 1000f' groundMask);  	foreach (RaycastHit raycastHit in raycastHits) {  		if (raycastHit.collider == null) {  			//I don't think this is technically possible' but unity's weird enough that we should probably check this anyway.  			continue;  		}  		if (raycastHit.collider.name == body.name) {  			continue;  		}  		double hitAltitude = body.GetAltitude (raycastHit.point);  		if ((hitAltitude > highestHit) && (!body.ocean || hitAltitude > 0)) {  			highestHit = hitAltitude;  			rotatedVector = Quaternion.Inverse (body.rotation) * raycastHit.normal;  		}  	}  }  
Magic Number,DarkMultiPlayer,LineRendererDebug,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\3DDebug.cs,LineRendererDebug,The following statement contains a magic number: lineRenderer.SetVertexCount (2);  
Magic Number,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,DodgeKerbals,The following statement contains a magic number: foreach (ConfigNode partNode in inputNode.GetNodes ("PART")) {  	int crewIndex = 0;  	foreach (string currentKerbalName in partNode.GetValues ("crew")) {  		if (kerbalToVessel.ContainsKey (currentKerbalName) ? kerbalToVessel [currentKerbalName] != protovesselID : false) {  			ProtoCrewMember newKerbal = null;  			ProtoCrewMember.Gender newKerbalGender = GetKerbalGender (currentKerbalName);  			string newExperienceTrait = null;  			if (HighLogic.CurrentGame.CrewRoster.Exists (currentKerbalName)) {  				ProtoCrewMember oldKerbal = HighLogic.CurrentGame.CrewRoster [currentKerbalName];  				newKerbalGender = oldKerbal.gender;  				newExperienceTrait = oldKerbal.experienceTrait.TypeName;  			}  			foreach (ProtoCrewMember possibleKerbal in HighLogic.CurrentGame.CrewRoster.Crew) {  				bool kerbalOk = true;  				if (kerbalOk && kerbalToVessel.ContainsKey (possibleKerbal.name) && (takenKerbals.Contains (possibleKerbal.name) || kerbalToVessel [possibleKerbal.name] != protovesselID)) {  					kerbalOk = false;  				}  				if (kerbalOk && possibleKerbal.gender != newKerbalGender) {  					kerbalOk = false;  				}  				if (kerbalOk && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  					kerbalOk = false;  				}  				if (kerbalOk) {  					newKerbal = possibleKerbal;  					break;  				}  			}  			int kerbalTries = 0;  			while (newKerbal == null) {  				bool kerbalOk = true;  				ProtoCrewMember.KerbalType kerbalType = ProtoCrewMember.KerbalType.Crew;  				if (newExperienceTrait == "Tourist") {  					kerbalType = ProtoCrewMember.KerbalType.Tourist;  				}  				if (newExperienceTrait == "Unowned") {  					kerbalType = ProtoCrewMember.KerbalType.Unowned;  				}  				ProtoCrewMember possibleKerbal = HighLogic.CurrentGame.CrewRoster.GetNewKerbal (kerbalType);  				if (kerbalTries < 200 && possibleKerbal.gender != newKerbalGender) {  					kerbalOk = false;  				}  				if (kerbalTries < 100 && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  					kerbalOk = false;  				}  				if (kerbalOk) {  					newKerbal = possibleKerbal;  				}  				kerbalTries++;  			}  			DarkLog.Debug ("Generated dodged kerbal with " + kerbalTries + " tries");  			partNode.SetValue ("crew"' newKerbal.name' crewIndex);  			newKerbal.seatIdx = crewIndex;  			newKerbal.rosterStatus = ProtoCrewMember.RosterStatus.Assigned;  			takenKerbals.Add (newKerbal.name);  		} else {  			takenKerbals.Add (currentKerbalName);  			CreateKerbalIfMissing (currentKerbalName' protovesselID);  			HighLogic.CurrentGame.CrewRoster [currentKerbalName].rosterStatus = ProtoCrewMember.RosterStatus.Assigned;  			HighLogic.CurrentGame.CrewRoster [currentKerbalName].seatIdx = crewIndex;  		}  		crewIndex++;  	}  }  
Magic Number,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,DodgeKerbals,The following statement contains a magic number: foreach (ConfigNode partNode in inputNode.GetNodes ("PART")) {  	int crewIndex = 0;  	foreach (string currentKerbalName in partNode.GetValues ("crew")) {  		if (kerbalToVessel.ContainsKey (currentKerbalName) ? kerbalToVessel [currentKerbalName] != protovesselID : false) {  			ProtoCrewMember newKerbal = null;  			ProtoCrewMember.Gender newKerbalGender = GetKerbalGender (currentKerbalName);  			string newExperienceTrait = null;  			if (HighLogic.CurrentGame.CrewRoster.Exists (currentKerbalName)) {  				ProtoCrewMember oldKerbal = HighLogic.CurrentGame.CrewRoster [currentKerbalName];  				newKerbalGender = oldKerbal.gender;  				newExperienceTrait = oldKerbal.experienceTrait.TypeName;  			}  			foreach (ProtoCrewMember possibleKerbal in HighLogic.CurrentGame.CrewRoster.Crew) {  				bool kerbalOk = true;  				if (kerbalOk && kerbalToVessel.ContainsKey (possibleKerbal.name) && (takenKerbals.Contains (possibleKerbal.name) || kerbalToVessel [possibleKerbal.name] != protovesselID)) {  					kerbalOk = false;  				}  				if (kerbalOk && possibleKerbal.gender != newKerbalGender) {  					kerbalOk = false;  				}  				if (kerbalOk && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  					kerbalOk = false;  				}  				if (kerbalOk) {  					newKerbal = possibleKerbal;  					break;  				}  			}  			int kerbalTries = 0;  			while (newKerbal == null) {  				bool kerbalOk = true;  				ProtoCrewMember.KerbalType kerbalType = ProtoCrewMember.KerbalType.Crew;  				if (newExperienceTrait == "Tourist") {  					kerbalType = ProtoCrewMember.KerbalType.Tourist;  				}  				if (newExperienceTrait == "Unowned") {  					kerbalType = ProtoCrewMember.KerbalType.Unowned;  				}  				ProtoCrewMember possibleKerbal = HighLogic.CurrentGame.CrewRoster.GetNewKerbal (kerbalType);  				if (kerbalTries < 200 && possibleKerbal.gender != newKerbalGender) {  					kerbalOk = false;  				}  				if (kerbalTries < 100 && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  					kerbalOk = false;  				}  				if (kerbalOk) {  					newKerbal = possibleKerbal;  				}  				kerbalTries++;  			}  			DarkLog.Debug ("Generated dodged kerbal with " + kerbalTries + " tries");  			partNode.SetValue ("crew"' newKerbal.name' crewIndex);  			newKerbal.seatIdx = crewIndex;  			newKerbal.rosterStatus = ProtoCrewMember.RosterStatus.Assigned;  			takenKerbals.Add (newKerbal.name);  		} else {  			takenKerbals.Add (currentKerbalName);  			CreateKerbalIfMissing (currentKerbalName' protovesselID);  			HighLogic.CurrentGame.CrewRoster [currentKerbalName].rosterStatus = ProtoCrewMember.RosterStatus.Assigned;  			HighLogic.CurrentGame.CrewRoster [currentKerbalName].seatIdx = crewIndex;  		}  		crewIndex++;  	}  }  
Magic Number,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,DodgeKerbals,The following statement contains a magic number: foreach (string currentKerbalName in partNode.GetValues ("crew")) {  	if (kerbalToVessel.ContainsKey (currentKerbalName) ? kerbalToVessel [currentKerbalName] != protovesselID : false) {  		ProtoCrewMember newKerbal = null;  		ProtoCrewMember.Gender newKerbalGender = GetKerbalGender (currentKerbalName);  		string newExperienceTrait = null;  		if (HighLogic.CurrentGame.CrewRoster.Exists (currentKerbalName)) {  			ProtoCrewMember oldKerbal = HighLogic.CurrentGame.CrewRoster [currentKerbalName];  			newKerbalGender = oldKerbal.gender;  			newExperienceTrait = oldKerbal.experienceTrait.TypeName;  		}  		foreach (ProtoCrewMember possibleKerbal in HighLogic.CurrentGame.CrewRoster.Crew) {  			bool kerbalOk = true;  			if (kerbalOk && kerbalToVessel.ContainsKey (possibleKerbal.name) && (takenKerbals.Contains (possibleKerbal.name) || kerbalToVessel [possibleKerbal.name] != protovesselID)) {  				kerbalOk = false;  			}  			if (kerbalOk && possibleKerbal.gender != newKerbalGender) {  				kerbalOk = false;  			}  			if (kerbalOk && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  				kerbalOk = false;  			}  			if (kerbalOk) {  				newKerbal = possibleKerbal;  				break;  			}  		}  		int kerbalTries = 0;  		while (newKerbal == null) {  			bool kerbalOk = true;  			ProtoCrewMember.KerbalType kerbalType = ProtoCrewMember.KerbalType.Crew;  			if (newExperienceTrait == "Tourist") {  				kerbalType = ProtoCrewMember.KerbalType.Tourist;  			}  			if (newExperienceTrait == "Unowned") {  				kerbalType = ProtoCrewMember.KerbalType.Unowned;  			}  			ProtoCrewMember possibleKerbal = HighLogic.CurrentGame.CrewRoster.GetNewKerbal (kerbalType);  			if (kerbalTries < 200 && possibleKerbal.gender != newKerbalGender) {  				kerbalOk = false;  			}  			if (kerbalTries < 100 && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  				kerbalOk = false;  			}  			if (kerbalOk) {  				newKerbal = possibleKerbal;  			}  			kerbalTries++;  		}  		DarkLog.Debug ("Generated dodged kerbal with " + kerbalTries + " tries");  		partNode.SetValue ("crew"' newKerbal.name' crewIndex);  		newKerbal.seatIdx = crewIndex;  		newKerbal.rosterStatus = ProtoCrewMember.RosterStatus.Assigned;  		takenKerbals.Add (newKerbal.name);  	} else {  		takenKerbals.Add (currentKerbalName);  		CreateKerbalIfMissing (currentKerbalName' protovesselID);  		HighLogic.CurrentGame.CrewRoster [currentKerbalName].rosterStatus = ProtoCrewMember.RosterStatus.Assigned;  		HighLogic.CurrentGame.CrewRoster [currentKerbalName].seatIdx = crewIndex;  	}  	crewIndex++;  }  
Magic Number,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,DodgeKerbals,The following statement contains a magic number: foreach (string currentKerbalName in partNode.GetValues ("crew")) {  	if (kerbalToVessel.ContainsKey (currentKerbalName) ? kerbalToVessel [currentKerbalName] != protovesselID : false) {  		ProtoCrewMember newKerbal = null;  		ProtoCrewMember.Gender newKerbalGender = GetKerbalGender (currentKerbalName);  		string newExperienceTrait = null;  		if (HighLogic.CurrentGame.CrewRoster.Exists (currentKerbalName)) {  			ProtoCrewMember oldKerbal = HighLogic.CurrentGame.CrewRoster [currentKerbalName];  			newKerbalGender = oldKerbal.gender;  			newExperienceTrait = oldKerbal.experienceTrait.TypeName;  		}  		foreach (ProtoCrewMember possibleKerbal in HighLogic.CurrentGame.CrewRoster.Crew) {  			bool kerbalOk = true;  			if (kerbalOk && kerbalToVessel.ContainsKey (possibleKerbal.name) && (takenKerbals.Contains (possibleKerbal.name) || kerbalToVessel [possibleKerbal.name] != protovesselID)) {  				kerbalOk = false;  			}  			if (kerbalOk && possibleKerbal.gender != newKerbalGender) {  				kerbalOk = false;  			}  			if (kerbalOk && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  				kerbalOk = false;  			}  			if (kerbalOk) {  				newKerbal = possibleKerbal;  				break;  			}  		}  		int kerbalTries = 0;  		while (newKerbal == null) {  			bool kerbalOk = true;  			ProtoCrewMember.KerbalType kerbalType = ProtoCrewMember.KerbalType.Crew;  			if (newExperienceTrait == "Tourist") {  				kerbalType = ProtoCrewMember.KerbalType.Tourist;  			}  			if (newExperienceTrait == "Unowned") {  				kerbalType = ProtoCrewMember.KerbalType.Unowned;  			}  			ProtoCrewMember possibleKerbal = HighLogic.CurrentGame.CrewRoster.GetNewKerbal (kerbalType);  			if (kerbalTries < 200 && possibleKerbal.gender != newKerbalGender) {  				kerbalOk = false;  			}  			if (kerbalTries < 100 && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  				kerbalOk = false;  			}  			if (kerbalOk) {  				newKerbal = possibleKerbal;  			}  			kerbalTries++;  		}  		DarkLog.Debug ("Generated dodged kerbal with " + kerbalTries + " tries");  		partNode.SetValue ("crew"' newKerbal.name' crewIndex);  		newKerbal.seatIdx = crewIndex;  		newKerbal.rosterStatus = ProtoCrewMember.RosterStatus.Assigned;  		takenKerbals.Add (newKerbal.name);  	} else {  		takenKerbals.Add (currentKerbalName);  		CreateKerbalIfMissing (currentKerbalName' protovesselID);  		HighLogic.CurrentGame.CrewRoster [currentKerbalName].rosterStatus = ProtoCrewMember.RosterStatus.Assigned;  		HighLogic.CurrentGame.CrewRoster [currentKerbalName].seatIdx = crewIndex;  	}  	crewIndex++;  }  
Magic Number,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,DodgeKerbals,The following statement contains a magic number: if (kerbalToVessel.ContainsKey (currentKerbalName) ? kerbalToVessel [currentKerbalName] != protovesselID : false) {  	ProtoCrewMember newKerbal = null;  	ProtoCrewMember.Gender newKerbalGender = GetKerbalGender (currentKerbalName);  	string newExperienceTrait = null;  	if (HighLogic.CurrentGame.CrewRoster.Exists (currentKerbalName)) {  		ProtoCrewMember oldKerbal = HighLogic.CurrentGame.CrewRoster [currentKerbalName];  		newKerbalGender = oldKerbal.gender;  		newExperienceTrait = oldKerbal.experienceTrait.TypeName;  	}  	foreach (ProtoCrewMember possibleKerbal in HighLogic.CurrentGame.CrewRoster.Crew) {  		bool kerbalOk = true;  		if (kerbalOk && kerbalToVessel.ContainsKey (possibleKerbal.name) && (takenKerbals.Contains (possibleKerbal.name) || kerbalToVessel [possibleKerbal.name] != protovesselID)) {  			kerbalOk = false;  		}  		if (kerbalOk && possibleKerbal.gender != newKerbalGender) {  			kerbalOk = false;  		}  		if (kerbalOk && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  			kerbalOk = false;  		}  		if (kerbalOk) {  			newKerbal = possibleKerbal;  			break;  		}  	}  	int kerbalTries = 0;  	while (newKerbal == null) {  		bool kerbalOk = true;  		ProtoCrewMember.KerbalType kerbalType = ProtoCrewMember.KerbalType.Crew;  		if (newExperienceTrait == "Tourist") {  			kerbalType = ProtoCrewMember.KerbalType.Tourist;  		}  		if (newExperienceTrait == "Unowned") {  			kerbalType = ProtoCrewMember.KerbalType.Unowned;  		}  		ProtoCrewMember possibleKerbal = HighLogic.CurrentGame.CrewRoster.GetNewKerbal (kerbalType);  		if (kerbalTries < 200 && possibleKerbal.gender != newKerbalGender) {  			kerbalOk = false;  		}  		if (kerbalTries < 100 && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  			kerbalOk = false;  		}  		if (kerbalOk) {  			newKerbal = possibleKerbal;  		}  		kerbalTries++;  	}  	DarkLog.Debug ("Generated dodged kerbal with " + kerbalTries + " tries");  	partNode.SetValue ("crew"' newKerbal.name' crewIndex);  	newKerbal.seatIdx = crewIndex;  	newKerbal.rosterStatus = ProtoCrewMember.RosterStatus.Assigned;  	takenKerbals.Add (newKerbal.name);  } else {  	takenKerbals.Add (currentKerbalName);  	CreateKerbalIfMissing (currentKerbalName' protovesselID);  	HighLogic.CurrentGame.CrewRoster [currentKerbalName].rosterStatus = ProtoCrewMember.RosterStatus.Assigned;  	HighLogic.CurrentGame.CrewRoster [currentKerbalName].seatIdx = crewIndex;  }  
Magic Number,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,DodgeKerbals,The following statement contains a magic number: if (kerbalToVessel.ContainsKey (currentKerbalName) ? kerbalToVessel [currentKerbalName] != protovesselID : false) {  	ProtoCrewMember newKerbal = null;  	ProtoCrewMember.Gender newKerbalGender = GetKerbalGender (currentKerbalName);  	string newExperienceTrait = null;  	if (HighLogic.CurrentGame.CrewRoster.Exists (currentKerbalName)) {  		ProtoCrewMember oldKerbal = HighLogic.CurrentGame.CrewRoster [currentKerbalName];  		newKerbalGender = oldKerbal.gender;  		newExperienceTrait = oldKerbal.experienceTrait.TypeName;  	}  	foreach (ProtoCrewMember possibleKerbal in HighLogic.CurrentGame.CrewRoster.Crew) {  		bool kerbalOk = true;  		if (kerbalOk && kerbalToVessel.ContainsKey (possibleKerbal.name) && (takenKerbals.Contains (possibleKerbal.name) || kerbalToVessel [possibleKerbal.name] != protovesselID)) {  			kerbalOk = false;  		}  		if (kerbalOk && possibleKerbal.gender != newKerbalGender) {  			kerbalOk = false;  		}  		if (kerbalOk && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  			kerbalOk = false;  		}  		if (kerbalOk) {  			newKerbal = possibleKerbal;  			break;  		}  	}  	int kerbalTries = 0;  	while (newKerbal == null) {  		bool kerbalOk = true;  		ProtoCrewMember.KerbalType kerbalType = ProtoCrewMember.KerbalType.Crew;  		if (newExperienceTrait == "Tourist") {  			kerbalType = ProtoCrewMember.KerbalType.Tourist;  		}  		if (newExperienceTrait == "Unowned") {  			kerbalType = ProtoCrewMember.KerbalType.Unowned;  		}  		ProtoCrewMember possibleKerbal = HighLogic.CurrentGame.CrewRoster.GetNewKerbal (kerbalType);  		if (kerbalTries < 200 && possibleKerbal.gender != newKerbalGender) {  			kerbalOk = false;  		}  		if (kerbalTries < 100 && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  			kerbalOk = false;  		}  		if (kerbalOk) {  			newKerbal = possibleKerbal;  		}  		kerbalTries++;  	}  	DarkLog.Debug ("Generated dodged kerbal with " + kerbalTries + " tries");  	partNode.SetValue ("crew"' newKerbal.name' crewIndex);  	newKerbal.seatIdx = crewIndex;  	newKerbal.rosterStatus = ProtoCrewMember.RosterStatus.Assigned;  	takenKerbals.Add (newKerbal.name);  } else {  	takenKerbals.Add (currentKerbalName);  	CreateKerbalIfMissing (currentKerbalName' protovesselID);  	HighLogic.CurrentGame.CrewRoster [currentKerbalName].rosterStatus = ProtoCrewMember.RosterStatus.Assigned;  	HighLogic.CurrentGame.CrewRoster [currentKerbalName].seatIdx = crewIndex;  }  
Magic Number,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,DodgeKerbals,The following statement contains a magic number: while (newKerbal == null) {  	bool kerbalOk = true;  	ProtoCrewMember.KerbalType kerbalType = ProtoCrewMember.KerbalType.Crew;  	if (newExperienceTrait == "Tourist") {  		kerbalType = ProtoCrewMember.KerbalType.Tourist;  	}  	if (newExperienceTrait == "Unowned") {  		kerbalType = ProtoCrewMember.KerbalType.Unowned;  	}  	ProtoCrewMember possibleKerbal = HighLogic.CurrentGame.CrewRoster.GetNewKerbal (kerbalType);  	if (kerbalTries < 200 && possibleKerbal.gender != newKerbalGender) {  		kerbalOk = false;  	}  	if (kerbalTries < 100 && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  		kerbalOk = false;  	}  	if (kerbalOk) {  		newKerbal = possibleKerbal;  	}  	kerbalTries++;  }  
Magic Number,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,DodgeKerbals,The following statement contains a magic number: while (newKerbal == null) {  	bool kerbalOk = true;  	ProtoCrewMember.KerbalType kerbalType = ProtoCrewMember.KerbalType.Crew;  	if (newExperienceTrait == "Tourist") {  		kerbalType = ProtoCrewMember.KerbalType.Tourist;  	}  	if (newExperienceTrait == "Unowned") {  		kerbalType = ProtoCrewMember.KerbalType.Unowned;  	}  	ProtoCrewMember possibleKerbal = HighLogic.CurrentGame.CrewRoster.GetNewKerbal (kerbalType);  	if (kerbalTries < 200 && possibleKerbal.gender != newKerbalGender) {  		kerbalOk = false;  	}  	if (kerbalTries < 100 && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  		kerbalOk = false;  	}  	if (kerbalOk) {  		newKerbal = possibleKerbal;  	}  	kerbalTries++;  }  
Magic Number,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,DodgeKerbals,The following statement contains a magic number: if (kerbalTries < 200 && possibleKerbal.gender != newKerbalGender) {  	kerbalOk = false;  }  
Magic Number,DarkMultiPlayer,KerbalReassigner,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\KerbalReassigner.cs,DodgeKerbals,The following statement contains a magic number: if (kerbalTries < 100 && newExperienceTrait != null && newExperienceTrait != possibleKerbal.experienceTrait.TypeName) {  	kerbalOk = false;  }  
Missing Default,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,UpdateOnScreenSpectateMessage,The following switch statement is missing a default case: switch (spectateType) {  case 1:  	spectateMessage = ScreenMessages.PostScreenMessage ("This vessel is controlled by another player."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  	break;  case 2:  	spectateMessage = ScreenMessages.PostScreenMessage ("This vessel has been changed in the future."' UPDATE_SCREEN_MESSAGE_INTERVAL * 2' ScreenMessageStyle.UPPER_CENTER);  	break;  }  
Missing Default,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,DodgeVesselLandedStatus,The following switch statement is missing a default case: switch (situation) {  case "LANDED":  	vesselNode.SetValue ("landed"' "True");  	vesselNode.SetValue ("splashed"' "False");  	break;  case "SPLASHED":  	vesselNode.SetValue ("splashed"' "True");  	vesselNode.SetValue ("landed"' "False");  	break;  }  
Missing Default,DarkMultiPlayer,VesselWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\VesselWorker.cs,GetStatistics,The following switch statement is missing a default case: switch (statType) {  case "StoredFutureUpdates": {  	int futureUpdates = 0;  	foreach (KeyValuePair<Guid' Queue<VesselUpdate>> vUQ in vesselUpdateQueue) {  		futureUpdates += vUQ.Value.Count;  	}  	return futureUpdates;  }  case "StoredFutureProtoUpdates": {  	int futureProtoUpdates = 0;  	foreach (KeyValuePair<Guid' Queue<VesselProtoUpdate>> vPQ in vesselProtoQueue) {  		futureProtoUpdates += vPQ.Value.Count;  	}  	return futureProtoUpdates;  }  }  
Missing Default,DarkMultiPlayer,TimeSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\TimeSyncer.cs,SituationIsGrounded,The following switch statement is missing a default case: switch (situation) {  case Vessel.Situations.LANDED:  case Vessel.Situations.PRELAUNCH:  case Vessel.Situations.SPLASHED:  	return true;  }  
Missing Default,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleChatMessage,The following switch statement is missing a default case: switch (chatMessageType) {  case ChatMessageType.LIST:  	{  		string[] playerList = mr.Read<string[]> ();  		foreach (string playerName in playerList) {  			string[] channelList = mr.Read<string[]> ();  			foreach (string channelName in channelList) {  				chatWorker.QueueChatJoin (playerName' channelName);  			}  		}  	}  	break;  case ChatMessageType.JOIN:  	{  		string playerName = mr.Read<string> ();  		string channelName = mr.Read<string> ();  		chatWorker.QueueChatJoin (playerName' channelName);  	}  	break;  case ChatMessageType.LEAVE:  	{  		string playerName = mr.Read<string> ();  		string channelName = mr.Read<string> ();  		chatWorker.QueueChatLeave (playerName' channelName);  	}  	break;  case ChatMessageType.CHANNEL_MESSAGE:  	{  		string playerName = mr.Read<string> ();  		string channelName = mr.Read<string> ();  		string channelMessage = mr.Read<string> ();  		chatWorker.QueueChannelMessage (playerName' channelName' channelMessage);  	}  	break;  case ChatMessageType.PRIVATE_MESSAGE:  	{  		string fromPlayer = mr.Read<string> ();  		string toPlayer = mr.Read<string> ();  		string privateMessage = mr.Read<string> ();  		if (toPlayer == dmpSettings.playerName || fromPlayer == dmpSettings.playerName) {  			chatWorker.QueuePrivateMessage (fromPlayer' toPlayer' privateMessage);  		}  	}  	break;  case ChatMessageType.CONSOLE_MESSAGE:  	{  		string message = mr.Read<string> ();  		chatWorker.QueueSystemMessage (message);  	}  	break;  }  
Missing Default,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleCraftLibrary,The following switch statement is missing a default case: switch (messageType) {  case CraftMessageType.LIST:  	{  		string[] playerList = mr.Read<string[]> ();  		foreach (string player in playerList) {  			bool vabExists = mr.Read<bool> ();  			bool sphExists = mr.Read<bool> ();  			bool subassemblyExists = mr.Read<bool> ();  			DarkLog.Debug ("Player: " + player + "' VAB: " + vabExists + "' SPH: " + sphExists + "' SUBASSEMBLY: " + subassemblyExists);  			if (vabExists) {  				string[] vabCrafts = mr.Read<string[]> ();  				foreach (string vabCraft in vabCrafts) {  					CraftChangeEntry cce = new CraftChangeEntry ();  					cce.playerName = player;  					cce.craftType = CraftType.VAB;  					cce.craftName = vabCraft;  					craftLibraryWorker.QueueCraftAdd (cce);  				}  			}  			if (sphExists) {  				string[] sphCrafts = mr.Read<string[]> ();  				foreach (string sphCraft in sphCrafts) {  					CraftChangeEntry cce = new CraftChangeEntry ();  					cce.playerName = player;  					cce.craftType = CraftType.SPH;  					cce.craftName = sphCraft;  					craftLibraryWorker.QueueCraftAdd (cce);  				}  			}  			if (subassemblyExists) {  				string[] subassemblyCrafts = mr.Read<string[]> ();  				foreach (string subassemblyCraft in subassemblyCrafts) {  					CraftChangeEntry cce = new CraftChangeEntry ();  					cce.playerName = player;  					cce.craftType = CraftType.SUBASSEMBLY;  					cce.craftName = subassemblyCraft;  					craftLibraryWorker.QueueCraftAdd (cce);  				}  			}  		}  	}  	break;  case CraftMessageType.ADD_FILE:  	{  		CraftChangeEntry cce = new CraftChangeEntry ();  		cce.playerName = mr.Read<string> ();  		cce.craftType = (CraftType)mr.Read<int> ();  		cce.craftName = mr.Read<string> ();  		craftLibraryWorker.QueueCraftAdd (cce);  		chatWorker.QueueChannelMessage (chatWorker.consoleIdentifier' ""' cce.playerName + " shared " + cce.craftName + " (" + cce.craftType + ")");  	}  	break;  case CraftMessageType.DELETE_FILE:  	{  		CraftChangeEntry cce = new CraftChangeEntry ();  		cce.playerName = mr.Read<string> ();  		cce.craftType = (CraftType)mr.Read<int> ();  		cce.craftName = mr.Read<string> ();  		craftLibraryWorker.QueueCraftDelete (cce);  	}  	break;  case CraftMessageType.RESPOND_FILE:  	{  		CraftResponseEntry cre = new CraftResponseEntry ();  		cre.playerName = mr.Read<string> ();  		cre.craftType = (CraftType)mr.Read<int> ();  		cre.craftName = mr.Read<string> ();  		bool hasCraft = mr.Read<bool> ();  		if (hasCraft) {  			cre.craftData = mr.Read<byte[]> ();  			craftLibraryWorker.QueueCraftResponse (cre);  		} else {  			ScreenMessages.PostScreenMessage ("Craft " + cre.craftName + " from " + cre.playerName + " not available"' 5f' ScreenMessageStyle.UPPER_CENTER);  		}  	}  	break;  }  
Missing Default,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,HandleScreenshotLibrary,The following switch statement is missing a default case: switch (messageType) {  case ScreenshotMessageType.SEND_START_NOTIFY:  	{  		string fromPlayer = mr.Read<string> ();  		screenshotWorker.downloadingScreenshotFromPlayer = fromPlayer;  	}  	break;  case ScreenshotMessageType.NOTIFY:  	{  		string fromPlayer = mr.Read<string> ();  		screenshotWorker.QueueNewNotify (fromPlayer);  	}  	break;  case ScreenshotMessageType.SCREENSHOT:  	{  		string fromPlayer = mr.Read<string> ();  		byte[] screenshotData = mr.Read<byte[]> ();  		screenshotWorker.QueueNewScreenshot (fromPlayer' screenshotData);  	}  	break;  case ScreenshotMessageType.WATCH:  	{  		string fromPlayer = mr.Read<string> ();  		string watchPlayer = mr.Read<string> ();  		screenshotWorker.QueueNewScreenshotWatch (fromPlayer' watchPlayer);  	}  	break;  }  
Missing Default,DarkMultiPlayer,NetworkWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\NetworkWorker.cs,GetStatistics,The following switch statement is missing a default case: switch (statType) {  case "HighPriorityQueueLength":  	return sendMessageQueueHigh.Count;  case "SplitPriorityQueueLength":  	return sendMessageQueueSplit.Count;  case "LowPriorityQueueLength":  	return sendMessageQueueLow.Count;  case "QueuedOutBytes":  	return bytesQueuedOut;  case "SentBytes":  	return bytesSent;  case "ReceivedBytes":  	return bytesReceived;  case "LastReceiveTime":  	return ((Common.GetCurrentUnixTime () - lastReceiveTime) * 1000);  case "LastSendTime":  	return ((Common.GetCurrentUnixTime () - lastSendTime) * 1000);  }  
Missing Default,DarkMultiPlayer,WarpWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\WarpWorker.cs,HandleInput,The following switch statement is missing a default case: switch (warpMode) {  case WarpMode.NONE:  	DisplayMessage ("Cannot warp' warping is disabled on this server"' 5f);  	break;  case WarpMode.MCW_FORCE:  	HandleMCWForceInput (startWarpKey' stopWarpKey);  	break;  case WarpMode.MCW_VOTE:  	HandleMCWVoteInput (startWarpKey' stopWarpKey);  	break;  case WarpMode.MCW_LOWEST:  	HandleMCWLowestInput (startWarpKey' stopWarpKey);  	break;  case WarpMode.SUBSPACE_SIMPLE:  	HandleSubspaceSimpleInput (startWarpKey' stopWarpKey);  	break;  }  
Missing Default,DarkMultiPlayer,PlayerStatusWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWorker.cs,Update,The following switch statement is missing a default case: switch (FlightGlobals.ActiveVessel.situation) {  case (Vessel.Situations.DOCKED):  	myPlayerStatus.statusText = "Docked above " + bodyName;  	break;  case (Vessel.Situations.ESCAPING):  	if (FlightGlobals.ActiveVessel.orbit.timeToPe < 0) {  		myPlayerStatus.statusText = "Escaping " + bodyName;  	} else {  		myPlayerStatus.statusText = "Encountering " + bodyName;  	}  	break;  case (Vessel.Situations.FLYING):  	if (!vesselWorker.isInSafetyBubble (FlightGlobals.fetch.activeVessel.GetWorldPos3D ()' FlightGlobals.fetch.activeVessel.mainBody)) {  		myPlayerStatus.statusText = "Flying above " + bodyName;  	} else {  		myPlayerStatus.statusText = "Flying in safety bubble";  	}  	break;  case (Vessel.Situations.LANDED):  	if (!vesselWorker.isInSafetyBubble (FlightGlobals.fetch.activeVessel.GetWorldPos3D ()' FlightGlobals.fetch.activeVessel.mainBody)) {  		myPlayerStatus.statusText = "Landed on " + bodyName;  	} else {  		myPlayerStatus.statusText = "Landed in safety bubble";  	}  	break;  case (Vessel.Situations.ORBITING):  	myPlayerStatus.statusText = "Orbiting " + bodyName;  	break;  case (Vessel.Situations.PRELAUNCH):  	if (!vesselWorker.isInSafetyBubble (FlightGlobals.fetch.activeVessel.GetWorldPos3D ()' FlightGlobals.fetch.activeVessel.mainBody)) {  		myPlayerStatus.statusText = "Launching from " + bodyName;  	} else {  		myPlayerStatus.statusText = "Launching from safety bubble";  	}  	break;  case (Vessel.Situations.SPLASHED):  	myPlayerStatus.statusText = "Splashed on " + bodyName;  	break;  case (Vessel.Situations.SUB_ORBITAL):  	if (FlightGlobals.ActiveVessel.verticalSpeed > 0) {  		myPlayerStatus.statusText = "Ascending from " + bodyName;  	} else {  		myPlayerStatus.statusText = "Descending to " + bodyName;  	}  	break;  }  
Missing Default,DarkMultiPlayer,PlayerStatusWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerStatusWorker.cs,Update,The following switch statement is missing a default case: switch (HighLogic.LoadedScene) {  case (GameScenes.EDITOR):  	myPlayerStatus.statusText = "Building";  	if (EditorDriver.editorFacility == EditorFacility.VAB) {  		myPlayerStatus.statusText = "Building in VAB";  	}  	if (EditorDriver.editorFacility == EditorFacility.SPH) {  		myPlayerStatus.statusText = "Building in SPH";  	}  	break;  case (GameScenes.SPACECENTER):  	myPlayerStatus.statusText = "At Space Center";  	break;  case (GameScenes.TRACKSTATION):  	myPlayerStatus.statusText = "At Tracking Station";  	break;  case (GameScenes.LOADING):  	myPlayerStatus.statusText = "Loading";  	break;  }  
Missing Default,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following switch statement is missing a default case: switch (trimmedLine.Substring (1)) {  case "required-files":  case "optional-files":  case "partslist":  	readMode = trimmedLine.Substring (1);  	break;  case "resource-blacklist":  	readMode = trimmedLine.Substring (1);  	isWhiteList = false;  	break;  case "resource-whitelist":  	readMode = trimmedLine.Substring (1);  	isWhiteList = true;  	break;  }  
Missing Default,DarkMultiPlayer,ModWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\ModWorker.cs,ParseModFile,The following switch statement is missing a default case: switch (readMode) {  case "required-files":  	{  		string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  		if (lowerFixedLine.Contains ("=")) {  			string[] splitLine = lowerFixedLine.Split ('=');  			if (splitLine.Length == 2) {  				if (!parseRequired.ContainsKey (splitLine [0])) {  					parseRequired.Add (splitLine [0]' splitLine [1].ToLowerInvariant ());  				}  			} else {  				if (splitLine.Length == 1) {  					if (!parseRequired.ContainsKey (splitLine [0])) {  						parseRequired.Add (splitLine [0]' "");  					}  				}  			}  		} else {  			if (!parseRequired.ContainsKey (lowerFixedLine)) {  				parseRequired.Add (lowerFixedLine' "");  			}  		}  	}  	break;  case "optional-files":  	{  		string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  		if (lowerFixedLine.Contains ("=")) {  			string[] splitLine = lowerFixedLine.Split ('=');  			if (splitLine.Length == 2) {  				if (!parseOptional.ContainsKey (splitLine [0])) {  					parseOptional.Add (splitLine [0]' splitLine [1]);  				}  			} else {  				if (splitLine.Length == 1) {  					if (!parseOptional.ContainsKey (splitLine [0])) {  						parseOptional.Add (splitLine [0]' "");  					}  				}  			}  		} else {  			if (!parseOptional.ContainsKey (lowerFixedLine)) {  				parseOptional.Add (lowerFixedLine' "");  			}  		}  	}  	break;  case "resource-whitelist":  case "resource-blacklist":  	{  		string lowerFixedLine = trimmedLine.ToLowerInvariant ().Replace ('\\'' '/');  		//Resource is dll's only.  		if (lowerFixedLine.ToLowerInvariant ().EndsWith (".dll")) {  			if (parseWhiteBlackList.Contains (lowerFixedLine)) {  				parseWhiteBlackList.Add (lowerFixedLine);  			}  		}  	}  	break;  case "partslist":  	if (!parsePartsList.Contains (trimmedLine)) {  		parsePartsList.Add (trimmedLine);  	}  	break;  }  
Missing Default,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,UploadCraftFile,The following switch statement is missing a default case: switch (uploadCraftType) {  case CraftType.VAB:  	uploadPath = vabPath;  	break;  case CraftType.SPH:  	uploadPath = sphPath;  	break;  case CraftType.SUBASSEMBLY:  	uploadPath = subassemblyPath;  	break;  }  
Missing Default,DarkMultiPlayer,CraftLibraryWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\CraftLibraryWorker.cs,SaveCraftFile,The following switch statement is missing a default case: switch (craftType) {  case CraftType.VAB:  	savePath = vabPath;  	break;  case CraftType.SPH:  	savePath = sphPath;  	break;  case CraftType.SUBASSEMBLY:  	savePath = subassemblyPath;  	break;  }  
Missing Default,DarkMultiPlayer,LockSystem,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\LockSystem.cs,HandleLockMessage,The following switch statement is missing a default case: switch (lockMessageType) {  case LockMessageType.LIST:  	{  		//We shouldn't need to clear this as LIST is only sent once' but better safe than sorry.  		serverLocks.Clear ();  		string[] lockKeys = mr.Read<string[]> ();  		string[] lockValues = mr.Read<string[]> ();  		for (int i = 0; i < lockKeys.Length; i++) {  			serverLocks.Add (lockKeys [i]' lockValues [i]);  		}  	}  	break;  case LockMessageType.ACQUIRE:  	{  		string playerName = mr.Read<string> ();  		string lockName = mr.Read<string> ();  		bool lockResult = mr.Read<bool> ();  		if (lockResult) {  			serverLocks [lockName] = playerName;  		}  		FireAcquireEvent (playerName' lockName' lockResult);  	}  	break;  case LockMessageType.RELEASE:  	{  		string playerName = mr.Read<string> ();  		string lockName = mr.Read<string> ();  		if (serverLocks.ContainsKey (lockName)) {  			serverLocks.Remove (lockName);  		}  		FireReleaseEvent (playerName' lockName);  	}  	break;  }  
Missing Default,DarkMultiPlayer,PlayerColorWorker,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\PlayerColorWorker.cs,HandlePlayerColorMessage,The following switch statement is missing a default case: switch (messageType) {  case PlayerColorMessageType.LIST:  	{  		int numOfEntries = mr.Read<int> ();  		lock (playerColorLock) {  			playerColors = new Dictionary<string' Color> ();  			for (int i = 0; i < numOfEntries; i++) {  				string playerName = mr.Read<string> ();  				Color playerColor = ConvertFloatArrayToColor (mr.Read<float[]> ());  				playerColors.Add (playerName' playerColor);  				playerStatusWindow.colorEventHandled = false;  			}  		}  	}  	break;  case PlayerColorMessageType.SET:  	{  		lock (playerColorLock) {  			string playerName = mr.Read<string> ();  			Color playerColor = ConvertFloatArrayToColor (mr.Read<float[]> ());  			DarkLog.Debug ("Color message' name: " + playerName + " ' color: " + playerColor.ToString ());  			playerColors [playerName] = playerColor;  			UpdateAllVesselColors ();  			playerStatusWindow.colorEventHandled = false;  		}  	}  	break;  }  
Missing Default,DarkMultiPlayer,OptionsWindow,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\OptionsWindow.cs,UpdateToolbarString,The following switch statement is missing a default case: switch (dmpSettings.toolbarType) {  case DMPToolbarType.DISABLED:  	toolbarMode = "Toolbar: Disabled";  	break;  case DMPToolbarType.FORCE_STOCK:  	toolbarMode = "Toolbar: Stock";  	break;  case DMPToolbarType.BLIZZY_IF_INSTALLED:  	toolbarMode = "Toolbar: Blizzy's Toolbar";  	break;  case DMPToolbarType.BOTH_IF_INSTALLED:  	toolbarMode = "Toolbar: Both";  	break;  }  
Missing Default,DarkMultiPlayer,FlagSyncer,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\FlagSyncer.cs,HandleMessage,The following switch statement is missing a default case: switch (messageType) {  case FlagMessageType.LIST:  	{  		//List code  		string[] serverFlagFiles = mr.Read<string[]> ();  		string[] serverFlagOwners = mr.Read<string[]> ();  		string[] serverFlagShaSums = mr.Read<string[]> ();  		for (int i = 0; i < serverFlagFiles.Length; i++) {  			FlagInfo fi = new FlagInfo ();  			fi.owner = serverFlagOwners [i];  			fi.shaSum = serverFlagShaSums [i];  			serverFlags [Path.GetFileNameWithoutExtension (serverFlagFiles [i])] = fi;  		}  		syncComplete = true;  		//Check if we need to upload the flag  		flagChangeEvent = true;  	}  	break;  case FlagMessageType.FLAG_DATA:  	{  		FlagRespondMessage frm = new FlagRespondMessage ();  		frm.flagInfo.owner = mr.Read<string> ();  		frm.flagName = mr.Read<string> ();  		frm.flagData = mr.Read<byte[]> ();  		frm.flagInfo.shaSum = Common.CalculateSHA256Hash (frm.flagData);  		newFlags.Enqueue (frm);  	}  	break;  case FlagMessageType.DELETE_FILE:  	{  		string flagName = mr.Read<string> ();  		string flagFile = Path.Combine (flagPath' flagName);  		if (File.Exists (flagFile)) {  			try {  				if (File.Exists (flagFile)) {  					DarkLog.Debug ("Deleting flag " + flagFile);  					File.Delete (flagFile);  				}  			} catch (Exception e) {  				DarkLog.Debug ("Error deleting flag " + flagFile + "' exception: " + e);  			}  		}  	}  	break;  }  
Missing Default,DarkMultiPlayer,AdminSystem,F:\newReposMay17\godarklight_DarkMultiPlayer\Client\AdminSystem.cs,HandleAdminMessage,The following switch statement is missing a default case: switch (messageType) {  case AdminMessageType.LIST:  	{  		string[] adminNames = mr.Read<string[]> ();  		foreach (string adminName in adminNames) {  			RegisterServerAdmin (adminName);  		}  	}  	break;  case AdminMessageType.ADD:  	{  		string adminName = mr.Read<string> ();  		RegisterServerAdmin (adminName);  	}  	break;  case AdminMessageType.REMOVE:  	{  		string adminName = mr.Read<string> ();  		UnregisterServerAdmin (adminName);  	}  	break;  }  
