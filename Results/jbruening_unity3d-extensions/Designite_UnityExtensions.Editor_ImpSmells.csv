Implementation smell,Namespace,Class,File,Method,Description
Long Method,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,The method has 62 lines of code.
Complex Method,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,Cyclomatic complexity of the method is 20
Long Parameter List,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,The method has 7 parameters.
Long Parameter List,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,The method has 8 parameters.
Long Statement,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,The length of the statement  "	return ObjectFieldArray (ref objects' expanded' label' ref selectedIndex' indicesAdded' selectedIndexGainedReference' showRemoveButtons' allowSceneObjects); " is 156.
Long Statement,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,The length of the statement  "			if (Event.current.type == EventType.mouseUp && GUILayoutUtility.GetLastRect ().Contains (Event.current.mousePosition)) { " is 120.
Magic Number,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,The following statement contains a magic number: if (retExpand) {  	if (Event.current.type == EventType.repaint || Event.current.type == EventType.DragPerform) {  		if (GUILayoutUtility.GetLastRect ().Contains (Event.current.mousePosition)) {  			if (Event.current.type == EventType.repaint) {  				var didFind = DragAndDrop.objectReferences.OfType<GameObject> ().Any ();  				DragAndDrop.visualMode = didFind ? DragAndDropVisualMode.Copy : DragAndDropVisualMode.Rejected;  			}  			if (Event.current.type == EventType.dragPerform) {  				Event.current.Use ();  				var addedObjects = new List<int> (DragAndDrop.objectReferences.Length);  				foreach (var objectReference in DragAndDrop.objectReferences) {  					var casted = objectReference as T;  					if (casted != null) {  						addedObjects.Add (objects.Length);  						ArrayUtility.Add (ref objects' casted);  					}  				}  				if (indicesAdded != null)  					indicesAdded (addedObjects.ToArray ());  			}  		}  	}  	EditorGUI.indentLevel++;  	EditorGUI.BeginChangeCheck ();  	var nCount = EditorGUILayout.IntField ("Size"' objects.Length);  	EditorGUI.EndChangeCheck ();  	if (GUI.changed) {  		if (nCount > objects.Length) {  			//add  			ArrayUtility.AddRange (ref objects' new T[nCount - objects.Length]);  		} else if (nCount < objects.Length) {  			//truncate  			objects = objects.RemoveRange (nCount' objects.Length - nCount);  		}  	}  	var removeind = -1;  	for (int i = 0; i < objects.Length; i++) {  		EditorGUILayout.BeginHorizontal ();  		if (selectedIndex == i) {  			objects [i] = EditorGUILayout.ObjectField ("☒ Element " + i' objects [i]' typeof(GameObject)' allowSceneObjects) as T;  			if (objects [i] != null) {  				if (selectedIndexGainedReference != null)  					selectedIndexGainedReference ();  			}  		} else  			objects [i] = EditorGUILayout.ObjectField ("Element " + i' objects [i]' typeof(GameObject)' allowSceneObjects) as T;  		if (Event.current.type == EventType.mouseUp && GUILayoutUtility.GetLastRect ().Contains (Event.current.mousePosition)) {  			selectedIndex = i;  		}  		if (showRemoveButtons)  			if (GUILayout.Button ("-"' GUILayout.MaxWidth (15)' GUILayout.MaxHeight (16)))  				removeind = i;  		GUILayout.EndHorizontal ();  	}  	if (removeind > -1)  		ArrayUtility.RemoveAt (ref objects' removeind);  	EditorGUI.indentLevel--;  }  
Magic Number,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,The following statement contains a magic number: if (retExpand) {  	if (Event.current.type == EventType.repaint || Event.current.type == EventType.DragPerform) {  		if (GUILayoutUtility.GetLastRect ().Contains (Event.current.mousePosition)) {  			if (Event.current.type == EventType.repaint) {  				var didFind = DragAndDrop.objectReferences.OfType<GameObject> ().Any ();  				DragAndDrop.visualMode = didFind ? DragAndDropVisualMode.Copy : DragAndDropVisualMode.Rejected;  			}  			if (Event.current.type == EventType.dragPerform) {  				Event.current.Use ();  				var addedObjects = new List<int> (DragAndDrop.objectReferences.Length);  				foreach (var objectReference in DragAndDrop.objectReferences) {  					var casted = objectReference as T;  					if (casted != null) {  						addedObjects.Add (objects.Length);  						ArrayUtility.Add (ref objects' casted);  					}  				}  				if (indicesAdded != null)  					indicesAdded (addedObjects.ToArray ());  			}  		}  	}  	EditorGUI.indentLevel++;  	EditorGUI.BeginChangeCheck ();  	var nCount = EditorGUILayout.IntField ("Size"' objects.Length);  	EditorGUI.EndChangeCheck ();  	if (GUI.changed) {  		if (nCount > objects.Length) {  			//add  			ArrayUtility.AddRange (ref objects' new T[nCount - objects.Length]);  		} else if (nCount < objects.Length) {  			//truncate  			objects = objects.RemoveRange (nCount' objects.Length - nCount);  		}  	}  	var removeind = -1;  	for (int i = 0; i < objects.Length; i++) {  		EditorGUILayout.BeginHorizontal ();  		if (selectedIndex == i) {  			objects [i] = EditorGUILayout.ObjectField ("☒ Element " + i' objects [i]' typeof(GameObject)' allowSceneObjects) as T;  			if (objects [i] != null) {  				if (selectedIndexGainedReference != null)  					selectedIndexGainedReference ();  			}  		} else  			objects [i] = EditorGUILayout.ObjectField ("Element " + i' objects [i]' typeof(GameObject)' allowSceneObjects) as T;  		if (Event.current.type == EventType.mouseUp && GUILayoutUtility.GetLastRect ().Contains (Event.current.mousePosition)) {  			selectedIndex = i;  		}  		if (showRemoveButtons)  			if (GUILayout.Button ("-"' GUILayout.MaxWidth (15)' GUILayout.MaxHeight (16)))  				removeind = i;  		GUILayout.EndHorizontal ();  	}  	if (removeind > -1)  		ArrayUtility.RemoveAt (ref objects' removeind);  	EditorGUI.indentLevel--;  }  
Magic Number,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,The following statement contains a magic number: for (int i = 0; i < objects.Length; i++) {  	EditorGUILayout.BeginHorizontal ();  	if (selectedIndex == i) {  		objects [i] = EditorGUILayout.ObjectField ("☒ Element " + i' objects [i]' typeof(GameObject)' allowSceneObjects) as T;  		if (objects [i] != null) {  			if (selectedIndexGainedReference != null)  				selectedIndexGainedReference ();  		}  	} else  		objects [i] = EditorGUILayout.ObjectField ("Element " + i' objects [i]' typeof(GameObject)' allowSceneObjects) as T;  	if (Event.current.type == EventType.mouseUp && GUILayoutUtility.GetLastRect ().Contains (Event.current.mousePosition)) {  		selectedIndex = i;  	}  	if (showRemoveButtons)  		if (GUILayout.Button ("-"' GUILayout.MaxWidth (15)' GUILayout.MaxHeight (16)))  			removeind = i;  	GUILayout.EndHorizontal ();  }  
Magic Number,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,The following statement contains a magic number: for (int i = 0; i < objects.Length; i++) {  	EditorGUILayout.BeginHorizontal ();  	if (selectedIndex == i) {  		objects [i] = EditorGUILayout.ObjectField ("☒ Element " + i' objects [i]' typeof(GameObject)' allowSceneObjects) as T;  		if (objects [i] != null) {  			if (selectedIndexGainedReference != null)  				selectedIndexGainedReference ();  		}  	} else  		objects [i] = EditorGUILayout.ObjectField ("Element " + i' objects [i]' typeof(GameObject)' allowSceneObjects) as T;  	if (Event.current.type == EventType.mouseUp && GUILayoutUtility.GetLastRect ().Contains (Event.current.mousePosition)) {  		selectedIndex = i;  	}  	if (showRemoveButtons)  		if (GUILayout.Button ("-"' GUILayout.MaxWidth (15)' GUILayout.MaxHeight (16)))  			removeind = i;  	GUILayout.EndHorizontal ();  }  
Magic Number,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,The following statement contains a magic number: if (showRemoveButtons)  	if (GUILayout.Button ("-"' GUILayout.MaxWidth (15)' GUILayout.MaxHeight (16)))  		removeind = i;  
Magic Number,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,The following statement contains a magic number: if (showRemoveButtons)  	if (GUILayout.Button ("-"' GUILayout.MaxWidth (15)' GUILayout.MaxHeight (16)))  		removeind = i;  
Magic Number,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,The following statement contains a magic number: if (GUILayout.Button ("-"' GUILayout.MaxWidth (15)' GUILayout.MaxHeight (16)))  	removeind = i;  
Magic Number,UEx.Editor,GUIX,D:\newReposJune17\jbruening_unity3d-extensions\UnityExtensions.Editor\GUIX.cs,ObjectFieldArray,The following statement contains a magic number: if (GUILayout.Button ("-"' GUILayout.MaxWidth (15)' GUILayout.MaxHeight (16)))  	removeind = i;  
