Implementation smell,Namespace,Class,File,Method,Description
Long Method,GitVersion,BranchConfigurationCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The method has 112 lines of code.
Complex Method,GitVersion,LegacyConfigNotifier,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\LegacyConfigNotifier.cs,Notify,Cyclomatic complexity of the method is 8
Complex Method,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,Cyclomatic complexity of the method is 13
Complex Method,GitVersion,VariableProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\OutputVariables\VariableProvider.cs,GetVariablesFor,Cyclomatic complexity of the method is 8
Complex Method,GitVersion,SemanticVersion,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersion.cs,CompareTo,Cyclomatic complexity of the method is 10
Complex Method,GitVersion,SemanticVersionBuildMetaData,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersionBuildMetaData.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,GitVersion,SemanticVersionPreReleaseTag,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersionPreReleaseTag.cs,ToString,Cyclomatic complexity of the method is 8
Long Parameter List,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,ApplyBranchDefaults,The method has 13 parameters. Parameters: config' branchConfig' branchRegex' sourceBranches' defaultTag' defaultIncrementStrategy' defaultPreventIncrement' defaultVersioningMode' defaultTrackMergeTarget' defaultTagNumberPattern' tracksReleaseBranches' isReleaseBranch' isMainline
Long Parameter List,GitVersion,EffectiveConfiguration,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\EffectiveConfiguration.cs,EffectiveConfiguration,The method has 25 parameters. Parameters: assemblyVersioningScheme' assemblyFileVersioningScheme' assemblyInformationalFormat' versioningMode' gitTagPrefix' tag' nextVersion' increment' branchPrefixToTrim' preventIncrementForMergedBranchVersion' tagNumberPattern' continuousDeploymentFallbackTag' trackMergeTarget' majorVersionBumpMessage' minorVersionBumpMessage' patchVersionBumpMessage' noBumpMessage' commitMessageIncrementing' legacySemVerPaddding' buildMetaDataPadding' commitsSinceVersionSourcePadding' versionFilters' tracksReleaseBranches' isCurrentBranchRelease' commitDateFormat
Long Parameter List,GitVersion,ExecuteCore,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\ExecuteCore.cs,ExecuteGitVersion,The method has 9 parameters. Parameters: targetUrl' dynamicRepositoryLocation' authentication' targetBranch' noFetch' workingDirectory' commitId' overrideConfig' noCache
Long Parameter List,GitVersion,ExecuteCore,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\ExecuteCore.cs,ExecuteInternal,The method has 5 parameters. Parameters: targetBranch' commitId' gitPreparer' buildServer' overrideConfig
Long Parameter List,GitVersion,GitPreparer,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitPreparer.cs,GitPreparer,The method has 5 parameters. Parameters: targetUrl' dynamicRepositoryLocation' authentication' noFetch' targetPath
Long Parameter List,GitVersion,GitPreparer,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitPreparer.cs,CreateDynamicRepository,The method has 5 parameters. Parameters: targetPath' authentication' repositoryUrl' targetBranch' noFetch
Long Parameter List,GitVersion,IncrementStrategyFinder,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\IncrementStrategyFinder.cs,FindIncrementFromMessage,The method has 5 parameters. Parameters: message' major' minor' patch' none
Long Parameter List,GitVersion,VersionVariables,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\OutputVariables\VersionVariables.cs,VersionVariables,The method has 27 parameters. Parameters: major' minor' patch' buildMetaData' buildMetaDataPadded' fullBuildMetaData' branchName' sha' majorMinorPatch' semVer' legacySemVer' legacySemVerPadded' fullSemVer' assemblySemVer' assemblySemFileVer' preReleaseTag' preReleaseTagWithDash' preReleaseLabel' preReleaseNumber' informationalVersion' commitDate' nugetVersion' nugetVersionV2' nugetPreReleaseTag' nugetPreReleaseTagV2' commitsSinceVersionSource' commitsSinceVersionSourcePadded
Long Parameter List,GitVersion,AssemblyInfoFileUpdater,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,AssemblyInfoFileUpdater,The method has 5 parameters. Parameters: assemblyInfoFileName' workingDirectory' variables' fileSystem' ensureAssemblyInfo
Long Parameter List,GitVersion,AssemblyInfoFileUpdater,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,AssemblyInfoFileUpdater,The method has 5 parameters. Parameters: assemblyInfoFileNames' workingDirectory' variables' fileSystem' ensureAssemblyInfo
Long Parameter List,GitVersion,AssemblyInfoFileUpdater,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,ReplaceOrAppend,The method has 5 parameters. Parameters: replaceRegex' inputString' replaceString' fileExtension' appendedAttributes
Long Parameter List,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,GitVersionContext,The method has 5 parameters. Parameters: repository' targetBranch' configuration' onlyEvaluateTrackedBranches' commitId
Long Parameter List,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,GitVersionContext,The method has 5 parameters. Parameters: repository' currentBranch' configuration' onlyEvaluateTrackedBranches' commitId
Long Parameter List,GitVersion,SemanticVersionBuildMetaData,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersionBuildMetaData.cs,SemanticVersionBuildMetaData,The method has 5 parameters. Parameters: commitsSinceTag' branch' commitSha' commitDate' otherMetadata
Long Parameter List,GitVersion.VersionCalculation,MainlineVersionCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\MainlineVersionCalculator.cs,FindMessageIncrement,The method has 5 parameters. Parameters: context' mergeCommit' mergedHead' findMergeBase' commitLog
Long Parameter List,GitVersion.VersionCalculation.BaseVersionCalculators,BaseVersion,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\BaseVersion.cs,BaseVersion,The method has 6 parameters. Parameters: context' source' shouldIncrement' semanticVersion' baseVersionSource' branchNameOverride
Long Identifier,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,WarnAboutAmbiguousConfigFileSelection,The length of the parameter hasConfigInProjectRootDirectory is 31.
Long Identifier,GitVersion,EffectiveConfiguration,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\EffectiveConfiguration.cs,EffectiveConfiguration,The length of the parameter preventIncrementForMergedBranchVersion is 38.
Long Identifier,GitVersion,EffectiveConfiguration,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\EffectiveConfiguration.cs,EffectiveConfiguration,The length of the parameter continuousDeploymentFallbackTag is 31.
Long Identifier,GitVersion,EffectiveConfiguration,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\EffectiveConfiguration.cs,EffectiveConfiguration,The length of the parameter commitsSinceVersionSourcePadding is 32.
Long Identifier,GitVersion,GitRepoMetadataProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitRepoMetadataProvider.cs,,The length of the parameter semanticVersionTagsOnBranchCache is 32.
Long Identifier,GitVersion,MergeMessage,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\MergeMessage.cs,,The length of the parameter parseRemoteTrackingMergeMessage is 31.
Long Identifier,GitVersion,VersionVariables,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\OutputVariables\VersionVariables.cs,VersionVariables,The length of the parameter commitsSinceVersionSourcePadded is 31.
Long Identifier,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the parameter preventIncrementForMergedBranchVersion is 38.
Long Identifier,GitVersion.VersionCalculation,BaseVersionCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculator.cs,GetBaseVersion,The length of the parameter matchingVersionsOnceIncremented is 31.
Long Identifier,GitVersion.VersionCalculation,NextVersionCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\NextVersionCalculator.cs,FindVersion,The length of the parameter branchConfigHasPreReleaseTagConfigured is 38.
Long Identifier,GitVersion.VersionCalculation,NextVersionCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\NextVersionCalculator.cs,FindVersion,The length of the parameter preReleaseTagDoesNotMatchConfiguration is 38.
Long Identifier,GitVersion.VersioningModes,ContinuousDeliveryMode,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersioningModes\ContinuousDeliveryMode.cs,RetrieveMostRecentOptionalTagVersion,The length of the parameter applicableTagsInDescendingOrder is 31.
Long Statement,GitVersion,BranchConfigurationCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The length of the statement  "                    possibleParents = context.RepositoryMetadataProvider.GetBranchesContainingCommit(targetBranch.Tip' branchesToEvaluate' true) " is 124.
Long Statement,GitVersion,BranchConfigurationCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The length of the statement  "                // If we fail to inherit it is probably because the branch has been merged and we can't do much. So we will fall back to develop's config " is 137.
Long Statement,GitVersion,BranchConfigurationCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The length of the statement  "                    errorMessage = "Failed to inherit Increment branch configuration' ended up with: " + string.Join("' "' possibleParents.Select(p => p.FriendlyName)); " is 148.
Long Statement,GitVersion,BranchConfigurationCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The length of the statement  "                var chosenBranch = repository.Branches.FirstOrDefault(b => Regex.IsMatch(b.FriendlyName' developBranchRegex' RegexOptions.IgnoreCase) " is 133.
Long Statement,GitVersion,BranchConfigurationCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The length of the statement  "                Logger.WriteWarning(errorMessage + Environment.NewLine + Environment.NewLine + "Falling back to " + branchName + " branch config"); " is 131.
Long Statement,GitVersion,BranchConfigurationCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The length of the statement  "                    Logger.WriteWarning("Fallback branch wants to inherit Increment branch configuration from itself. Using patch increment instead."); " is 131.
Long Statement,GitVersion,BranchConfigurationCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BranchConfigurationCalculator.cs,CalculateWhenMultipleParents,The length of the statement  "                    currentBranch = possibleTargetBranches.FirstOrDefault(b => b.FriendlyName == "master") ?? possibleTargetBranches.First(); " is 121.
Long Statement,GitVersion,BranchConfigurationCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BranchConfigurationCalculator.cs,CalculateWhenMultipleParents,The length of the statement  "            Logger.WriteInfo("HEAD is merge commit' this is likely a pull request using " + currentBranch.FriendlyName + " as base"); " is 121.
Long Statement,GitVersion,MyGet,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BuildServers\MyGet.cs,GenerateSetParameterMessage,The length of the statement  "                string.Format("##myget[setParameter name='GitVersion.{0}' value='{1}']"' name' ServiceMessageEscapeHelper.EscapeValue(value)) " is 125.
Long Statement,GitVersion,TeamCity,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BuildServers\TeamCity.cs,WriteBranchEnvVariableWarning,The length of the statement  "Depending on your authentication and transport setup of your git VCS root things may work. In that case' ignore this warning. " is 125.
Long Statement,GitVersion,TeamCity,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BuildServers\TeamCity.cs,WriteBranchEnvVariableWarning,The length of the statement  "In your TeamCity build configuration' add a parameter called `env.Git_Branch` with value %teamcity.build.vcs.branch.<vcsid>% " is 124.
Long Statement,GitVersion,TeamCity,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BuildServers\TeamCity.cs,GenerateSetParameterMessage,The length of the statement  "                string.Format("##teamcity[setParameter name='GitVersion.{0}' value='{1}']"' name' ServiceMessageEscapeHelper.EscapeValue(value))' " is 129.
Long Statement,GitVersion,TeamCity,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BuildServers\TeamCity.cs,GenerateSetParameterMessage,The length of the statement  "                string.Format("##teamcity[setParameter name='system.GitVersion.{0}' value='{1}']"' name' ServiceMessageEscapeHelper.EscapeValue(value)) " is 135.
Long Statement,GitVersion,VsoAgent,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BuildServers\VsoAgent.cs,GenerateSetVersionMessage,The length of the statement  "                current.RegexReplace(string.Format(@"\$\(GITVERSION[_\.]{0}\)"' kvp.Key)' kvp.Value ?? string.Empty' RegexOptions.IgnoreCase)); " is 127.
Long Statement,GitVersion,VsoAgent,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BuildServers\VsoAgent.cs,GenerateSetVersionMessage,The length of the statement  "                var buildNumber = variables.FullSemVer.EndsWith("+0") ? variables.FullSemVer.Substring(0' variables.FullSemVer.Length - 2) : variables.FullSemVer; " is 146.
Long Statement,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,VerifyConfiguration,The length of the statement  "                throw new GitVersionConfigurationException(@"Mainline mode only works at the repository level' a single branch cannot be put into mainline mode " is 143.
Long Statement,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,VerifyConfiguration,The length of the statement  "This is because mainline mode treats your entire git repository as an event source with each merge into the 'mainline' incrementing the version. " is 144.
Long Statement,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,ApplyDefaultsTo,The length of the statement  "            config.AssemblyFileVersioningScheme = config.AssemblyFileVersioningScheme ?? AssemblyFileVersioningScheme.MajorMinorPatch; " is 122.
Long Statement,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,ApplyDefaultsTo,The length of the statement  "                    throw new GitVersionConfigurationException($"Branch configuration '{branchConfig.Key}' is missing required configuration 'regex'\n\n" + " is 135.
Long Statement,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,ApplyDefaultsTo,The length of the statement  "                    throw new GitVersionConfigurationException($"Branch configuration '{branchConfig.Key}' is missing required configuration 'source-branches'\n\n" + " is 145.
Long Statement,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,ApplyBranchDefaults,The length of the statement  "            branchConfig.Increment = branchConfig.Increment ?? defaultIncrementStrategy ?? config.Increment ?? DefaultIncrementStrategy; " is 124.
Long Statement,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,ApplyBranchDefaults,The length of the statement  "            branchConfig.PreventIncrementOfMergedBranchVersion = branchConfig.PreventIncrementOfMergedBranchVersion ?? defaultPreventIncrement; " is 131.
Long Statement,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,WarnAboutAmbiguousConfigFileSelection,The length of the statement  "                throw new WarningException(string.Format("Ambiguous config file selection from '{0}' and '{1}'"' workingConfigFile' projectRootConfigFile)); " is 140.
Long Statement,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,WarnAboutObsoleteConfigFile,The length of the statement  "                Logger.WriteWarning(string.Format("Ambiguous config files at '{0}': '{1}' (deprecated) and '{2}'. Will be used '{2}'"' workingDirectory' ObsoleteConfigFileName' DefaultConfigFileName)); " is 185.
Long Statement,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,WarnAboutObsoleteConfigFile,The length of the statement  "            Logger.WriteWarning(string.Format("'{0}' is deprecated' use '{1}' instead."' deprecatedConfigFilePath' DefaultConfigFileName)); " is 127.
Long Statement,GitVersion,LegacyConfigNotifier,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\LegacyConfigNotifier.cs,Notify,The length of the statement  "            var oldConfigs = legacyConfig.Branches.Keys.Where(k => OldConfigKnownRegexes.Keys.Contains(k) && k != OldConfigKnownRegexes[k]).ToList(); " is 137.
Long Statement,GitVersion,LegacyConfigNotifier,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\LegacyConfigNotifier.cs,Notify,The length of the statement  "                issues.Add("develop-branch-tag has been replaced by branch specific configuration. See http://gitversion.readthedocs.org/en/latest/configuration/#branch-configuration"); " is 169.
Long Statement,GitVersion,LegacyConfigNotifier,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\LegacyConfigNotifier.cs,Notify,The length of the statement  "                issues.Add("release-branch-tag has been replaced by branch specific configuration. See http://gitversion.readthedocs.org/en/latest/configuration/#branch-configuration"); " is 169.
Long Statement,GitVersion,LegacyConfigNotifier,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\LegacyConfigNotifier.cs,Notify,The length of the statement  "                issues.Add("'is-develop' is deprecated' use 'tracks-release-branches' instead. See http://gitversion.readthedocs.org/en/latest/configuration/#branch-configuration"); " is 165.
Long Statement,GitVersion,LegacyConfigNotifier,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\LegacyConfigNotifier.cs,Notify,The length of the statement  "                throw new OldConfigurationException("GitVersion configuration file contains old configuration' please fix the following errors:\r\n" + string.Join("\r\n"' issues)); " is 164.
Long Statement,GitVersion,ExecuteCore,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\ExecuteCore.cs,ExecuteGitVersion,The length of the statement  "            gitPreparer.Initialise(buildServer != null' ResolveCurrentBranch(buildServer' targetBranch' !string.IsNullOrWhiteSpace(dynamicRepositoryLocation))' shouldCleanUpRemotes); " is 170.
Long Statement,GitVersion,ExecuteCore,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\ExecuteCore.cs,ExecuteGitVersion,The length of the statement  "            var versionVariables = noCache ? default(VersionVariables) : gitVersionCache.LoadVersionVariablesFromDiskCache(gitPreparer' cacheKey); " is 134.
Long Statement,GitVersion,ExecuteCore,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\ExecuteCore.cs,ExecuteInternal,The length of the statement  "                return VariableProvider.GetVariablesFor(semanticVersion' gitVersionContext.Configuration' gitVersionContext.IsCurrentCommitTagged); " is 131.
Long Statement,GitVersion,GitPreparer,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitPreparer.cs,Initialise,The length of the statement  "            DynamicGitRepositoryPath = CreateDynamicRepository(tempRepositoryPath' authentication' targetUrl' currentBranch' noFetch); " is 122.
Long Statement,GitVersion,GitPreparer,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitPreparer.cs,CleanupDuplicateOrigin,The length of the statement  "            if (!repo.Network.Remotes.Any(remote => remote.Name.Equals(defaultRemoteName' StringComparison.InvariantCultureIgnoreCase))) " is 124.
Long Statement,GitVersion,GitRepoMetadataProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitRepoMetadataProvider.cs,GetBranchesContainingCommit,The length of the statement  "                Logger.WriteInfo(string.Format("No direct branches found' searching through {0} branches."' onlyTrackedBranches ? "tracked" : "all")); " is 134.
Long Statement,GitVersion,GitVersionCache,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionCache.cs,WriteVariablesToDiskCache,The length of the statement  "            var retryOperation = new OperationWithExponentialBackoff<IOException>(new ThreadSleep()' writeCacheOperation' maxRetries: 6); " is 125.
Long Statement,GitVersion,GitVersionCache,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionCache.cs,LoadVersionVariablesFromDiskCache,The length of the statement  "                            Logger.WriteWarning(string.Format("Unable to delete corrupted version cache file {0}. Got {1} exception."' cacheFileName' deleteEx.GetType().FullName)); " is 152.
Long Statement,GitVersion,GitVersionInformationGenerator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionInformationResources\GitVersionInformationGenerator.cs,Generate,The length of the statement  "            var members = string.Join(Environment.NewLine' variables.Select(v => string.Format("    " + addFormat' v.Key' v.Value))); " is 121.
Long Statement,GitVersion,LoggerWrapper,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\LoggerWrapper.cs,Log,The length of the statement  "                        Logger.WriteError(string.Format("LoggerWrapper.Log(): Incorrectly formatted string: message: '{0}'; formatparameters: {1}"' message' string.Join(";"' formatparameters))); " is 170.
Long Statement,GitVersion,VersionVariables,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\OutputVariables\VersionVariables.cs,GetEnumerator,The length of the statement  "                .Where(p => p.PropertyType == type && !p.GetIndexParameters().Any() && !p.GetCustomAttributes(typeof(ReflectionIgnoreAttribute)' false).Any()) " is 142.
Long Statement,GitVersion,SemanticVersionExtensions,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersionExtensions.cs,OverrideVersionManuallyIfNeeded,The length of the statement  "            if (!string.IsNullOrEmpty(configuration.NextVersion) && SemanticVersion.TryParse(configuration.NextVersion' configuration.GitTagPrefix' out manualNextVersion)) " is 159.
Long Statement,GitVersion,AssemblyInfoFileUpdater,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,Update,The length of the statement  "            var assemblyInfoFiles = GetAssemblyInfoFiles(workingDirectory' assemblyInfoFileNames' fileSystem' ensureAssemblyInfo).ToList(); " is 127.
Long Statement,GitVersion,AssemblyInfoFileUpdater,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,Update,The length of the statement  "            var assemblyVersionString = !string.IsNullOrWhiteSpace(assemblyVersion) ? $"AssemblyVersion(\"{assemblyVersion}\")" : null; " is 123.
Long Statement,GitVersion,AssemblyInfoFileUpdater,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,Update,The length of the statement  "            var assemblyFileVersionString = !string.IsNullOrWhiteSpace(assemblyFileVersion) ? $"AssemblyFileVersion(\"{assemblyFileVersion}\")" : null; " is 139.
Long Statement,GitVersion,AssemblyInfoFileUpdater,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,Update,The length of the statement  "                    fileContents = ReplaceOrAppend(assemblyVersionRegex' fileContents' assemblyVersionString' assemblyInfoFile.Extension' ref appendedAttributes); " is 142.
Long Statement,GitVersion,AssemblyInfoFileUpdater,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,Update,The length of the statement  "                    fileContents = ReplaceOrAppend(assemblyFileVersionRegex' fileContents' assemblyFileVersionString' assemblyInfoFile.Extension' ref appendedAttributes); " is 150.
Long Statement,GitVersion,AssemblyInfoFileUpdater,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,Update,The length of the statement  "                fileContents = ReplaceOrAppend(assemblyInfoVersionRegex' fileContents' assemblyInfoVersionString' assemblyInfoFile.Extension' ref appendedAttributes); " is 150.
Long Statement,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception(string.Format("Configuration value for 'Versioning mode' for branch {0} has no value. (this should not happen' please report an issue)"' currentBranchConfig.Name)); " is 184.
Long Statement,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception(string.Format("Configuration value for 'Increment' for branch {0} has no value. (this should not happen' please report an issue)"' currentBranchConfig.Name)); " is 178.
Long Statement,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception(string.Format("Configuration value for 'PreventIncrementOfMergedBranchVersion' for branch {0} has no value. (this should not happen' please report an issue)"' currentBranchConfig.Name)); " is 206.
Long Statement,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception(string.Format("Configuration value for 'TrackMergeTarget' for branch {0} has no value. (this should not happen' please report an issue)"' currentBranchConfig.Name)); " is 185.
Long Statement,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception(string.Format("Configuration value for 'TracksReleaseBranches' for branch {0} has no value. (this should not happen' please report an issue)"' currentBranchConfig.Name)); " is 190.
Long Statement,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception(string.Format("Configuration value for 'IsReleaseBranch' for branch {0} has no value. (this should not happen' please report an issue)"' currentBranchConfig.Name)); " is 184.
Long Statement,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception("Configuration value for 'AssemblyVersioningScheme' has no value. (this should not happen' please report an issue)"); " is 137.
Long Statement,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception("Configuration value for 'AssemblyFileVersioningScheme' has no value. (this should not happen' please report an issue)"); " is 141.
Long Statement,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception("Configuration value for 'CommitMessageIncrementing' has no value. (this should not happen' please report an issue)"); " is 138.
Long Statement,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception("Configuration value for 'LegacySemVerPadding' has no value. (this should not happen' please report an issue)"); " is 132.
Long Statement,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception("Configuration value for 'BuildMetaDataPadding' has no value. (this should not happen' please report an issue)"); " is 133.
Long Statement,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception("Configuration value for 'CommitsSinceVersionSourcePadding' has no value. (this should not happen' please report an issue)"); " is 145.
Long Statement,GitVersion,GitVersionContext,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "            var commitMessageVersionBump = currentBranchConfig.CommitMessageIncrementing ?? FullConfiguration.CommitMessageIncrementing.Value; " is 130.
Long Statement,GitVersion,GitVersionFinder,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionFinder.cs,FindVersion,The length of the statement  "                throw new WarningException("NextVersion.txt has been deprecated. See http://gitversion.readthedocs.org/en/latest/configuration/ for replacement"); " is 146.
Long Statement,GitVersion,Logger,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Logger.cs,IndentLog,The length of the statement  "                WriteInfo(string.Format(CultureInfo.InvariantCulture' "End: {0} (Took: {1:N}ms)"' operationDescription' DateTime.Now.Subtract(start).TotalMilliseconds)); " is 153.
Long Statement,GitVersion,Logger,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Logger.cs,LogMessage,The length of the statement  "            return s => logAction(string.Format(CultureInfo.InvariantCulture' "{0}{1} [{2:MM/dd/yy H:mm:ss:ff}] {3}"' indent' level' DateTime.Now' s)); " is 139.
Long Statement,GitVersion,VariableProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\OutputVariables\VariableProvider.cs,GetVariablesFor,The length of the statement  "            var isContinuousDeploymentMode = config.VersioningMode == VersioningMode.ContinuousDeployment && !isCurrentCommitTagged; " is 120.
Long Statement,GitVersion,VariableProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\OutputVariables\VariableProvider.cs,GetVariablesFor,The length of the statement  "                    semanticVersion.PreReleaseTag.Name = NextVersionCalculator.GetBranchSpecificTag(config' semanticVersion.BuildMetaData.Branch' null); " is 132.
Long Statement,GitVersion,VariableProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\OutputVariables\VariableProvider.cs,GetVariablesFor,The length of the statement  "                    throw new WarningException(string.Format("Unable to format AssemblyInformationalVersion.  Check your format string: {0}"' formex.Message)); " is 139.
Long Statement,GitVersion,SemanticVersion,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersion.cs,ToString,The length of the statement  "                return PreReleaseTag.HasTag() ? string.Format("{0}-{1}"' ToString("j")' PreReleaseTag.ToString(format)) : ToString("j"); " is 120.
Long Statement,GitVersion,SemanticVersionPreReleaseTag,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersionPreReleaseTag.cs,ToString,The length of the statement  "                return Number.HasValue ? FormatLegacy(GetLegacyName()' Number.Value.ToString("D" + padding)) : FormatLegacy(GetLegacyName()); " is 125.
Long Statement,GitVersion,TravisCI,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BuildServers\TravisCI.cs,CanApplyToCurrentContext,The length of the statement  "            return "true".Equals(Environment.GetEnvironmentVariable(EnvironmentVariableName)) && "true".Equals(Environment.GetEnvironmentVariable("CI")); " is 141.
Long Statement,GitVersion.Configuration.Init.BuildServer,AppVeyorSetup,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppVeyorSetup.cs,GetGVCommand,The length of the statement  "                    return "  - ps: gitversion $env:APPVEYOR_BUILD_FOLDER /l console /output buildserver /updateAssemblyInfo /nofetch /b $env:APPVEYOR_REPO_BRANCH"; " is 144.
Long Statement,GitVersion.Configuration.Init.BuildServer,AppVeyorSetup,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppVeyorSetup.cs,GenerateNuGetConfig,The length of the statement  "  - cmd: ECHO nuget pack <Project>\<NuSpec>.nuspec -version ""%GitVersion_NuGetVersion%"" -prop ""target=%CONFIGURATION%"" " is 120.
Long Statement,GitVersion.Configuration.Init.BuildServer,AppVeyorSetup,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppVeyorSetup.cs,GetPrompt,The length of the statement  "                prompt.AppendLine("GitVersion doesn't support modifying existing appveyor config files. We will generate appveyor.gitversion.yml instead"); " is 139.
Long Statement,GitVersion.Configuration.Init.BuildServer,AppVeyorSetup,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppVeyorSetup.cs,GetOutputFilename,The length of the statement  "                    var path = Path.Combine(workingDirectory' string.Format("appveyor.gitversion{0}.yml"' count == 0 ? string.Empty : "." + count)); " is 128.
Long Statement,GitVersion.Configuration.Init.BuildServer,AppVeyorSetup,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppVeyorSetup.cs,GetOutputFilename,The length of the statement  "                throw new Exception("appveyor.gitversion.yml -> appveyor.gitversion.9.yml all exist. Pretty sure you have enough templates"); " is 125.
Long Statement,GitVersion.Configuration.Init.Wizard,FinishedSetupStep,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\FinishedSetupStep.cs,GetPrompt,The length of the statement  "            return "Questions are all done' you can now edit GitVersion's configuration further\r\n" + base.GetPrompt(config' workingDirectory); " is 132.
Long Statement,GitVersion.Configuration.Init.Wizard,GitFlowSetupStep,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\GitFlowSetupStep.cs,GetPrompt,The length of the statement  "            return "By default GitVersion will only increment the version of the 'develop' branch every commit' all other branches will increment when tagged\r\n\r\n" +  " is 156.
Long Statement,GitVersion.Configuration.Init.Wizard,GitHubFlowStep,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\GitHubFlowStep.cs,GetPrompt,The length of the statement  "            return "By default GitVersion will only increment the version when tagged\r\n\r\n" + base.GetPrompt(config' workingDirectory); " is 126.
Long Statement,GitVersion.Configuration.Init.Wizard,PickBranchingStrategy3Step,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\PickBranchingStrategy3Step.cs,GetPrompt,The length of the statement  "            return "Do you need to build nightlies or consume packages the CI build creates without releasing those versions? (y/n)"; " is 121.
Long Statement,GitVersion.Configuration.Init.Wizard,PickBranchingStrategy1Step,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\PickBranchingStrategy1Step.cs,HandleResult,The length of the statement  "                    Console.Write(@"Because you need to maintain multiple versions of your product in production at the same time' GitFlow is likely a good fit. " is 140.
Long Statement,GitVersion.Configuration.Init.Wizard,PickBranchingStrategy1Step,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\PickBranchingStrategy1Step.cs,HandleResult,The length of the statement  "GitFlow allows you to have new development happening on the 'develop' branch' patch issues in old minor versions with 'hotfix/' branches and support old major versions with 'support/' branches"); " is 195.
Long Statement,GitVersion.Configuration.Init.Wizard,PickBranchingStrategyStep,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\PickBranchingStrategyStep.cs,GetPrompt,The length of the statement  "            return @"The way you will use GitVersion will change a lot based on your branching strategy. What branching strategy will you be using: " is 135.
Long Statement,GitVersion.VersionCalculation,MainlineVersionCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\MainlineVersionCalculator.cs,FindMainlineModeVersion,The length of the statement  "                    Logger.WriteInfo(string.Format("Current branch ({0}) was branch from {1}"' context.CurrentBranch.FriendlyName' findMergeBase)); " is 127.
Long Statement,GitVersion.VersionCalculation,MainlineVersionCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\MainlineVersionCalculator.cs,GetMainlineTip,The length of the statement  "                "Multiple mainlines ({0}) have the same merge base for the current branch' choosing {1} because we found that branch first..."' " is 127.
Long Statement,GitVersion.VersionCalculation,MainlineVersionCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\MainlineVersionCalculator.cs,GetMergedHead,The length of the statement  "                throw new NotSupportedException("Mainline development does not support more than one merge source in a single commit yet"); " is 123.
Long Statement,GitVersion.VersionCalculation,BaseVersionCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculator.cs,GetBaseVersion,The length of the statement  "                    var oldest = matchingVersionsOnceIncremented.Aggregate((v1' v2) => v1.Version.BaseVersionSource.Committer.When < v2.Version.BaseVersionSource.Committer.When ? v1 : v2); " is 168.
Long Statement,GitVersion.VersionCalculation,BaseVersionCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculator.cs,GetBaseVersion,The length of the statement  "                        "Found multiple base versions which will produce the same SemVer ({0})' taking oldest source for commit counting ({1})"' " is 120.
Long Statement,GitVersion.VersionCalculation,FallbackBaseVersionStrategy,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\FallbackBaseVersionStrategy.cs,GetVersions,The length of the statement  "                throw new GitVersionException($"Can't find commit {currentBranchTip.Sha}. Please ensure that the repository is an unshallow clone with `git fetch --unshallow`."' exception); " is 173.
Long Statement,GitVersion.VersionCalculation,FallbackBaseVersionStrategy,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\FallbackBaseVersionStrategy.cs,GetVersions,The length of the statement  "            yield return new BaseVersion(context' "Fallback base version"' false' new SemanticVersion(minor : 1)' baseVersionSource' null); " is 127.
Long Statement,GitVersion.VersionCalculation,MetaDataCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\MetaDataCalculator.cs,Create,The length of the statement  "            Logger.WriteInfo(string.Format("{0} commits found between {1} and {2}"' commitsSinceTag' baseVersionSource.Sha' context.CurrentCommit.Sha)); " is 140.
Long Statement,GitVersion.VersionCalculation,NextVersionCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\NextVersionCalculator.cs,FindVersion,The length of the statement  "            var preReleaseTagDoesNotMatchConfiguration = hasPreReleaseTag && branchConfigHasPreReleaseTagConfigured && semver.PreReleaseTag.Name != context.Configuration.Tag; " is 162.
Long Statement,GitVersion.VersionCalculation.BaseVersionCalculators,ConfigNextVersionBaseVersionStrategy,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\ConfigNextVersionBaseVersionStrategy.cs,GetVersions,The length of the statement  "            yield return new BaseVersion(context' "NextVersion in GitVersion configuration file"' false' semanticVersion' null' null); " is 122.
Long Statement,GitVersion.VersionCalculation.BaseVersionCalculators,TaggedCommitVersionStrategy,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\TaggedCommitVersionStrategy.cs,CreateBaseVersion,The length of the statement  "            var baseVersion = new BaseVersion(context' FormatSource(version)' shouldUpdateVersion' version.SemVer' version.Commit' null); " is 125.
Long Statement,GitVersion.VersionCalculation.BaseVersionCalculators,MergeMessageBaseVersionStrategy,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\MergeMessageBaseVersionStrategy.cs,GetVersions,The length of the statement  "                            new BaseVersion(context' string.Format("Merge message '{0}'"' c.Message.Trim())' shouldIncrement' semanticVersion' c' null) " is 123.
Long Statement,GitVersion.VersionCalculation.BaseVersionCalculators,VersionInBranchNameBaseVersionStrategy,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\VersionInBranchNameBaseVersionStrategy.cs,GetVersions,The length of the statement  "                yield return new BaseVersion(context' "Version in branch name"' false' versionInBranch.Item2' commitBranchWasBranchedFrom.Commit' branchNameOverride); " is 150.
Long Statement,GitVersion.VersioningModes,ContinuousDeliveryMode,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersioningModes\ContinuousDeliveryMode.cs,RetrieveMostRecentOptionalTagVersion,The length of the statement  "                var preReleaseVersion = applicableTagsInDescendingOrder.Select(tag => SemanticVersion.Parse(tag.FriendlyName' context.Configuration.GitTagPrefix)).FirstOrDefault(); " is 164.
Complex Conditional,GitVersion,GitRepoMetadataProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitRepoMetadataProvider.cs,GetBranchesContainingCommit,The conditional expression  "branch.Tip != null && branch.Tip.Sha != commit.Sha || (onlyTrackedBranches && !branch.IsTracking)"  is complex.
Empty Catch Block,GitVersion.Configuration.Init.SetConfig,ConfigureBranches,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\SetConfig\ConfigureBranches.cs,HandleResult,The method has an empty catch block.
Magic Number,GitVersion,BranchCommit,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BranchCommit.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Branch != null ? Branch.GetHashCode() : 0) * 397) ^ (Commit != null ? Commit.GetHashCode() : 0);              }
Magic Number,GitVersion,BranchConfigurationCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The following statement contains a magic number: using (Logger.IndentLog("Attempting to inherit branch configuration from parent branch"))              {                  var excludedBranches = new[] { targetBranch };                  // Check if we are a merge commit. If so likely we are a pull request                  var parentCount = context.CurrentCommit.Parents.Count();                  if (parentCount == 2)                  {                      excludedBranches = CalculateWhenMultipleParents(repository' context.CurrentCommit' ref targetBranch' excludedBranches);                  }                    if (excludedInheritBranches == null)                  {                      excludedInheritBranches = repository.Branches.Where(b =>                      {                          var branchConfig = config.GetConfigForBranch(b.NameWithoutRemote());                            return branchConfig == null || branchConfig.Increment == IncrementStrategy.Inherit;                      }).ToList();                  }                  // Add new excluded branches.                  foreach (var excludedBranch in excludedBranches.ExcludingBranches(excludedInheritBranches))                  {                      excludedInheritBranches.Add(excludedBranch);                  }                  var branchesToEvaluate = repository.Branches.ExcludingBranches(excludedInheritBranches).ToList();                    var branchPoint = context.RepositoryMetadataProvider                      .FindCommitBranchWasBranchedFrom(targetBranch' excludedInheritBranches.ToArray());                  List<Branch> possibleParents;                  if (branchPoint == BranchCommit.Empty)                  {                      possibleParents = context.RepositoryMetadataProvider.GetBranchesContainingCommit(targetBranch.Tip' branchesToEvaluate' true)                          // It fails to inherit Increment branch configuration if more than 1 parent;                          // therefore no point to get more than 2 parents                          .Take(2)                          .ToList();                  }                  else                  {                      var branches = context.RepositoryMetadataProvider                          .GetBranchesContainingCommit(branchPoint.Commit' branchesToEvaluate' true).ToList();                      if (branches.Count > 1)                      {                          var currentTipBranches = context.RepositoryMetadataProvider                              .GetBranchesContainingCommit(context.CurrentCommit' branchesToEvaluate' true).ToList();                          possibleParents = branches.Except(currentTipBranches).ToList();                      }                      else                      {                          possibleParents = branches;                      }                  }                    Logger.WriteInfo("Found possible parent branches: " + string.Join("' "' possibleParents.Select(p => p.FriendlyName)));                    if (possibleParents.Count == 1)                  {                      var branchConfig = GetBranchConfiguration(context' possibleParents[0]' excludedInheritBranches);                      // If we have resolved a fallback config we should not return that we have got config                      if (branchConfig.Name != FallbackConfigName)                      {                          return new BranchConfig(branchConfiguration)                          {                              Increment = branchConfig.Increment'                              PreventIncrementOfMergedBranchVersion = branchConfig.PreventIncrementOfMergedBranchVersion'                              // If we are inheriting from develop then we should behave like develop                              TracksReleaseBranches = branchConfig.TracksReleaseBranches                          };                      }                  }                    // If we fail to inherit it is probably because the branch has been merged and we can't do much. So we will fall back to develop's config                  // if develop exists and master if not                  string errorMessage;                  if (possibleParents.Count == 0)                      errorMessage = "Failed to inherit Increment branch configuration' no branches found.";                  else                      errorMessage = "Failed to inherit Increment branch configuration' ended up with: " + string.Join("' "' possibleParents.Select(p => p.FriendlyName));                    var developBranchRegex = config.Branches[ConfigurationProvider.DevelopBranchKey].Regex;                  var masterBranchRegex = config.Branches[ConfigurationProvider.MasterBranchKey].Regex;                    var chosenBranch = repository.Branches.FirstOrDefault(b => Regex.IsMatch(b.FriendlyName' developBranchRegex' RegexOptions.IgnoreCase)                                                                             || Regex.IsMatch(b.FriendlyName' masterBranchRegex' RegexOptions.IgnoreCase));                  if (chosenBranch == null)                  {                      // TODO We should call the build server to generate this exception' each build server works differently                      // for fetch issues and we could give better warnings.                      throw new InvalidOperationException("Could not find a 'develop' or 'master' branch' neither locally nor remotely.");                  }                    var branchName = chosenBranch.FriendlyName;                  Logger.WriteWarning(errorMessage + Environment.NewLine + Environment.NewLine + "Falling back to " + branchName + " branch config");                    // To prevent infinite loops' make sure that a new branch was chosen.                  if (targetBranch.IsSameBranch(chosenBranch))                  {                      Logger.WriteWarning("Fallback branch wants to inherit Increment branch configuration from itself. Using patch increment instead.");                      return new BranchConfig(branchConfiguration)                      {                          Increment = IncrementStrategy.Patch                      };                  }                    var inheritingBranchConfig = GetBranchConfiguration(context' chosenBranch' excludedInheritBranches);                  var configIncrement = inheritingBranchConfig.Increment;                  if (inheritingBranchConfig.Name == FallbackConfigName && configIncrement == IncrementStrategy.Inherit)                  {                      Logger.WriteWarning("Fallback config inherits by default' dropping to patch increment");                      configIncrement = IncrementStrategy.Patch;                  }                  return new BranchConfig(branchConfiguration)                  {                      Increment = configIncrement'                      PreventIncrementOfMergedBranchVersion = inheritingBranchConfig.PreventIncrementOfMergedBranchVersion'                      // If we are inheriting from develop then we should behave like develop                      TracksReleaseBranches = inheritingBranchConfig.TracksReleaseBranches                  };              }
Magic Number,GitVersion,BranchConfigurationCalculator,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The following statement contains a magic number: using (Logger.IndentLog("Attempting to inherit branch configuration from parent branch"))              {                  var excludedBranches = new[] { targetBranch };                  // Check if we are a merge commit. If so likely we are a pull request                  var parentCount = context.CurrentCommit.Parents.Count();                  if (parentCount == 2)                  {                      excludedBranches = CalculateWhenMultipleParents(repository' context.CurrentCommit' ref targetBranch' excludedBranches);                  }                    if (excludedInheritBranches == null)                  {                      excludedInheritBranches = repository.Branches.Where(b =>                      {                          var branchConfig = config.GetConfigForBranch(b.NameWithoutRemote());                            return branchConfig == null || branchConfig.Increment == IncrementStrategy.Inherit;                      }).ToList();                  }                  // Add new excluded branches.                  foreach (var excludedBranch in excludedBranches.ExcludingBranches(excludedInheritBranches))                  {                      excludedInheritBranches.Add(excludedBranch);                  }                  var branchesToEvaluate = repository.Branches.ExcludingBranches(excludedInheritBranches).ToList();                    var branchPoint = context.RepositoryMetadataProvider                      .FindCommitBranchWasBranchedFrom(targetBranch' excludedInheritBranches.ToArray());                  List<Branch> possibleParents;                  if (branchPoint == BranchCommit.Empty)                  {                      possibleParents = context.RepositoryMetadataProvider.GetBranchesContainingCommit(targetBranch.Tip' branchesToEvaluate' true)                          // It fails to inherit Increment branch configuration if more than 1 parent;                          // therefore no point to get more than 2 parents                          .Take(2)                          .ToList();                  }                  else                  {                      var branches = context.RepositoryMetadataProvider                          .GetBranchesContainingCommit(branchPoint.Commit' branchesToEvaluate' true).ToList();                      if (branches.Count > 1)                      {                          var currentTipBranches = context.RepositoryMetadataProvider                              .GetBranchesContainingCommit(context.CurrentCommit' branchesToEvaluate' true).ToList();                          possibleParents = branches.Except(currentTipBranches).ToList();                      }                      else                      {                          possibleParents = branches;                      }                  }                    Logger.WriteInfo("Found possible parent branches: " + string.Join("' "' possibleParents.Select(p => p.FriendlyName)));                    if (possibleParents.Count == 1)                  {                      var branchConfig = GetBranchConfiguration(context' possibleParents[0]' excludedInheritBranches);                      // If we have resolved a fallback config we should not return that we have got config                      if (branchConfig.Name != FallbackConfigName)                      {                          return new BranchConfig(branchConfiguration)                          {                              Increment = branchConfig.Increment'                              PreventIncrementOfMergedBranchVersion = branchConfig.PreventIncrementOfMergedBranchVersion'                              // If we are inheriting from develop then we should behave like develop                              TracksReleaseBranches = branchConfig.TracksReleaseBranches                          };                      }                  }                    // If we fail to inherit it is probably because the branch has been merged and we can't do much. So we will fall back to develop's config                  // if develop exists and master if not                  string errorMessage;                  if (possibleParents.Count == 0)                      errorMessage = "Failed to inherit Increment branch configuration' no branches found.";                  else                      errorMessage = "Failed to inherit Increment branch configuration' ended up with: " + string.Join("' "' possibleParents.Select(p => p.FriendlyName));                    var developBranchRegex = config.Branches[ConfigurationProvider.DevelopBranchKey].Regex;                  var masterBranchRegex = config.Branches[ConfigurationProvider.MasterBranchKey].Regex;                    var chosenBranch = repository.Branches.FirstOrDefault(b => Regex.IsMatch(b.FriendlyName' developBranchRegex' RegexOptions.IgnoreCase)                                                                             || Regex.IsMatch(b.FriendlyName' masterBranchRegex' RegexOptions.IgnoreCase));                  if (chosenBranch == null)                  {                      // TODO We should call the build server to generate this exception' each build server works differently                      // for fetch issues and we could give better warnings.                      throw new InvalidOperationException("Could not find a 'develop' or 'master' branch' neither locally nor remotely.");                  }                    var branchName = chosenBranch.FriendlyName;                  Logger.WriteWarning(errorMessage + Environment.NewLine + Environment.NewLine + "Falling back to " + branchName + " branch config");                    // To prevent infinite loops' make sure that a new branch was chosen.                  if (targetBranch.IsSameBranch(chosenBranch))                  {                      Logger.WriteWarning("Fallback branch wants to inherit Increment branch configuration from itself. Using patch increment instead.");                      return new BranchConfig(branchConfiguration)                      {                          Increment = IncrementStrategy.Patch                      };                  }                    var inheritingBranchConfig = GetBranchConfiguration(context' chosenBranch' excludedInheritBranches);                  var configIncrement = inheritingBranchConfig.Increment;                  if (inheritingBranchConfig.Name == FallbackConfigName && configIncrement == IncrementStrategy.Inherit)                  {                      Logger.WriteWarning("Fallback config inherits by default' dropping to patch increment");                      configIncrement = IncrementStrategy.Patch;                  }                  return new BranchConfig(branchConfiguration)                  {                      Increment = configIncrement'                      PreventIncrementOfMergedBranchVersion = inheritingBranchConfig.PreventIncrementOfMergedBranchVersion'                      // If we are inheriting from develop then we should behave like develop                      TracksReleaseBranches = inheritingBranchConfig.TracksReleaseBranches                  };              }
Magic Number,GitVersion,VsoAgent,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\BuildServers\VsoAgent.cs,GenerateSetVersionMessage,The following statement contains a magic number: if (buildNum == newBuildNum)              {                  var buildNumber = variables.FullSemVer.EndsWith("+0") ? variables.FullSemVer.Substring(0' variables.FullSemVer.Length - 2) : variables.FullSemVer;                  return string.Format("##vso[build.updatebuildnumber]{0}"' buildNumber);              }
Magic Number,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,ApplyDefaultsTo,The following statement contains a magic number: config.LegacySemVerPadding = config.LegacySemVerPadding ?? 4;
Magic Number,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,ApplyDefaultsTo,The following statement contains a magic number: config.BuildMetaDataPadding = config.BuildMetaDataPadding ?? 4;
Magic Number,GitVersion,ConfigurationProvider,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\ConfigurationProvider.cs,ApplyDefaultsTo,The following statement contains a magic number: config.CommitsSinceVersionSourcePadding = config.CommitsSinceVersionSourcePadding ?? 4;
Magic Number,GitVersion,GitVersionCache,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionCache.cs,WriteVariablesToDiskCache,The following statement contains a magic number: var retryOperation = new OperationWithExponentialBackoff<IOException>(new ThreadSleep()' writeCacheOperation' maxRetries: 6);
Magic Number,GitVersion,MergeMessage,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\MergeMessage.cs,MergeMessage,The following statement contains a magic number: if (lastIndexOf != -1)              {                  // If we have into in the merge message the rest should be the target branch                  TargetBranch = mergeMessage.Substring(lastIndexOf + 5);              }
Magic Number,GitVersion,GitVersionFinder,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\GitVersionFinder.cs,EnsureHeadIsNotDetached,The following statement contains a magic number: var message = string.Format(                  "It looks like the branch being examined is a detached Head pointing to commit '{0}'. " +                  "Without a proper branch name GitVersion cannot determine the build version."'                  context.CurrentCommit.Id.ToString(7));
Magic Number,GitVersion,LambdaEqualityHelper<T>,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\LambdaEqualityHelper.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  foreach (var accessor in equalityContributorAccessors)                  {                      var item = accessor(instance);                      hashCode = (hashCode * 397) ^ (item != null ? item.GetHashCode() : 0);                  }              }
Magic Number,GitVersion,Logger,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Logger.cs,IndentLog,The following statement contains a magic number: return new ActionDisposable(() =>              {                  indent = indent.Substring(0' indent.Length - 2);                  WriteInfo(string.Format(CultureInfo.InvariantCulture' "End: {0} (Took: {1:N}ms)"' operationDescription' DateTime.Now.Subtract(start).TotalMilliseconds));              });
Magic Number,GitVersion,SemanticVersion,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersion.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Major;                  hashCode = (hashCode * 397) ^ Minor;                  hashCode = (hashCode * 397) ^ Patch;                  hashCode = (hashCode * 397) ^ (PreReleaseTag != null ? PreReleaseTag.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (BuildMetaData != null ? BuildMetaData.GetHashCode() : 0);                  return hashCode;              }
Magic Number,GitVersion,SemanticVersion,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersion.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Major;                  hashCode = (hashCode * 397) ^ Minor;                  hashCode = (hashCode * 397) ^ Patch;                  hashCode = (hashCode * 397) ^ (PreReleaseTag != null ? PreReleaseTag.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (BuildMetaData != null ? BuildMetaData.GetHashCode() : 0);                  return hashCode;              }
Magic Number,GitVersion,SemanticVersion,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersion.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Major;                  hashCode = (hashCode * 397) ^ Minor;                  hashCode = (hashCode * 397) ^ Patch;                  hashCode = (hashCode * 397) ^ (PreReleaseTag != null ? PreReleaseTag.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (BuildMetaData != null ? BuildMetaData.GetHashCode() : 0);                  return hashCode;              }
Magic Number,GitVersion,SemanticVersion,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersion.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Major;                  hashCode = (hashCode * 397) ^ Minor;                  hashCode = (hashCode * 397) ^ Patch;                  hashCode = (hashCode * 397) ^ (PreReleaseTag != null ? PreReleaseTag.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (BuildMetaData != null ? BuildMetaData.GetHashCode() : 0);                  return hashCode;              }
Magic Number,GitVersion,SemanticVersionBuildMetaData,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersionBuildMetaData.cs,ToString,The following statement contains a magic number: if (format.StartsWith("p"' StringComparison.Ordinal))              {                  // Handle format                  var padding = 4;                  if (format.Length > 1)                  {                      // try to parse                      int p;                      if (int.TryParse(format.Substring(1)' out p))                      {                          padding = p;                      }                  }                    return CommitsSinceTag != null ? CommitsSinceTag.Value.ToString("D" + padding) : string.Empty;               }
Magic Number,GitVersion,SemanticVersionPreReleaseTag,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersionPreReleaseTag.cs,ToString,The following statement contains a magic number: if (format.StartsWith("lp"' StringComparison.Ordinal))              {                  // Handle format                  var padding = 4;                  if (format.Length > 2)                  {                      // try to parse                      int p;                      if (int.TryParse(format.Substring(2)' out p))                      {                          padding = p;                      }                  }                    return Number.HasValue ? FormatLegacy(GetLegacyName()' Number.Value.ToString("D" + padding)) : FormatLegacy(GetLegacyName());              }
Magic Number,GitVersion,SemanticVersionPreReleaseTag,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersionPreReleaseTag.cs,ToString,The following statement contains a magic number: if (format.StartsWith("lp"' StringComparison.Ordinal))              {                  // Handle format                  var padding = 4;                  if (format.Length > 2)                  {                      // try to parse                      int p;                      if (int.TryParse(format.Substring(2)' out p))                      {                          padding = p;                      }                  }                    return Number.HasValue ? FormatLegacy(GetLegacyName()' Number.Value.ToString("D" + padding)) : FormatLegacy(GetLegacyName());              }
Magic Number,GitVersion,SemanticVersionPreReleaseTag,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersionPreReleaseTag.cs,ToString,The following statement contains a magic number: if (format.StartsWith("lp"' StringComparison.Ordinal))              {                  // Handle format                  var padding = 4;                  if (format.Length > 2)                  {                      // try to parse                      int p;                      if (int.TryParse(format.Substring(2)' out p))                      {                          padding = p;                      }                  }                    return Number.HasValue ? FormatLegacy(GetLegacyName()' Number.Value.ToString("D" + padding)) : FormatLegacy(GetLegacyName());              }
Magic Number,GitVersion,SemanticVersionPreReleaseTag,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersionPreReleaseTag.cs,FormatLegacy,The following statement contains a magic number: if (tag.Length + number.Length > 20)                  return string.Format("{0}{1}"' tag.Substring(0' 20 - number.Length)' number);
Magic Number,GitVersion,SemanticVersionPreReleaseTag,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\SemanticVersionPreReleaseTag.cs,FormatLegacy,The following statement contains a magic number: if (tag.Length + number.Length > 20)                  return string.Format("{0}{1}"' tag.Substring(0' 20 - number.Length)' number);
Magic Number,GitVersion.Configuration.Init.BuildServer,AppVeyorSetup,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppVeyorSetup.cs,GetOutputFilename,The following statement contains a magic number: if (AppVeyorConfigExists(workingDirectory' fileSystem))              {                  var count = 0;                  do                  {                      var path = Path.Combine(workingDirectory' string.Format("appveyor.gitversion{0}.yml"' count == 0 ? string.Empty : "." + count));                        if (!fileSystem.Exists(path))                      {                          return path;                      }                        count++;                  } while (count < 10);                  throw new Exception("appveyor.gitversion.yml -> appveyor.gitversion.9.yml all exist. Pretty sure you have enough templates");              }
Magic Number,GitVersion.Helpers,OperationWithExponentialBackoff<T>,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Helpers\OperationWithExponentialBackoff.cs,Execute,The following statement contains a magic number: int sleepMSec = 500;
Magic Number,GitVersion.Helpers,OperationWithExponentialBackoff<T>,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Helpers\OperationWithExponentialBackoff.cs,Execute,The following statement contains a magic number: while (tries <= MaxRetries)              {                  tries++;                    try                  {                      Operation();                      break;                  }                  catch (T e)                  {                      exceptions.Add(e);                      if (tries > MaxRetries)                      {                          throw new AggregateException("Operation failed after maximum number of retries were exceeded."' exceptions);                      }                  }                    Logger.WriteInfo(string.Format("Operation failed' retrying in {0} milliseconds."' sleepMSec));                  ThreadSleep.Sleep(sleepMSec);                  sleepMSec *= 2;              }
Magic Number,GitVersion.VersionCalculation.BaseVersionCalculators,MergeMessageBaseVersionStrategy,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\MergeMessageBaseVersionStrategy.cs,Inner,The following statement contains a magic number: if (mergeCommit.Parents.Count() < 2)              {                  return null;              }
Missing Default,GitVersion,LoggerWrapper,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\LoggerWrapper.cs,Log,The following switch statement is missing a default case: switch (loglevel)                  {                      case LogLevel.Trace:                      case LogLevel.Debug:                          Logger.WriteDebug(message);                          break;                      case LogLevel.Info:                          Logger.WriteInfo(message);                          break;                      case LogLevel.Warn:                          Logger.WriteWarning(message);                          break;                      case LogLevel.Error:                      case LogLevel.Fatal:                          Logger.WriteError(message);                          break;                  }
Missing Default,GitVersion.Configuration.Init.BuildServer,AppveyorPublicPrivate,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppveyorPublicPrivate.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      steps.Enqueue(new EditConfigStep(Console' FileSystem));                      return StepResult.Ok();                  case "1":                      steps.Enqueue(new AppVeyorSetup(Console' FileSystem' ProjectVisibility.Public));                      return StepResult.Ok();                  case "2":                      steps.Enqueue(new AppVeyorSetup(Console' FileSystem' ProjectVisibility.Private));                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.BuildServer,AppVeyorSetup,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppVeyorSetup.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      steps.Enqueue(new EditConfigStep(Console' FileSystem));                      return StepResult.Ok();                  case "1":                      GenerateBasicConfig(workingDirectory);                      steps.Enqueue(new EditConfigStep(Console' FileSystem));                      return StepResult.Ok();                  case "2":                      GenerateNuGetConfig(workingDirectory);                      steps.Enqueue(new EditConfigStep(Console' FileSystem));                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.BuildServer,SetupBuildScripts,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\SetupBuildScripts.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      steps.Enqueue(new EditConfigStep(Console' FileSystem));                      return StepResult.Ok();                  case "1":                      steps.Enqueue(new AppveyorPublicPrivate(Console' FileSystem));                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.SetConfig,AssemblyVersioningSchemeSetting,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\SetConfig\AssemblyVersioningSchemeSetting.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      steps.Enqueue(new EditConfigStep(Console' FileSystem));                      return StepResult.Ok();                  case "1":                      config.AssemblyVersioningScheme = AssemblyVersioningScheme.Major;                      steps.Enqueue(new EditConfigStep(Console' FileSystem));                      return StepResult.Ok();                  case "2":                      config.AssemblyVersioningScheme = AssemblyVersioningScheme.MajorMinor;                      steps.Enqueue(new EditConfigStep(Console' FileSystem));                      return StepResult.Ok();                  case "3":                      config.AssemblyVersioningScheme = AssemblyVersioningScheme.MajorMinorPatch;                      steps.Enqueue(new EditConfigStep(Console' FileSystem));                      return StepResult.Ok();                  case "4":                      config.AssemblyVersioningScheme = AssemblyVersioningScheme.MajorMinorPatchTag;                      steps.Enqueue(new EditConfigStep(Console' FileSystem));                      return StepResult.Ok();                  case "5":                      config.AssemblyVersioningScheme = AssemblyVersioningScheme.None;                      steps.Enqueue(new EditConfigStep(Console' FileSystem));                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.SetConfig,ConfigureBranch,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\SetConfig\ConfigureBranch.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      steps.Enqueue(new ConfigureBranches(Console' FileSystem));                      return StepResult.Ok();                  case "1":                      steps.Enqueue(new SetBranchTag(name' branchConfig' Console' FileSystem));                      return StepResult.Ok();                  case "2":                      steps.Enqueue(new SetBranchIncrementMode(name' branchConfig' Console' FileSystem));                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.SetConfig,SetBranchIncrementMode,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\SetConfig\SetBranchIncrementMode.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      steps.Enqueue(new ConfigureBranch(name' branchConfig' Console' FileSystem));                      return StepResult.Ok();                  case "1":                      branchConfig.VersioningMode = VersioningMode.ContinuousDelivery;                      steps.Enqueue(new ConfigureBranch(name' branchConfig' Console' FileSystem));                      return StepResult.Ok();                  case "2":                      branchConfig.VersioningMode = VersioningMode.ContinuousDeployment;                      steps.Enqueue(new ConfigureBranch(name' branchConfig' Console' FileSystem));                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.SetConfig,GlobalModeSetting,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\SetConfig\GlobalModeSetting.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "1":                      config.VersioningMode = VersioningMode.ContinuousDelivery;                      steps.Enqueue(returnToStep);                      return StepResult.Ok();                  case "2":                      config.VersioningMode = VersioningMode.ContinuousDeployment;                      steps.Enqueue(returnToStep);                      return StepResult.Ok();                  case "3":                      config.VersioningMode = VersioningMode.Mainline;                      steps.Enqueue(returnToStep);                      return StepResult.Ok();                  case "0":                  case "4":                      steps.Enqueue(returnToStep);                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init,EditConfigStep,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\EditConfigStep.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      return StepResult.SaveAndExit();                  case "1":                      return StepResult.ExitWithoutSaving();                    case "2":                      steps.Enqueue(new PickBranchingStrategyStep(Console' FileSystem));                      return StepResult.Ok();                    case "3":                      steps.Enqueue(new SetNextVersion(Console' FileSystem));                      return StepResult.Ok();                    case "4":                      steps.Enqueue(new ConfigureBranches(Console' FileSystem));                      return StepResult.Ok();                  case "5":                      steps.Enqueue(new GlobalModeSetting(new EditConfigStep(Console' FileSystem)' false' Console' FileSystem));                      return StepResult.Ok();                  case "6":                      steps.Enqueue(new AssemblyVersioningSchemeSetting(Console' FileSystem));                      return StepResult.Ok();                  case "7":                      steps.Enqueue(new SetupBuildScripts(Console' FileSystem));                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.Wizard,PickBranchingStrategy2Step,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\PickBranchingStrategy2Step.cs,HandleResult,The following switch statement is missing a default case: switch (result.ToLower())              {                  case "y":                      Console.WriteLine("GitFlow is likely a good fit' the 'develop' branch can be used " +                                        "for active development while stabilising the next release.");                      Console.WriteLine();                      Console.WriteLine("GitHubFlow is designed for a lightweight workflow where master is always " +                                        "good to deploy to production and feature branches are used to stabilise " +                                        "features' once stable they are merged to master and made available in the next release");                      steps.Enqueue(new PickBranchingStrategyStep(Console' FileSystem));                      return StepResult.Ok();                  case "n":                      steps.Enqueue(new PickBranchingStrategy3Step(Console' FileSystem));                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.Wizard,PickBranchingStrategy1Step,C:\repos\ParticularLabs_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\PickBranchingStrategy1Step.cs,HandleResult,The following switch statement is missing a default case: switch (result.ToLower())              {                  case "y":                      Console.Write(@"Because you need to maintain multiple versions of your product in production at the same time' GitFlow is likely a good fit.    GitFlow allows you to have new development happening on the 'develop' branch' patch issues in old minor versions with 'hotfix/' branches and support old major versions with 'support/' branches");                      steps.Enqueue(new PickBranchingStrategyStep(Console' FileSystem));                      return StepResult.Ok();                  case "n":                      steps.Enqueue(new PickBranchingStrategy2Step(Console' FileSystem));                      return StepResult.Ok();              }
