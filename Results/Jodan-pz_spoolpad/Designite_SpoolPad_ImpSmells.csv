Implementation smell,Namespace,Class,File,Method,Description
Long Method,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The method has 102 lines of code.
Long Method,it.jodan.SpoolPad.BaseClasses.Configuration,PadConfig,C:\repos\Jodan-pz_spoolpad\BaseClasses\Configuration\PadConfig.cs,Save,The method has 110 lines of code.
Long Method,it.jodan.SpoolPad.BaseClasses.Configuration,PadConfig,C:\repos\Jodan-pz_spoolpad\BaseClasses\Configuration\PadConfig.cs,Load,The method has 117 lines of code.
Complex Method,it.jodan.SpoolPad.BaseClasses,DataContextBuilder,C:\repos\Jodan-pz_spoolpad\BaseClasses\DataContextBuilder.cs,Compile,Cyclomatic complexity of the method is 15
Complex Method,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,Cyclomatic complexity of the method is 20
Complex Method,it.jodan.SpoolPad.BaseClasses.Configuration,PadConfig,C:\repos\Jodan-pz_spoolpad\BaseClasses\Configuration\PadConfig.cs,Save,Cyclomatic complexity of the method is 26
Complex Method,it.jodan.SpoolPad.BaseClasses.Configuration,PadConfig,C:\repos\Jodan-pz_spoolpad\BaseClasses\Configuration\PadConfig.cs,Load,Cyclomatic complexity of the method is 38
Complex Method,it.jodan.SpoolPad.RuntimeConfiguration,NameValueMultipleSectionHandler,C:\repos\Jodan-pz_spoolpad\RuntimeConfiguration\NameValueMultipleSectionHandler.cs,Create,Cyclomatic complexity of the method is 12
Long Parameter List,it.jodan.SpoolPad.BaseClasses,IExecutableCodeGenerator,C:\repos\Jodan-pz_spoolpad\BaseClasses\IExecutableCodeGenerator.cs,GetExecutionCode,The method has 6 parameters.
Long Parameter List,it.jodan.SpoolPad.Services,CSharpSimpleExecutableCodeGenerator,C:\repos\Jodan-pz_spoolpad\Services\CSharpSimpleExecutableCodeGenerator.cs,GetExecutionCode,The method has 6 parameters.
Long Parameter List,it.jodan.SpoolPad.Services,VBasicSimpleExecutableCodeGenerator,C:\repos\Jodan-pz_spoolpad\Services\VBasicSimpleExecutableCodeGenerator.cs,GetExecutionCode,The method has 6 parameters.
Long Statement,it.jodan.SpoolPad.Helpers,MessageHelper,C:\repos\Jodan-pz_spoolpad\Helpers\MessageHelper.cs,ShowYesNo,The length of the statement  "	MessageDialog dlg = new MessageDialog (null' DialogFlags.Modal' Gtk.MessageType.Question' ButtonsType.YesNo' message' args); " is 124.
Long Statement,it.jodan.SpoolPad.Helpers,FileDialogHelper,C:\repos\Jodan-pz_spoolpad\Helpers\FileDialogHelper.cs,OpenFile,The length of the statement  "	FileChooserDialog fd = new FileChooserDialog (title' null' FileChooserAction.Open' Gtk.Stock.Cancel' ResponseType.Cancel' Gtk.Stock.Open' ResponseType.Accept); " is 159.
Long Statement,it.jodan.SpoolPad.Helpers,FileDialogHelper,C:\repos\Jodan-pz_spoolpad\Helpers\FileDialogHelper.cs,SaveFile,The length of the statement  "	FileChooserDialog fd = new FileChooserDialog (title' null' FileChooserAction.Save' Gtk.Stock.Cancel' ResponseType.Cancel' Gtk.Stock.Save' ResponseType.Accept); " is 159.
Long Statement,it.jodan.SpoolPad.Helpers,FileDialogHelper,C:\repos\Jodan-pz_spoolpad\Helpers\FileDialogHelper.cs,ChooseFolder,The length of the statement  "	FileChooserDialog fd = new FileChooserDialog (title' null' FileChooserAction.SelectFolder' Gtk.Stock.Cancel' ResponseType.Cancel' Gtk.Stock.Save' ResponseType.Accept); " is 167.
Long Statement,it.jodan.SpoolPad.BaseClasses,CodeRunner,C:\repos\Jodan-pz_spoolpad\BaseClasses\CodeRunner.cs,Run,The length of the statement  "	StringBuilder source = codeExecGen.GetExecutionCode (_config.GetAllUsingNamespaces ()' "____jodan._code_exec"' _config.DataContextBaseClass' "____jodan_class_" + unqMethodId' _config.CodeType' _config.Code); " is 207.
Long Statement,it.jodan.SpoolPad.BaseClasses,AbstractContext,C:\repos\Jodan-pz_spoolpad\BaseClasses\AbstractContext.cs,BuildHelp,The length of the statement  "	foreach (MethodInfo mi in GetType ().GetMethods (BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy).OrderBy (m => m.Name)) { " is 153.
Long Statement,it.jodan.SpoolPad.BaseClasses,AbstractContext,C:\repos\Jodan-pz_spoolpad\BaseClasses\AbstractContext.cs,BuildHelp,The length of the statement  "			help += "  : " + ((DataContextCommandAttribute)mi.GetCustomAttributes (typeof(DataContextCommandAttribute)' true).First ()).Description; " is 136.
Long Statement,it.jodan.SpoolPad.BaseClasses,DataContextBuilder,C:\repos\Jodan-pz_spoolpad\BaseClasses\DataContextBuilder.cs,Compile,The length of the statement  "						TextReader tr = new StreamReader (Assembly.ReflectionOnlyLoadFrom (map.Assembly).GetManifestResourceStream (map.ResourceName)); " is 127.
Long Statement,it.jodan.SpoolPad.BaseClasses,DataContextBuilder,C:\repos\Jodan-pz_spoolpad\BaseClasses\DataContextBuilder.cs,Compile,The length of the statement  "						doc = XDocument.Load (new XmlTextReader (Assembly.ReflectionOnlyLoadFrom (map.Assembly).GetManifestResourceStream (map.ResourceName))); " is 135.
Long Statement,it.jodan.SpoolPad.BaseClasses,AbstractDomainGenerator,C:\repos\Jodan-pz_spoolpad\BaseClasses\AbstractDomainGenerator.cs,GenerateDomain,The length of the statement  "			mapDoc = XDocument.Load (new XmlTextReader (Assembly.ReflectionOnlyLoadFrom (map.Assembly).GetManifestResourceStream (map.ResourceName))); " is 138.
Long Statement,it.jodan.SpoolPad.Services,CSharpSimpleDomainGenerator,C:\repos\Jodan-pz_spoolpad\Services\CSharpSimpleDomainGenerator.cs,CreateClassCode,The length of the statement  "			code.AppendFormat (@"public virtual {0} {1} {{ get; set; }}"' temp.Attribute ("class").Value' temp.Attribute ("name").Value); " is 125.
Long Statement,it.jodan.SpoolPad.Services,CSharpSimpleDomainGenerator,C:\repos\Jodan-pz_spoolpad\Services\CSharpSimpleDomainGenerator.cs,CreateClassCode,The length of the statement  "				code.AppendFormat (@"public virtual {0}<{1}> {2} {{ get; set; }}"' locName.Equals ("set") ? "ISet" : "IList"' setType.Value' temp.Attribute ("name").Value); " is 156.
Long Statement,it.jodan.SpoolPad.Services,VBasicSimpleExecutableCodeGenerator,C:\repos\Jodan-pz_spoolpad\Services\VBasicSimpleExecutableCodeGenerator.cs,GetExecutionCode,The length of the statement  "	string endCode = (code ?? "").TrimEnd ().ToLower ().EndsWith ("end sub") ? code.ToLower ().Contains ("class") ? Environment.NewLine : Environment.NewLine + "End Sub" : Environment.NewLine + "End Sub"; " is 200.
Long Statement,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The length of the statement  "						temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC;; color:white\">Items of type: {0}</h3>"' IsAnonymousType (innerElementType) ? "[Generated]" : GetObjectTypeName (innerElementType)); " is 213.
Long Statement,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The length of the statement  "				temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC; color:white\">{0}</h3>"' IsAnonymousType (oType) ? "[Generated]" : GetObjectTypeName (obj.GetType ())); " is 184.
Long Statement,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The length of the statement  "				temp.Append ("<table style=\"width:100%\" border=\"1\"><thead style=\"background-color: #BDFCC9;\"><tr><th style=\"width:50%\">Name</th><th style=\"width:50%\">Value</th></tr></thead><tbody>"); " is 193.
Long Statement,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,IsAnonymousType,The length of the statement  "	Boolean hasCompilerGeneratedAttribute = type.GetCustomAttributes (typeof(CompilerGeneratedAttribute)' false).Count () > 0; " is 122.
Long Statement,it.jodan.SpoolPad.Services,TextViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\TextViewSpoolService.cs,CheckIfAnonymousType,The length of the statement  "	return Attribute.IsDefined (type' typeof(CompilerGeneratedAttribute)' false) && type.IsGenericType && type.Name.Contains ("Anon") && (type.Name.StartsWith ("<>") || type.Name.StartsWith ("VB$")); " is 195.
Long Statement,it.jodan.SpoolPad.BaseClasses.Configuration,PadConfig,C:\repos\Jodan-pz_spoolpad\BaseClasses\Configuration\PadConfig.cs,ToString,The length of the statement  "	return string.Format ("[PadConfig: Exist={0}' FileName={1}' CodeType={2}' Mappings={3}' Connection={4}' DataContext={5}' References={6}' Usings={7}' Code={8}' Name={9}' DataContextBaseClass={10}' DataContextAutoGenNamespace={11}]"' Exist' FileName' CodeType' Mappings' Connection' DataContext' References' Usings' Code' Name' DataContextBaseClass' DataContextAutoGenNamespace); " is 377.
Long Statement,it.jodan.SpoolPad.BaseClasses.Configuration,PadConfig,C:\repos\Jodan-pz_spoolpad\BaseClasses\Configuration\PadConfig.cs,Load,The length of the statement  "				foreach (string reffile in Directory.GetFiles (Path.GetDirectoryName (asm.Value)' pattern' SearchOption.TopDirectoryOnly)) " is 122.
Long Statement,it.jodan.SpoolPad.BaseClasses.Configuration,MapConfig,C:\repos\Jodan-pz_spoolpad\BaseClasses\Configuration\MapConfig.cs,ToString,The length of the statement  "	return string.Format ("[MapConfig: IsValid={0}' IsFile={1}' IsAssembly={2}' Map={3}' Assembly={4}' ResourceName={5}]"' IsValid' IsFile' IsAssembly' Map' Assembly' ResourceName); " is 177.
Long Statement,it.jodan.SpoolPad.BaseClasses.Configuration,ConnectionConfig,C:\repos\Jodan-pz_spoolpad\BaseClasses\Configuration\ConnectionConfig.cs,ToString,The length of the statement  "	return string.Format ("[ConnectionConfig: ConnectionString={0}' User={1}' Password={2}' Driver={3}' Dialect={4}' ShowSql={5}]"' ConnectionString' User' Password' Driver' Dialect' ShowSql); " is 188.
Long Statement,it.jodan.SpoolPad.BaseClasses.Configuration,DataContextConfig,C:\repos\Jodan-pz_spoolpad\BaseClasses\Configuration\DataContextConfig.cs,ToString,The length of the statement  "	return string.Format ("[DataContextConfig: AutoGen={0}' Enabled={1}' UsingNamespaces={2}' References={3}]"' AutoGen' Enabled' UsingNamespaces' References); " is 155.
Empty Catch Block,it.jodan.SpoolPad.BaseClasses,CodeRunner,C:\repos\Jodan-pz_spoolpad\BaseClasses\CodeRunner.cs,DoCode,The method has an empty catch block.
Empty Catch Block,it.jodan.SpoolPad.BaseClasses,AbstractContext,C:\repos\Jodan-pz_spoolpad\BaseClasses\AbstractContext.cs,_run_,The method has an empty catch block.
Empty Catch Block,it.jodan.SpoolPad.BaseClasses,DataContextBuilder,C:\repos\Jodan-pz_spoolpad\BaseClasses\DataContextBuilder.cs,Release,The method has an empty catch block.
Magic Number,it.jodan.SpoolPad.BaseClasses,DataContextBuilder,C:\repos\Jodan-pz_spoolpad\BaseClasses\DataContextBuilder.cs,Compile,The following statement contains a magic number: cp.WarningLevel = 3;  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: try {  	StringBuilder temp = new StringBuilder ();  	if (obj == null || obj is ValueType || obj is string) {  		temp.AppendLine (GetValue (obj) + "<br/>");  	}  	else {  		IEnumerable enumerableElement = obj as IEnumerable;  		if (enumerableElement != null) {  			Type[] genArg = enumerableElement.GetType ().GetGenericArguments ();  			bool isGenericInterface = genArg.Length == 1 && genArg [0].IsInterface;  			bool first = true;  			bool isSimpleType = false;  			foreach (var item in enumerableElement) {  				Type innerElementType = isGenericInterface ? genArg [0] : item.GetType ();  				PropertyInfo[] properties = innerElementType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  				if (first) {  					first = false;  					temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC;; color:white\">Items of type: {0}</h3>"' IsAnonymousType (innerElementType) ? "[Generated]" : GetObjectTypeName (innerElementType));  					temp.Append ("<table style=\"width:100%\" 	border=\"1\">");  					isSimpleType = properties.Count () == 0 || innerElementType.IsValueType || innerElementType == typeof(string);  					if (!isSimpleType) {  						temp.Append ("<thead style=\"background-color: #BDFCC9;\"><tr>");  						if (isGenericInterface) {  							temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  						}  						foreach (PropertyInfo m in properties) {  							temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  						}  					}  					temp.Append ("<tbody>");  				}  				temp.Append ("<tr>");  				if (isGenericInterface) {  					temp.AppendFormat ("<td><I>{0}</I></td>"' item.GetType ().Name);  				}  				if (item is IEnumerable && !(item is string)) {  					if (level < depth) {  						level++;  						temp.AppendFormat ("{0}"' temp.Append (ObjectToHtml (item' depth)));  						level--;  					}  				}  				else {  					if (!isSimpleType) {  						foreach (PropertyInfo propInfo in properties) {  							if (level < depth) {  								level++;  								object propValue = null;  								try {  									propValue = propInfo.GetValue (item' null);  								}  								catch (Exception ex) {  									propValue = "[Err:" + ex.Message + "]";  								}  								temp.AppendFormat ("<td>{0}</td>"' ObjectToHtml (propValue' depth));  								level--;  							}  						}  					}  					else {  						temp.AppendFormat ("<td>{0}</td>"' item);  					}  				}  				temp.Append ("</tr>");  			}  			temp.Append ("</tbody></table><hr/>");  		}  		else {  			Type oType = obj.GetType ();  			temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC; color:white\">{0}</h3>"' IsAnonymousType (oType) ? "[Generated]" : GetObjectTypeName (obj.GetType ()));  			temp.Append ("<table style=\"width:100%\" border=\"1\"><thead style=\"background-color: #BDFCC9;\"><tr><th style=\"width:50%\">Name</th><th style=\"width:50%\">Value</th></tr></thead><tbody>");  			PropertyInfo[] properties = oType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  			foreach (PropertyInfo propInfo in properties) {  				if (level < depth) {  					level++;  					object val = null;  					try {  						val = propInfo.GetValue (obj' null);  					}  					catch (Exception ex) {  						val = "[Err:" + ex.Message + "]";  					}  					temp.AppendFormat ("<tr><td>{0}</td>"' propInfo.Name);  					if (propInfo.PropertyType.IsValueType || propInfo.PropertyType == typeof(string)) {  						temp.AppendFormat ("<td>{0} (<B>{1}</B>)</td></tr>"' val' val.GetType ().Name);  					}  					else {  						temp.AppendFormat ("<td>{0}</td></tr>"' ObjectToHtml (val' depth));  					}  					level--;  				}  			}  			temp.Append ("</tbody></table><hr/>");  		}  	}  	return temp.ToString ();  }  catch (Exception e) {  	return e.ToString ();  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: try {  	StringBuilder temp = new StringBuilder ();  	if (obj == null || obj is ValueType || obj is string) {  		temp.AppendLine (GetValue (obj) + "<br/>");  	}  	else {  		IEnumerable enumerableElement = obj as IEnumerable;  		if (enumerableElement != null) {  			Type[] genArg = enumerableElement.GetType ().GetGenericArguments ();  			bool isGenericInterface = genArg.Length == 1 && genArg [0].IsInterface;  			bool first = true;  			bool isSimpleType = false;  			foreach (var item in enumerableElement) {  				Type innerElementType = isGenericInterface ? genArg [0] : item.GetType ();  				PropertyInfo[] properties = innerElementType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  				if (first) {  					first = false;  					temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC;; color:white\">Items of type: {0}</h3>"' IsAnonymousType (innerElementType) ? "[Generated]" : GetObjectTypeName (innerElementType));  					temp.Append ("<table style=\"width:100%\" 	border=\"1\">");  					isSimpleType = properties.Count () == 0 || innerElementType.IsValueType || innerElementType == typeof(string);  					if (!isSimpleType) {  						temp.Append ("<thead style=\"background-color: #BDFCC9;\"><tr>");  						if (isGenericInterface) {  							temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  						}  						foreach (PropertyInfo m in properties) {  							temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  						}  					}  					temp.Append ("<tbody>");  				}  				temp.Append ("<tr>");  				if (isGenericInterface) {  					temp.AppendFormat ("<td><I>{0}</I></td>"' item.GetType ().Name);  				}  				if (item is IEnumerable && !(item is string)) {  					if (level < depth) {  						level++;  						temp.AppendFormat ("{0}"' temp.Append (ObjectToHtml (item' depth)));  						level--;  					}  				}  				else {  					if (!isSimpleType) {  						foreach (PropertyInfo propInfo in properties) {  							if (level < depth) {  								level++;  								object propValue = null;  								try {  									propValue = propInfo.GetValue (item' null);  								}  								catch (Exception ex) {  									propValue = "[Err:" + ex.Message + "]";  								}  								temp.AppendFormat ("<td>{0}</td>"' ObjectToHtml (propValue' depth));  								level--;  							}  						}  					}  					else {  						temp.AppendFormat ("<td>{0}</td>"' item);  					}  				}  				temp.Append ("</tr>");  			}  			temp.Append ("</tbody></table><hr/>");  		}  		else {  			Type oType = obj.GetType ();  			temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC; color:white\">{0}</h3>"' IsAnonymousType (oType) ? "[Generated]" : GetObjectTypeName (obj.GetType ()));  			temp.Append ("<table style=\"width:100%\" border=\"1\"><thead style=\"background-color: #BDFCC9;\"><tr><th style=\"width:50%\">Name</th><th style=\"width:50%\">Value</th></tr></thead><tbody>");  			PropertyInfo[] properties = oType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  			foreach (PropertyInfo propInfo in properties) {  				if (level < depth) {  					level++;  					object val = null;  					try {  						val = propInfo.GetValue (obj' null);  					}  					catch (Exception ex) {  						val = "[Err:" + ex.Message + "]";  					}  					temp.AppendFormat ("<tr><td>{0}</td>"' propInfo.Name);  					if (propInfo.PropertyType.IsValueType || propInfo.PropertyType == typeof(string)) {  						temp.AppendFormat ("<td>{0} (<B>{1}</B>)</td></tr>"' val' val.GetType ().Name);  					}  					else {  						temp.AppendFormat ("<td>{0}</td></tr>"' ObjectToHtml (val' depth));  					}  					level--;  				}  			}  			temp.Append ("</tbody></table><hr/>");  		}  	}  	return temp.ToString ();  }  catch (Exception e) {  	return e.ToString ();  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: if (obj == null || obj is ValueType || obj is string) {  	temp.AppendLine (GetValue (obj) + "<br/>");  }  else {  	IEnumerable enumerableElement = obj as IEnumerable;  	if (enumerableElement != null) {  		Type[] genArg = enumerableElement.GetType ().GetGenericArguments ();  		bool isGenericInterface = genArg.Length == 1 && genArg [0].IsInterface;  		bool first = true;  		bool isSimpleType = false;  		foreach (var item in enumerableElement) {  			Type innerElementType = isGenericInterface ? genArg [0] : item.GetType ();  			PropertyInfo[] properties = innerElementType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  			if (first) {  				first = false;  				temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC;; color:white\">Items of type: {0}</h3>"' IsAnonymousType (innerElementType) ? "[Generated]" : GetObjectTypeName (innerElementType));  				temp.Append ("<table style=\"width:100%\" 	border=\"1\">");  				isSimpleType = properties.Count () == 0 || innerElementType.IsValueType || innerElementType == typeof(string);  				if (!isSimpleType) {  					temp.Append ("<thead style=\"background-color: #BDFCC9;\"><tr>");  					if (isGenericInterface) {  						temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  					}  					foreach (PropertyInfo m in properties) {  						temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  					}  				}  				temp.Append ("<tbody>");  			}  			temp.Append ("<tr>");  			if (isGenericInterface) {  				temp.AppendFormat ("<td><I>{0}</I></td>"' item.GetType ().Name);  			}  			if (item is IEnumerable && !(item is string)) {  				if (level < depth) {  					level++;  					temp.AppendFormat ("{0}"' temp.Append (ObjectToHtml (item' depth)));  					level--;  				}  			}  			else {  				if (!isSimpleType) {  					foreach (PropertyInfo propInfo in properties) {  						if (level < depth) {  							level++;  							object propValue = null;  							try {  								propValue = propInfo.GetValue (item' null);  							}  							catch (Exception ex) {  								propValue = "[Err:" + ex.Message + "]";  							}  							temp.AppendFormat ("<td>{0}</td>"' ObjectToHtml (propValue' depth));  							level--;  						}  					}  				}  				else {  					temp.AppendFormat ("<td>{0}</td>"' item);  				}  			}  			temp.Append ("</tr>");  		}  		temp.Append ("</tbody></table><hr/>");  	}  	else {  		Type oType = obj.GetType ();  		temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC; color:white\">{0}</h3>"' IsAnonymousType (oType) ? "[Generated]" : GetObjectTypeName (obj.GetType ()));  		temp.Append ("<table style=\"width:100%\" border=\"1\"><thead style=\"background-color: #BDFCC9;\"><tr><th style=\"width:50%\">Name</th><th style=\"width:50%\">Value</th></tr></thead><tbody>");  		PropertyInfo[] properties = oType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  		foreach (PropertyInfo propInfo in properties) {  			if (level < depth) {  				level++;  				object val = null;  				try {  					val = propInfo.GetValue (obj' null);  				}  				catch (Exception ex) {  					val = "[Err:" + ex.Message + "]";  				}  				temp.AppendFormat ("<tr><td>{0}</td>"' propInfo.Name);  				if (propInfo.PropertyType.IsValueType || propInfo.PropertyType == typeof(string)) {  					temp.AppendFormat ("<td>{0} (<B>{1}</B>)</td></tr>"' val' val.GetType ().Name);  				}  				else {  					temp.AppendFormat ("<td>{0}</td></tr>"' ObjectToHtml (val' depth));  				}  				level--;  			}  		}  		temp.Append ("</tbody></table><hr/>");  	}  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: if (obj == null || obj is ValueType || obj is string) {  	temp.AppendLine (GetValue (obj) + "<br/>");  }  else {  	IEnumerable enumerableElement = obj as IEnumerable;  	if (enumerableElement != null) {  		Type[] genArg = enumerableElement.GetType ().GetGenericArguments ();  		bool isGenericInterface = genArg.Length == 1 && genArg [0].IsInterface;  		bool first = true;  		bool isSimpleType = false;  		foreach (var item in enumerableElement) {  			Type innerElementType = isGenericInterface ? genArg [0] : item.GetType ();  			PropertyInfo[] properties = innerElementType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  			if (first) {  				first = false;  				temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC;; color:white\">Items of type: {0}</h3>"' IsAnonymousType (innerElementType) ? "[Generated]" : GetObjectTypeName (innerElementType));  				temp.Append ("<table style=\"width:100%\" 	border=\"1\">");  				isSimpleType = properties.Count () == 0 || innerElementType.IsValueType || innerElementType == typeof(string);  				if (!isSimpleType) {  					temp.Append ("<thead style=\"background-color: #BDFCC9;\"><tr>");  					if (isGenericInterface) {  						temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  					}  					foreach (PropertyInfo m in properties) {  						temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  					}  				}  				temp.Append ("<tbody>");  			}  			temp.Append ("<tr>");  			if (isGenericInterface) {  				temp.AppendFormat ("<td><I>{0}</I></td>"' item.GetType ().Name);  			}  			if (item is IEnumerable && !(item is string)) {  				if (level < depth) {  					level++;  					temp.AppendFormat ("{0}"' temp.Append (ObjectToHtml (item' depth)));  					level--;  				}  			}  			else {  				if (!isSimpleType) {  					foreach (PropertyInfo propInfo in properties) {  						if (level < depth) {  							level++;  							object propValue = null;  							try {  								propValue = propInfo.GetValue (item' null);  							}  							catch (Exception ex) {  								propValue = "[Err:" + ex.Message + "]";  							}  							temp.AppendFormat ("<td>{0}</td>"' ObjectToHtml (propValue' depth));  							level--;  						}  					}  				}  				else {  					temp.AppendFormat ("<td>{0}</td>"' item);  				}  			}  			temp.Append ("</tr>");  		}  		temp.Append ("</tbody></table><hr/>");  	}  	else {  		Type oType = obj.GetType ();  		temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC; color:white\">{0}</h3>"' IsAnonymousType (oType) ? "[Generated]" : GetObjectTypeName (obj.GetType ()));  		temp.Append ("<table style=\"width:100%\" border=\"1\"><thead style=\"background-color: #BDFCC9;\"><tr><th style=\"width:50%\">Name</th><th style=\"width:50%\">Value</th></tr></thead><tbody>");  		PropertyInfo[] properties = oType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  		foreach (PropertyInfo propInfo in properties) {  			if (level < depth) {  				level++;  				object val = null;  				try {  					val = propInfo.GetValue (obj' null);  				}  				catch (Exception ex) {  					val = "[Err:" + ex.Message + "]";  				}  				temp.AppendFormat ("<tr><td>{0}</td>"' propInfo.Name);  				if (propInfo.PropertyType.IsValueType || propInfo.PropertyType == typeof(string)) {  					temp.AppendFormat ("<td>{0} (<B>{1}</B>)</td></tr>"' val' val.GetType ().Name);  				}  				else {  					temp.AppendFormat ("<td>{0}</td></tr>"' ObjectToHtml (val' depth));  				}  				level--;  			}  		}  		temp.Append ("</tbody></table><hr/>");  	}  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: if (enumerableElement != null) {  	Type[] genArg = enumerableElement.GetType ().GetGenericArguments ();  	bool isGenericInterface = genArg.Length == 1 && genArg [0].IsInterface;  	bool first = true;  	bool isSimpleType = false;  	foreach (var item in enumerableElement) {  		Type innerElementType = isGenericInterface ? genArg [0] : item.GetType ();  		PropertyInfo[] properties = innerElementType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  		if (first) {  			first = false;  			temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC;; color:white\">Items of type: {0}</h3>"' IsAnonymousType (innerElementType) ? "[Generated]" : GetObjectTypeName (innerElementType));  			temp.Append ("<table style=\"width:100%\" 	border=\"1\">");  			isSimpleType = properties.Count () == 0 || innerElementType.IsValueType || innerElementType == typeof(string);  			if (!isSimpleType) {  				temp.Append ("<thead style=\"background-color: #BDFCC9;\"><tr>");  				if (isGenericInterface) {  					temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  				}  				foreach (PropertyInfo m in properties) {  					temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  				}  			}  			temp.Append ("<tbody>");  		}  		temp.Append ("<tr>");  		if (isGenericInterface) {  			temp.AppendFormat ("<td><I>{0}</I></td>"' item.GetType ().Name);  		}  		if (item is IEnumerable && !(item is string)) {  			if (level < depth) {  				level++;  				temp.AppendFormat ("{0}"' temp.Append (ObjectToHtml (item' depth)));  				level--;  			}  		}  		else {  			if (!isSimpleType) {  				foreach (PropertyInfo propInfo in properties) {  					if (level < depth) {  						level++;  						object propValue = null;  						try {  							propValue = propInfo.GetValue (item' null);  						}  						catch (Exception ex) {  							propValue = "[Err:" + ex.Message + "]";  						}  						temp.AppendFormat ("<td>{0}</td>"' ObjectToHtml (propValue' depth));  						level--;  					}  				}  			}  			else {  				temp.AppendFormat ("<td>{0}</td>"' item);  			}  		}  		temp.Append ("</tr>");  	}  	temp.Append ("</tbody></table><hr/>");  }  else {  	Type oType = obj.GetType ();  	temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC; color:white\">{0}</h3>"' IsAnonymousType (oType) ? "[Generated]" : GetObjectTypeName (obj.GetType ()));  	temp.Append ("<table style=\"width:100%\" border=\"1\"><thead style=\"background-color: #BDFCC9;\"><tr><th style=\"width:50%\">Name</th><th style=\"width:50%\">Value</th></tr></thead><tbody>");  	PropertyInfo[] properties = oType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  	foreach (PropertyInfo propInfo in properties) {  		if (level < depth) {  			level++;  			object val = null;  			try {  				val = propInfo.GetValue (obj' null);  			}  			catch (Exception ex) {  				val = "[Err:" + ex.Message + "]";  			}  			temp.AppendFormat ("<tr><td>{0}</td>"' propInfo.Name);  			if (propInfo.PropertyType.IsValueType || propInfo.PropertyType == typeof(string)) {  				temp.AppendFormat ("<td>{0} (<B>{1}</B>)</td></tr>"' val' val.GetType ().Name);  			}  			else {  				temp.AppendFormat ("<td>{0}</td></tr>"' ObjectToHtml (val' depth));  			}  			level--;  		}  	}  	temp.Append ("</tbody></table><hr/>");  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: if (enumerableElement != null) {  	Type[] genArg = enumerableElement.GetType ().GetGenericArguments ();  	bool isGenericInterface = genArg.Length == 1 && genArg [0].IsInterface;  	bool first = true;  	bool isSimpleType = false;  	foreach (var item in enumerableElement) {  		Type innerElementType = isGenericInterface ? genArg [0] : item.GetType ();  		PropertyInfo[] properties = innerElementType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  		if (first) {  			first = false;  			temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC;; color:white\">Items of type: {0}</h3>"' IsAnonymousType (innerElementType) ? "[Generated]" : GetObjectTypeName (innerElementType));  			temp.Append ("<table style=\"width:100%\" 	border=\"1\">");  			isSimpleType = properties.Count () == 0 || innerElementType.IsValueType || innerElementType == typeof(string);  			if (!isSimpleType) {  				temp.Append ("<thead style=\"background-color: #BDFCC9;\"><tr>");  				if (isGenericInterface) {  					temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  				}  				foreach (PropertyInfo m in properties) {  					temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  				}  			}  			temp.Append ("<tbody>");  		}  		temp.Append ("<tr>");  		if (isGenericInterface) {  			temp.AppendFormat ("<td><I>{0}</I></td>"' item.GetType ().Name);  		}  		if (item is IEnumerable && !(item is string)) {  			if (level < depth) {  				level++;  				temp.AppendFormat ("{0}"' temp.Append (ObjectToHtml (item' depth)));  				level--;  			}  		}  		else {  			if (!isSimpleType) {  				foreach (PropertyInfo propInfo in properties) {  					if (level < depth) {  						level++;  						object propValue = null;  						try {  							propValue = propInfo.GetValue (item' null);  						}  						catch (Exception ex) {  							propValue = "[Err:" + ex.Message + "]";  						}  						temp.AppendFormat ("<td>{0}</td>"' ObjectToHtml (propValue' depth));  						level--;  					}  				}  			}  			else {  				temp.AppendFormat ("<td>{0}</td>"' item);  			}  		}  		temp.Append ("</tr>");  	}  	temp.Append ("</tbody></table><hr/>");  }  else {  	Type oType = obj.GetType ();  	temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC; color:white\">{0}</h3>"' IsAnonymousType (oType) ? "[Generated]" : GetObjectTypeName (obj.GetType ()));  	temp.Append ("<table style=\"width:100%\" border=\"1\"><thead style=\"background-color: #BDFCC9;\"><tr><th style=\"width:50%\">Name</th><th style=\"width:50%\">Value</th></tr></thead><tbody>");  	PropertyInfo[] properties = oType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  	foreach (PropertyInfo propInfo in properties) {  		if (level < depth) {  			level++;  			object val = null;  			try {  				val = propInfo.GetValue (obj' null);  			}  			catch (Exception ex) {  				val = "[Err:" + ex.Message + "]";  			}  			temp.AppendFormat ("<tr><td>{0}</td>"' propInfo.Name);  			if (propInfo.PropertyType.IsValueType || propInfo.PropertyType == typeof(string)) {  				temp.AppendFormat ("<td>{0} (<B>{1}</B>)</td></tr>"' val' val.GetType ().Name);  			}  			else {  				temp.AppendFormat ("<td>{0}</td></tr>"' ObjectToHtml (val' depth));  			}  			level--;  		}  	}  	temp.Append ("</tbody></table><hr/>");  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: foreach (var item in enumerableElement) {  	Type innerElementType = isGenericInterface ? genArg [0] : item.GetType ();  	PropertyInfo[] properties = innerElementType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  	if (first) {  		first = false;  		temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC;; color:white\">Items of type: {0}</h3>"' IsAnonymousType (innerElementType) ? "[Generated]" : GetObjectTypeName (innerElementType));  		temp.Append ("<table style=\"width:100%\" 	border=\"1\">");  		isSimpleType = properties.Count () == 0 || innerElementType.IsValueType || innerElementType == typeof(string);  		if (!isSimpleType) {  			temp.Append ("<thead style=\"background-color: #BDFCC9;\"><tr>");  			if (isGenericInterface) {  				temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  			}  			foreach (PropertyInfo m in properties) {  				temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  			}  		}  		temp.Append ("<tbody>");  	}  	temp.Append ("<tr>");  	if (isGenericInterface) {  		temp.AppendFormat ("<td><I>{0}</I></td>"' item.GetType ().Name);  	}  	if (item is IEnumerable && !(item is string)) {  		if (level < depth) {  			level++;  			temp.AppendFormat ("{0}"' temp.Append (ObjectToHtml (item' depth)));  			level--;  		}  	}  	else {  		if (!isSimpleType) {  			foreach (PropertyInfo propInfo in properties) {  				if (level < depth) {  					level++;  					object propValue = null;  					try {  						propValue = propInfo.GetValue (item' null);  					}  					catch (Exception ex) {  						propValue = "[Err:" + ex.Message + "]";  					}  					temp.AppendFormat ("<td>{0}</td>"' ObjectToHtml (propValue' depth));  					level--;  				}  			}  		}  		else {  			temp.AppendFormat ("<td>{0}</td>"' item);  		}  	}  	temp.Append ("</tr>");  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: foreach (var item in enumerableElement) {  	Type innerElementType = isGenericInterface ? genArg [0] : item.GetType ();  	PropertyInfo[] properties = innerElementType.GetProperties (BindingFlags.Public | BindingFlags.Instance);  	if (first) {  		first = false;  		temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC;; color:white\">Items of type: {0}</h3>"' IsAnonymousType (innerElementType) ? "[Generated]" : GetObjectTypeName (innerElementType));  		temp.Append ("<table style=\"width:100%\" 	border=\"1\">");  		isSimpleType = properties.Count () == 0 || innerElementType.IsValueType || innerElementType == typeof(string);  		if (!isSimpleType) {  			temp.Append ("<thead style=\"background-color: #BDFCC9;\"><tr>");  			if (isGenericInterface) {  				temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  			}  			foreach (PropertyInfo m in properties) {  				temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  			}  		}  		temp.Append ("<tbody>");  	}  	temp.Append ("<tr>");  	if (isGenericInterface) {  		temp.AppendFormat ("<td><I>{0}</I></td>"' item.GetType ().Name);  	}  	if (item is IEnumerable && !(item is string)) {  		if (level < depth) {  			level++;  			temp.AppendFormat ("{0}"' temp.Append (ObjectToHtml (item' depth)));  			level--;  		}  	}  	else {  		if (!isSimpleType) {  			foreach (PropertyInfo propInfo in properties) {  				if (level < depth) {  					level++;  					object propValue = null;  					try {  						propValue = propInfo.GetValue (item' null);  					}  					catch (Exception ex) {  						propValue = "[Err:" + ex.Message + "]";  					}  					temp.AppendFormat ("<td>{0}</td>"' ObjectToHtml (propValue' depth));  					level--;  				}  			}  		}  		else {  			temp.AppendFormat ("<td>{0}</td>"' item);  		}  	}  	temp.Append ("</tr>");  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: if (first) {  	first = false;  	temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC;; color:white\">Items of type: {0}</h3>"' IsAnonymousType (innerElementType) ? "[Generated]" : GetObjectTypeName (innerElementType));  	temp.Append ("<table style=\"width:100%\" 	border=\"1\">");  	isSimpleType = properties.Count () == 0 || innerElementType.IsValueType || innerElementType == typeof(string);  	if (!isSimpleType) {  		temp.Append ("<thead style=\"background-color: #BDFCC9;\"><tr>");  		if (isGenericInterface) {  			temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  		}  		foreach (PropertyInfo m in properties) {  			temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  		}  	}  	temp.Append ("<tbody>");  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: if (first) {  	first = false;  	temp.AppendFormat ("<hr/><h3 align=\"center\" style=\" background-color:#99CCCC;; color:white\">Items of type: {0}</h3>"' IsAnonymousType (innerElementType) ? "[Generated]" : GetObjectTypeName (innerElementType));  	temp.Append ("<table style=\"width:100%\" 	border=\"1\">");  	isSimpleType = properties.Count () == 0 || innerElementType.IsValueType || innerElementType == typeof(string);  	if (!isSimpleType) {  		temp.Append ("<thead style=\"background-color: #BDFCC9;\"><tr>");  		if (isGenericInterface) {  			temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  		}  		foreach (PropertyInfo m in properties) {  			temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  		}  	}  	temp.Append ("<tbody>");  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: if (!isSimpleType) {  	temp.Append ("<thead style=\"background-color: #BDFCC9;\"><tr>");  	if (isGenericInterface) {  		temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  	}  	foreach (PropertyInfo m in properties) {  		temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  	}  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: if (!isSimpleType) {  	temp.Append ("<thead style=\"background-color: #BDFCC9;\"><tr>");  	if (isGenericInterface) {  		temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  	}  	foreach (PropertyInfo m in properties) {  		temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  	}  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: if (isGenericInterface) {  	temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: temp.AppendFormat ("<th style=\"width:{0}%\">[Type Name]</th>"' 100 / properties.Count () + 1);  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: foreach (PropertyInfo m in properties) {  	temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  }  
Magic Number,it.jodan.SpoolPad.Services,HtmlViewSpoolService,C:\repos\Jodan-pz_spoolpad\Services\HtmlViewSpoolService.cs,ObjectToHtml,The following statement contains a magic number: temp.AppendFormat ("<th style=\"width:{0}%\">{1}</th>"' 100 / properties.Count () + 1' m.Name);  
Missing Default,it.jodan.SpoolPad.Services,CSharpSimpleExecutableCodeGenerator,C:\repos\Jodan-pz_spoolpad\Services\CSharpSimpleExecutableCodeGenerator.cs,PrepareCode,The following switch statement is missing a default case: switch (codeType) {  case CodeType.CSharpFastCode: {  	if (CommonHelper.IsNullOrEmptyOrBlank (ret))  		return string.Empty;  	if (!ret.EndsWith ("/")) {  		if (ret.StartsWith ("from") && !ret.EndsWith (")"))  			ret = "(" + ret + ")";  		if (!ret.Contains (".Spool("))  			ret += ".Spool();";  	}  	break;  }  }  
Missing Default,it.jodan.SpoolPad.Services,VBasicSimpleExecutableCodeGenerator,C:\repos\Jodan-pz_spoolpad\Services\VBasicSimpleExecutableCodeGenerator.cs,PrepareCode,The following switch statement is missing a default case: switch (codeType) {  case CodeType.VBasicCodeBlock: {  	break;  }  }  
Missing Default,it.jodan.SpoolPad.Extensions,SpoolExtensions,C:\repos\Jodan-pz_spoolpad\Extensions\SpoolExtensions.cs,FlushByService,The following switch statement is missing a default case: switch (item.ItemType) {  case SpoolItem.SpoolItemType.Comment: {  	toAppend = service.FormatTitle (item.ItemValue as string);  	break;  }  case SpoolItem.SpoolItemType.Value: {  	toAppend = service.ObjectToString (item.ItemValue);  	break;  }  }  
Missing Default,it.jodan.SpoolPad.RuntimeConfiguration,NameValueMultipleSectionHandler,C:\repos\Jodan-pz_spoolpad\RuntimeConfiguration\NameValueMultipleSectionHandler.cs,Create,The following switch statement is missing a default case: switch (xmlNode.Name) {  case "add":  	collection.Add (xmlNode.Attributes ["key"].Value' xmlNode.Attributes ["value"].Value);  	break;  case "remove":  	collection.Remove (xmlNode.Attributes ["key"].Value);  	break;  case "clear":  	collection.Clear ();  	break;  }  
