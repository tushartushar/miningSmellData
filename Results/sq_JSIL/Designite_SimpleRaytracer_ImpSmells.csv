Implementation smell,Namespace,Class,File,Method,Description
Complex Method,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Trace,Cyclomatic complexity of the method is 12
Long Identifier,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,,The length of the parameter MATERIAL_REFLECTION_COEFFICIENT is 31.
Long Statement,simpleray,Sphere,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Intersect,The length of the statement  "            float v = lightFromOrigin.Dot(ray.direction);                   // cos of angle between dirs from origin to us and from origin to where the ray's pointing " is 154.
Long Statement,simpleray,Sphere,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Intersect,The length of the statement  "            if (hitDistance < 0)                                            // no hit (do this check now before bothering to do the sqrt below) " is 131.
Long Statement,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Trace,The length of the statement  "            Vector3f viewerDir = -ray.direction;                            // Direction back to the viewer (simply negative of ray dir) " is 124.
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Main,The following statement contains a magic number: random = new Random(01478650229);
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Main,The following statement contains a magic number: for (int i = 0; i < 30; i++) {                  float x = (float)(random.NextDouble() * 10.0f) - 5.0f;          // Range -5 to 5                  float y = (float)(random.NextDouble() * 10.0f) - 5.0f;          // Range -5 to 5                  float z = (float)(random.NextDouble() * 10.0f);                 // Range 0 to 10                  Color c = Color.FromArgb(255' random.Next(255)' random.Next(255)' random.Next(255));                  Sphere s = new Sphere(new Vector3f(x' y' z)' (float)(random.NextDouble())' c);                  objects.Add(s);              }
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Main,The following statement contains a magic number: for (int i = 0; i < 30; i++) {                  float x = (float)(random.NextDouble() * 10.0f) - 5.0f;          // Range -5 to 5                  float y = (float)(random.NextDouble() * 10.0f) - 5.0f;          // Range -5 to 5                  float z = (float)(random.NextDouble() * 10.0f);                 // Range 0 to 10                  Color c = Color.FromArgb(255' random.Next(255)' random.Next(255)' random.Next(255));                  Sphere s = new Sphere(new Vector3f(x' y' z)' (float)(random.NextDouble())' c);                  objects.Add(s);              }
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Main,The following statement contains a magic number: for (int i = 0; i < 30; i++) {                  float x = (float)(random.NextDouble() * 10.0f) - 5.0f;          // Range -5 to 5                  float y = (float)(random.NextDouble() * 10.0f) - 5.0f;          // Range -5 to 5                  float z = (float)(random.NextDouble() * 10.0f);                 // Range 0 to 10                  Color c = Color.FromArgb(255' random.Next(255)' random.Next(255)' random.Next(255));                  Sphere s = new Sphere(new Vector3f(x' y' z)' (float)(random.NextDouble())' c);                  objects.Add(s);              }
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Main,The following statement contains a magic number: for (int i = 0; i < 30; i++) {                  float x = (float)(random.NextDouble() * 10.0f) - 5.0f;          // Range -5 to 5                  float y = (float)(random.NextDouble() * 10.0f) - 5.0f;          // Range -5 to 5                  float z = (float)(random.NextDouble() * 10.0f);                 // Range 0 to 10                  Color c = Color.FromArgb(255' random.Next(255)' random.Next(255)' random.Next(255));                  Sphere s = new Sphere(new Vector3f(x' y' z)' (float)(random.NextDouble())' c);                  objects.Add(s);              }
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Main,The following statement contains a magic number: for (int i = 0; i < 30; i++) {                  float x = (float)(random.NextDouble() * 10.0f) - 5.0f;          // Range -5 to 5                  float y = (float)(random.NextDouble() * 10.0f) - 5.0f;          // Range -5 to 5                  float z = (float)(random.NextDouble() * 10.0f);                 // Range 0 to 10                  Color c = Color.FromArgb(255' random.Next(255)' random.Next(255)' random.Next(255));                  Sphere s = new Sphere(new Vector3f(x' y' z)' (float)(random.NextDouble())' c);                  objects.Add(s);              }
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Main,The following statement contains a magic number: int dotPeriod = CANVAS_HEIGHT / 10;
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Trace,The following statement contains a magic number: foreach (Light light in lights) {                  Vector3f lightDir = new Vector3f();                  float lightDistance;                    // Find light direction and distance                  lightDir = light.position - ray.hitPoint;               // Get direction to light                  lightDistance = lightDir.Magnitude();                  //lightDir = lightDir / lightDistance;                  // Light exponential falloff                  lightDir.Normalise();                                    // Shadow check: check if this light's visible from the point                  // NB: Step out slightly from the hitpoint first                  Ray shadowRay = new Ray(ray.hitPoint + (lightDir * TINY)' lightDir);                  shadowRay.closestHitDistance = lightDistance;           // IMPORTANT: We only want it to trace as far as the light!                  CheckIntersection(ref shadowRay);                  if (shadowRay.closestHitObject != null)                 // We hit something -- ignore this light entirely                      continue;                    float cosLightAngleWithNormal = surfaceNormal.Dot(lightDir);                    if (MATERIAL_DIFFUSE_COEFFICIENT > TINY) {                      // Calculate light's diffuse component - note that this is view independant                      // Dot product of surface normal and light direction gives cos of angle between them so will be in                       // range -1 to 1. We use that as a scaling factor; common technique' called "cosine shading".                      if (cosLightAngleWithNormal <= 0) continue;                        // Add this light's diffuse contribution to our running totals                      r += MATERIAL_DIFFUSE_COEFFICIENT * cosLightAngleWithNormal * ray.closestHitObject.color.R;                      g += MATERIAL_DIFFUSE_COEFFICIENT * cosLightAngleWithNormal * ray.closestHitObject.color.G;                      b += MATERIAL_DIFFUSE_COEFFICIENT * cosLightAngleWithNormal * ray.closestHitObject.color.B;                  }                    if (MATERIAL_SPECULAR_COEFFICIENT > TINY) {                      // Specular component - dot product of light's reflection vector and viewer direction                      // Direction to the viewer is simply negative of the ray direction                      Vector3f lightReflectionDir = surfaceNormal * (cosLightAngleWithNormal * 2) - lightDir;                      float specularFactor = viewerDir.Dot(lightReflectionDir);                      if (specularFactor > 0) {                          // To get smaller' sharper highlights we raise it to a power and multiply it                          specularFactor = MATERIAL_SPECULAR_COEFFICIENT * (float)Math.Pow(specularFactor' MATERIAL_SPECULAR_POWER);                            // Add the specular contribution to our running totals                          r += specularFactor * ray.closestHitObject.color.R;                          g += specularFactor * ray.closestHitObject.color.G;                          b += specularFactor * ray.closestHitObject.color.B;                      }                  }              }
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Trace,The following statement contains a magic number: if (r > 255) r = 255;
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Trace,The following statement contains a magic number: if (r > 255) r = 255;
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Trace,The following statement contains a magic number: if (g > 255) g = 255;
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Trace,The following statement contains a magic number: if (g > 255) g = 255;
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Trace,The following statement contains a magic number: if (b > 255) b = 255;
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Trace,The following statement contains a magic number: if (b > 255) b = 255;
Magic Number,simpleray,RayTracer,C:\repos\sq_JSIL\Examples\SimpleRaytracer.cs,Trace,The following statement contains a magic number: return (Color.FromArgb(255' (int)r' (int)g' (int)b));
