Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SpecBind.Selenium.Drivers,SeleniumEdgeDriver,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\Drivers\SeleniumEdgeDriver.cs,Download,Cyclomatic complexity of the method is 8
Complex Method,SpecBind.Selenium,NativeAttributeBuilder,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\NativeAttributeBuilder.cs,GetLocator,Cyclomatic complexity of the method is 9
Complex Method,SpecBind.Selenium,SeleniumPage,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumPage.cs,WaitForElement,Cyclomatic complexity of the method is 9
Complex Method,SpecBind.Selenium,SeleniumPage,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumPage.cs,FillPage,Cyclomatic complexity of the method is 9
Long Parameter List,SpecBind.Selenium,SeleniumBrowser,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumBrowser.cs,AddCookie,The method has 6 parameters. Parameters: name' value' path' expireDateTime' domain' secure
Long Identifier,SpecBind.Selenium.Drivers,SeleniumInternetExplorerDriver,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\Drivers\SeleniumInternetExplorerDriver.cs,CreateLocalDriver,The length of the parameter ignoreProtectedModeSettingsValue is 32.
Long Statement,SpecBind.Selenium.Drivers,SeleniumEdgeDriver,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\Drivers\SeleniumEdgeDriver.cs,Download,The length of the statement  "                    downloadUrl = "https://download.microsoft.com/download/F/8/A/F8AF50AB-3C3A-4BC4-8773-DC27B32988DD/MicrosoftWebDriver.exe"; " is 122.
Long Statement,SpecBind.Selenium.Drivers,SeleniumEdgeDriver,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\Drivers\SeleniumEdgeDriver.cs,Download,The length of the statement  "                    downloadUrl = "https://download.microsoft.com/download/D/4/1/D417998A-58EE-4EFE-A7CC-39EF9E020768/MicrosoftWebDriver.exe"; " is 122.
Long Statement,SpecBind.Selenium.Drivers,SeleniumEdgeDriver,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\Drivers\SeleniumEdgeDriver.cs,Download,The length of the statement  "                    downloadUrl = "https://download.microsoft.com/download/3/4/2/342316D7-EBE0-4F10-ABA2-AE8E0CDF36DD/MicrosoftWebDriver.exe"; " is 122.
Long Statement,SpecBind.Selenium.Drivers,SeleniumEdgeDriver,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\Drivers\SeleniumEdgeDriver.cs,Download,The length of the statement  "                    downloadUrl = "https://download.microsoft.com/download/1/4/1/14156DA0-D40F-460A-B14D-1B264CA081A5/MicrosoftWebDriver.exe"; " is 122.
Long Statement,SpecBind.Selenium.Drivers,SeleniumEdgeDriver,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\Drivers\SeleniumEdgeDriver.cs,Download,The length of the statement  "                    downloadUrl = "https://download.microsoft.com/download/3/2/D/32D3E464-F2EF-490F-841B-05D53C848D15/MicrosoftWebDriver.exe"; " is 122.
Long Statement,SpecBind.Selenium.Drivers,SeleniumEdgeDriver,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\Drivers\SeleniumEdgeDriver.cs,Download,The length of the statement  "                    downloadUrl = "https://download.microsoft.com/download/C/0/7/C07EBF21-5305-4EC8-83B1-A6FCC8F93F45/MicrosoftWebDriver.msi"; " is 122.
Long Statement,SpecBind.Selenium.Drivers,SeleniumEdgeDriver,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\Drivers\SeleniumEdgeDriver.cs,Download,The length of the statement  "                    downloadUrl = "https://download.microsoft.com/download/8/D/0/8D0D08CF-790D-4586-B726-C6469A9ED49C/MicrosoftWebDriver.msi"; " is 122.
Long Statement,SpecBind.Selenium.Drivers,SeleniumFirefoxDriver,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\Drivers\SeleniumFirefoxDriver.cs,CreateLocalDriver,The length of the statement  "                    // Debug.WriteLine("SpecBind.Selenium.SeleniumBrowserFactory.GetFireFoxDriver: Setting firefox profile setting:{0} with value: {1}"' configurationElement.Name' configurationElement.Value); " is 188.
Long Statement,SpecBind.Selenium.Drivers,SeleniumFirefoxDriver,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\Drivers\SeleniumFirefoxDriver.cs,CreateLocalDriver,The length of the statement  "                        // Debug.WriteLine("SpecBind.Selenium.SeleniumBrowserFactory.GetFireFoxDriver: Setting firefox profile setting with int value: '{0}'"' configurationElement.Name); " is 162.
Long Statement,SpecBind.Selenium.Drivers,SeleniumFirefoxDriver,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\Drivers\SeleniumFirefoxDriver.cs,CreateLocalDriver,The length of the statement  "                        // Debug.WriteLine("SpecBind.Selenium.SeleniumBrowserFactory.GetFireFoxDriver: Setting firefox profile setting with bool value: '{0}'"' configurationElement.Name); " is 163.
Long Statement,SpecBind.Selenium.Drivers,SeleniumFirefoxDriver,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\Drivers\SeleniumFirefoxDriver.cs,CreateLocalDriver,The length of the statement  "                        // Debug.WriteLine("SpecBind.Selenium.SeleniumBrowserFactory.GetFireFoxDriver: Setting firefox profile setting with string value: '{0}'"' configurationElement.Name); " is 165.
Long Statement,SpecBind.Selenium,LocatorBuilder,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\LocatorBuilder.cs,GetElementLocators,The length of the statement  "            SetAttribute(xpathTag' "href"' attribute.Url' () => attribute.NormalizedTagName == "a" || attribute.NormalizedTagName == "area"); " is 129.
Long Statement,SpecBind.Selenium,LocatorBuilder,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\LocatorBuilder.cs,GetElementLocators,The length of the statement  "                    throw new ElementExecuteException("Element Locator contains a locator but is missing a TagName property: {0}"' xpathTag.CreateLocator()); " is 137.
Long Statement,SpecBind.Selenium,SeleniumBrowserFactory,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumBrowserFactory.cs,CreateSeleniumDriver,The length of the statement  "                        $"Browser type '{this.Configuration.BrowserType}' is not supported in Selenium local mode. Did you mean to configure a remote driver?"); " is 136.
Long Statement,SpecBind.Selenium,SeleniumPage,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumPage.cs,SetAttribute,The length of the statement  "                this.webDriver.ExecuteJavaScript("arguments[0].setAttribute(arguments[1]' arguments[2])"' element' attributeName' value); " is 121.
Empty Catch Block,SpecBind.Selenium,SeleniumPage,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumPage.cs,WaitForElement,The method has an empty catch block.
Empty Catch Block,SpecBind.Selenium,SeleniumPage,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumPage.cs,WaitForElement,The method has an empty catch block.
Empty Catch Block,SpecBind.Selenium,SeleniumPage,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumPage.cs,WaitForElement,The method has an empty catch block.
Empty Catch Block,SpecBind.Selenium,SeleniumPage,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumPage.cs,WaitForElement,The method has an empty catch block.
Empty Catch Block,SpecBind.Selenium,SeleniumPage,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumPage.cs,SetAttribute,The method has an empty catch block.
Magic Number,SpecBind.Selenium,LocatorBuilder,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\LocatorBuilder.cs,GetElementLocators,The following statement contains a magic number: var locators = new List<By>(3);
Magic Number,SpecBind.Selenium,WebElement,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\WebElement.cs,SendKeys,The following statement contains a magic number: System.Threading.Thread.Sleep(500);
Magic Number,SpecBind.Selenium,WebElement,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\WebElement.cs,SendKeys,The following statement contains a magic number: tries < 3
Magic Number,SpecBind.Selenium,SeleniumPage,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumPage.cs,Highlight,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(1.5));
Magic Number,SpecBind.Selenium,SeleniumPage,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumPage.cs,Moving,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,SpecBind.Selenium,SeleniumPage,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumPage.cs,FillPage,The following statement contains a magic number: switch (tagName)              {                  case "select":                      var selectElement = new SelectElement(element);                      if (selectElement.IsMultiple)                      {                          selectElement.DeselectAll();                      }                        selectElement.SelectByText(data);                      break;                  case "input":                      // Special case for a checkbox control                      var inputType = element.GetAttribute("type");                      if (string.Equals("checkbox"' inputType' StringComparison.OrdinalIgnoreCase))                      {                          if (bool.TryParse(data' out bool checkValue) && element.Selected != checkValue)                          {                              new SeleniumPage(element' this.webDriver).ClickElement(element);                          }                            return;                      }                        if (string.Equals("radio"' inputType' StringComparison.OrdinalIgnoreCase))                      {                          // Need to click twice to select the element.                          new SeleniumPage(element' this.webDriver).ClickElement(element' 2);                          return;                      }                        if (string.Equals("file"' inputType' StringComparison.OrdinalIgnoreCase))                      {                          FileUploadHelper.UploadFile(data' element.SendKeys);                          return;                      }                        goto default;                  default:                      element.SendKeys(data);                      break;              }
Missing Default,SpecBind.Selenium,SeleniumBrowser,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumBrowser.cs,DismissAlert,The following switch statement is missing a default case: switch (action)              {                  case AlertBoxAction.Cancel:                  case AlertBoxAction.Close:                  case AlertBoxAction.Ignore:                  case AlertBoxAction.No:                      alert.Dismiss();                      break;                  case AlertBoxAction.Ok:                  case AlertBoxAction.Retry:                  case AlertBoxAction.Yes:                      alert.Accept();                      break;              }
Missing Default,SpecBind.Selenium,SeleniumPage,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumPage.cs,GetElementOptions,The following switch statement is missing a default case: switch (tagName)              {                  case "select":                      var selectElement = new SelectElement(element);                      return selectElement.Options                                  .Select(option => new ComboBoxItem { Value = option.GetAttribute("value")' Text = option.Text })                                  .ToList();                                    }
Missing Default,SpecBind.Selenium,SeleniumPage,D:\research\architectureSmells\repos\dpiessens_specbind\src\SpecBind.Selenium\SeleniumPage.cs,WaitForElement,The following switch statement is missing a default case: switch (waitCondition)                  {                      case WaitConditions.BecomesNonExistent: // AKA NotExists                          this.ExecuteWithElementLocateTimeout(                              new TimeSpan()'                              () =>                              {                                  try                                  {                                      waiter.Until(e => !e.Displayed);                                  }                                  catch (NoSuchElementException)                                  {                                  }                                  catch (NotFoundException)                                  {                                  }                                  catch (ElementNotVisibleException)                                  {                                  }                                  catch (StaleElementReferenceException)                                  {                                  }                              });                          break;                      case WaitConditions.RemainsNonExistent:                          return this.EvaluateWithElementLocateTimeout(                              waiter.Timeout'                              () =>                              {                                  try                                  {                                      return this.DoesFullTimeoutElapse(waiter' e => e.Displayed);                                  }                                  catch (NoSuchElementException)                                  {                                      return true;                                  }                                  catch (NotFoundException)                                  {                                      return true;                                  }                                  catch (ElementNotVisibleException)                                  {                                      return true;                                  }                                  catch (StaleElementReferenceException)                                  {                                      return true;                                  }                              });                      case WaitConditions.BecomesEnabled: // AKA Enabled                          waiter.IgnoreExceptionTypes(typeof(ElementNotVisibleException)' typeof(NotFoundException));                          waiter.Until(e => e.Enabled);                          break;                      case WaitConditions.BecomesDisabled: // AKA NotEnabled                          waiter.IgnoreExceptionTypes(typeof(ElementNotVisibleException)' typeof(NotFoundException));                          waiter.Until(e => !e.Enabled);                          break;                      case WaitConditions.BecomesExistent: // AKA Exists                          waiter.IgnoreExceptionTypes(typeof(ElementNotVisibleException)' typeof(NotFoundException));                          waiter.Until(e => e.Displayed);                          break;                      case WaitConditions.NotMoving:                          waiter.IgnoreExceptionTypes(typeof(ElementNotVisibleException)' typeof(NotFoundException));                          waiter.Until(e => e.Displayed);                          waiter.Until(e => !this.Moving(e));                          break;                      case WaitConditions.RemainsEnabled:                          return this.DoesFullTimeoutElapse(waiter' e => !e.Enabled);                      case WaitConditions.RemainsDisabled:                          return this.DoesFullTimeoutElapse(waiter' e => e.Enabled);                      case WaitConditions.RemainsExistent:                          return this.DoesFullTimeoutElapse(waiter' e => !e.Displayed);                  }
