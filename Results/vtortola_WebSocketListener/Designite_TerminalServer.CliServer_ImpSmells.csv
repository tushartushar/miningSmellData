Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TerminalServer.CliServer,ConsoleSession,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Cli\CommandSession.cs,Push,Cyclomatic complexity of the method is 8
Long Statement,TerminalServer.CliServer,WebSocketQueueServer,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Messaging\WebSocketQueueServer.cs,HttpNegotiation,The length of the statement  "            if (request.RequestUri == null || request.RequestUri.OriginalString.Length < 1 || !Guid.TryParse(request.RequestUri.OriginalString.Substring(1)' out connectionId)) " is 163.
Long Statement,TerminalServer.CliServer,WebSocketHandler,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Messaging\WebSocketHandler.cs,GetSessionId,The length of the statement  "            Cookie cookie = ws.HttpRequest.Cookies[ConnectionManager.UserSessionCookieName] ?? ws.HttpResponse.Cookies[ConnectionManager.UserSessionCookieName]; " is 148.
Empty Catch Block,TerminalServer.CliServer,ConsoleSession,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Cli\CommandSession.cs,ReadAsync,The method has an empty catch block.
Empty Catch Block,TerminalServer.CliServer,ConsoleSession,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Cli\CommandSession.cs,ReadErrorAsync,The method has an empty catch block.
Empty Catch Block,TerminalServer.CliServer,WebSocketQueueServer,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Messaging\WebSocketQueueServer.cs,AcceptWebSocketClientsAsync,The method has an empty catch block.
Empty Catch Block,TerminalServer.CliServer,WebSocketQueueServer,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Messaging\WebSocketQueueServer.cs,AcceptWebSocketClientsAsync,The method has an empty catch block.
Empty Catch Block,TerminalServer.CliServer,WebSocketHandler,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Messaging\WebSocketHandler.cs,HandleConnectionAsync,The method has an empty catch block.
Magic Number,TerminalServer.CliServer,PowerShellSession,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Cli\PowerShellSession.cs,PowerShellSession,The following statement contains a magic number: CurrentPath = _proc.Invoke()                          .First()                          .ToString()                          .Split(new[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries)[2].Trim();
Magic Number,TerminalServer.CliServer,PowerShellSession,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Cli\PowerShellSession.cs,Input,The following statement contains a magic number: CurrentPath = _proc.Invoke()                          .First()                          .ToString()                          .Split(new[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries)[2].Trim();
Magic Number,TerminalServer.CliServer,Program,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Program.cs,Main,The following statement contains a magic number: var endpoint = new IPEndPoint(IPAddress.Any' 8009);
Magic Number,TerminalServer.CliServer,WebSocketQueueServer,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Messaging\WebSocketQueueServer.cs,HttpNegotiation,The following statement contains a magic number: Queue.PublishRequest(new ConnectionConnectRequest(connectionId' userId)' ctx =>              {                  ctx.HandleFault(f =>                  {                      response.Status = HttpStatusCode.InternalServerError;                  });                  ctx.HandleTimeout(TimeSpan.FromSeconds(5)' () =>                  {                      response.Status = HttpStatusCode.RequestTimeout;                  });                  ctx.Handle<ConnectionConnectResponse>(res =>                  {                      response.Cookies.Add(new Cookie(ConnectionManager.UserSessionCookieName' res.UserId.ToString()));                  });              });
Magic Number,TerminalServer.CliServer,ConnectionManager,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Session\ConnectionManager.cs,CheckForDisconnectedAsync,The following statement contains a magic number: await Task.Delay(5000).ConfigureAwait(false);
Missing Default,TerminalServer.CliServer,DefaultEventSerializator,D:\research\architectureSmells\repos\vtortola_WebSocketListener\samples\TerminalServer\TerminalServer.CliServer\Messaging\Serialization\DefaultEventSerializator.cs,Build,The following switch statement is missing a default case: switch (typeName)              {                  case "CreateTerminalRequest":                      type = typeof(CreateTerminalRequest);                      return new CreateTerminalRequest() {                          TerminalType = json.Property("terminalType").Value.ToString()'                           CorrelationId = json.Property("correlationId").Value.ToString()                      };                  case "TerminalInputRequest":                      type = typeof(TerminalInputRequest);                      return new TerminalInputRequest()                      {                          TerminalId = Guid.Parse(json.Property("terminalId").Value.ToString())'                          Input = json.Property("input").Value.ToString()'                          CorrelationId = Int32.Parse(json.Property("correlationId").Value.ToString())                      };                  case "CloseTerminalRequest":                      type = typeof(CloseTerminalRequest);                      return new CloseTerminalRequest()                      {                          TerminalId = Guid.Parse(json.Property("terminalId").Value.ToString())                      };              }
