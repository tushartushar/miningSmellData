Implementation smell,Namespace,Class,File,Method,Description
Empty Catch Block,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,HandleConnectionAsync,The method has an empty catch block.
Empty Catch Block,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,HandleConnectionAsync,The method has an empty catch block.
Magic Number,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,Main,The following statement contains a magic number: var endpoint = new IPEndPoint(IPAddress.Any' 8005);
Magic Number,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,Main,The following statement contains a magic number: WebSocketListener server = new WebSocketListener(endpoint' new WebSocketListenerOptions()               {                  SubProtocols = new []{"text"}'                  PingTimeout = TimeSpan.FromSeconds(5)'                  NegotiationTimeout = TimeSpan.FromSeconds(5)'                  ParallelNegotiations = 16'                  NegotiationQueueCapacity = 256'                  TcpBacklog = 1000'                  BufferManager = BufferManager.CreateBufferManager((8192 + 1024)*1000' 8192 + 1024)              });
Magic Number,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,Main,The following statement contains a magic number: WebSocketListener server = new WebSocketListener(endpoint' new WebSocketListenerOptions()               {                  SubProtocols = new []{"text"}'                  PingTimeout = TimeSpan.FromSeconds(5)'                  NegotiationTimeout = TimeSpan.FromSeconds(5)'                  ParallelNegotiations = 16'                  NegotiationQueueCapacity = 256'                  TcpBacklog = 1000'                  BufferManager = BufferManager.CreateBufferManager((8192 + 1024)*1000' 8192 + 1024)              });
Magic Number,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,Main,The following statement contains a magic number: WebSocketListener server = new WebSocketListener(endpoint' new WebSocketListenerOptions()               {                  SubProtocols = new []{"text"}'                  PingTimeout = TimeSpan.FromSeconds(5)'                  NegotiationTimeout = TimeSpan.FromSeconds(5)'                  ParallelNegotiations = 16'                  NegotiationQueueCapacity = 256'                  TcpBacklog = 1000'                  BufferManager = BufferManager.CreateBufferManager((8192 + 1024)*1000' 8192 + 1024)              });
Magic Number,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,Main,The following statement contains a magic number: WebSocketListener server = new WebSocketListener(endpoint' new WebSocketListenerOptions()               {                  SubProtocols = new []{"text"}'                  PingTimeout = TimeSpan.FromSeconds(5)'                  NegotiationTimeout = TimeSpan.FromSeconds(5)'                  ParallelNegotiations = 16'                  NegotiationQueueCapacity = 256'                  TcpBacklog = 1000'                  BufferManager = BufferManager.CreateBufferManager((8192 + 1024)*1000' 8192 + 1024)              });
Magic Number,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,Main,The following statement contains a magic number: WebSocketListener server = new WebSocketListener(endpoint' new WebSocketListenerOptions()               {                  SubProtocols = new []{"text"}'                  PingTimeout = TimeSpan.FromSeconds(5)'                  NegotiationTimeout = TimeSpan.FromSeconds(5)'                  ParallelNegotiations = 16'                  NegotiationQueueCapacity = 256'                  TcpBacklog = 1000'                  BufferManager = BufferManager.CreateBufferManager((8192 + 1024)*1000' 8192 + 1024)              });
Magic Number,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,Main,The following statement contains a magic number: WebSocketListener server = new WebSocketListener(endpoint' new WebSocketListenerOptions()               {                  SubProtocols = new []{"text"}'                  PingTimeout = TimeSpan.FromSeconds(5)'                  NegotiationTimeout = TimeSpan.FromSeconds(5)'                  ParallelNegotiations = 16'                  NegotiationQueueCapacity = 256'                  TcpBacklog = 1000'                  BufferManager = BufferManager.CreateBufferManager((8192 + 1024)*1000' 8192 + 1024)              });
Magic Number,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,Main,The following statement contains a magic number: WebSocketListener server = new WebSocketListener(endpoint' new WebSocketListenerOptions()               {                  SubProtocols = new []{"text"}'                  PingTimeout = TimeSpan.FromSeconds(5)'                  NegotiationTimeout = TimeSpan.FromSeconds(5)'                  ParallelNegotiations = 16'                  NegotiationQueueCapacity = 256'                  TcpBacklog = 1000'                  BufferManager = BufferManager.CreateBufferManager((8192 + 1024)*1000' 8192 + 1024)              });
Magic Number,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,Main,The following statement contains a magic number: WebSocketListener server = new WebSocketListener(endpoint' new WebSocketListenerOptions()               {                  SubProtocols = new []{"text"}'                  PingTimeout = TimeSpan.FromSeconds(5)'                  NegotiationTimeout = TimeSpan.FromSeconds(5)'                  ParallelNegotiations = 16'                  NegotiationQueueCapacity = 256'                  TcpBacklog = 1000'                  BufferManager = BufferManager.CreateBufferManager((8192 + 1024)*1000' 8192 + 1024)              });
Magic Number,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,Main,The following statement contains a magic number: WebSocketListener server = new WebSocketListener(endpoint' new WebSocketListenerOptions()               {                  SubProtocols = new []{"text"}'                  PingTimeout = TimeSpan.FromSeconds(5)'                  NegotiationTimeout = TimeSpan.FromSeconds(5)'                  ParallelNegotiations = 16'                  NegotiationQueueCapacity = 256'                  TcpBacklog = 1000'                  BufferManager = BufferManager.CreateBufferManager((8192 + 1024)*1000' 8192 + 1024)              });
Magic Number,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,Main,The following statement contains a magic number: WebSocketListener server = new WebSocketListener(endpoint' new WebSocketListenerOptions()               {                  SubProtocols = new []{"text"}'                  PingTimeout = TimeSpan.FromSeconds(5)'                  NegotiationTimeout = TimeSpan.FromSeconds(5)'                  ParallelNegotiations = 16'                  NegotiationQueueCapacity = 256'                  TcpBacklog = 1000'                  BufferManager = BufferManager.CreateBufferManager((8192 + 1024)*1000' 8192 + 1024)              });
Magic Number,WebSocketListenerTests.Echo,Program,C:\repos\vtortola_WebSocketListener\samples\EchoServer\Program.cs,HandleConnectionAsync,The following statement contains a magic number: try              {                  PerformanceCounters.Connected.Increment();                  while (ws.IsConnected && !cancellation.IsCancellationRequested)                  {                      String msg = await ws.ReadStringAsync(cancellation).ConfigureAwait(false);                      if (msg == null)                          continue;                        PerformanceCounters.MessagesIn.Increment();                        ws.WriteString(msg);                      PerformanceCounters.MessagesOut.Increment();                        PerformanceCounters.Delay.IncrementBy(ws.Latency.Ticks * Stopwatch.Frequency / 10000);                      PerformanceCounters.DelayBase.Increment();                  }              }              catch (TaskCanceledException)              {                }              catch (Exception aex)              {                  Log("Error Handling connection: " + aex.GetBaseException().Message);                  try { ws.Close(); }                  catch { }              }              finally              {                  ws.Dispose();                  PerformanceCounters.Connected.Decrement();              }
