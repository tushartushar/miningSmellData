Implementation smell,Namespace,Class,File,Method,Description
Long Method,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The method has 132 lines of code.
Long Method,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The method has 114 lines of code.
Complex Method,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,TrueEqualsDictionary,Cyclomatic complexity of the method is 8
Complex Method,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,Cyclomatic complexity of the method is 25
Complex Method,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoSpeedTestsFor,Cyclomatic complexity of the method is 13
Long Parameter List,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoSpeedTest,The method has 5 parameters. Parameters: serializerName' niceTypeName' serializeFunc' deserializeFunc' obj
Long Identifier,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,,The length of the parameter _ServiceStackDeserializeDynamic is 31.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoSpeedTestsFor,The length of the statement  "                            case 0:name = "Jil Static"; serializer = jilSerializer; deserializer = jilStaticDeserializer; resultType = typeof(string); break; " is 129.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoSpeedTestsFor,The length of the statement  "                            case 1: name = "Jil Dynamic"; serializer = jilSerializer; deserializer = jilDynamicDeserializer; resultType = typeof(string); break; " is 132.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoSpeedTestsFor,The length of the statement  "                        var results = (List<Result>)serialize.Invoke(null' new object[] { name' typeName' serializer' deserializer' singleObj }); " is 121.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoSpeedTestsFor,The length of the statement  "                            case 0: name = "Jil Static"; serializer = jilSerializer; deserializer = jilStaticDeserializer; resultType = typeof(string); break; " is 130.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoSpeedTestsFor,The length of the statement  "                            case 1: name = "Jil Dynamic"; serializer = jilSerializer; deserializer = jilDynamicDeserializer; resultType = typeof(string); break; " is 132.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoSpeedTestsFor,The length of the statement  "                            case 0: name = "Jil Static"; serializer = jilSerializer; deserializer = jilStaticDeserializer; resultType = typeof(string); break; " is 130.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoSpeedTestsFor,The length of the statement  "                            case 1: name = "Jil Dynamic"; serializer = jilSerializer; deserializer = jilDynamicDeserializer; resultType = typeof(string); break; " is 132.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoQuickGraph,The length of the statement  "                question = Enumerable.Range(0' runCount).SelectMany(_ => DoSpeedTestsFor(typeof(Benchmark.Models.Question)' SpeedTestMode.Single)).ToList(); " is 140.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoQuickGraph,The length of the statement  "                answer = Enumerable.Range(0' runCount).SelectMany(_ => DoSpeedTestsFor(typeof(Benchmark.Models.Answer)' SpeedTestMode.Single)).ToList(); " is 136.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoQuickGraph,The length of the statement  "                user = Enumerable.Range(0' runCount).SelectMany(_ => DoSpeedTestsFor(typeof(Benchmark.Models.User)' SpeedTestMode.Single)).ToList(); " is 132.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoQuickGraph,The length of the statement  "                questionList = Enumerable.Range(0' runCount).SelectMany(_ => DoSpeedTestsFor(typeof(Benchmark.Models.Question)' SpeedTestMode.List)).ToList(); " is 142.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoQuickGraph,The length of the statement  "                answerList = Enumerable.Range(0' runCount).SelectMany(_ => DoSpeedTestsFor(typeof(Benchmark.Models.Answer)' SpeedTestMode.List)).ToList(); " is 138.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoQuickGraph,The length of the statement  "                userList = Enumerable.Range(0' runCount).SelectMany(_ => DoSpeedTestsFor(typeof(Benchmark.Models.User)' SpeedTestMode.List)).ToList(); " is 134.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoQuickGraph,The length of the statement  "                questionDict = Enumerable.Range(0' runCount).SelectMany(_ => DoSpeedTestsFor(typeof(Benchmark.Models.Question)' SpeedTestMode.Dictionary)).ToList(); " is 148.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoQuickGraph,The length of the statement  "                answerDict = Enumerable.Range(0' runCount).SelectMany(_ => DoSpeedTestsFor(typeof(Benchmark.Models.Answer)' SpeedTestMode.Dictionary)).ToList(); " is 144.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoQuickGraph,The length of the statement  "                userDict = Enumerable.Range(0' runCount).SelectMany(_ => DoSpeedTestsFor(typeof(Benchmark.Models.User)' SpeedTestMode.Dictionary)).ToList(); " is 140.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoQuickGraph,The length of the statement  "            Func<List<Result>' Func<Result' bool>' double> jilStatic = (r' f) => r.Where(w => f(w) && w.Serializer.StartsWith("Jil Static")).Select(x => x.Elapsed.TotalMilliseconds).Median(); " is 179.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoQuickGraph,The length of the statement  "            Func<List<Result>' Func<Result' bool>' double> jilDynamic = (r' f) => r.Where(w => f(w) && w.Serializer.StartsWith("Jil Dynamic")).Select(x => x.Elapsed.TotalMilliseconds).Median(); " is 181.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("Answer\t" + answerSpeed[JilIndex] + "\t" + answerSpeed[NewtonSoftIndex] + "\t" + answerSpeed[ProtobufIndex] + "\t" + answerSpeed[ServiceStackIndex]); " is 168.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("Question\t" + questionSpeed[JilIndex] + "\t" + questionSpeed[NewtonSoftIndex] + "\t" + questionSpeed[ProtobufIndex] + "\t" + questionSpeed[ServiceStackIndex]); " is 178.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("User\t" + userSpeed[JilIndex] + "\t" + userSpeed[NewtonSoftIndex] + "\t" + userSpeed[ProtobufIndex] + "\t" + userSpeed[ServiceStackIndex]); " is 158.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("List<Answer>\t" + answerListSpeed[JilIndex] + "\t" + answerListSpeed[NewtonSoftIndex] + "\t" + answerListSpeed[ProtobufIndex] + "\t" + answerListSpeed[ServiceStackIndex]); " is 190.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("List<Question>\t" + questionListSpeed[JilIndex] + "\t" + questionListSpeed[NewtonSoftIndex] + "\t" + questionListSpeed[ProtobufIndex] + "\t" + questionListSpeed[ServiceStackIndex]); " is 200.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("List<User>\t" + userListSpeed[JilIndex] + "\t" + userListSpeed[NewtonSoftIndex] + "\t" + userListSpeed[ProtobufIndex] + "\t" + userListSpeed[ServiceStackIndex]); " is 180.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    double[] answerDictSpeed = CompareSerializers((Dictionary<string' Answer>)MakeDictionaryObject(typeof(Answer))' TestRuns); " is 122.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("Dictionary<string'Answer>\t" + answerDictSpeed[JilIndex] + "\t" + answerDictSpeed[NewtonSoftIndex] + "\t" + answerDictSpeed[ProtobufIndex] + "\t" + answerDictSpeed[ServiceStackIndex]); " is 203.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    double[] questionDictSpeed = CompareSerializers((Dictionary<string' Question>)MakeDictionaryObject(typeof(Question))' TestRuns); " is 128.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("Dictionary<string'Question>\t" + questionDictSpeed[JilIndex] + "\t" + questionDictSpeed[NewtonSoftIndex] + "\t" + questionDictSpeed[ProtobufIndex] + "\t" + questionDictSpeed[ServiceStackIndex]); " is 213.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("Dictionary<string'User>\t" + userDictSpeed[JilIndex] + "\t" + userDictSpeed[NewtonSoftIndex] + "\t" + userDictSpeed[ProtobufIndex] + "\t" + userDictSpeed[ServiceStackIndex]); " is 193.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("Answer\t" + answerSpeed[JilIndex] + "\t" + answerSpeed[NewtonSoftIndex] + "\t" + answerSpeed[ProtobufIndex] + "\t" + answerSpeed[ServiceStackIndex]); " is 168.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("Question\t" + questionSpeed[JilIndex] + "\t" + questionSpeed[NewtonSoftIndex] + "\t" + questionSpeed[ProtobufIndex] + "\t" + questionSpeed[ServiceStackIndex]); " is 178.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("User\t" + userSpeed[JilIndex] + "\t" + userSpeed[NewtonSoftIndex] + "\t" + userSpeed[ProtobufIndex] + "\t" + userSpeed[ServiceStackIndex]); " is 158.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("List<Answer>\t" + answerListSpeed[JilIndex] + "\t" + answerListSpeed[NewtonSoftIndex] + "\t" + answerListSpeed[ProtobufIndex] + "\t" + answerListSpeed[ServiceStackIndex]); " is 190.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("List<Question>\t" + questionListSpeed[JilIndex] + "\t" + questionListSpeed[NewtonSoftIndex] + "\t" + questionListSpeed[ProtobufIndex] + "\t" + questionListSpeed[ServiceStackIndex]); " is 200.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("List<User>\t" + userListSpeed[JilIndex] + "\t" + userListSpeed[NewtonSoftIndex] + "\t" + userListSpeed[ProtobufIndex] + "\t" + userListSpeed[ServiceStackIndex]); " is 180.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    double[] answerDictSpeed = CompareDeserializers((Dictionary<string' Answer>)MakeDictionaryObject(typeof(Answer))' TestRuns); " is 124.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("Dictionary<string'Answer>\t" + answerDictSpeed[JilIndex] + "\t" + answerDictSpeed[NewtonSoftIndex] + "\t" + answerDictSpeed[ProtobufIndex] + "\t" + answerDictSpeed[ServiceStackIndex]); " is 203.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    double[] questionDictSpeed = CompareDeserializers((Dictionary<string' Question>)MakeDictionaryObject(typeof(Question))' TestRuns); " is 130.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("Dictionary<string'Question>\t" + questionDictSpeed[JilIndex] + "\t" + questionDictSpeed[NewtonSoftIndex] + "\t" + questionDictSpeed[ProtobufIndex] + "\t" + questionDictSpeed[ServiceStackIndex]); " is 213.
Long Statement,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The length of the statement  "                    Console.WriteLine("Dictionary<string'User>\t" + userDictSpeed[JilIndex] + "\t" + userDictSpeed[NewtonSoftIndex] + "\t" + userDictSpeed[ProtobufIndex] + "\t" + userDictSpeed[ServiceStackIndex]); " is 193.
Long Statement,Benchmark.Models,MobileFeed,C:\repos\kevin-montrose_Jil\Benchmark\Models\Feed.cs,EqualsDynamic,The length of the statement  "                this.cross_site_interesting_questions.TrueEqualsListDynamic((IEnumerable<dynamic>)obj.cross_site_interesting_questions) && " is 122.
Long Statement,Benchmark.Models,SearchExcerpt,C:\repos\kevin-montrose_Jil\Benchmark\Models\SearchExcerpt.cs,EqualsDynamic,The length of the statement  "                (this.last_activity_user == null && obj.last_activity_user == null || this.last_activity_user.EqualsDynamic(obj.last_activity_user)) && " is 135.
Long Statement,Benchmark.Models,TagWiki,C:\repos\kevin-montrose_Jil\Benchmark\Models\TagWiki.cs,EqualsDynamic,The length of the statement  "                (this.last_body_editor == null && obj.last_body_editor == null || this.last_body_editor.EqualsDynamic(obj.last_body_editor)) && " is 127.
Long Statement,Benchmark.Models,TagWiki,C:\repos\kevin-montrose_Jil\Benchmark\Models\TagWiki.cs,EqualsDynamic,The length of the statement  "                (this.last_excerpt_editor == null && obj.last_excerpt_editor == null || this.last_excerpt_editor.EqualsDynamic(obj.last_excerpt_editor)) && " is 139.
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t.IsPrimitive)              {                  if (t == typeof(byte))                  {                      return (byte)(rand.Next(byte.MaxValue - byte.MinValue + 1) + byte.MinValue);                  }                    if (t == typeof(sbyte))                  {                      return (sbyte)(rand.Next(sbyte.MaxValue - sbyte.MinValue + 1) + sbyte.MinValue);                  }                    if (t == typeof(short))                  {                      return (short)(rand.Next(short.MaxValue - short.MinValue + 1) + short.MinValue);                  }                    if (t == typeof(ushort))                  {                      return (ushort)(rand.Next(ushort.MaxValue - ushort.MinValue + 1) + ushort.MinValue);                  }                    if (t == typeof(int))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToInt32(bytes' 0);                  }                    if (t == typeof(uint))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt32(bytes' 0);                  }                    if (t == typeof(long))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToInt64(bytes' 0);                  }                    if (t == typeof(ulong))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt64(bytes' 0);                  }                    if (t == typeof(float))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToSingle(bytes' 0);                  }                    if (t == typeof(double))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToDouble(bytes' 0);                  }                    if (t == typeof(char))                  {                      var roll = rand.Next(ASCII.Length);                        return ASCII[roll];                  }                    if (t == typeof(bool))                  {                      return (rand.Next(2) == 1);                  }                    throw new InvalidOperationException();              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t.IsPrimitive)              {                  if (t == typeof(byte))                  {                      return (byte)(rand.Next(byte.MaxValue - byte.MinValue + 1) + byte.MinValue);                  }                    if (t == typeof(sbyte))                  {                      return (sbyte)(rand.Next(sbyte.MaxValue - sbyte.MinValue + 1) + sbyte.MinValue);                  }                    if (t == typeof(short))                  {                      return (short)(rand.Next(short.MaxValue - short.MinValue + 1) + short.MinValue);                  }                    if (t == typeof(ushort))                  {                      return (ushort)(rand.Next(ushort.MaxValue - ushort.MinValue + 1) + ushort.MinValue);                  }                    if (t == typeof(int))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToInt32(bytes' 0);                  }                    if (t == typeof(uint))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt32(bytes' 0);                  }                    if (t == typeof(long))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToInt64(bytes' 0);                  }                    if (t == typeof(ulong))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt64(bytes' 0);                  }                    if (t == typeof(float))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToSingle(bytes' 0);                  }                    if (t == typeof(double))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToDouble(bytes' 0);                  }                    if (t == typeof(char))                  {                      var roll = rand.Next(ASCII.Length);                        return ASCII[roll];                  }                    if (t == typeof(bool))                  {                      return (rand.Next(2) == 1);                  }                    throw new InvalidOperationException();              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t.IsPrimitive)              {                  if (t == typeof(byte))                  {                      return (byte)(rand.Next(byte.MaxValue - byte.MinValue + 1) + byte.MinValue);                  }                    if (t == typeof(sbyte))                  {                      return (sbyte)(rand.Next(sbyte.MaxValue - sbyte.MinValue + 1) + sbyte.MinValue);                  }                    if (t == typeof(short))                  {                      return (short)(rand.Next(short.MaxValue - short.MinValue + 1) + short.MinValue);                  }                    if (t == typeof(ushort))                  {                      return (ushort)(rand.Next(ushort.MaxValue - ushort.MinValue + 1) + ushort.MinValue);                  }                    if (t == typeof(int))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToInt32(bytes' 0);                  }                    if (t == typeof(uint))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt32(bytes' 0);                  }                    if (t == typeof(long))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToInt64(bytes' 0);                  }                    if (t == typeof(ulong))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt64(bytes' 0);                  }                    if (t == typeof(float))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToSingle(bytes' 0);                  }                    if (t == typeof(double))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToDouble(bytes' 0);                  }                    if (t == typeof(char))                  {                      var roll = rand.Next(ASCII.Length);                        return ASCII[roll];                  }                    if (t == typeof(bool))                  {                      return (rand.Next(2) == 1);                  }                    throw new InvalidOperationException();              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t.IsPrimitive)              {                  if (t == typeof(byte))                  {                      return (byte)(rand.Next(byte.MaxValue - byte.MinValue + 1) + byte.MinValue);                  }                    if (t == typeof(sbyte))                  {                      return (sbyte)(rand.Next(sbyte.MaxValue - sbyte.MinValue + 1) + sbyte.MinValue);                  }                    if (t == typeof(short))                  {                      return (short)(rand.Next(short.MaxValue - short.MinValue + 1) + short.MinValue);                  }                    if (t == typeof(ushort))                  {                      return (ushort)(rand.Next(ushort.MaxValue - ushort.MinValue + 1) + ushort.MinValue);                  }                    if (t == typeof(int))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToInt32(bytes' 0);                  }                    if (t == typeof(uint))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt32(bytes' 0);                  }                    if (t == typeof(long))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToInt64(bytes' 0);                  }                    if (t == typeof(ulong))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt64(bytes' 0);                  }                    if (t == typeof(float))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToSingle(bytes' 0);                  }                    if (t == typeof(double))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToDouble(bytes' 0);                  }                    if (t == typeof(char))                  {                      var roll = rand.Next(ASCII.Length);                        return ASCII[roll];                  }                    if (t == typeof(bool))                  {                      return (rand.Next(2) == 1);                  }                    throw new InvalidOperationException();              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t.IsPrimitive)              {                  if (t == typeof(byte))                  {                      return (byte)(rand.Next(byte.MaxValue - byte.MinValue + 1) + byte.MinValue);                  }                    if (t == typeof(sbyte))                  {                      return (sbyte)(rand.Next(sbyte.MaxValue - sbyte.MinValue + 1) + sbyte.MinValue);                  }                    if (t == typeof(short))                  {                      return (short)(rand.Next(short.MaxValue - short.MinValue + 1) + short.MinValue);                  }                    if (t == typeof(ushort))                  {                      return (ushort)(rand.Next(ushort.MaxValue - ushort.MinValue + 1) + ushort.MinValue);                  }                    if (t == typeof(int))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToInt32(bytes' 0);                  }                    if (t == typeof(uint))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt32(bytes' 0);                  }                    if (t == typeof(long))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToInt64(bytes' 0);                  }                    if (t == typeof(ulong))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt64(bytes' 0);                  }                    if (t == typeof(float))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToSingle(bytes' 0);                  }                    if (t == typeof(double))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToDouble(bytes' 0);                  }                    if (t == typeof(char))                  {                      var roll = rand.Next(ASCII.Length);                        return ASCII[roll];                  }                    if (t == typeof(bool))                  {                      return (rand.Next(2) == 1);                  }                    throw new InvalidOperationException();              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t.IsPrimitive)              {                  if (t == typeof(byte))                  {                      return (byte)(rand.Next(byte.MaxValue - byte.MinValue + 1) + byte.MinValue);                  }                    if (t == typeof(sbyte))                  {                      return (sbyte)(rand.Next(sbyte.MaxValue - sbyte.MinValue + 1) + sbyte.MinValue);                  }                    if (t == typeof(short))                  {                      return (short)(rand.Next(short.MaxValue - short.MinValue + 1) + short.MinValue);                  }                    if (t == typeof(ushort))                  {                      return (ushort)(rand.Next(ushort.MaxValue - ushort.MinValue + 1) + ushort.MinValue);                  }                    if (t == typeof(int))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToInt32(bytes' 0);                  }                    if (t == typeof(uint))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt32(bytes' 0);                  }                    if (t == typeof(long))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToInt64(bytes' 0);                  }                    if (t == typeof(ulong))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt64(bytes' 0);                  }                    if (t == typeof(float))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToSingle(bytes' 0);                  }                    if (t == typeof(double))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToDouble(bytes' 0);                  }                    if (t == typeof(char))                  {                      var roll = rand.Next(ASCII.Length);                        return ASCII[roll];                  }                    if (t == typeof(bool))                  {                      return (rand.Next(2) == 1);                  }                    throw new InvalidOperationException();              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t.IsPrimitive)              {                  if (t == typeof(byte))                  {                      return (byte)(rand.Next(byte.MaxValue - byte.MinValue + 1) + byte.MinValue);                  }                    if (t == typeof(sbyte))                  {                      return (sbyte)(rand.Next(sbyte.MaxValue - sbyte.MinValue + 1) + sbyte.MinValue);                  }                    if (t == typeof(short))                  {                      return (short)(rand.Next(short.MaxValue - short.MinValue + 1) + short.MinValue);                  }                    if (t == typeof(ushort))                  {                      return (ushort)(rand.Next(ushort.MaxValue - ushort.MinValue + 1) + ushort.MinValue);                  }                    if (t == typeof(int))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToInt32(bytes' 0);                  }                    if (t == typeof(uint))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt32(bytes' 0);                  }                    if (t == typeof(long))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToInt64(bytes' 0);                  }                    if (t == typeof(ulong))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToUInt64(bytes' 0);                  }                    if (t == typeof(float))                  {                      var bytes = new byte[4];                      rand.NextBytes(bytes);                        return BitConverter.ToSingle(bytes' 0);                  }                    if (t == typeof(double))                  {                      var bytes = new byte[8];                      rand.NextBytes(bytes);                        return BitConverter.ToDouble(bytes' 0);                  }                    if (t == typeof(char))                  {                      var roll = rand.Next(ASCII.Length);                        return ASCII[roll];                  }                    if (t == typeof(bool))                  {                      return (rand.Next(2) == 1);                  }                    throw new InvalidOperationException();              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t == typeof(string))              {                  var len = rand.Next(500);                  var c = new char[len];                  for (var i = 0; i < c.Length; i++)                  {                      c[i] = (char)typeof(char).RandomValue(rand' depth + 1);                  }                    return new string(c);              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t == typeof(DateTime))              {                  var epoch = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                    var bytes = new byte[4];                  rand.NextBytes(bytes);                    var secsOffset = BitConverter.ToInt32(bytes' 0);                    var retDate = epoch.AddSeconds(secsOffset);                    return retDate;              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t == typeof(DateTime))              {                  var epoch = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                    var bytes = new byte[4];                  rand.NextBytes(bytes);                    var secsOffset = BitConverter.ToInt32(bytes' 0);                    var retDate = epoch.AddSeconds(secsOffset);                    return retDate;              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t.IsNullable())              {                  // leave it unset                  if (rand.Next(2) == 0)                  {                      // null!                      return Activator.CreateInstance(t);                  }                    var underlying = Nullable.GetUnderlyingType(t);                  var val = underlying.RandomValue(rand' depth + 1);                    var cons = t.GetConstructor(new[] { underlying });                    return cons.Invoke(new object[] { val });              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t.IsList())              {                  if (rand.Next(2) == 0 || depth >= 10)                  {                      return null;                  }                    var listI = t.GetListInterface();                    var valType = listI.GetGenericArguments()[0];                    var retT = typeof(List<>).MakeGenericType(valType);                  var ret = Activator.CreateInstance(retT);                  var add = retT.GetMethod("Add");                    var len = rand.Next(20);                  for (var i = 0; i < len; i++)                  {                      var elem = valType.RandomValue(rand' depth + 1);                      add.Invoke(ret' new object[] { elem });                  }                    return ret;              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t.IsList())              {                  if (rand.Next(2) == 0 || depth >= 10)                  {                      return null;                  }                    var listI = t.GetListInterface();                    var valType = listI.GetGenericArguments()[0];                    var retT = typeof(List<>).MakeGenericType(valType);                  var ret = Activator.CreateInstance(retT);                  var add = retT.GetMethod("Add");                    var len = rand.Next(20);                  for (var i = 0; i < len; i++)                  {                      var elem = valType.RandomValue(rand' depth + 1);                      add.Invoke(ret' new object[] { elem });                  }                    return ret;              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: if (t.IsList())              {                  if (rand.Next(2) == 0 || depth >= 10)                  {                      return null;                  }                    var listI = t.GetListInterface();                    var valType = listI.GetGenericArguments()[0];                    var retT = typeof(List<>).MakeGenericType(valType);                  var ret = Activator.CreateInstance(retT);                  var add = retT.GetMethod("Add");                    var len = rand.Next(20);                  for (var i = 0; i < len; i++)                  {                      var elem = valType.RandomValue(rand' depth + 1);                      add.Invoke(ret' new object[] { elem });                  }                    return ret;              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,RandomValue,The following statement contains a magic number: foreach (var p in t.GetProperties())              {                  if (rand.Next(2) == 0) continue;                    var propType = p.PropertyType;                    p.SetValue(retObj' propType.RandomValue(rand' depth + 1));              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,Median,The following statement contains a magic number: if (inOrder.Count % 2 == 1)              {                  return inOrder[inOrder.Count / 2 + 1];              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,Median,The following statement contains a magic number: if (inOrder.Count % 2 == 1)              {                  return inOrder[inOrder.Count / 2 + 1];              }
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,Median,The following statement contains a magic number: var a = inOrder[inOrder.Count / 2];
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,Median,The following statement contains a magic number: var b = inOrder[inOrder.Count / 2 + 1];
Magic Number,Benchmark,ExtensionMethods,C:\repos\kevin-montrose_Jil\Benchmark\ExtensionMethods.cs,Median,The following statement contains a magic number: return (a + b) / 2.0;
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,ResetRand,The following statement contains a magic number: Rand = new Random(314159265);
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,MakeDictionaryObject,The following statement contains a magic number: var len = Rand.Next(30) + 20;
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,MakeDictionaryObject,The following statement contains a magic number: var len = Rand.Next(30) + 20;
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoSpeedTest,The following statement contains a magic number: const int TestRuns = 100;
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoSpeedTestsFor,The following statement contains a magic number: if(mode.HasFlag(SpeedTestMode.Single))              {                  var typeName = model.Name;                    var jilSerializer = GetJilSerializer(model);                    var jilStaticDeserializer = GetJilStaticDeserializer(model' "{}");                  var jilDynamicDeserializer = GetJilDynamicDeserializer(model' "{}");                    System.GC.Collect(2' GCCollectionMode.Forced' blocking: true);                    var singleObj = MakeSingleObject(model);                    foreach (var perm in Permutations.Random(Rand))                  {                      foreach (var p in perm)                      {                          string name;                          object serializer;                          object deserializer;                          Type resultType;                            switch (p)                          {                              case 0:name = "Jil Static"; serializer = jilSerializer; deserializer = jilStaticDeserializer; resultType = typeof(string); break;                              case 1: name = "Jil Dynamic"; serializer = jilSerializer; deserializer = jilDynamicDeserializer; resultType = typeof(string); break;                              default: throw new InvalidOperationException();                          }                            var serialize = _DoSpeedTest.MakeGenericMethod(model' resultType);                            var results = (List<Result>)serialize.Invoke(null' new object[] { name' typeName' serializer' deserializer' singleObj });                            ret.AddRange(results);                      }                  }              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoSpeedTestsFor,The following statement contains a magic number: if (mode.HasFlag(SpeedTestMode.List))              {                  var typeName = "List<" + model.Name + ">";                    var asList = typeof(List<>).MakeGenericType(model);                    var jilSerializer = GetJilSerializer(asList);                    var jilStaticDeserializer = GetJilStaticDeserializer(asList' "[]");                  var jilDynamicDeserializer = GetJilDynamicDeserializer(asList' "[]");                    System.GC.Collect(2' GCCollectionMode.Forced' blocking: true);                    var listObj = MakeListObject(model);                    foreach (var perm in Permutations.Random(Rand))                  {                      foreach (var p in perm)                      {                          string name;                          object serializer;                          object deserializer;                          Type resultType;                            switch (p)                          {                              case 0: name = "Jil Static"; serializer = jilSerializer; deserializer = jilStaticDeserializer; resultType = typeof(string); break;                              case 1: name = "Jil Dynamic"; serializer = jilSerializer; deserializer = jilDynamicDeserializer; resultType = typeof(string); break;                              default: throw new InvalidOperationException();                          }                            var serialize = _DoSpeedTest.MakeGenericMethod(asList' resultType);                            var results = (List<Result>)serialize.Invoke(null' new object[] { name' typeName' serializer' deserializer' listObj });                            ret.AddRange(results);                      }                  }              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoSpeedTestsFor,The following statement contains a magic number: if (mode.HasFlag(SpeedTestMode.Dictionary))              {                  var typeName = "Dictionary<string' " + model.Name + ">";                    var asDict = typeof(Dictionary<'>).MakeGenericType(typeof(string)' model);                    var jilSerializer = GetJilSerializer(asDict);                    var jilStaticDeserializer = GetJilStaticDeserializer(asDict' "{}");                  var jilDynamicDeserializer = GetJilDynamicDeserializer(asDict' "{}");                    System.GC.Collect(2' GCCollectionMode.Forced' blocking: true);                    var dictObj = MakeDictionaryObject(model);                    foreach (var perm in Permutations.Random(Rand))                  {                      foreach (var p in perm)                      {                          string name;                          object serializer;                          object deserializer;                          Type resultType;                            switch (p)                          {                              case 0: name = "Jil Static"; serializer = jilSerializer; deserializer = jilStaticDeserializer; resultType = typeof(string); break;                              case 1: name = "Jil Dynamic"; serializer = jilSerializer; deserializer = jilDynamicDeserializer; resultType = typeof(string); break;                              default: throw new InvalidOperationException();                          }                            var serialize = _DoSpeedTest.MakeGenericMethod(asDict' resultType);                            var results = (List<Result>)serialize.Invoke(null' new object[] { name' typeName' serializer' deserializer' dictObj });                            ret.AddRange(results);                      }                  }              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoQuickGraph,The following statement contains a magic number: const int runCount = 10;
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,DoComparisonGraph,The following statement contains a magic number: const int TestRuns = 10000;
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareDeserializers,The following statement contains a magic number: Action jil =                  () =>                  {                      System.GC.Collect(2' GCCollectionMode.Forced' blocking: true);                      ret[JilIndex] = AverageRuntime(() => jilDeserializer(json)' testRuns);                  };
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareDeserializers,The following statement contains a magic number: Action newtonSoft =                  () =>                  {                      System.GC.Collect(2' GCCollectionMode.Forced' blocking: true);                      ret[NewtonSoftIndex] = AverageRuntime(() => newtonSoftDeserializer(json)' testRuns);                  };
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareDeserializers,The following statement contains a magic number: Action protobuf =                  () =>                  {                      System.GC.Collect(2' GCCollectionMode.Forced' blocking: true);                      ret[ProtobufIndex] = AverageRuntime(() => protobufDeserializer(bytes)' testRuns);                  };
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareDeserializers,The following statement contains a magic number: Action serviceStack =                  () =>                  {                      System.GC.Collect(2' GCCollectionMode.Forced' blocking: true);                      ret[ServiceStackIndex] = AverageRuntime(() => serviceStackDeserializer(json)' testRuns);                  };
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareDeserializers,The following statement contains a magic number: foreach (var perm in Permutate(4))              {                  ret = new double[4];                  foreach (var ix in perm)                  {                      switch (ix)                      {                          case 0: jil(); break;                          case 1: newtonSoft(); break;                          case 2: protobuf(); break;                          case 3: serviceStack(); break;                          default: throw new InvalidOperationException();                      }                  }                    allRuns.Add(ret);              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareDeserializers,The following statement contains a magic number: foreach (var perm in Permutate(4))              {                  ret = new double[4];                  foreach (var ix in perm)                  {                      switch (ix)                      {                          case 0: jil(); break;                          case 1: newtonSoft(); break;                          case 2: protobuf(); break;                          case 3: serviceStack(); break;                          default: throw new InvalidOperationException();                      }                  }                    allRuns.Add(ret);              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareDeserializers,The following statement contains a magic number: foreach (var perm in Permutate(4))              {                  ret = new double[4];                  foreach (var ix in perm)                  {                      switch (ix)                      {                          case 0: jil(); break;                          case 1: newtonSoft(); break;                          case 2: protobuf(); break;                          case 3: serviceStack(); break;                          default: throw new InvalidOperationException();                      }                  }                    allRuns.Add(ret);              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareDeserializers,The following statement contains a magic number: foreach (var perm in Permutate(4))              {                  ret = new double[4];                  foreach (var ix in perm)                  {                      switch (ix)                      {                          case 0: jil(); break;                          case 1: newtonSoft(); break;                          case 2: protobuf(); break;                          case 3: serviceStack(); break;                          default: throw new InvalidOperationException();                      }                  }                    allRuns.Add(ret);              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareDeserializers,The following statement contains a magic number: var medians = new double[4];
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareDeserializers,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  var allForI = allRuns.Select(run => run[i]).OrderBy(_ => _).ToArray();                  medians[i] = (allForI[1] + allForI[2]) / 2.0;              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareDeserializers,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  var allForI = allRuns.Select(run => run[i]).OrderBy(_ => _).ToArray();                  medians[i] = (allForI[1] + allForI[2]) / 2.0;              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareDeserializers,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  var allForI = allRuns.Select(run => run[i]).OrderBy(_ => _).ToArray();                  medians[i] = (allForI[1] + allForI[2]) / 2.0;              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: Action jil =                  () =>                  {                      System.GC.Collect(2' GCCollectionMode.Forced' blocking: true);                      ret[JilIndex] = AverageRuntime(() => jilSerializer(obj)' testRuns);                  };
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: Action newtonSoft =                  () =>                  {                      System.GC.Collect(2' GCCollectionMode.Forced' blocking: true);                      ret[NewtonSoftIndex] = AverageRuntime(() => newtonSoftSerializer(obj)' testRuns);                  };
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: Action protobuf =                  () =>                  {                      System.GC.Collect(2' GCCollectionMode.Forced' blocking: true);                      ret[ProtobufIndex] = AverageRuntime(() => protobufSerializer(obj)' testRuns);                  };
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: Action serviceStack =                  () =>                  {                      System.GC.Collect(2' GCCollectionMode.Forced' blocking: true);                      ret[ServiceStackIndex] = AverageRuntime(() => serviceStackSerializer(obj)' testRuns);                  };
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: foreach (var perm in Permutate(4))              {                  ret = new double[4];                  foreach(var ix in perm)                  {                      switch (ix)                      {                          case 0: jil(); break;                          case 1: newtonSoft(); break;                          case 2: protobuf(); break;                          case 3: serviceStack(); break;                          default: throw new InvalidOperationException();                      }                  }                    allRuns.Add(ret);              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: foreach (var perm in Permutate(4))              {                  ret = new double[4];                  foreach(var ix in perm)                  {                      switch (ix)                      {                          case 0: jil(); break;                          case 1: newtonSoft(); break;                          case 2: protobuf(); break;                          case 3: serviceStack(); break;                          default: throw new InvalidOperationException();                      }                  }                    allRuns.Add(ret);              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: foreach (var perm in Permutate(4))              {                  ret = new double[4];                  foreach(var ix in perm)                  {                      switch (ix)                      {                          case 0: jil(); break;                          case 1: newtonSoft(); break;                          case 2: protobuf(); break;                          case 3: serviceStack(); break;                          default: throw new InvalidOperationException();                      }                  }                    allRuns.Add(ret);              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: foreach (var perm in Permutate(4))              {                  ret = new double[4];                  foreach(var ix in perm)                  {                      switch (ix)                      {                          case 0: jil(); break;                          case 1: newtonSoft(); break;                          case 2: protobuf(); break;                          case 3: serviceStack(); break;                          default: throw new InvalidOperationException();                      }                  }                    allRuns.Add(ret);              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: var medians = new double[4];
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  var allForI = allRuns.Select(run => run[i]).OrderBy(_ => _).ToArray();                    if (allForI.Length % 2 == 1)                  {                      medians[i] = allForI[allForI.Length / 2];                  }                  else                  {                      // 4 -> 1' 2                      medians[i] = (allForI[allForI.Length / 2 - 1] + allForI[allForI.Length / 2]) / 2.0;                  }              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  var allForI = allRuns.Select(run => run[i]).OrderBy(_ => _).ToArray();                    if (allForI.Length % 2 == 1)                  {                      medians[i] = allForI[allForI.Length / 2];                  }                  else                  {                      // 4 -> 1' 2                      medians[i] = (allForI[allForI.Length / 2 - 1] + allForI[allForI.Length / 2]) / 2.0;                  }              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  var allForI = allRuns.Select(run => run[i]).OrderBy(_ => _).ToArray();                    if (allForI.Length % 2 == 1)                  {                      medians[i] = allForI[allForI.Length / 2];                  }                  else                  {                      // 4 -> 1' 2                      medians[i] = (allForI[allForI.Length / 2 - 1] + allForI[allForI.Length / 2]) / 2.0;                  }              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  var allForI = allRuns.Select(run => run[i]).OrderBy(_ => _).ToArray();                    if (allForI.Length % 2 == 1)                  {                      medians[i] = allForI[allForI.Length / 2];                  }                  else                  {                      // 4 -> 1' 2                      medians[i] = (allForI[allForI.Length / 2 - 1] + allForI[allForI.Length / 2]) / 2.0;                  }              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  var allForI = allRuns.Select(run => run[i]).OrderBy(_ => _).ToArray();                    if (allForI.Length % 2 == 1)                  {                      medians[i] = allForI[allForI.Length / 2];                  }                  else                  {                      // 4 -> 1' 2                      medians[i] = (allForI[allForI.Length / 2 - 1] + allForI[allForI.Length / 2]) / 2.0;                  }              }
Magic Number,Benchmark,Program,C:\repos\kevin-montrose_Jil\Benchmark\Program.cs,CompareSerializers,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  var allForI = allRuns.Select(run => run[i]).OrderBy(_ => _).ToArray();                    if (allForI.Length % 2 == 1)                  {                      medians[i] = allForI[allForI.Length / 2];                  }                  else                  {                      // 4 -> 1' 2                      medians[i] = (allForI[allForI.Length / 2 - 1] + allForI[allForI.Length / 2]) / 2.0;                  }              }
