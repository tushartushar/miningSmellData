Implementation smell,Namespace,Class,File,Method,Description
Long Method,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,JsonEscapeFast,The method has 122 lines of code.
Long Method,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The method has 100 lines of code.
Long Method,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has 123 lines of code.
Long Method,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has 123 lines of code.
Long Method,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The method has 1907 lines of code.
Long Method,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The method has 1907 lines of code.
Long Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryBinaryOperation,The method has 237 lines of code.
Long Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The method has 413 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBuffer,The method has 120 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The method has 275 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The method has 246 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DayOfWeek,The method has 163 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTime,The method has 112 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTimeOffset,The method has 113 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The method has 310 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The method has 284 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateWithOffset,The method has 112 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBufferThunkReader,The method has 120 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadNumber,The method has 102 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadList,The method has 127 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadDictionary,The method has 146 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadObjectAutomata,The method has 191 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAndSetDiscriminantUnion,The method has 191 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadObjectDictionaryLookup,The method has 171 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAnonymousObjectDictionaryLookup,The method has 162 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAnonymousObjectAutomata,The method has 153 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBuffer,The method has 120 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The method has 119 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The method has 103 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The method has 103 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601Date,The method has 101 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffset,The method has 102 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The method has 303 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The method has 274 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The method has 100 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The method has 177 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The method has 174 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The method has 109 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The method has 109 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The method has 119 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The method has 100 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The method has 177 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The method has 174 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The method has 107 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The method has 107 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The method has 117 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The method has 119 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBufferThunkReader,The method has 120 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The method has 101 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The method has 303 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The method has 274 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The method has 103 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The method has 103 lines of code.
Long Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The method has 102 lines of code.
Long Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The method has 112 lines of code.
Long Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WritePrimitive,The method has 113 lines of code.
Long Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEncodedChar,The method has 138 lines of code.
Long Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,UnionAwareWriteMembers,The method has 137 lines of code.
Long Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteListFast,The method has 124 lines of code.
Long Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteArrayFast,The method has 118 lines of code.
Long Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDictionaryWithoutNulls,The method has 110 lines of code.
Long Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDictionaryWithNulls,The method has 128 lines of code.
Long Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValueIfNotNull,The method has 177 lines of code.
Long Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValue,The method has 127 lines of code.
Long Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteFlagsEnum,The method has 106 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The method has 101 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The method has 116 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteEncodedStringWithQuotesWithNullsInlineUnsafe,The method has 128 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteEncodedStringWithQuotesWithNullsInlineJSONPUnsafe,The method has 136 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteEncodedStringWithNullsInlineJSONPUnsafe,The method has 134 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteEncodedStringWithNullsInlineUnsafe,The method has 126 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The method has 112 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The method has 100 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The method has 101 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The method has 116 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteEncodedStringWithQuotesWithNullsInlineUnsafe_ThunkWriter,The method has 128 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteEncodedStringWithQuotesWithNullsInlineJSONPUnsafe_ThunkWriter,The method has 136 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteEncodedStringWithNullsInlineJSONPUnsafe_ThunkWriter,The method has 134 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteEncodedStringWithNullsInlineUnsafe_ThunkWriter,The method has 126 lines of code.
Long Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The method has 112 lines of code.
Complex Method,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,Cyclomatic complexity of the method is 9
Complex Method,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,Cyclomatic complexity of the method is 21
Complex Method,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,ConvertType,Cyclomatic complexity of the method is 10
Complex Method,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,JsonEscapeFast,Cyclomatic complexity of the method is 102
Complex Method,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,JsonEscape,Cyclomatic complexity of the method is 41
Complex Method,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,Cyclomatic complexity of the method is 15
Complex Method,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,Cyclomatic complexity of the method is 45
Complex Method,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Guess,Cyclomatic complexity of the method is 9
Complex Method,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Decompile,Cyclomatic complexity of the method is 14
Complex Method,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,FindRecursiveTypes,Cyclomatic complexity of the method is 11
Complex Method,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,FindReusedTypes,Cyclomatic complexity of the method is 12
Complex Method,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,Cyclomatic complexity of the method is 25
Complex Method,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,Cyclomatic complexity of the method is 25
Complex Method,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,CheckUnionLegality,Cyclomatic complexity of the method is 12
Complex Method,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,GetDescriminantCharacters,Cyclomatic complexity of the method is 23
Complex Method,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,Cyclomatic complexity of the method is 15
Complex Method,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,Cyclomatic complexity of the method is 15
Complex Method,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,Cyclomatic complexity of the method is 18
Complex Method,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,Cyclomatic complexity of the method is 18
Complex Method,Jil,Options,F:\newReposMay17\kevin-montrose_Jil\Jil\Options.cs,GetHashCode,Cyclomatic complexity of the method is 31
Complex Method,Jil.DeserializeDynamic,DynamicDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,_DeserializeMember,Cyclomatic complexity of the method is 16
Complex Method,Jil.DeserializeDynamic,DynamicDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeObject,Cyclomatic complexity of the method is 11
Complex Method,Jil.DeserializeDynamic,DynamicDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeNumber,Cyclomatic complexity of the method is 11
Complex Method,Jil.DeserializeDynamic,DynamicDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,_DeserializeMemberThunkReader,Cyclomatic complexity of the method is 16
Complex Method,Jil.DeserializeDynamic,DynamicDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeObjectThunkReader,Cyclomatic complexity of the method is 11
Complex Method,Jil.DeserializeDynamic,DynamicDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeNumberThunkReader,Cyclomatic complexity of the method is 11
Complex Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryBinaryOperation,Cyclomatic complexity of the method is 111
Complex Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryUnaryOperation,Cyclomatic complexity of the method is 25
Complex Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryGetIndex,Cyclomatic complexity of the method is 10
Complex Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,Cyclomatic complexity of the method is 183
Complex Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryInvokeMember,Cyclomatic complexity of the method is 8
Complex Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,FastNumberToSByte,Cyclomatic complexity of the method is 8
Complex Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,FastNumberToShort,Cyclomatic complexity of the method is 8
Complex Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,FastNumberToInt,Cyclomatic complexity of the method is 8
Complex Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,FastNumberToLong,Cyclomatic complexity of the method is 8
Complex Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTime,Cyclomatic complexity of the method is 16
Complex Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTimeOffset,Cyclomatic complexity of the method is 16
Complex Method,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,Cyclomatic complexity of the method is 38
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBuffer,Cyclomatic complexity of the method is 69
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,Cyclomatic complexity of the method is 21
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadDouble,Cyclomatic complexity of the method is 11
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,Cyclomatic complexity of the method is 12
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,Cyclomatic complexity of the method is 8
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,Cyclomatic complexity of the method is 9
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleTimeSpan,Cyclomatic complexity of the method is 16
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,Cyclomatic complexity of the method is 50
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,Cyclomatic complexity of the method is 50
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DayOfWeek,Cyclomatic complexity of the method is 33
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTime,Cyclomatic complexity of the method is 14
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTimeOffset,Cyclomatic complexity of the method is 14
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,Cyclomatic complexity of the method is 154
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,Cyclomatic complexity of the method is 23
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,Cyclomatic complexity of the method is 23
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateWithOffset,Cyclomatic complexity of the method is 14
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601TimeSpan,Cyclomatic complexity of the method is 20
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadDatePart,Cyclomatic complexity of the method is 15
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,Cyclomatic complexity of the method is 13
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBufferThunkReader,Cyclomatic complexity of the method is 69
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,Cyclomatic complexity of the method is 21
Complex Method,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadDoubleThunkReader,Cyclomatic complexity of the method is 11
Complex Method,Jil.Deserialize,EnumLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\EnumLookup.cs,LoadConstantOfType,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadNumber,Cyclomatic complexity of the method is 20
Complex Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadTimeSpan,Cyclomatic complexity of the method is 14
Complex Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadDate,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadPrimitive,Cyclomatic complexity of the method is 8
Complex Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,LoadConstantOfType,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadList,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadDictionary,Cyclomatic complexity of the method is 12
Complex Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadObjectAutomata,Cyclomatic complexity of the method is 14
Complex Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAndSetDiscriminantUnion,Cyclomatic complexity of the method is 14
Complex Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ExpectNullSetMembersToDefaultAndClearUnionTypeIndicator,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadObjectDictionaryLookup,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAnonymousObjectDictionaryLookup,Cyclomatic complexity of the method is 8
Complex Method,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,Build,Cyclomatic complexity of the method is 15
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipWithLeadChar,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,Cyclomatic complexity of the method is 27
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedString,Cyclomatic complexity of the method is 30
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithCharArray,Cyclomatic complexity of the method is 31
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBuffer,Cyclomatic complexity of the method is 69
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,Cyclomatic complexity of the method is 28
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,Cyclomatic complexity of the method is 21
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,Cyclomatic complexity of the method is 21
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpan,Cyclomatic complexity of the method is 16
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,Cyclomatic complexity of the method is 25
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,Cyclomatic complexity of the method is 28
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123DayOfWeek,Cyclomatic complexity of the method is 23
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601Date,Cyclomatic complexity of the method is 15
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffset,Cyclomatic complexity of the method is 15
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,Cyclomatic complexity of the method is 202
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,Cyclomatic complexity of the method is 53
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,Cyclomatic complexity of the method is 16
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,Cyclomatic complexity of the method is 24
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadDatePart,Cyclomatic complexity of the method is 15
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,Cyclomatic complexity of the method is 11
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDouble,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArray,Cyclomatic complexity of the method is 19
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,Cyclomatic complexity of the method is 30
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingle,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArray,Cyclomatic complexity of the method is 19
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,Cyclomatic complexity of the method is 30
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimal,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArray,Cyclomatic complexity of the method is 19
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,Cyclomatic complexity of the method is 32
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,Cyclomatic complexity of the method is 29
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArrayThunkReader,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleThunkReader,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,Cyclomatic complexity of the method is 29
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArrayThunkReader,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleThunkReader,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,Cyclomatic complexity of the method is 31
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArrayThunkReader,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalThunkReader,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,Cyclomatic complexity of the method is 28
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithCharArrayThunkReader,Cyclomatic complexity of the method is 31
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBufferThunkReader,Cyclomatic complexity of the method is 69
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,Cyclomatic complexity of the method is 21
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringThunkReader,Cyclomatic complexity of the method is 30
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,Cyclomatic complexity of the method is 21
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipWithLeadCharThunkReader,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,Cyclomatic complexity of the method is 27
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,Cyclomatic complexity of the method is 11
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,Cyclomatic complexity of the method is 15
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,Cyclomatic complexity of the method is 202
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,Cyclomatic complexity of the method is 53
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,Cyclomatic complexity of the method is 16
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,Cyclomatic complexity of the method is 25
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,Cyclomatic complexity of the method is 28
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123DayOfWeekThunkReader,Cyclomatic complexity of the method is 23
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,Cyclomatic complexity of the method is 15
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpanThunkReader,Cyclomatic complexity of the method is 16
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadDatePartThunkReader,Cyclomatic complexity of the method is 15
Complex Method,Jil.Deserialize,NameAutomata,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,NextChar,Cyclomatic complexity of the method is 10
Complex Method,Jil.Deserialize,SetterLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\SetterLookup.cs,GetOrderedSetters,Cyclomatic complexity of the method is 8
Complex Method,Jil.Deserialize,UnionLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\UnionLookup.cs,UnionLookup,Cyclomatic complexity of the method is 17
Complex Method,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,SerializeDynamicObject,Cyclomatic complexity of the method is 13
Complex Method,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,Cyclomatic complexity of the method is 22
Complex Method,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,SerializeInternal,Cyclomatic complexity of the method is 13
Complex Method,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,Cyclomatic complexity of the method is 12
Complex Method,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,Cyclomatic complexity of the method is 12
Complex Method,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,Cyclomatic complexity of the method is 12
Complex Method,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,Cyclomatic complexity of the method is 12
Complex Method,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteString,Cyclomatic complexity of the method is 9
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,Cyclomatic complexity of the method is 26
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteNullable,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDateTimeOffset,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteTimeSpan,Cyclomatic complexity of the method is 13
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDateTime,Cyclomatic complexity of the method is 14
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WritePrimitive,Cyclomatic complexity of the method is 19
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEncodedChar,Cyclomatic complexity of the method is 9
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteObjectWithNullsWithConditionalSerialization,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,UnionAwareWriteMembers,Cyclomatic complexity of the method is 14
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,DetermineNonNullMember,Cyclomatic complexity of the method is 8
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteObjectWithoutNulls,Cyclomatic complexity of the method is 9
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMemberIfNonNull,Cyclomatic complexity of the method is 13
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMemberConditionally,Cyclomatic complexity of the method is 8
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteListFast,Cyclomatic complexity of the method is 11
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteArrayFast,Cyclomatic complexity of the method is 11
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEnumerable,Cyclomatic complexity of the method is 11
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteElement,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDictionaryWithoutNulls,Cyclomatic complexity of the method is 11
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDictionaryWithNulls,Cyclomatic complexity of the method is 13
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValueIfNotNull,Cyclomatic complexity of the method is 27
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValue,Cyclomatic complexity of the method is 22
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteFlagsEnum,Cyclomatic complexity of the method is 10
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEnumOrPrimitive,Cyclomatic complexity of the method is 8
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEnum,Cyclomatic complexity of the method is 13
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,Build,Cyclomatic complexity of the method is 8
Complex Method,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildToString,Cyclomatic complexity of the method is 8
Complex Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,Cyclomatic complexity of the method is 10
Complex Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,Cyclomatic complexity of the method is 10
Complex Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,Cyclomatic complexity of the method is 13
Complex Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,Cyclomatic complexity of the method is 15
Complex Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,Cyclomatic complexity of the method is 61
Complex Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,Cyclomatic complexity of the method is 10
Complex Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,Cyclomatic complexity of the method is 10
Complex Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,Cyclomatic complexity of the method is 13
Complex Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,Cyclomatic complexity of the method is 15
Complex Method,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,Cyclomatic complexity of the method is 41
Complex Method,Jil.Serialize,ThunkWriter,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,IsConstantCommonString,Cyclomatic complexity of the method is 18
Complex Method,Jil.Serialize,ThunkWriter,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,IsConstantFormattingString,Cyclomatic complexity of the method is 50
Complex Method,Jil.Serialize,ThunkWriter,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,IsConstantValueString,Cyclomatic complexity of the method is 14
Complex Method,Jil.Serialize,ThunkWriter,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,IsConstant000EscapeString,Cyclomatic complexity of the method is 24
Complex Method,Jil.Serialize,ThunkWriter,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,IsConstant001EscapeString,Cyclomatic complexity of the method is 34
Complex Method,Jil.Serialize,ThunkWriter,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,IsConstantDaysOfWeek,Cyclomatic complexity of the method is 16
Long Parameter List,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadOp,The method has 7 parameters.
Long Parameter List,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The method has 8 parameters.
Long Parameter List,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,CheckUnionLegality,The method has 8 parameters.
Long Parameter List,Jil,Options,F:\newReposMay17\kevin-montrose_Jil\Jil\Options.cs,Options,The method has 6 parameters.
Long Parameter List,Jil,Options,F:\newReposMay17\kevin-montrose_Jil\Jil\Options.cs,Options,The method has 7 parameters.
Long Parameter List,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,ForFastNumber,The method has 6 parameters.
Long Parameter List,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The method has 5 parameters.
Long Parameter List,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601TimeZoneOffset,The method has 6 parameters.
Long Parameter List,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The method has 5 parameters.
Long Parameter List,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The method has 5 parameters.
Long Parameter List,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadDatePart,The method has 7 parameters.
Long Parameter List,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadPart,The method has 5 parameters.
Long Parameter List,Jil.DeserializeDynamic,ObjectBuilder,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\ObjectBuilder.cs,PutFastNumber,The method has 5 parameters.
Long Parameter List,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The method has 5 parameters.
Long Parameter List,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadDatePart,The method has 8 parameters.
Long Parameter List,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The method has 5 parameters.
Long Parameter List,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPart,The method has 7 parameters.
Long Parameter List,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The method has 5 parameters.
Long Parameter List,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The method has 5 parameters.
Long Parameter List,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPartThunkReader,The method has 7 parameters.
Long Parameter List,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadDatePartThunkReader,The method has 8 parameters.
Long Parameter List,Jil.Deserialize,NameAutomata,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,NextChar,The method has 5 parameters.
Long Parameter List,Jil.Deserialize,NameAutomata,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,CreateFold,The method has 8 parameters.
Long Parameter List,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,SerializeSemiStatically,The method has 5 parameters.
Long Parameter List,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,SerializeInternal,The method has 5 parameters.
Long Parameter List,Jil.SerializeDynamic,RecursiveSerializerCache,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\RecursiveSerializerCache.cs,_GetFor,The method has 5 parameters.
Long Parameter List,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,InlineSerializer,The method has 10 parameters.
Long Parameter List,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,UnionAwareWriteMembers,The method has 8 parameters.
Long Parameter List,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValueIfNotNull,The method has 5 parameters.
Long Parameter List,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEnumOrPrimitive,The method has 6 parameters.
Long Parameter List,Jil.Serialize,InlineSerializerHelper,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,Build,The method has 9 parameters.
Long Parameter List,Jil.Serialize,InlineSerializerHelper,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,_BuildWithDynamism,The method has 9 parameters.
Long Parameter List,Jil.Serialize,InlineSerializerHelper,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildToString,The method has 9 parameters.
Long Parameter List,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The method has 5 parameters.
Long Parameter List,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteMicrosoftStyleWithOffset,The method has 5 parameters.
Long Parameter List,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The method has 5 parameters.
Long Parameter List,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteMicrosoftStyleWithOffset_ThunkWriter,The method has 5 parameters.
Long Identifier,Jil,Options,F:\newReposMay17\kevin-montrose_Jil\Jil\Options.cs,Options,The length of the parameter unspecifiedDateTimeKindBehavior is 31.
Long Identifier,Jil,Options,F:\newReposMay17\kevin-montrose_Jil\Jil\Options.cs,Options,The length of the parameter unspecifiedDateTimeKindBehavior is 31.
Long Statement,Jil.Common,EnumValues,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\EnumValues.cs,TryParse,The length of the statement  "	var specific = typeof(EnumValues<>).MakeGenericType (enumType).GetMethod ("TryParse"' BindingFlags.Public | BindingFlags.Static); " is 129.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,ShouldConvertEnum,The length of the statement  "	if (!GetEnumUnderlyingPrimitiveInfo (primitiveType' out underlyingSigned' out underlyingSize) || !GetEnumUnderlyingPrimitiveInfo (primitiveType' out targetSigned' out targetSize)) { " is 181.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,ShouldConvertEnum,The length of the statement  "		throw new ConstructionException ("Cannot map enum [" + enumType + "] with underlying type [" + primitiveType + "] to [" + convert + "]' convert is not an acceptable integer primitive type"); " is 190.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,ShouldConvertEnum,The length of the statement  "		throw new ConstructionException ("Cannot map enum [" + enumType + "] with underlying type [" + primitiveType + "] to [" + convert + "]' there is a signed/unsigned mismatch"); " is 174.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,ShouldConvertEnum,The length of the statement  "		throw new ConstructionException ("Cannot map enum [" + enumType + "] with underlying type [" + primitiveType + "] to [" + convert + "]' target type is not large enough"); " is 170.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,IsLoadArgumentOpCode,The length of the statement  "	return op == OpCodes.Ldarg || op == OpCodes.Ldarg_0 || op == OpCodes.Ldarg_1 || op == OpCodes.Ldarg_2 || op == OpCodes.Ldarg_3 || op == OpCodes.Ldarg_S; " is 152.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,IsAnonymouseClass,The length of the statement  "	var compilerGenerated = type.GetTypeInfo ().CustomAttributes.Any (a => a.AttributeType == typeof(CompilerGeneratedAttribute)); " is 126.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,IsConstant,The length of the statement  "	var numberOfConstants = instrs.Count (a => ConstantLoadOpCodes.Contains (a.Item1) || a.Item2.HasValue || a.Item3.HasValue || a.Item4.HasValue); " is 143.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The length of the statement  "	var constInstr = instrs.Single (o => ConstantLoadOpCodes.Contains (o.Item1) || o.Item2.HasValue || o.Item3.HasValue || o.Item4.HasValue); " is 137.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,IsPropagatableType,The length of the statement  "	return t == typeof(string) || t == typeof(char) || t == typeof(float) || t == typeof(double) || t == typeof(byte) || t == typeof(sbyte) || t == typeof(short) || t == typeof(ushort) || t == typeof(int) || t == typeof(uint) || t == typeof(long) || t == typeof(ulong) || t == typeof(bool) || t.IsEnum (); " is 301.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,ShouldSerializeMethod,The length of the statement  "	var ret = serializingType.GetMethods (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).Where (m => m.Name == mtdName && m.ReturnType == typeof(bool) && m.GetParameters ().Length == 0).SingleOrDefault (); " is 224.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,IsContainerType,The length of the statement  "		return (t.IsGenericType () && t.GetGenericTypeDefinition () == containerType) || t.GetInterfaces ().Any (i => i.IsGenericType () && i.GetGenericTypeDefinition () == containerType); " is 180.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetContainerInterface,The length of the statement  "	return (t.IsGenericType () && t.GetGenericTypeDefinition () == containerType) ? t : t.GetInterfaces ().First (i => i.IsGenericType () && i.GetGenericTypeDefinition () == containerType); " is 185.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,IsPrimitiveType,The length of the statement  "	return t == typeof(string) || t == typeof(char) || t == typeof(float) || t == typeof(double) || t == typeof(decimal) || t == typeof(byte) || t == typeof(sbyte) || t == typeof(short) || t == typeof(ushort) || t == typeof(int) || t == typeof(uint) || t == typeof(long) || t == typeof(ulong) || t == typeof(bool) || t == typeof(DateTime) || t == typeof(DateTimeOffset) || t == typeof(Guid) || t == typeof(TimeSpan); " is 412.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetPrimitiveWrapperPropertyOrField,The length of the statement  "		throw new ConstructionException ("Primitive wrappers can only have 1 declared primitive member' found " + candidateCount + " for " + primitiveWrapperType.Name); " is 160.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,IsIntegerNumberType,The length of the statement  "	return t == typeof(byte) || t == typeof(sbyte) || t == typeof(short) || t == typeof(ushort) || t == typeof(int) || t == typeof(uint) || t == typeof(long) || t == typeof(ulong); " is 176.
Long Statement,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,InvolvedTypes,The length of the statement  "		cur.GetProperties ().Where (p => p.GetMethod != null && p.GetMethod.GetParameters ().Length == 0).ForEach (p => pending.Push (p.PropertyType)); " is 143.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The length of the statement  "	var simpleTypes = members.Where (m => m.First ().ReturnType ().IsValueType () && !m.First ().ReturnType ().IsNullableType () && m.First ().ReturnType ().IsPrimitiveType ()).ToList (); " is 183.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The length of the statement  "	var otherPrimitive = members.Where (m => (m.First ().ReturnType ().IsPrimitiveType () || m.First ().ReturnType ().IsNullableType ()) && !simpleTypes.Contains (m)).ToList (); " is 173.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The length of the statement  "	var recursive = members.Where (m => recursiveTypes.Contains (m.First ().ReturnType ()) && !simpleTypes.Contains (m) && !otherPrimitive.Contains (m)).ToList (); " is 159.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The length of the statement  "	var everythingElse = members.Where (m => !simpleTypes.Contains (m) && !otherPrimitive.Contains (m) && !recursive.Contains (m)).ToList (); " is 137.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The length of the statement  "			ret.AddRange (asc ? simpleTypes.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : simpleTypes.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst)); " is 157.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The length of the statement  "			ret.AddRange (asc ? otherPrimitive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : otherPrimitive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst)); " is 163.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The length of the statement  "			ret.AddRange (asc ? everythingElse.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : everythingElse.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst)); " is 163.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The length of the statement  "			ret.AddRange (asc ? recursive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : recursive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst)); " is 153.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,PropertyFieldUsage,The length of the statement  "	var props = t.GetProperties (BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic).Where (p => p.GetMethod != null && p.GetMethod.GetParameters ().Count () == 0); " is 178.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadOp,The length of the statement  "	fieldHandle = _ReadFieldOperands (opcode' cil' ix' ix + advance' ref advance' out intOperand' out longOperand' out doubleOperand); " is 130.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,FieldOffsetsInMemory,The length of the statement  "		var cons = t.GetConstructors (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).OrderBy (p => p.GetParameters ().Count ()).FirstOrDefault (); " is 161.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,FieldOffsetsInMemory,The length of the statement  "		var consParameters = cons != null ? cons.GetParameters ().Select (p => p.ParameterType.DefaultValue ()).ToArray () : null; " is 122.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Guess,The length of the statement  "		throw new ConstructionException ("Due to a limitation in .netcore - could not guess property <-> parameter mapping necessary to deserialize an anonymous type"); " is 160.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Decompile,The length of the statement  "	var nameToTypeAndConsIndex = propertyToBackingField.ToDictionary (d => d.Key.Name' d => Tuple.Create (d.Key.PropertyType' fieldToArgumentIndex [d.Value] - 1)// -1 here because `this` adds 1 in the IL " is 199.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,FindRecursiveTypes,The length of the statement  "		foreach (var prop in curType.GetProperties (BindingFlags.Instance | BindingFlags.Public).Where (p => p.GetMethod != null)) { " is 124.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,FindReusedTypes,The length of the statement  "		foreach (var prop in curType.GetProperties (BindingFlags.Instance | BindingFlags.Public).Where (p => p.GetMethod != null)) { " is 124.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,FindReusedTypes,The length of the statement  "	r.IsEnum () || r.IsNullableType () || r.IsListType () || r.IsDictionaryType () || r.IsReadOnlyListType () || r.IsReadOnlyDictionaryType () || r.IsEnumerableType () || r.IsCollectionType ())).ToList (); " is 201.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,CheckUnionLegality,The length of the statement  "			errorMessage = "Member [" + member.Name + "] isn't marked as part of a union' but other members share the same Name [" + memberName + "]"; " is 138.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,CheckUnionLegality,The length of the statement  "				errorMessage = "Member [" + member.Name + "] has IsUnionType set' but IsUnionType is also set for [" + destinationType.Name + "]"; " is 130.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,CheckUnionLegality,The length of the statement  "	var ambiguousCharsToMembers = charsToMembers.Where (kv => kv.Value.Count > 1).ToDictionary (kv => kv.Key' kv => new MemberGroup (kv.Value)); " is 140.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,CheckUnionLegality,The length of the statement  "		var conflicts = ambiguousCharsToMembers.GroupBy (kv => kv.Value).Select (g => Tuple.Create (g.Select (kv => kv.Key).Distinct ().OrderBy (_ => _).ToList ()' g.Key.Members)).ToList (); " is 182.
Long Statement,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,CheckUnionLegality,The length of the statement  "		errorMessage = string.Join ("; "' conflicts.Select (t => "The members  [" + string.Join ("' "' t.Item2.Select (m => m.Name)) + "] cannot be distiguished in a union because they can each start with these characters [" + string.Join ("' "' t.Item1) + "]").OrderBy (_ => _)); " is 272.
Long Statement,Jil,Options,F:\newReposMay17\kevin-montrose_Jil\Jil\Options.cs,ToString,The length of the statement  "	return string.Format ("{{ ShouldPrettyPrint = {0}' ShouldExcludeNulls = {1}' UseDateTimeFormat = {2}' IsJSONP = {3}' ShouldIncludeInherited = {4}' UseUnspecifiedDateTimeKindBehavior = {5}' SerializationNameFormat = {6} }}"' ShouldPrettyPrint' ShouldExcludeNulls' UseDateTimeFormat' IsJSONP' ShouldIncludeInherited' UseUnspecifiedDateTimeKindBehavior' SerializationNameFormat); " is 376.
Long Statement,Jil,Options,F:\newReposMay17\kevin-montrose_Jil\Jil\Options.cs,GetHashCode,The length of the statement  "	return (ShouldPrettyPrint ? 0x1 : 0x0) | (ShouldExcludeNulls ? 0x2 : 0x0) | (IsJSONP ? 0x4 : 0x0) | (ShouldIncludeInherited ? 0x8 : 0x0) | dateTimeMask | serializationNameMask | unspecifiedMask; " is 194.
Long Statement,Jil,Options,F:\newReposMay17\kevin-montrose_Jil\Jil\Options.cs,Equals,The length of the statement  "	return other.UseDateTimeFormat == this.UseDateTimeFormat && other.ShouldPrettyPrint == this.ShouldPrettyPrint && other.ShouldExcludeNulls == this.ShouldExcludeNulls && other.IsJSONP == this.IsJSONP && other.ShouldIncludeInherited == this.ShouldIncludeInherited && other.UseUnspecifiedDateTimeKindBehavior == this.UseUnspecifiedDateTimeKindBehavior && other.SerializationNameFormat == this.SerializationNameFormat; " is 413.
Long Statement,Jil.DeserializeDynamic,DynamicDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,_DeserializeMember,The length of the statement  "	throw new DeserializationException ("Expected \"' [' {' n' t' f' -' 0' 1' 2' 3' 4' 5' 6' 7' 8' or 9; found " + (char)c' reader' false); " is 135.
Long Statement,Jil.DeserializeDynamic,DynamicDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,_DeserializeMemberThunkReader,The length of the statement  "	throw new DeserializationException ("Expected \"' [' {' n' t' f' -' 0' 1' 2' 3' 4' 5' 6' 7' 8' or 9; found " + (char)c' ref reader' false); " is 139.
Long Statement,Jil.DeserializeDynamic,DynamicDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeStringThunkReader,The length of the statement  "	var str = Methods.ReadEncodedStringWithBufferThunkReader (ref reader' builder.CommonCharBuffer' ref builder.CommonStringBuffer); " is 128.
Long Statement,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTime,The length of the statement  "	if (!_ParseISO8601TimeZoneOffset (str' zPlusOrMinus.Value + 1' ix' ref hasSeparators' out unknownLocalOffset' out timezoneOffset)) { " is 132.
Long Statement,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTimeOffset,The length of the statement  "	if (!_ParseISO8601TimeZoneOffset (str' zPlusOrMinus.Value + 1' ix' ref hasSeparators' out unknownLocalOffset' out timezoneOffset)) { " is 132.
Long Statement,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateWithOffset,The length of the statement  "	if (!_ParseISO8601TimeZoneOffset (str' zPlusOrMinus.Value + 1' ix' ref hasSeparators' out unknownLocalOffset' out timezoneOffset)) { " is 132.
Long Statement,Jil.Deserialize,AnonymousTypeLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\AnonymousTypeLookup.cs,CreateFindMember,The length of the statement  "	var nameToResults = names.Select ((name' index) => NameAutomata<int>.CreateName (typeof(TextReader)' name' emit => emit.LoadConstant (index))).ToList (); " is 153.
Long Statement,Jil.Deserialize,AnonymousTypeLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\AnonymousTypeLookup.cs,CreateFindMemberThunkReader,The length of the statement  "	var nameToResults = names.Select ((name' index) => NameAutomata<int>.CreateName (typeof(ThunkReader).MakeByRefType ()' name' emit => emit.LoadConstant (index))).ToList (); " is 171.
Long Statement,Jil.Deserialize,AnonymousTypeLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\AnonymousTypeLookup.cs,CreateFindMemberThunkReader,The length of the statement  "	var ret = NameAutomata<int>.Create<AnonymousTypeLookupThunkReaderDelegate> (typeof(ThunkReader).MakeByRefType ()' nameToResults' true' defaultValue: -1); " is 153.
Long Statement,Jil.Deserialize,DeserializeIndirect,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\DeserializeIndirect.cs,DeserializeFromStream,The length of the statement  "				DeserializeFromStreamIndirectCache [type] = cached = emit.CreateDelegate<Func<TextReader' Options' object>> (Utils.DelegateOptimizationOptions); " is 144.
Long Statement,Jil.Deserialize,DeserializeIndirect,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\DeserializeIndirect.cs,DeserializeFromString,The length of the statement  "				DeserializeFromStringIndirectCache [type] = cached = emit.CreateDelegate<Func<string' Options' object>> (Utils.DelegateOptimizationOptions); " is 140.
Long Statement,Jil.Deserialize,EnumLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\EnumLookup.cs,CreateFindEnum,The length of the statement  "	var nameToResults = names.Select (name => NameAutomata<EnumType>.CreateName (typeof(TextReader)' name.Item1' emit => LoadConstantOfType (emit' name.Item2' underlyingType))).ToList (); " is 183.
Long Statement,Jil.Deserialize,EnumLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\EnumLookup.cs,CreateFindEnum,The length of the statement  "	var ret = NameAutomata<EnumType>.Create<Func<TextReader' EnumType>> (typeof(TextReader)' nameToResults' false' defaultValue: null); " is 131.
Long Statement,Jil.Deserialize,EnumLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\EnumLookup.cs,CreateFindEnumThunkReader,The length of the statement  "	var nameToResults = names.Select (name => NameAutomata<EnumType>.CreateName (thunkReaderRef' name.Item1' emit => LoadConstantOfType (emit' name.Item2' underlyingType))).ToList (); " is 179.
Long Statement,Jil.Deserialize,EnumLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\EnumLookup.cs,CreateFindEnumThunkReader,The length of the statement  "	var ret = NameAutomata<EnumType>.Create<EnumThunkReaderDelegate<EnumType>> (thunkReaderRef' nameToResults' false' defaultValue: null); " is 134.
Long Statement,Jil.Deserialize,EnumLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\EnumLookup.cs,CreateFindFlagsEnumThunkReader,The length of the statement  "	var ret = NameAutomata<EnumType>.CreateFold<EnumThunkReaderDelegate<EnumType>> (thunkReaderRef' nameToResults' emit => { " is 120.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,AddGlobalVariables,The length of the statement  "	var needsCharBuffer = hasStringyTypes || involvedTypes.Any (t => t.IsNumberType ()) || // we use `ref char[]` for these' so they're kind of stringy " is 147.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,AddGlobalVariables,The length of the statement  "	(involvedTypes.Contains (typeof(DateTime)) && DateFormat == DateTimeFormat.ISO8601) || (involvedTypes.Contains (typeof(TimeSpan)) && (DateFormat == DateTimeFormat.ISO8601 || DateFormat == DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch)); " is 246.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,AddGlobalVariables,The length of the statement  "	var mayNeedStringBuilder = involvedTypes.Contains (typeof(string)) || involvedTypes.Contains (typeof(float)) || involvedTypes.Contains (typeof(double)) || involvedTypes.Contains (typeof(decimal)) || involvedTypes.Any (t => t.IsEnum ()) || involvedTypes.Any (t => t.IsUserDefinedType ()) || (!UseNameAutomataForEnums && involvedTypes.Any (t => t.IsEnum ())); " is 357.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadPrimitiveTypeWrapper,The length of the statement  "			throw new ConstructionException (string.Format ("Primitive wrapper {0} needs a default constructor' or a constructor taking a single {1} parameter"' primitiveTypeWrapper.FullName' wrappedType.FullName)); " is 203.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadEnum,The length of the statement  "			var constr = ReadingFromString ? DeserializationException_Cons_string_ThunkWriter_bool : DeserializationException_Cons_string_TextReader_bool; " is 142.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadEnum,The length of the statement  "			throw new ConstructionException (enumType.FullName + " has no values' and cannot be deserialized; add a value' make nullable' or configure to treat as integer"); " is 161.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadList,The length of the statement  "	var elementType = isSet ? listType.GetSetInterface ().GetGenericArguments () [0] : listType.GetListInterface ().GetGenericArguments () [0]; " is 139.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAndSetDiscriminantUnion,The length of the statement  "	if (!Utils.CheckUnionLegality (DateFormat' memberName' union' out discriminants' out unionTypeIndicator' out charsets' out allowsNull' out errorMessage)) { " is 155.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAndSetDiscriminantUnion,The length of the statement  "	var nullableMembers = discriminants.Where (kv => kv.Value.ReturnType ().IsNullableType ()).Select (kv => kv.Value).ToList (); " is 125.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadObjectDictionaryLookup,The length of the statement  "		var setters = (Dictionary<string' MemberInfo[]>)setterLookup.GetMethod ("GetSetters"' BindingFlags.Public | BindingFlags.Static).Invoke (null' new object[0]); " is 158.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAnonymousObjectDictionaryLookup,The length of the statement  "	var propertyMap = (Dictionary<string' Tuple<Type' int>>)setterLookup.GetField ("ParametersToTypeAndIndex").GetValue (null); " is 123.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAnonymousObjectAutomata,The length of the statement  "	var propertyMap = (Dictionary<string' Tuple<Type' int>>)setterLookup.GetField ("ParametersToTypeAndIndex").GetValue (null); " is 123.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,FindAndPrimeRecursiveOrReusedTypes,The length of the statement  "			loadMtd = typeof(TypeCache<' >).MakeGenericType (OptionsType' primeType).GetMethod ("LoadFromString"' BindingFlags.Public | BindingFlags.Static); " is 145.
Long Statement,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,FindAndPrimeRecursiveOrReusedTypes,The length of the statement  "			loadMtd = typeof(TypeCache<' >).MakeGenericType (OptionsType' primeType).GetMethod ("Load"' BindingFlags.Public | BindingFlags.Static); " is 135.
Long Statement,Jil.Deserialize,InlineDeserializerHelper,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,BuildAlwaysFailsWithFromStream,The length of the statement  "	var stashField = specificTypeCache.GetField ("ExceptionDuringBuildFromStream"' BindingFlags.Static | BindingFlags.Public); " is 122.
Long Statement,Jil.Deserialize,InlineDeserializerHelper,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,BuildAlwaysFailsWithFromString,The length of the statement  "	var stashField = specificTypeCache.GetField ("ExceptionDuringBuildFromString"' BindingFlags.Static | BindingFlags.Public); " is 122.
Long Statement,Jil.Deserialize,InlineDeserializerHelper,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,BuildFromStream,The length of the statement  "	var obj = new InlineDeserializer<ReturnType> (optionsType' dateFormat' serializationNameFormat' readingFromString: false); " is 122.
Long Statement,Jil.Deserialize,InlineDeserializerHelper,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,BuildFromString,The length of the statement  "	var obj = new InlineDeserializer<ReturnType> (optionsType' dateFormat' serializationNameFormat' readingFromString: true); " is 121.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The length of the statement  "		throw new DeserializationException ("RFC1123 DateTime claimed to be [" + (DayOfWeek)dayOfWeek + "]' but really was [" + ret.DayOfWeek + "]"' reader' false); " is 156.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601Date,The length of the statement  "			throw new DeserializationException ("ISO8601 date is too long' expected " + CharBufferSize + " characters or less"' reader' false); " is 131.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601Date,The length of the statement  "		throw new DeserializationException ("ISO8601 date with time and timezone offset could not be represented as a DateTime"' reader' e' false); " is 139.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffset,The length of the statement  "			throw new DeserializationException ("ISO8601 date is too long' expected " + CharBufferSize + " characters or less"' reader' false); " is 131.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffset,The length of the statement  "		throw new DeserializationException ("ISO8601 date with time and timezone offset could not be represented as a DateTime"' reader' e' false); " is 139.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,The length of the statement  "		throw new DeserializationException ("Week part of TimeSpan defined along with one or more of year' month' or day"' reader' false); " is 130.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadDatePart,The length of the statement  "			throw new DeserializationException ("Fractional values are not supported in the year' month' day' or week parts of an ISO8601 TimeSpan"' reader' false); " is 152.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,AssertNotFollowedByDigit,The length of the statement  "		throw new DeserializationException (new OverflowException ("Number did not end when expected' may overflow")' reader' false); " is 125.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,AssertNotFollowedByDigit,The length of the statement  "		throw new DeserializationException (new OverflowException ("Number did not end when expected' may overflow")' ref reader' false); " is 129.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The length of the statement  "			throw new DeserializationException ("ISO8601 date is too long' expected " + CharBufferSize + " characters or less"' ref reader' false); " is 135.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The length of the statement  "			throw new DeserializationException ("ISO8601 date with time could not be represented as a DateTime"' ref reader' e' false); " is 123.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The length of the statement  "	var timezoneOffset = ParseISO8601TimeZoneOffsetThunkReader (ref reader' buffer' zPlusOrMinus.Value + 1' ix' out unknownLocalOffset); " is 132.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The length of the statement  "		throw new DeserializationException ("ISO8601 date with time and timezone offset could not be represented as a DateTime"' ref reader' e' false); " is 143.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The length of the statement  "		throw new DeserializationException ("RFC1123 DateTime claimed to be [" + (DayOfWeek)dayOfWeek + "]' but really was [" + ret.DayOfWeek + "]"' ref reader' false); " is 160.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The length of the statement  "			throw new DeserializationException ("ISO8601 date is too long' expected " + CharBufferSize + " characters or less"' ref reader' false); " is 135.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The length of the statement  "			throw new DeserializationException ("ISO8601 date with time could not be represented as a DateTime"' ref reader' e' false); " is 123.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The length of the statement  "	var timezoneOffset = ParseISO8601TimeZoneOffsetThunkReader (ref reader' buffer' zPlusOrMinus.Value + 1' ix' out unknownLocalOffset); " is 132.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The length of the statement  "		throw new DeserializationException ("ISO8601 date with time and timezone offset could not be represented as a DateTime"' ref reader' e' false); " is 143.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The length of the statement  "	var hasTimePart = ISO8601TimeSpan_ReadDatePartThunkReader (ref reader' str' len' ref ix' out year' out month' out week' out day); " is 129.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The length of the statement  "		throw new DeserializationException ("Week part of TimeSpan defined along with one or more of year' month' or day"' ref reader' false); " is 134.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The length of the statement  "		throw new DeserializationException ("TimeSpans with a week defined cannot also have a time defined"' ref reader' false); " is 120.
Long Statement,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadDatePartThunkReader,The length of the statement  "			throw new DeserializationException ("Fractional values are not supported in the year' month' day' or week parts of an ISO8601 TimeSpan"' ref reader' false); " is 156.
Long Statement,Jil.Deserialize,NameAutomata,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,NextChar,The length of the statement  "				throw new ConstructionException ("Couldn't build parsing automata' found duplicate terminals for " + string.Join ("' "' charGroup.Select (c => c.Name))); " is 153.
Long Statement,Jil.Deserialize,SetterLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\SetterLookup.cs,GetOrderedSetters,The length of the statement  "	var ret = setters.Select (kv => Tuple.Create (kv.Key' kv.Value.ToArray ())).OrderBy (t => t.Item1).ToList ().AsReadOnly (); " is 123.
Long Statement,Jil.Deserialize,SetterLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\SetterLookup.cs,CreateFindMember,The length of the statement  "	var nameToResults = names.Select ((name' index) => NameAutomata<int>.CreateName (typeof(TextReader)' name' emit => emit.LoadConstant (index))).ToList (); " is 153.
Long Statement,Jil.Deserialize,SetterLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\SetterLookup.cs,CreateFindMemberThunkReader,The length of the statement  "	var nameToResults = names.Select ((name' index) => NameAutomata<int>.CreateName (typeof(ThunkReader).MakeByRefType ()' name' emit => emit.LoadConstant (index))).ToList (); " is 171.
Long Statement,Jil.Deserialize,SetterLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\SetterLookup.cs,CreateFindMemberThunkReader,The length of the statement  "	var ret = NameAutomata<int>.Create<SetterLookupThunkReaderDelegate> (typeof(ThunkReader).MakeByRefType ()' nameToResults' true' defaultValue: -1); " is 146.
Long Statement,Jil.Deserialize,TypeCache,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\TypeCaches.cs,Load,The length of the statement  "		Thunk = InlineDeserializerHelper.BuildFromStream<T> (typeof(TOptions)' options.DateFormat' options.SerializationNameFormat' exceptionDuringBuild: out ExceptionDuringBuildFromStream); " is 182.
Long Statement,Jil.Deserialize,TypeCache,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\TypeCaches.cs,LoadFromString,The length of the statement  "		StringThunk = InlineDeserializerHelper.BuildFromString<T> (typeof(TOptions)' options.DateFormat' options.SerializationNameFormat' exceptionDuringBuild: out ExceptionDuringBuildFromString); " is 188.
Long Statement,Jil.Deserialize,UnionConfigLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\UnionLookup.cs,Get,The length of the statement  "		var newType = ModBuilder.DefineType (ucs.ToString () + "_" + allowsNull' TypeAttributes.NotPublic | TypeAttributes.Class' typeof(UnionLookupConfigBase)); " is 153.
Long Statement,Jil.Deserialize,UnionConfigLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\UnionLookup.cs,Get,The length of the statement  "		var field = newType.DefineField ("_Charsets"' typeof(UnionCharsets)' FieldAttributes.Private | FieldAttributes.InitOnly); " is 121.
Long Statement,Jil.Deserialize,UnionConfigLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\UnionLookup.cs,Get,The length of the statement  "		var gcEmit = Emit<Func<UnionCharsets>>.BuildInstanceMethod (newType' "getCharsets"' MethodAttributes.Public | MethodAttributes.Virtual' doVerify: Utils.DoVerify); " is 162.
Long Statement,Jil.Deserialize,UnionConfigLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\UnionLookup.cs,Get,The length of the statement  "		var aeEmit = Emit<Func<bool>>.BuildInstanceMethod (newType' "getAllowsNull"' MethodAttributes.Public | MethodAttributes.Virtual' doVerify: Utils.DoVerify); " is 155.
Long Statement,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,_GetSemiStaticInlineSerializerFor,The length of the statement  "		GetSemiStaticInlineSerializerForCache [key] = ret = (Action<TextWriter' ForType' int>)builder.Invoke (null' new object[] { " is 122.
Long Statement,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,GetSemiStaticSerializerFor,The length of the statement  "		GetSemiStaticSerializerForCache [key] = ret = emit.CreateDelegate<Action<MemberInfo' TextWriter' object' int>> (optimizationOptions: Utils.DelegateOptimizationOptions); " is 168.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' Serialize.MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase> (opts); " is 168.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintExcludeNullsJSONP' Serialize.MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase> (opts); " is 150.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintExcludeNullsInherited' Serialize.MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase> (opts); " is 158.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintJSONPInherited' Serialize.MicrosoftStylePrettyPrintJSONPInheritedCamelCase> (opts); " is 144.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MicrosoftStyleExcludeNullsJSONPInherited' Serialize.MicrosoftStyleExcludeNullsJSONPInheritedCamelCase> (opts); " is 146.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintExcludeNulls' Serialize.MicrosoftStylePrettyPrintExcludeNullsCamelCase> (opts); " is 140.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintJSONP' Serialize.MicrosoftStylePrettyPrintJSONPCamelCase> (opts); " is 126.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintInherited' Serialize.MicrosoftStylePrettyPrintInheritedCamelCase> (opts); " is 134.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MicrosoftStyleExcludeNullsJSONP' Serialize.MicrosoftStyleExcludeNullsJSONPCamelCase> (opts); " is 128.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MicrosoftStyleExcludeNullsInherited' Serialize.MicrosoftStyleExcludeNullsInheritedCamelCase> (opts); " is 136.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MicrosoftStyleJSONPInherited' Serialize.MicrosoftStyleJSONPInheritedCamelCase> (opts); " is 122.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.SecondsPrettyPrintExcludeNullsJSONPInherited' Serialize.SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase> (opts); " is 154.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.SecondsPrettyPrintExcludeNullsJSONP' Serialize.SecondsPrettyPrintExcludeNullsJSONPCamelCase> (opts); " is 136.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.SecondsPrettyPrintExcludeNullsInherited' Serialize.SecondsPrettyPrintExcludeNullsInheritedCamelCase> (opts); " is 144.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.SecondsPrettyPrintJSONPInherited' Serialize.SecondsPrettyPrintJSONPInheritedCamelCase> (opts); " is 130.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.SecondsExcludeNullsJSONPInherited' Serialize.SecondsExcludeNullsJSONPInheritedCamelCase> (opts); " is 132.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.SecondsPrettyPrintExcludeNulls' Serialize.SecondsPrettyPrintExcludeNullsCamelCase> (opts); " is 126.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.SecondsPrettyPrintInherited' Serialize.SecondsPrettyPrintInheritedCamelCase> (opts); " is 120.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.SecondsExcludeNullsInherited' Serialize.SecondsExcludeNullsInheritedCamelCase> (opts); " is 122.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.RFC1123PrettyPrintExcludeNullsJSONPInherited' Serialize.RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase> (opts); " is 154.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.RFC1123PrettyPrintExcludeNullsJSONP' Serialize.RFC1123PrettyPrintExcludeNullsJSONPCamelCase> (opts); " is 136.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.RFC1123PrettyPrintExcludeNullsInherited' Serialize.RFC1123PrettyPrintExcludeNullsInheritedCamelCase> (opts); " is 144.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.RFC1123PrettyPrintJSONPInherited' Serialize.RFC1123PrettyPrintJSONPInheritedCamelCase> (opts); " is 130.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.RFC1123ExcludeNullsJSONPInherited' Serialize.RFC1123ExcludeNullsJSONPInheritedCamelCase> (opts); " is 132.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.RFC1123PrettyPrintExcludeNulls' Serialize.RFC1123PrettyPrintExcludeNullsCamelCase> (opts); " is 126.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.RFC1123PrettyPrintInherited' Serialize.RFC1123PrettyPrintInheritedCamelCase> (opts); " is 120.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.RFC1123ExcludeNullsInherited' Serialize.RFC1123ExcludeNullsInheritedCamelCase> (opts); " is 122.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintExcludeNullsJSONPInherited' Serialize.MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase> (opts); " is 164.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintExcludeNullsJSONP' Serialize.MillisecondsPrettyPrintExcludeNullsJSONPCamelCase> (opts); " is 146.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintExcludeNullsInherited' Serialize.MillisecondsPrettyPrintExcludeNullsInheritedCamelCase> (opts); " is 154.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintJSONPInherited' Serialize.MillisecondsPrettyPrintJSONPInheritedCamelCase> (opts); " is 140.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MillisecondsExcludeNullsJSONPInherited' Serialize.MillisecondsExcludeNullsJSONPInheritedCamelCase> (opts); " is 142.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintExcludeNulls' Serialize.MillisecondsPrettyPrintExcludeNullsCamelCase> (opts); " is 136.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintJSONP' Serialize.MillisecondsPrettyPrintJSONPCamelCase> (opts); " is 122.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintInherited' Serialize.MillisecondsPrettyPrintInheritedCamelCase> (opts); " is 130.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MillisecondsExcludeNullsJSONP' Serialize.MillisecondsExcludeNullsJSONPCamelCase> (opts); " is 124.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.MillisecondsExcludeNullsInherited' Serialize.MillisecondsExcludeNullsInheritedCamelCase> (opts); " is 132.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.ISO8601PrettyPrintExcludeNullsJSONPInherited' Serialize.ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase> (opts); " is 154.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.ISO8601PrettyPrintExcludeNullsJSONP' Serialize.ISO8601PrettyPrintExcludeNullsJSONPCamelCase> (opts); " is 136.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.ISO8601PrettyPrintExcludeNullsInherited' Serialize.ISO8601PrettyPrintExcludeNullsInheritedCamelCase> (opts); " is 144.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.ISO8601PrettyPrintJSONPInherited' Serialize.ISO8601PrettyPrintJSONPInheritedCamelCase> (opts); " is 130.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.ISO8601ExcludeNullsJSONPInherited' Serialize.ISO8601ExcludeNullsJSONPInheritedCamelCase> (opts); " is 132.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.ISO8601PrettyPrintExcludeNulls' Serialize.ISO8601PrettyPrintExcludeNullsCamelCase> (opts); " is 126.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.ISO8601PrettyPrintInherited' Serialize.ISO8601PrettyPrintInheritedCamelCase> (opts); " is 120.
Long Statement,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "		return SwitchOnNameFormat<Serialize.ISO8601ExcludeNullsInherited' Serialize.ISO8601ExcludeNullsInheritedCamelCase> (opts); " is 122.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,GroupAndVerifyUnions,The length of the statement  "		if (!Utils.CheckUnionLegality (DateFormat' kv.Key' kv.Value' out ignored1' out ignored2' out ignored3' out ignored4' out errorMessage)) { " is 137.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The length of the statement  "		throw new ConstructionException ("Encountered a serializable member that is neither a field nor a property: " + member); " is 120.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The length of the statement  "	if (serializingType.IsListType () || serializingType.IsDictionaryType () || serializingType.IsReadOnlyListType () || serializingType.IsReadOnlyDictionaryType ()) { " is 163.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The length of the statement  "	var preloadTextWriter = serializingType.IsPrimitiveType () || (serializingType.IsEnum () && member.ShouldConvertEnum (serializingType)) || isRecursive || serializingType.IsNullableType () || serializingType.IsPrimitiveWrapper (); " is 229.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The length of the statement  "		WriteEnumOrPrimitive (member' serializingType' requiresQuotes: false' hasTextWriter: true' popTextWriter: false' containedInNullable: false); " is 141.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteNullable,The length of the statement  "			WriteEnumOrPrimitive (nullableMember' underlyingType' requiresQuotes: false' hasTextWriter: true' popTextWriter: true' containedInNullable: true); " is 146.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDateTimeOffset,The length of the statement  "	if (DateFormat == DateTimeFormat.SecondsSinceUnixEpoch || DateFormat == DateTimeFormat.MillisecondsSinceUnixEpoch || DateFormat == DateTimeFormat.RFC1123) { " is 156.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDateTime,The length of the statement  "		var convertToKind = UnspecifiedDateTimeBehavior == UnspecifiedDateTimeKindBehavior.IsLocal ? DateTimeKind.Local : DateTimeKind.Utc; " is 131.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WritePrimitive,The length of the statement  "	var needsIntCoercion = primitiveType == typeof(byte) || primitiveType == typeof(sbyte) || primitiveType == typeof(short) || primitiveType == typeof(ushort); " is 156.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WritePrimitive,The length of the statement  "	var isIntegerType = primitiveType == typeof(int) || primitiveType == typeof(uint) || primitiveType == typeof(long) || primitiveType == typeof(ulong); " is 149.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEncodedChar,The length of the statement  "	var needLabels = CharacterEscapes.OrderBy (kv => kv.Key).Select (kv => Tuple.Create (kv.Key - lowestCharNeedingEncoding' kv.Value)).ToList (); " is 142.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteObjectWithNulls,The length of the statement  "	var hasConditionalSerialization = writeOrder.SelectMany (wo => wo).OfType<PropertyInfo> ().Any (p => p.ShouldSerializeMethod (forType) != null); " is 144.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteObject,The length of the statement  "			throw new ConstructionException ("Internal type tracking in unexpected state' found [" + finished + "] expected [" + forType + "]"); " is 132.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMembersConditionally,The length of the statement  "	WriteMemberDelegate write = (Type t' MemberInfo m' Sigil.Local iL' Sigil.Local iF' ref bool? _) => WriteMemberConditionally (t' m' iL' iF); " is 139.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,_CreateUnexpectedTypeException,The length of the statement  "	return new SerializerException ("Unexpected type provided during union serialization [" + observedType.Name + "]' expected one of " + oneOf); " is 141.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMembersIfNotNull,The length of the statement  "	WriteMemberDelegate write = (Type t' MemberInfo m' Sigil.Local iL' Sigil.Local iF' ref bool? _) => WriteMemberIfNonNull (t' m' iL' iF); " is 135.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMemberIfNonNull,The length of the statement  "		throw new ConstructionException ("Encountered a serializable member that is neither a field nor a property: " + member); " is 120.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMemberConditionally,The length of the statement  "		throw new ConstructionException ("Encountered a serializable member that is neither a field nor a property: " + member); " is 120.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteListFast,The length of the statement  "	var collectionInterface = listType.IsCollectionType () ? listType.GetCollectionInterface () : listType.GetReadOnlyCollectionInterface (); " is 137.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteListFast,The length of the statement  "	var preloadTextWriter = elementType.IsPrimitiveType () || elementType.IsPrimitiveWrapper () || (listMember != null && elementType.IsEnum () && listMember.ShouldConvertEnum (elementType)) || isRecursive || elementType.IsNullableType (); " is 235.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteArrayFast,The length of the statement  "	var preloadTextWriter = elementType.IsPrimitiveType () || (arrayMember != null && elementType.IsEnum () && arrayMember.ShouldConvertEnum (elementType)) || isRecursive || elementType.IsNullableType (); " is 200.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEnumerable,The length of the statement  "	var preloadTextWriter = elementType.IsPrimitiveType () || (enumerableMember != null && elementType.IsEnum () && enumerableMember.ShouldConvertEnum (elementType)) || isRecursive || elementType.IsNullableType (); " is 210.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteElement,The length of the statement  "		WriteEnumOrPrimitive (listMember' elementType' requiresQuotes: false' hasTextWriter: true' popTextWriter: false' containedInNullable: false); " is 141.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,DynamicCallOutCheck,The length of the statement  "		var equivalentOptions = new Options (this.PrettyPrint' this.ExcludeNulls' this.JSONP' this.DateFormat' this.IncludeInherited' this.UnspecifiedDateTimeBehavior' this.SerializationNameFormat); " is 190.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDictionaryWithoutNulls,The length of the statement  "	var dictI = dictType.IsDictionaryType () ? dictType.GetDictionaryInterface () : dictType.GetReadOnlyDictionaryInterface (); " is 123.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDictionaryWithoutNulls,The length of the statement  "	var preloadTextWriter = elementType.IsPrimitiveType () || (dictionaryMember != null && elementType.IsEnum () && dictionaryMember.ShouldConvertEnum (elementType)) || isRecursive || elementType.IsNullableType (); " is 210.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDictionaryWithNulls,The length of the statement  "	var dictI = dictType.IsDictionaryType () ? dictType.GetDictionaryInterface () : dictType.GetReadOnlyDictionaryInterface (); " is 123.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDictionaryWithNulls,The length of the statement  "	var preloadTextWriter = elementType.IsPrimitiveType () || elementType.IsPrimitiveWrapper () || (dictionaryMember != null && elementType.IsEnum () && dictionaryMember.ShouldConvertEnum (elementType)) || isRecursive || elementType.IsNullableType (); " is 247.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValueIfNotNull,The length of the statement  "			WriteEnumOrPrimitive (dictionaryMember' keyType' true' hasTextWriter: false' popTextWriter: false' containedInNullable: false); " is 127.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValueIfNotNull,The length of the statement  "		WriteEnumOrPrimitive (dictionaryMember' elementType' requiresQuotes: false' hasTextWriter: true' popTextWriter: false' containedInNullable: false); " is 147.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,GetWriteEncodedStringWithQuotesMethod,The length of the statement  "	return JSONP ? Methods.GetWriteEncodedStringWithQuotesWithNullsInlineJSONPUnsafe (BuildingToString) : Methods.GetWriteEncodedStringWithQuotesWithNullsInlineUnsafe (BuildingToString); " is 182.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,GetWriteEncodedStringMethod,The length of the statement  "	return JSONP ? Methods.GetWriteEncodedStringWithNullsInlineJSONPUnsafe (BuildingToString) : Methods.GetWriteEncodedStringWithNullsInlineUnsafe (BuildingToString); " is 162.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValue,The length of the statement  "			WriteEnumOrPrimitive (dictionaryMember' keyType' requiresQuotes: true' hasTextWriter: false' popTextWriter: false' containedInNullable: false); " is 143.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValue,The length of the statement  "		WriteEnumOrPrimitive (dictionaryMember' elementType' requiresQuotes: false' hasTextWriter: true' popTextWriter: false' containedInNullable: false); " is 147.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEnum,The length of the statement  "			throw new ConstructionException (enumType.FullName + " has no defined values and thus cannot be serialized; define values' make nullable' or configure to treat as integer"); " is 173.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,FindAndPrimeRecursiveOrReusedTypes,The length of the statement  "			loadMtd = typeof(TypeCache<' >).MakeGenericType (RecursionLookupOptionsType' primeType).GetMethod ("LoadToString"' BindingFlags.Public | BindingFlags.Static); " is 158.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,FindAndPrimeRecursiveOrReusedTypes,The length of the statement  "			loadMtd = typeof(TypeCache<' >).MakeGenericType (RecursionLookupOptionsType' primeType).GetMethod ("Load"' BindingFlags.Public | BindingFlags.Static); " is 150.
Long Statement,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildEnumWithNewImpl,The length of the statement  "		WriteEnumOrPrimitive (dynamicMember' typeof(ForType)' requiresQuotes: false' hasTextWriter: true' popTextWriter: false' containedInNullable: false); " is 148.
Long Statement,Jil.Serialize,InlineSerializerHelper,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildAlwaysFailsWithToString,The length of the statement  "	var stashField = specificTypeCache.GetField ("StringThunkExceptionDuringBuild"' BindingFlags.Static | BindingFlags.Public); " is 123.
Long Statement,Jil.Serialize,InlineSerializerHelper,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,Build,The length of the statement  "		var obj = new InlineSerializer<BuildForType> (optionsType' pretty' excludeNulls' jsonp' dateFormat' includeInherited' dateTimeBehavior' serializationNameFormat' false' false); " is 175.
Long Statement,Jil.Serialize,InlineSerializerHelper,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,_BuildWithDynamism,The length of the statement  "	var obj = new InlineSerializer<BuildForType> (optionsType' pretty' excludeNulls' jsonp' dateFormat' includeInherited' dateTimeBehavior' serializationNameFormat' true' false); " is 174.
Long Statement,Jil.Serialize,InlineSerializerHelper,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildToString,The length of the statement  "		var obj = new InlineSerializer<BuildForType> (optionsType' pretty' excludeNulls' jsonp' dateFormat' includeInherited' dateTimeBehavior' serializationNameFormat' false' true); " is 174.
Long Statement,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,GetWriteEncodedStringWithQuotesWithNullsInlineJSONPUnsafe,The length of the statement  "	return !needThunkWriter ? WriteEncodedStringWithQuotesWithNullsInlineJSONPUnsafe : WriteEncodedStringWithQuotesWithNullsInlineJSONPUnsafe_ThunkWriter; " is 150.
Long Statement,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,GetWriteEncodedStringWithQuotesWithNullsInlineUnsafe,The length of the statement  "	return !needThunkWriter ? WriteEncodedStringWithQuotesWithNullsInlineUnsafe : WriteEncodedStringWithQuotesWithNullsInlineUnsafe_ThunkWriter; " is 140.
Long Statement,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,GetWriteEncodedStringWithNullsInlineJSONPUnsafe,The length of the statement  "	return !needThunkWriter ? WriteEncodedStringWithNullsInlineJSONPUnsafe : WriteEncodedStringWithNullsInlineJSONPUnsafe_ThunkWriter; " is 130.
Long Statement,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,GetWriteEncodedStringWithNullsInlineUnsafe,The length of the statement  "	return !needThunkWriter ? WriteEncodedStringWithNullsInlineUnsafe : WriteEncodedStringWithNullsInlineUnsafe_ThunkWriter; " is 120.
Long Statement,Jil.Serialize,TypeCache,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\TypeCaches.cs,Load,The length of the statement  "		Thunk = InlineSerializerHelper.Build<T> (typeof(TOptions)' pretty: opts.PrettyPrint' excludeNulls: opts.ExcludeNulls' dateFormat: opts.DateFormat' jsonp: opts.JSONP' includeInherited: opts.IncludeInherited' dateTimeBehavior: opts.DateTimeKindBehavior' serializationNameFormat: opts.SerializationNameFormat' exceptionDuringBuild: out ThunkExceptionDuringBuild); " is 360.
Long Statement,Jil.Serialize,TypeCache,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\TypeCaches.cs,LoadToString,The length of the statement  "		StringThunk = InlineSerializerHelper.BuildToString<T> (typeof(TOptions)' pretty: opts.PrettyPrint' excludeNulls: opts.ExcludeNulls' dateFormat: opts.DateFormat' jsonp: opts.JSONP' includeInherited: opts.IncludeInherited' dateTimeBehavior: opts.DateTimeKindBehavior' serializationNameFormat: opts.SerializationNameFormat' exceptionDuringBuild: out StringThunkExceptionDuringBuild); " is 380.
Complex Conditional,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The conditional expression  "str [0] != '/' || str [1] != 'D' || str [2] != 'a' || str [3] != 't' || str [4] != 'e' || str [5] != '('"  is complex.
Complex Conditional,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The conditional expression  "str [0] != '/' || str [1] != 'D' || str [2] != 'a' || str [3] != 't' || str [4] != 'e' || str [5] != '('"  is complex.
Complex Conditional,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTime,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTimeOffset,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateWithOffset,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601TimeSpan,The conditional expression  "week != -1 && (year != -1 || month != -1 || day != -1)"  is complex.
Complex Conditional,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadDictionary,The conditional expression  "keyIsInteger || (keyIsEnum && dictionaryMember != null && dictionaryMember.ShouldConvertEnum (keyType))"  is complex.
Complex Conditional,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadDictionary,The conditional expression  "keyIsInteger || (keyIsEnum && dictionaryMember != null && dictionaryMember.ShouldConvertEnum (keyType))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The conditional expression  "!((a >= '0' && a <= '9') || (a >= 'A' && a <= 'F') || (a >= 'a' && a <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The conditional expression  "!((b >= '0' && b <= '9') || (b >= 'A' && b <= 'F') || (b >= 'a' && b <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipNumber,The conditional expression  "next == '-' || next == '+' || (next >= '0' && next <= '9')"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601Date,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffset,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,The conditional expression  "week != -1 && (year != -1 || month != -1 || day != -1)"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The conditional expression  "!((a >= '0' && a <= '9') || (a >= 'A' && a <= 'F') || (a >= 'a' && a <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The conditional expression  "!((b >= '0' && b <= '9') || (b >= 'A' && b <= 'F') || (b >= 'a' && b <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipNumberThunkReader,The conditional expression  "next == '-' || next == '+' || (next >= '0' && next <= '9')"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The conditional expression  "week != -1 && (year != -1 || month != -1 || day != -1)"  is complex.
Complex Conditional,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The conditional expression  "opts.ShouldPrettyPrint && opts.ShouldExcludeNulls && opts.IsJSONP && opts.ShouldIncludeInherited"  is complex.
Complex Conditional,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The conditional expression  "opts.ShouldPrettyPrint && opts.ShouldExcludeNulls && opts.IsJSONP && opts.ShouldIncludeInherited"  is complex.
Complex Conditional,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The conditional expression  "opts.ShouldPrettyPrint && opts.ShouldExcludeNulls && opts.IsJSONP && opts.ShouldIncludeInherited"  is complex.
Complex Conditional,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The conditional expression  "opts.ShouldPrettyPrint && opts.ShouldExcludeNulls && opts.IsJSONP && opts.ShouldIncludeInherited"  is complex.
Complex Conditional,Jil.SerializeDynamic,OptionsLookup,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The conditional expression  "opts.ShouldPrettyPrint && opts.ShouldExcludeNulls && opts.IsJSONP && opts.ShouldIncludeInherited"  is complex.
Complex Conditional,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The conditional expression  "serializingType.IsListType () || serializingType.IsDictionaryType () || serializingType.IsReadOnlyListType () || serializingType.IsReadOnlyDictionaryType ()"  is complex.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,PropertyFieldUsage,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil,DeserializationException,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializationException.cs,InspectReader,The method has an empty catch block.
Empty Catch Block,Jil,DeserializationException,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializationException.cs,InspectReader,The method has an empty catch block.
Empty Catch Block,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeBoolDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeIntegerDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeIntegerDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeFloatingPointDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeFloatingPointDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeFloatingPointDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeDateTimeDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeDateTimeOffsetDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeTimeSpanDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeGuidDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeStringDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeStringDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeListAndNotDictionaryDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeListAndNotDictionaryDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeListAndNotDictionaryDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeListAndNotDictionaryDynamic,The method has an empty catch block.
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: if (primitiveType == typeof(short)) {  	signed = true;  	numBytes = 2;  	return true;  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: numBytes = 2;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: if (primitiveType == typeof(ushort)) {  	signed = false;  	numBytes = 2;  	return true;  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: numBytes = 2;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: if (primitiveType == typeof(int)) {  	signed = true;  	numBytes = 4;  	return true;  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: numBytes = 4;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: if (primitiveType == typeof(uint)) {  	signed = false;  	numBytes = 4;  	return true;  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: numBytes = 4;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: if (primitiveType == typeof(long)) {  	signed = true;  	numBytes = 8;  	return true;  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: numBytes = 8;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: if (primitiveType == typeof(ulong)) {  	signed = false;  	numBytes = 8;  	return true;  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: numBytes = 8;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (ConstantLoadOpCodes.Contains (constInstr.Item1)) {  	if (constInstr.Item1 == OpCodes.Ldnull) {  		equivObj = null;  	} else {  		if (constInstr.Item1 == OpCodes.Ldc_I4_0)  			equivObj = 0;  		if (constInstr.Item1 == OpCodes.Ldc_I4_1)  			equivObj = 1;  		if (constInstr.Item1 == OpCodes.Ldc_I4_2)  			equivObj = 2;  		if (constInstr.Item1 == OpCodes.Ldc_I4_3)  			equivObj = 3;  		if (constInstr.Item1 == OpCodes.Ldc_I4_4)  			equivObj = 4;  		if (constInstr.Item1 == OpCodes.Ldc_I4_5)  			equivObj = 5;  		if (constInstr.Item1 == OpCodes.Ldc_I4_6)  			equivObj = 6;  		if (constInstr.Item1 == OpCodes.Ldc_I4_7)  			equivObj = 7;  		if (constInstr.Item1 == OpCodes.Ldc_I4_8)  			equivObj = 8;  		if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  			equivObj = -1;  		if (equivObj == null)  			throw new Exception ("Couldn't determine constant being loaded");  	}  } else {  	if (constInstr.Item1 == OpCodes.Ldstr) {  		var handle = constInstr.Item2.Value;  		equivObj = prop.Module.ResolveString (handle);  	}  	if (constInstr.Item1 == OpCodes.Ldc_R8) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_R4) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4) {  		equivObj = constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4_S) {  		equivObj = (sbyte)constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I8) {  		equivObj = constInstr.Item3.Value;  	}  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (ConstantLoadOpCodes.Contains (constInstr.Item1)) {  	if (constInstr.Item1 == OpCodes.Ldnull) {  		equivObj = null;  	} else {  		if (constInstr.Item1 == OpCodes.Ldc_I4_0)  			equivObj = 0;  		if (constInstr.Item1 == OpCodes.Ldc_I4_1)  			equivObj = 1;  		if (constInstr.Item1 == OpCodes.Ldc_I4_2)  			equivObj = 2;  		if (constInstr.Item1 == OpCodes.Ldc_I4_3)  			equivObj = 3;  		if (constInstr.Item1 == OpCodes.Ldc_I4_4)  			equivObj = 4;  		if (constInstr.Item1 == OpCodes.Ldc_I4_5)  			equivObj = 5;  		if (constInstr.Item1 == OpCodes.Ldc_I4_6)  			equivObj = 6;  		if (constInstr.Item1 == OpCodes.Ldc_I4_7)  			equivObj = 7;  		if (constInstr.Item1 == OpCodes.Ldc_I4_8)  			equivObj = 8;  		if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  			equivObj = -1;  		if (equivObj == null)  			throw new Exception ("Couldn't determine constant being loaded");  	}  } else {  	if (constInstr.Item1 == OpCodes.Ldstr) {  		var handle = constInstr.Item2.Value;  		equivObj = prop.Module.ResolveString (handle);  	}  	if (constInstr.Item1 == OpCodes.Ldc_R8) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_R4) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4) {  		equivObj = constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4_S) {  		equivObj = (sbyte)constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I8) {  		equivObj = constInstr.Item3.Value;  	}  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (ConstantLoadOpCodes.Contains (constInstr.Item1)) {  	if (constInstr.Item1 == OpCodes.Ldnull) {  		equivObj = null;  	} else {  		if (constInstr.Item1 == OpCodes.Ldc_I4_0)  			equivObj = 0;  		if (constInstr.Item1 == OpCodes.Ldc_I4_1)  			equivObj = 1;  		if (constInstr.Item1 == OpCodes.Ldc_I4_2)  			equivObj = 2;  		if (constInstr.Item1 == OpCodes.Ldc_I4_3)  			equivObj = 3;  		if (constInstr.Item1 == OpCodes.Ldc_I4_4)  			equivObj = 4;  		if (constInstr.Item1 == OpCodes.Ldc_I4_5)  			equivObj = 5;  		if (constInstr.Item1 == OpCodes.Ldc_I4_6)  			equivObj = 6;  		if (constInstr.Item1 == OpCodes.Ldc_I4_7)  			equivObj = 7;  		if (constInstr.Item1 == OpCodes.Ldc_I4_8)  			equivObj = 8;  		if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  			equivObj = -1;  		if (equivObj == null)  			throw new Exception ("Couldn't determine constant being loaded");  	}  } else {  	if (constInstr.Item1 == OpCodes.Ldstr) {  		var handle = constInstr.Item2.Value;  		equivObj = prop.Module.ResolveString (handle);  	}  	if (constInstr.Item1 == OpCodes.Ldc_R8) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_R4) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4) {  		equivObj = constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4_S) {  		equivObj = (sbyte)constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I8) {  		equivObj = constInstr.Item3.Value;  	}  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (ConstantLoadOpCodes.Contains (constInstr.Item1)) {  	if (constInstr.Item1 == OpCodes.Ldnull) {  		equivObj = null;  	} else {  		if (constInstr.Item1 == OpCodes.Ldc_I4_0)  			equivObj = 0;  		if (constInstr.Item1 == OpCodes.Ldc_I4_1)  			equivObj = 1;  		if (constInstr.Item1 == OpCodes.Ldc_I4_2)  			equivObj = 2;  		if (constInstr.Item1 == OpCodes.Ldc_I4_3)  			equivObj = 3;  		if (constInstr.Item1 == OpCodes.Ldc_I4_4)  			equivObj = 4;  		if (constInstr.Item1 == OpCodes.Ldc_I4_5)  			equivObj = 5;  		if (constInstr.Item1 == OpCodes.Ldc_I4_6)  			equivObj = 6;  		if (constInstr.Item1 == OpCodes.Ldc_I4_7)  			equivObj = 7;  		if (constInstr.Item1 == OpCodes.Ldc_I4_8)  			equivObj = 8;  		if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  			equivObj = -1;  		if (equivObj == null)  			throw new Exception ("Couldn't determine constant being loaded");  	}  } else {  	if (constInstr.Item1 == OpCodes.Ldstr) {  		var handle = constInstr.Item2.Value;  		equivObj = prop.Module.ResolveString (handle);  	}  	if (constInstr.Item1 == OpCodes.Ldc_R8) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_R4) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4) {  		equivObj = constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4_S) {  		equivObj = (sbyte)constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I8) {  		equivObj = constInstr.Item3.Value;  	}  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (ConstantLoadOpCodes.Contains (constInstr.Item1)) {  	if (constInstr.Item1 == OpCodes.Ldnull) {  		equivObj = null;  	} else {  		if (constInstr.Item1 == OpCodes.Ldc_I4_0)  			equivObj = 0;  		if (constInstr.Item1 == OpCodes.Ldc_I4_1)  			equivObj = 1;  		if (constInstr.Item1 == OpCodes.Ldc_I4_2)  			equivObj = 2;  		if (constInstr.Item1 == OpCodes.Ldc_I4_3)  			equivObj = 3;  		if (constInstr.Item1 == OpCodes.Ldc_I4_4)  			equivObj = 4;  		if (constInstr.Item1 == OpCodes.Ldc_I4_5)  			equivObj = 5;  		if (constInstr.Item1 == OpCodes.Ldc_I4_6)  			equivObj = 6;  		if (constInstr.Item1 == OpCodes.Ldc_I4_7)  			equivObj = 7;  		if (constInstr.Item1 == OpCodes.Ldc_I4_8)  			equivObj = 8;  		if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  			equivObj = -1;  		if (equivObj == null)  			throw new Exception ("Couldn't determine constant being loaded");  	}  } else {  	if (constInstr.Item1 == OpCodes.Ldstr) {  		var handle = constInstr.Item2.Value;  		equivObj = prop.Module.ResolveString (handle);  	}  	if (constInstr.Item1 == OpCodes.Ldc_R8) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_R4) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4) {  		equivObj = constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4_S) {  		equivObj = (sbyte)constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I8) {  		equivObj = constInstr.Item3.Value;  	}  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (ConstantLoadOpCodes.Contains (constInstr.Item1)) {  	if (constInstr.Item1 == OpCodes.Ldnull) {  		equivObj = null;  	} else {  		if (constInstr.Item1 == OpCodes.Ldc_I4_0)  			equivObj = 0;  		if (constInstr.Item1 == OpCodes.Ldc_I4_1)  			equivObj = 1;  		if (constInstr.Item1 == OpCodes.Ldc_I4_2)  			equivObj = 2;  		if (constInstr.Item1 == OpCodes.Ldc_I4_3)  			equivObj = 3;  		if (constInstr.Item1 == OpCodes.Ldc_I4_4)  			equivObj = 4;  		if (constInstr.Item1 == OpCodes.Ldc_I4_5)  			equivObj = 5;  		if (constInstr.Item1 == OpCodes.Ldc_I4_6)  			equivObj = 6;  		if (constInstr.Item1 == OpCodes.Ldc_I4_7)  			equivObj = 7;  		if (constInstr.Item1 == OpCodes.Ldc_I4_8)  			equivObj = 8;  		if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  			equivObj = -1;  		if (equivObj == null)  			throw new Exception ("Couldn't determine constant being loaded");  	}  } else {  	if (constInstr.Item1 == OpCodes.Ldstr) {  		var handle = constInstr.Item2.Value;  		equivObj = prop.Module.ResolveString (handle);  	}  	if (constInstr.Item1 == OpCodes.Ldc_R8) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_R4) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4) {  		equivObj = constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4_S) {  		equivObj = (sbyte)constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I8) {  		equivObj = constInstr.Item3.Value;  	}  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (ConstantLoadOpCodes.Contains (constInstr.Item1)) {  	if (constInstr.Item1 == OpCodes.Ldnull) {  		equivObj = null;  	} else {  		if (constInstr.Item1 == OpCodes.Ldc_I4_0)  			equivObj = 0;  		if (constInstr.Item1 == OpCodes.Ldc_I4_1)  			equivObj = 1;  		if (constInstr.Item1 == OpCodes.Ldc_I4_2)  			equivObj = 2;  		if (constInstr.Item1 == OpCodes.Ldc_I4_3)  			equivObj = 3;  		if (constInstr.Item1 == OpCodes.Ldc_I4_4)  			equivObj = 4;  		if (constInstr.Item1 == OpCodes.Ldc_I4_5)  			equivObj = 5;  		if (constInstr.Item1 == OpCodes.Ldc_I4_6)  			equivObj = 6;  		if (constInstr.Item1 == OpCodes.Ldc_I4_7)  			equivObj = 7;  		if (constInstr.Item1 == OpCodes.Ldc_I4_8)  			equivObj = 8;  		if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  			equivObj = -1;  		if (equivObj == null)  			throw new Exception ("Couldn't determine constant being loaded");  	}  } else {  	if (constInstr.Item1 == OpCodes.Ldstr) {  		var handle = constInstr.Item2.Value;  		equivObj = prop.Module.ResolveString (handle);  	}  	if (constInstr.Item1 == OpCodes.Ldc_R8) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_R4) {  		equivObj = constInstr.Item4.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4) {  		equivObj = constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I4_S) {  		equivObj = (sbyte)constInstr.Item2.Value;  	}  	if (constInstr.Item1 == OpCodes.Ldc_I8) {  		equivObj = constInstr.Item3.Value;  	}  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldnull) {  	equivObj = null;  } else {  	if (constInstr.Item1 == OpCodes.Ldc_I4_0)  		equivObj = 0;  	if (constInstr.Item1 == OpCodes.Ldc_I4_1)  		equivObj = 1;  	if (constInstr.Item1 == OpCodes.Ldc_I4_2)  		equivObj = 2;  	if (constInstr.Item1 == OpCodes.Ldc_I4_3)  		equivObj = 3;  	if (constInstr.Item1 == OpCodes.Ldc_I4_4)  		equivObj = 4;  	if (constInstr.Item1 == OpCodes.Ldc_I4_5)  		equivObj = 5;  	if (constInstr.Item1 == OpCodes.Ldc_I4_6)  		equivObj = 6;  	if (constInstr.Item1 == OpCodes.Ldc_I4_7)  		equivObj = 7;  	if (constInstr.Item1 == OpCodes.Ldc_I4_8)  		equivObj = 8;  	if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  		equivObj = -1;  	if (equivObj == null)  		throw new Exception ("Couldn't determine constant being loaded");  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldnull) {  	equivObj = null;  } else {  	if (constInstr.Item1 == OpCodes.Ldc_I4_0)  		equivObj = 0;  	if (constInstr.Item1 == OpCodes.Ldc_I4_1)  		equivObj = 1;  	if (constInstr.Item1 == OpCodes.Ldc_I4_2)  		equivObj = 2;  	if (constInstr.Item1 == OpCodes.Ldc_I4_3)  		equivObj = 3;  	if (constInstr.Item1 == OpCodes.Ldc_I4_4)  		equivObj = 4;  	if (constInstr.Item1 == OpCodes.Ldc_I4_5)  		equivObj = 5;  	if (constInstr.Item1 == OpCodes.Ldc_I4_6)  		equivObj = 6;  	if (constInstr.Item1 == OpCodes.Ldc_I4_7)  		equivObj = 7;  	if (constInstr.Item1 == OpCodes.Ldc_I4_8)  		equivObj = 8;  	if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  		equivObj = -1;  	if (equivObj == null)  		throw new Exception ("Couldn't determine constant being loaded");  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldnull) {  	equivObj = null;  } else {  	if (constInstr.Item1 == OpCodes.Ldc_I4_0)  		equivObj = 0;  	if (constInstr.Item1 == OpCodes.Ldc_I4_1)  		equivObj = 1;  	if (constInstr.Item1 == OpCodes.Ldc_I4_2)  		equivObj = 2;  	if (constInstr.Item1 == OpCodes.Ldc_I4_3)  		equivObj = 3;  	if (constInstr.Item1 == OpCodes.Ldc_I4_4)  		equivObj = 4;  	if (constInstr.Item1 == OpCodes.Ldc_I4_5)  		equivObj = 5;  	if (constInstr.Item1 == OpCodes.Ldc_I4_6)  		equivObj = 6;  	if (constInstr.Item1 == OpCodes.Ldc_I4_7)  		equivObj = 7;  	if (constInstr.Item1 == OpCodes.Ldc_I4_8)  		equivObj = 8;  	if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  		equivObj = -1;  	if (equivObj == null)  		throw new Exception ("Couldn't determine constant being loaded");  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldnull) {  	equivObj = null;  } else {  	if (constInstr.Item1 == OpCodes.Ldc_I4_0)  		equivObj = 0;  	if (constInstr.Item1 == OpCodes.Ldc_I4_1)  		equivObj = 1;  	if (constInstr.Item1 == OpCodes.Ldc_I4_2)  		equivObj = 2;  	if (constInstr.Item1 == OpCodes.Ldc_I4_3)  		equivObj = 3;  	if (constInstr.Item1 == OpCodes.Ldc_I4_4)  		equivObj = 4;  	if (constInstr.Item1 == OpCodes.Ldc_I4_5)  		equivObj = 5;  	if (constInstr.Item1 == OpCodes.Ldc_I4_6)  		equivObj = 6;  	if (constInstr.Item1 == OpCodes.Ldc_I4_7)  		equivObj = 7;  	if (constInstr.Item1 == OpCodes.Ldc_I4_8)  		equivObj = 8;  	if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  		equivObj = -1;  	if (equivObj == null)  		throw new Exception ("Couldn't determine constant being loaded");  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldnull) {  	equivObj = null;  } else {  	if (constInstr.Item1 == OpCodes.Ldc_I4_0)  		equivObj = 0;  	if (constInstr.Item1 == OpCodes.Ldc_I4_1)  		equivObj = 1;  	if (constInstr.Item1 == OpCodes.Ldc_I4_2)  		equivObj = 2;  	if (constInstr.Item1 == OpCodes.Ldc_I4_3)  		equivObj = 3;  	if (constInstr.Item1 == OpCodes.Ldc_I4_4)  		equivObj = 4;  	if (constInstr.Item1 == OpCodes.Ldc_I4_5)  		equivObj = 5;  	if (constInstr.Item1 == OpCodes.Ldc_I4_6)  		equivObj = 6;  	if (constInstr.Item1 == OpCodes.Ldc_I4_7)  		equivObj = 7;  	if (constInstr.Item1 == OpCodes.Ldc_I4_8)  		equivObj = 8;  	if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  		equivObj = -1;  	if (equivObj == null)  		throw new Exception ("Couldn't determine constant being loaded");  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldnull) {  	equivObj = null;  } else {  	if (constInstr.Item1 == OpCodes.Ldc_I4_0)  		equivObj = 0;  	if (constInstr.Item1 == OpCodes.Ldc_I4_1)  		equivObj = 1;  	if (constInstr.Item1 == OpCodes.Ldc_I4_2)  		equivObj = 2;  	if (constInstr.Item1 == OpCodes.Ldc_I4_3)  		equivObj = 3;  	if (constInstr.Item1 == OpCodes.Ldc_I4_4)  		equivObj = 4;  	if (constInstr.Item1 == OpCodes.Ldc_I4_5)  		equivObj = 5;  	if (constInstr.Item1 == OpCodes.Ldc_I4_6)  		equivObj = 6;  	if (constInstr.Item1 == OpCodes.Ldc_I4_7)  		equivObj = 7;  	if (constInstr.Item1 == OpCodes.Ldc_I4_8)  		equivObj = 8;  	if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  		equivObj = -1;  	if (equivObj == null)  		throw new Exception ("Couldn't determine constant being loaded");  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldnull) {  	equivObj = null;  } else {  	if (constInstr.Item1 == OpCodes.Ldc_I4_0)  		equivObj = 0;  	if (constInstr.Item1 == OpCodes.Ldc_I4_1)  		equivObj = 1;  	if (constInstr.Item1 == OpCodes.Ldc_I4_2)  		equivObj = 2;  	if (constInstr.Item1 == OpCodes.Ldc_I4_3)  		equivObj = 3;  	if (constInstr.Item1 == OpCodes.Ldc_I4_4)  		equivObj = 4;  	if (constInstr.Item1 == OpCodes.Ldc_I4_5)  		equivObj = 5;  	if (constInstr.Item1 == OpCodes.Ldc_I4_6)  		equivObj = 6;  	if (constInstr.Item1 == OpCodes.Ldc_I4_7)  		equivObj = 7;  	if (constInstr.Item1 == OpCodes.Ldc_I4_8)  		equivObj = 8;  	if (constInstr.Item1 == OpCodes.Ldc_I4_M1)  		equivObj = -1;  	if (equivObj == null)  		throw new Exception ("Couldn't determine constant being loaded");  }  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldc_I4_2)  	equivObj = 2;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: equivObj = 2;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldc_I4_3)  	equivObj = 3;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: equivObj = 3;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldc_I4_4)  	equivObj = 4;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: equivObj = 4;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldc_I4_5)  	equivObj = 5;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: equivObj = 5;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldc_I4_6)  	equivObj = 6;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: equivObj = 6;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldc_I4_7)  	equivObj = 7;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: equivObj = 7;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: if (constInstr.Item1 == OpCodes.Ldc_I4_8)  	equivObj = 8;  
Magic Number,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The following statement contains a magic number: equivObj = 8;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,Utils,The following statement contains a magic number: foreach (var field in typeof(OpCodes).GetFields (BindingFlags.Public | BindingFlags.Static)) {  	var op = (OpCode)field.GetValue (null);  	if (op.Size == 1) {  		oneByte.Add (op);  		continue;  	}  	if (op.Size == 2) {  		twoByte.Add (op);  		continue;  	}  	throw new Exception ("Unexpected op size for " + op);  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,Utils,The following statement contains a magic number: if (op.Size == 2) {  	twoByte.Add (op);  	continue;  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The following statement contains a magic number: foreach (var ix in MemberOrdering) {  	var asc = ix > 0;  	var i = Math.Abs (ix);  	switch (i) {  	case 1:  		ret.AddRange (asc ? simpleTypes.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : simpleTypes.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  		break;  	case 2:  		ret.AddRange (asc ? otherPrimitive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : otherPrimitive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  		break;  	case 3:  		ret.AddRange (asc ? everythingElse.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : everythingElse.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  		break;  	case 4:  		ret.AddRange (asc ? recursive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : recursive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  		break;  	default:  		throw new Exception ();  	}  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The following statement contains a magic number: foreach (var ix in MemberOrdering) {  	var asc = ix > 0;  	var i = Math.Abs (ix);  	switch (i) {  	case 1:  		ret.AddRange (asc ? simpleTypes.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : simpleTypes.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  		break;  	case 2:  		ret.AddRange (asc ? otherPrimitive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : otherPrimitive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  		break;  	case 3:  		ret.AddRange (asc ? everythingElse.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : everythingElse.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  		break;  	case 4:  		ret.AddRange (asc ? recursive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : recursive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  		break;  	default:  		throw new Exception ();  	}  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The following statement contains a magic number: foreach (var ix in MemberOrdering) {  	var asc = ix > 0;  	var i = Math.Abs (ix);  	switch (i) {  	case 1:  		ret.AddRange (asc ? simpleTypes.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : simpleTypes.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  		break;  	case 2:  		ret.AddRange (asc ? otherPrimitive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : otherPrimitive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  		break;  	case 3:  		ret.AddRange (asc ? everythingElse.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : everythingElse.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  		break;  	case 4:  		ret.AddRange (asc ? recursive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : recursive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  		break;  	default:  		throw new Exception ();  	}  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The following statement contains a magic number: switch (i) {  case 1:  	ret.AddRange (asc ? simpleTypes.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : simpleTypes.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  	break;  case 2:  	ret.AddRange (asc ? otherPrimitive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : otherPrimitive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  	break;  case 3:  	ret.AddRange (asc ? everythingElse.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : everythingElse.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  	break;  case 4:  	ret.AddRange (asc ? recursive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : recursive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  	break;  default:  	throw new Exception ();  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The following statement contains a magic number: switch (i) {  case 1:  	ret.AddRange (asc ? simpleTypes.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : simpleTypes.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  	break;  case 2:  	ret.AddRange (asc ? otherPrimitive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : otherPrimitive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  	break;  case 3:  	ret.AddRange (asc ? everythingElse.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : everythingElse.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  	break;  case 4:  	ret.AddRange (asc ? recursive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : recursive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  	break;  default:  	throw new Exception ();  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The following statement contains a magic number: switch (i) {  case 1:  	ret.AddRange (asc ? simpleTypes.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : simpleTypes.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  	break;  case 2:  	ret.AddRange (asc ? otherPrimitive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : otherPrimitive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  	break;  case 3:  	ret.AddRange (asc ? everythingElse.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : everythingElse.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  	break;  case 4:  	ret.AddRange (asc ? recursive.OrderBy (byAccessOrder).ThenBy (fieldsFirst) : recursive.OrderByDescending (byAccessOrder).ThenByDescending (fieldsFirst));  	break;  default:  	throw new Exception ();  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadOp,The following statement contains a magic number: if (first == ContinueOpcode) {  	var next = cil [ix + 1];  	opcode = TwoByteOps [next];  	advance += 2;  } else {  	opcode = OneByteOps [first];  	advance++;  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadOp,The following statement contains a magic number: advance += 2;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: return (((long)b) << 32) | a;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [2] = cil [at + 2];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [2] = cil [at + 2];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [3] = cil [at + 3];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [3] = cil [at + 3];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [4] = cil [at + 4];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [4] = cil [at + 4];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [5] = cil [at + 5];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [5] = cil [at + 5];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [6] = cil [at + 6];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [6] = cil [at + 6];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [7] = cil [at + 7];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [7] = cil [at + 7];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [2] = cil [at + 2];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [2] = cil [at + 2];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [3] = cil [at + 3];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: arr [3] = cil [at + 3];  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	return null;  case OperandType.InlineSwitch:  	advance += 4;  	var len = readInt (operandStart);  	for (var i = 0; i < len; i++) {  		advance += 4;  	}  	return null;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	return null;  case OperandType.InlineField:  	advance += 4;  	var field = readInt (operandStart);  	return field;  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	return null;  case OperandType.InlineI:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineI8:  	advance += 8;  	constantLong = readLong (operandStart);  	return null;  case OperandType.InlineNone:  	return null;  case OperandType.InlineR:  	advance += 8;  	constantDouble = readDouble (operandStart);  	return null;  case OperandType.InlineSig:  	advance += 4;  	return null;  case OperandType.InlineString:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineVar:  	advance += 2;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineI:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineR:  	advance += 4;  	constantDouble = readFloat (operandStart);  	return null;  case OperandType.ShortInlineVar:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	return null;  case OperandType.InlineSwitch:  	advance += 4;  	var len = readInt (operandStart);  	for (var i = 0; i < len; i++) {  		advance += 4;  	}  	return null;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	return null;  case OperandType.InlineField:  	advance += 4;  	var field = readInt (operandStart);  	return field;  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	return null;  case OperandType.InlineI:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineI8:  	advance += 8;  	constantLong = readLong (operandStart);  	return null;  case OperandType.InlineNone:  	return null;  case OperandType.InlineR:  	advance += 8;  	constantDouble = readDouble (operandStart);  	return null;  case OperandType.InlineSig:  	advance += 4;  	return null;  case OperandType.InlineString:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineVar:  	advance += 2;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineI:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineR:  	advance += 4;  	constantDouble = readFloat (operandStart);  	return null;  case OperandType.ShortInlineVar:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	return null;  case OperandType.InlineSwitch:  	advance += 4;  	var len = readInt (operandStart);  	for (var i = 0; i < len; i++) {  		advance += 4;  	}  	return null;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	return null;  case OperandType.InlineField:  	advance += 4;  	var field = readInt (operandStart);  	return field;  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	return null;  case OperandType.InlineI:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineI8:  	advance += 8;  	constantLong = readLong (operandStart);  	return null;  case OperandType.InlineNone:  	return null;  case OperandType.InlineR:  	advance += 8;  	constantDouble = readDouble (operandStart);  	return null;  case OperandType.InlineSig:  	advance += 4;  	return null;  case OperandType.InlineString:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineVar:  	advance += 2;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineI:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineR:  	advance += 4;  	constantDouble = readFloat (operandStart);  	return null;  case OperandType.ShortInlineVar:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	return null;  case OperandType.InlineSwitch:  	advance += 4;  	var len = readInt (operandStart);  	for (var i = 0; i < len; i++) {  		advance += 4;  	}  	return null;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	return null;  case OperandType.InlineField:  	advance += 4;  	var field = readInt (operandStart);  	return field;  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	return null;  case OperandType.InlineI:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineI8:  	advance += 8;  	constantLong = readLong (operandStart);  	return null;  case OperandType.InlineNone:  	return null;  case OperandType.InlineR:  	advance += 8;  	constantDouble = readDouble (operandStart);  	return null;  case OperandType.InlineSig:  	advance += 4;  	return null;  case OperandType.InlineString:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineVar:  	advance += 2;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineI:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineR:  	advance += 4;  	constantDouble = readFloat (operandStart);  	return null;  case OperandType.ShortInlineVar:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	return null;  case OperandType.InlineSwitch:  	advance += 4;  	var len = readInt (operandStart);  	for (var i = 0; i < len; i++) {  		advance += 4;  	}  	return null;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	return null;  case OperandType.InlineField:  	advance += 4;  	var field = readInt (operandStart);  	return field;  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	return null;  case OperandType.InlineI:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineI8:  	advance += 8;  	constantLong = readLong (operandStart);  	return null;  case OperandType.InlineNone:  	return null;  case OperandType.InlineR:  	advance += 8;  	constantDouble = readDouble (operandStart);  	return null;  case OperandType.InlineSig:  	advance += 4;  	return null;  case OperandType.InlineString:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineVar:  	advance += 2;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineI:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineR:  	advance += 4;  	constantDouble = readFloat (operandStart);  	return null;  case OperandType.ShortInlineVar:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	return null;  case OperandType.InlineSwitch:  	advance += 4;  	var len = readInt (operandStart);  	for (var i = 0; i < len; i++) {  		advance += 4;  	}  	return null;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	return null;  case OperandType.InlineField:  	advance += 4;  	var field = readInt (operandStart);  	return field;  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	return null;  case OperandType.InlineI:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineI8:  	advance += 8;  	constantLong = readLong (operandStart);  	return null;  case OperandType.InlineNone:  	return null;  case OperandType.InlineR:  	advance += 8;  	constantDouble = readDouble (operandStart);  	return null;  case OperandType.InlineSig:  	advance += 4;  	return null;  case OperandType.InlineString:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineVar:  	advance += 2;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineI:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineR:  	advance += 4;  	constantDouble = readFloat (operandStart);  	return null;  case OperandType.ShortInlineVar:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	return null;  case OperandType.InlineSwitch:  	advance += 4;  	var len = readInt (operandStart);  	for (var i = 0; i < len; i++) {  		advance += 4;  	}  	return null;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	return null;  case OperandType.InlineField:  	advance += 4;  	var field = readInt (operandStart);  	return field;  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	return null;  case OperandType.InlineI:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineI8:  	advance += 8;  	constantLong = readLong (operandStart);  	return null;  case OperandType.InlineNone:  	return null;  case OperandType.InlineR:  	advance += 8;  	constantDouble = readDouble (operandStart);  	return null;  case OperandType.InlineSig:  	advance += 4;  	return null;  case OperandType.InlineString:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineVar:  	advance += 2;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineI:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineR:  	advance += 4;  	constantDouble = readFloat (operandStart);  	return null;  case OperandType.ShortInlineVar:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	return null;  case OperandType.InlineSwitch:  	advance += 4;  	var len = readInt (operandStart);  	for (var i = 0; i < len; i++) {  		advance += 4;  	}  	return null;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	return null;  case OperandType.InlineField:  	advance += 4;  	var field = readInt (operandStart);  	return field;  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	return null;  case OperandType.InlineI:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineI8:  	advance += 8;  	constantLong = readLong (operandStart);  	return null;  case OperandType.InlineNone:  	return null;  case OperandType.InlineR:  	advance += 8;  	constantDouble = readDouble (operandStart);  	return null;  case OperandType.InlineSig:  	advance += 4;  	return null;  case OperandType.InlineString:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineVar:  	advance += 2;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineI:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineR:  	advance += 4;  	constantDouble = readFloat (operandStart);  	return null;  case OperandType.ShortInlineVar:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	return null;  case OperandType.InlineSwitch:  	advance += 4;  	var len = readInt (operandStart);  	for (var i = 0; i < len; i++) {  		advance += 4;  	}  	return null;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	return null;  case OperandType.InlineField:  	advance += 4;  	var field = readInt (operandStart);  	return field;  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	return null;  case OperandType.InlineI:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineI8:  	advance += 8;  	constantLong = readLong (operandStart);  	return null;  case OperandType.InlineNone:  	return null;  case OperandType.InlineR:  	advance += 8;  	constantDouble = readDouble (operandStart);  	return null;  case OperandType.InlineSig:  	advance += 4;  	return null;  case OperandType.InlineString:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineVar:  	advance += 2;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineI:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineR:  	advance += 4;  	constantDouble = readFloat (operandStart);  	return null;  case OperandType.ShortInlineVar:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	return null;  case OperandType.InlineSwitch:  	advance += 4;  	var len = readInt (operandStart);  	for (var i = 0; i < len; i++) {  		advance += 4;  	}  	return null;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	return null;  case OperandType.InlineField:  	advance += 4;  	var field = readInt (operandStart);  	return field;  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	return null;  case OperandType.InlineI:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineI8:  	advance += 8;  	constantLong = readLong (operandStart);  	return null;  case OperandType.InlineNone:  	return null;  case OperandType.InlineR:  	advance += 8;  	constantDouble = readDouble (operandStart);  	return null;  case OperandType.InlineSig:  	advance += 4;  	return null;  case OperandType.InlineString:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineVar:  	advance += 2;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineI:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineR:  	advance += 4;  	constantDouble = readFloat (operandStart);  	return null;  case OperandType.ShortInlineVar:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	return null;  case OperandType.InlineSwitch:  	advance += 4;  	var len = readInt (operandStart);  	for (var i = 0; i < len; i++) {  		advance += 4;  	}  	return null;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	return null;  case OperandType.InlineField:  	advance += 4;  	var field = readInt (operandStart);  	return field;  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	return null;  case OperandType.InlineI:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineI8:  	advance += 8;  	constantLong = readLong (operandStart);  	return null;  case OperandType.InlineNone:  	return null;  case OperandType.InlineR:  	advance += 8;  	constantDouble = readDouble (operandStart);  	return null;  case OperandType.InlineSig:  	advance += 4;  	return null;  case OperandType.InlineString:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineVar:  	advance += 2;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineI:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineR:  	advance += 4;  	constantDouble = readFloat (operandStart);  	return null;  case OperandType.ShortInlineVar:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	return null;  case OperandType.InlineSwitch:  	advance += 4;  	var len = readInt (operandStart);  	for (var i = 0; i < len; i++) {  		advance += 4;  	}  	return null;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	return null;  case OperandType.InlineField:  	advance += 4;  	var field = readInt (operandStart);  	return field;  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	return null;  case OperandType.InlineI:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineI8:  	advance += 8;  	constantLong = readLong (operandStart);  	return null;  case OperandType.InlineNone:  	return null;  case OperandType.InlineR:  	advance += 8;  	constantDouble = readDouble (operandStart);  	return null;  case OperandType.InlineSig:  	advance += 4;  	return null;  case OperandType.InlineString:  	advance += 4;  	constantInt = readInt (operandStart);  	return null;  case OperandType.InlineVar:  	advance += 2;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineI:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  case OperandType.ShortInlineR:  	advance += 4;  	constantDouble = readFloat (operandStart);  	return null;  case OperandType.ShortInlineVar:  	advance += 1;  	constantInt = cil [operandStart];  	return null;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	advance += 4;  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: advance += 8;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: advance += 8;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: advance += 2;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Decompile,The following statement contains a magic number: foreach (var field in fields) {  	var storeInstr = consInstrs.FindIndex (d => d.Item1 == OpCodes.Stfld && d.Item5 == field);  	var preceedingLdArg = consInstrs.Take (storeInstr).Reverse ().First (f => f.Item1.IsLoadArgumentOpCode ());  	int paramIx;  	switch (preceedingLdArg.Item1.Value) {  	// Ldarg_0 will be `this`' so we'll never see it  	// Ldarg_1  	case 0x03:  		paramIx = 1;  		break;  	// Ldarg_2  	case 0x04:  		paramIx = 2;  		break;  	// Ldarg_3  	case 0x05:  		paramIx = 3;  		break;  	// Ldarg' Ldarg_S  	default:  		paramIx = preceedingLdArg.Item2.Value;  		break;  	}  	fieldToArgumentIndex [field] = paramIx;  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Decompile,The following statement contains a magic number: foreach (var field in fields) {  	var storeInstr = consInstrs.FindIndex (d => d.Item1 == OpCodes.Stfld && d.Item5 == field);  	var preceedingLdArg = consInstrs.Take (storeInstr).Reverse ().First (f => f.Item1.IsLoadArgumentOpCode ());  	int paramIx;  	switch (preceedingLdArg.Item1.Value) {  	// Ldarg_0 will be `this`' so we'll never see it  	// Ldarg_1  	case 0x03:  		paramIx = 1;  		break;  	// Ldarg_2  	case 0x04:  		paramIx = 2;  		break;  	// Ldarg_3  	case 0x05:  		paramIx = 3;  		break;  	// Ldarg' Ldarg_S  	default:  		paramIx = preceedingLdArg.Item2.Value;  		break;  	}  	fieldToArgumentIndex [field] = paramIx;  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Decompile,The following statement contains a magic number: switch (preceedingLdArg.Item1.Value) {  // Ldarg_0 will be `this`' so we'll never see it  // Ldarg_1  case 0x03:  	paramIx = 1;  	break;  // Ldarg_2  case 0x04:  	paramIx = 2;  	break;  // Ldarg_3  case 0x05:  	paramIx = 3;  	break;  // Ldarg' Ldarg_S  default:  	paramIx = preceedingLdArg.Item2.Value;  	break;  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Decompile,The following statement contains a magic number: switch (preceedingLdArg.Item1.Value) {  // Ldarg_0 will be `this`' so we'll never see it  // Ldarg_1  case 0x03:  	paramIx = 1;  	break;  // Ldarg_2  case 0x04:  	paramIx = 2;  	break;  // Ldarg_3  case 0x05:  	paramIx = 3;  	break;  // Ldarg' Ldarg_S  default:  	paramIx = preceedingLdArg.Item2.Value;  	break;  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Decompile,The following statement contains a magic number: paramIx = 2;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Decompile,The following statement contains a magic number: paramIx = 3;  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,FindReusedTypes,The following statement contains a magic number: if (!counts.ContainsKey (type) || counts [type] < 2) {  	pending.Push (type);  }  
Magic Number,Jil.Common,Utils,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\Utils.cs,Pow10,The following statement contains a magic number: return (long)Math.Pow (10' power);  
Magic Number,Jil,DeserializationException,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializationException.cs,InspectReader,The following statement contains a magic number: try {  	Position = reader.Position;  	var sb = new StringBuilder ();  	int c;  	while ((c = reader.Read ()) != -1 && sb.Length < 50) {  		sb.Append ((char)c);  	}  	SnippetAfterError = sb.ToString ();  } catch (Exception) {  	/* best effort here' things are already jacked */}  
Magic Number,Jil,DeserializationException,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializationException.cs,InspectReader,The following statement contains a magic number: while ((c = reader.Read ()) != -1 && sb.Length < 50) {  	sb.Append ((char)c);  }  
Magic Number,Jil,DeserializationException,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializationException.cs,InspectReader,The following statement contains a magic number: try {  	var asStreamReader = reader as StreamReader;  	if (asStreamReader != null) {  		if (asStreamReader.BaseStream.CanSeek) {  			Position = asStreamReader.BaseStream.Position;  		}  	}  	var sb = new StringBuilder ();  	int c;  	while ((c = reader.Read ()) != -1 && sb.Length < 50) {  		sb.Append ((char)c);  	}  	SnippetAfterError = sb.ToString ();  } catch (Exception) {  	/* best effort here' things are already jacked */}  
Magic Number,Jil,DeserializationException,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializationException.cs,InspectReader,The following statement contains a magic number: while ((c = reader.Read ()) != -1 && sb.Length < 50) {  	sb.Append ((char)c);  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The following statement contains a magic number: switch (Type) {  case JsonObjectType.False:  	result = false;  	return returnType == typeof(bool);  case JsonObjectType.True:  	result = true;  	return returnType == typeof(bool);  case JsonObjectType.FastNumber:  	if (returnType == typeof(double)) {  		double res;  		var ret = FastNumberToDouble (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(float)) {  		float res;  		var ret = FastNumberToFloat (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(decimal)) {  		decimal res;  		var ret = FastNumberToDecimal (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(byte)) {  		byte res;  		var ret = FastNumberToByte (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(sbyte)) {  		sbyte res;  		var ret = FastNumberToSByte (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(short)) {  		short res;  		var ret = FastNumberToShort (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(ushort)) {  		ushort res;  		var ret = FastNumberToUShort (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(int)) {  		int res;  		var ret = FastNumberToInt (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(uint)) {  		uint res;  		var ret = FastNumberToUInt (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(long)) {  		long res;  		var ret = FastNumberToLong (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(ulong)) {  		ulong res;  		var ret = FastNumberToULong (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(DateTime)) {  		long res;  		var ret = FastNumberToLong (out res);  		if (!ret) {  			result = null;  			return false;  		}  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(DateTimeOffset)) {  		long res;  		var ret = FastNumberToLong (out res);  		if (!ret) {  			result = null;  			return false;  		}  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(TimeSpan)) {  		const double TicksPerMillisecond = 10000;  		const double TicksPerSecond = 10000000;  		double res;  		var ret = FastNumberToDouble (out res);  		if (!ret) {  			result = null;  			return false;  		}  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			var msTicksDouble = res * TicksPerMillisecond;  			var msTicks = (long)msTicksDouble;  			if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  				msTicks = TimeSpan.MaxValue.Ticks;  			}  			if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  				msTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (msTicks);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			var sTicksDouble = res * TicksPerSecond;  			var sTicks = (long)sTicksDouble;  			if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  				sTicks = TimeSpan.MaxValue.Ticks;  			}  			if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  				sTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (sTicks);  			return true;  		default:  			result = null;  			return false;  		}  	}  	break;  case JsonObjectType.Number:  	if (returnType == typeof(double)) {  		result = NumberValue;  		return true;  	}  	if (returnType == typeof(float)) {  		result = (float)NumberValue;  		return true;  	}  	if (returnType == typeof(decimal)) {  		result = (decimal)NumberValue;  		return true;  	}  	if (returnType == typeof(byte)) {  		result = (byte)NumberValue;  		return true;  	}  	if (returnType == typeof(sbyte)) {  		result = (sbyte)NumberValue;  		return true;  	}  	if (returnType == typeof(short)) {  		result = (short)NumberValue;  		return true;  	}  	if (returnType == typeof(ushort)) {  		result = (ushort)NumberValue;  		return true;  	}  	if (returnType == typeof(int)) {  		result = (int)NumberValue;  		return true;  	}  	if (returnType == typeof(uint)) {  		result = (uint)NumberValue;  		return true;  	}  	if (returnType == typeof(long)) {  		result = (long)NumberValue;  		return true;  	}  	if (returnType == typeof(ulong)) {  		result = (ulong)NumberValue;  		return true;  	}  	if (returnType == typeof(DateTime)) {  		var res = (long)NumberValue;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(DateTimeOffset)) {  		var res = (long)NumberValue;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(TimeSpan)) {  		const double TicksPerMillisecond = 10000;  		const double TicksPerSecond = 10000000;  		var res = NumberValue;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			var msTicksDouble = res * TicksPerMillisecond;  			var msTicks = (long)msTicksDouble;  			if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  				msTicks = TimeSpan.MaxValue.Ticks;  			}  			if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  				msTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (msTicks);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			var sTicksDouble = res * TicksPerSecond;  			var sTicks = (long)sTicksDouble;  			if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  				sTicks = TimeSpan.MaxValue.Ticks;  			}  			if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  				sTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (sTicks);  			return true;  		default:  			result = null;  			return false;  		}  	}  	break;  case JsonObjectType.String:  	if (returnType == typeof(string)) {  		result = StringValue;  		return true;  	}  	if (returnType.IsEnum ()) {  		if (returnType.IsFlagsEnum ()) {  			return ParseFlagsEnum (returnType' out result);  		}  		return EnumValues.TryParse (returnType' StringValue' out result);  	}  	if (returnType == typeof(Guid)) {  		Guid guid;  		if (!Guid.TryParseExact (StringValue' "D"' out guid)) {  			result = null;  			return false;  		}  		result = guid;  		return true;  	}  	if (returnType == typeof(DateTime)) {  		DateTime res;  		bool ret;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  			ret = Methods.ReadMicrosoftStyleDateTime (StringValue' out res);  			result = res;  			return ret;  		case DateTimeFormat.ISO8601:  			ret = Methods.ReadISO8601DateTime (StringValue' out res);  			result = res;  			return ret;  		case DateTimeFormat.RFC1123:  			ret = Methods.ReadRFC1123DateTime (StringValue' out res);  			result = res;  			return ret;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(DateTimeOffset)) {  		DateTime dt;  		DateTimeOffset res;  		bool ret;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  			ret = Methods.ReadMicrosoftStyleDateTime (StringValue' out dt);  			res = dt;  			result = res;  			return ret;  		case DateTimeFormat.ISO8601:  			ret = Methods.ReadISO8601DateWithOffset (StringValue' out res);  			result = res;  			return ret;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(TimeSpan)) {  		TimeSpan ts;  		bool ret;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  			ret = Methods.ReadMicrosoftStyleTimeSpan (StringValue' out ts);  			result = ts;  			return ret;  		case DateTimeFormat.ISO8601:  			ret = Methods.ReadISO8601TimeSpan (StringValue' out ts);  			result = ts;  			return ret;  		default:  			result = null;  			return false;  		}  	}  	break;  case JsonObjectType.Object:  	if (returnType == typeof(System.Collections.IEnumerable)) {  		result = EnumerableObjectWrapper.MakeAsIEnumerable (ObjectMembers);  		return true;  	}  	if (returnType.IsGenericDictionary ()) {  		var args = returnType.GetGenericArguments ();  		var keyType = args [0];  		var valType = args [1];  		var stringKeys = keyType == typeof(string);  		var enumKeys = keyType.IsEnum ();  		// only strings and enums can be keys  		if (!(stringKeys || enumKeys)) {  			result = null;  			return false;  		}  		var coerced = new Dictionary<object' object> (ObjectMembers.Count);  		foreach (var kv in ObjectMembers) {  			object innerResult = null;  			if (kv.Value != null && !kv.Value.InnerTryConvert (valType' out innerResult)) {  				result = null;  				return false;  			}  			if (stringKeys) {  				coerced [kv.Key] = innerResult;  			} else {  				object @enum = Enum.Parse (keyType' kv.Key' ignoreCase: true);  				coerced [@enum] = innerResult;  			}  		}  		if (stringKeys) {  			result = Utils.ProjectStringDictionary (coerced' valType);  		} else {  			// enum keys  			result = Utils.ProjectEnumDictionary (coerced' keyType' valType);  		}  		return true;  	}  	break;  case JsonObjectType.Array:  	if (returnType == typeof(System.Collections.IEnumerable)) {  		result = EnumerableArrayWrapper.MakeAsIEnumerable (ArrayValue);  		return true;  	}  	if (returnType.IsGenericEnumerable ()) {  		var castTo = returnType.GetGenericArguments () [0];  		if (castTo == typeof(object)) {  			result = EnumerableArrayWrapper.MakeAsIEnumerableOfT (ArrayValue);  			return true;  		}  		bool bail = false;  		var dynamicProjection = ArrayValue.Select (val => {  			object innerResult;  			if (!val.InnerTryConvert (castTo' out innerResult)) {  				bail = true;  				return Activator.CreateInstance (castTo);  			}  			return innerResult;  		});  		result = Utils.DynamicProject (dynamicProjection' castTo);  		if (bail) {  			result = null;  			return false;  		}  		return true;  	}  	break;  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The following statement contains a magic number: switch (Type) {  case JsonObjectType.False:  	result = false;  	return returnType == typeof(bool);  case JsonObjectType.True:  	result = true;  	return returnType == typeof(bool);  case JsonObjectType.FastNumber:  	if (returnType == typeof(double)) {  		double res;  		var ret = FastNumberToDouble (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(float)) {  		float res;  		var ret = FastNumberToFloat (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(decimal)) {  		decimal res;  		var ret = FastNumberToDecimal (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(byte)) {  		byte res;  		var ret = FastNumberToByte (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(sbyte)) {  		sbyte res;  		var ret = FastNumberToSByte (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(short)) {  		short res;  		var ret = FastNumberToShort (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(ushort)) {  		ushort res;  		var ret = FastNumberToUShort (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(int)) {  		int res;  		var ret = FastNumberToInt (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(uint)) {  		uint res;  		var ret = FastNumberToUInt (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(long)) {  		long res;  		var ret = FastNumberToLong (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(ulong)) {  		ulong res;  		var ret = FastNumberToULong (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(DateTime)) {  		long res;  		var ret = FastNumberToLong (out res);  		if (!ret) {  			result = null;  			return false;  		}  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(DateTimeOffset)) {  		long res;  		var ret = FastNumberToLong (out res);  		if (!ret) {  			result = null;  			return false;  		}  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(TimeSpan)) {  		const double TicksPerMillisecond = 10000;  		const double TicksPerSecond = 10000000;  		double res;  		var ret = FastNumberToDouble (out res);  		if (!ret) {  			result = null;  			return false;  		}  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			var msTicksDouble = res * TicksPerMillisecond;  			var msTicks = (long)msTicksDouble;  			if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  				msTicks = TimeSpan.MaxValue.Ticks;  			}  			if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  				msTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (msTicks);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			var sTicksDouble = res * TicksPerSecond;  			var sTicks = (long)sTicksDouble;  			if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  				sTicks = TimeSpan.MaxValue.Ticks;  			}  			if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  				sTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (sTicks);  			return true;  		default:  			result = null;  			return false;  		}  	}  	break;  case JsonObjectType.Number:  	if (returnType == typeof(double)) {  		result = NumberValue;  		return true;  	}  	if (returnType == typeof(float)) {  		result = (float)NumberValue;  		return true;  	}  	if (returnType == typeof(decimal)) {  		result = (decimal)NumberValue;  		return true;  	}  	if (returnType == typeof(byte)) {  		result = (byte)NumberValue;  		return true;  	}  	if (returnType == typeof(sbyte)) {  		result = (sbyte)NumberValue;  		return true;  	}  	if (returnType == typeof(short)) {  		result = (short)NumberValue;  		return true;  	}  	if (returnType == typeof(ushort)) {  		result = (ushort)NumberValue;  		return true;  	}  	if (returnType == typeof(int)) {  		result = (int)NumberValue;  		return true;  	}  	if (returnType == typeof(uint)) {  		result = (uint)NumberValue;  		return true;  	}  	if (returnType == typeof(long)) {  		result = (long)NumberValue;  		return true;  	}  	if (returnType == typeof(ulong)) {  		result = (ulong)NumberValue;  		return true;  	}  	if (returnType == typeof(DateTime)) {  		var res = (long)NumberValue;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(DateTimeOffset)) {  		var res = (long)NumberValue;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(TimeSpan)) {  		const double TicksPerMillisecond = 10000;  		const double TicksPerSecond = 10000000;  		var res = NumberValue;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			var msTicksDouble = res * TicksPerMillisecond;  			var msTicks = (long)msTicksDouble;  			if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  				msTicks = TimeSpan.MaxValue.Ticks;  			}  			if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  				msTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (msTicks);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			var sTicksDouble = res * TicksPerSecond;  			var sTicks = (long)sTicksDouble;  			if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  				sTicks = TimeSpan.MaxValue.Ticks;  			}  			if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  				sTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (sTicks);  			return true;  		default:  			result = null;  			return false;  		}  	}  	break;  case JsonObjectType.String:  	if (returnType == typeof(string)) {  		result = StringValue;  		return true;  	}  	if (returnType.IsEnum ()) {  		if (returnType.IsFlagsEnum ()) {  			return ParseFlagsEnum (returnType' out result);  		}  		return EnumValues.TryParse (returnType' StringValue' out result);  	}  	if (returnType == typeof(Guid)) {  		Guid guid;  		if (!Guid.TryParseExact (StringValue' "D"' out guid)) {  			result = null;  			return false;  		}  		result = guid;  		return true;  	}  	if (returnType == typeof(DateTime)) {  		DateTime res;  		bool ret;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  			ret = Methods.ReadMicrosoftStyleDateTime (StringValue' out res);  			result = res;  			return ret;  		case DateTimeFormat.ISO8601:  			ret = Methods.ReadISO8601DateTime (StringValue' out res);  			result = res;  			return ret;  		case DateTimeFormat.RFC1123:  			ret = Methods.ReadRFC1123DateTime (StringValue' out res);  			result = res;  			return ret;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(DateTimeOffset)) {  		DateTime dt;  		DateTimeOffset res;  		bool ret;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  			ret = Methods.ReadMicrosoftStyleDateTime (StringValue' out dt);  			res = dt;  			result = res;  			return ret;  		case DateTimeFormat.ISO8601:  			ret = Methods.ReadISO8601DateWithOffset (StringValue' out res);  			result = res;  			return ret;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(TimeSpan)) {  		TimeSpan ts;  		bool ret;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  			ret = Methods.ReadMicrosoftStyleTimeSpan (StringValue' out ts);  			result = ts;  			return ret;  		case DateTimeFormat.ISO8601:  			ret = Methods.ReadISO8601TimeSpan (StringValue' out ts);  			result = ts;  			return ret;  		default:  			result = null;  			return false;  		}  	}  	break;  case JsonObjectType.Object:  	if (returnType == typeof(System.Collections.IEnumerable)) {  		result = EnumerableObjectWrapper.MakeAsIEnumerable (ObjectMembers);  		return true;  	}  	if (returnType.IsGenericDictionary ()) {  		var args = returnType.GetGenericArguments ();  		var keyType = args [0];  		var valType = args [1];  		var stringKeys = keyType == typeof(string);  		var enumKeys = keyType.IsEnum ();  		// only strings and enums can be keys  		if (!(stringKeys || enumKeys)) {  			result = null;  			return false;  		}  		var coerced = new Dictionary<object' object> (ObjectMembers.Count);  		foreach (var kv in ObjectMembers) {  			object innerResult = null;  			if (kv.Value != null && !kv.Value.InnerTryConvert (valType' out innerResult)) {  				result = null;  				return false;  			}  			if (stringKeys) {  				coerced [kv.Key] = innerResult;  			} else {  				object @enum = Enum.Parse (keyType' kv.Key' ignoreCase: true);  				coerced [@enum] = innerResult;  			}  		}  		if (stringKeys) {  			result = Utils.ProjectStringDictionary (coerced' valType);  		} else {  			// enum keys  			result = Utils.ProjectEnumDictionary (coerced' keyType' valType);  		}  		return true;  	}  	break;  case JsonObjectType.Array:  	if (returnType == typeof(System.Collections.IEnumerable)) {  		result = EnumerableArrayWrapper.MakeAsIEnumerable (ArrayValue);  		return true;  	}  	if (returnType.IsGenericEnumerable ()) {  		var castTo = returnType.GetGenericArguments () [0];  		if (castTo == typeof(object)) {  			result = EnumerableArrayWrapper.MakeAsIEnumerableOfT (ArrayValue);  			return true;  		}  		bool bail = false;  		var dynamicProjection = ArrayValue.Select (val => {  			object innerResult;  			if (!val.InnerTryConvert (castTo' out innerResult)) {  				bail = true;  				return Activator.CreateInstance (castTo);  			}  			return innerResult;  		});  		result = Utils.DynamicProject (dynamicProjection' castTo);  		if (bail) {  			result = null;  			return false;  		}  		return true;  	}  	break;  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The following statement contains a magic number: switch (Type) {  case JsonObjectType.False:  	result = false;  	return returnType == typeof(bool);  case JsonObjectType.True:  	result = true;  	return returnType == typeof(bool);  case JsonObjectType.FastNumber:  	if (returnType == typeof(double)) {  		double res;  		var ret = FastNumberToDouble (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(float)) {  		float res;  		var ret = FastNumberToFloat (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(decimal)) {  		decimal res;  		var ret = FastNumberToDecimal (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(byte)) {  		byte res;  		var ret = FastNumberToByte (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(sbyte)) {  		sbyte res;  		var ret = FastNumberToSByte (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(short)) {  		short res;  		var ret = FastNumberToShort (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(ushort)) {  		ushort res;  		var ret = FastNumberToUShort (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(int)) {  		int res;  		var ret = FastNumberToInt (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(uint)) {  		uint res;  		var ret = FastNumberToUInt (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(long)) {  		long res;  		var ret = FastNumberToLong (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(ulong)) {  		ulong res;  		var ret = FastNumberToULong (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(DateTime)) {  		long res;  		var ret = FastNumberToLong (out res);  		if (!ret) {  			result = null;  			return false;  		}  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(DateTimeOffset)) {  		long res;  		var ret = FastNumberToLong (out res);  		if (!ret) {  			result = null;  			return false;  		}  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(TimeSpan)) {  		const double TicksPerMillisecond = 10000;  		const double TicksPerSecond = 10000000;  		double res;  		var ret = FastNumberToDouble (out res);  		if (!ret) {  			result = null;  			return false;  		}  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			var msTicksDouble = res * TicksPerMillisecond;  			var msTicks = (long)msTicksDouble;  			if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  				msTicks = TimeSpan.MaxValue.Ticks;  			}  			if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  				msTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (msTicks);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			var sTicksDouble = res * TicksPerSecond;  			var sTicks = (long)sTicksDouble;  			if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  				sTicks = TimeSpan.MaxValue.Ticks;  			}  			if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  				sTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (sTicks);  			return true;  		default:  			result = null;  			return false;  		}  	}  	break;  case JsonObjectType.Number:  	if (returnType == typeof(double)) {  		result = NumberValue;  		return true;  	}  	if (returnType == typeof(float)) {  		result = (float)NumberValue;  		return true;  	}  	if (returnType == typeof(decimal)) {  		result = (decimal)NumberValue;  		return true;  	}  	if (returnType == typeof(byte)) {  		result = (byte)NumberValue;  		return true;  	}  	if (returnType == typeof(sbyte)) {  		result = (sbyte)NumberValue;  		return true;  	}  	if (returnType == typeof(short)) {  		result = (short)NumberValue;  		return true;  	}  	if (returnType == typeof(ushort)) {  		result = (ushort)NumberValue;  		return true;  	}  	if (returnType == typeof(int)) {  		result = (int)NumberValue;  		return true;  	}  	if (returnType == typeof(uint)) {  		result = (uint)NumberValue;  		return true;  	}  	if (returnType == typeof(long)) {  		result = (long)NumberValue;  		return true;  	}  	if (returnType == typeof(ulong)) {  		result = (ulong)NumberValue;  		return true;  	}  	if (returnType == typeof(DateTime)) {  		var res = (long)NumberValue;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(DateTimeOffset)) {  		var res = (long)NumberValue;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(TimeSpan)) {  		const double TicksPerMillisecond = 10000;  		const double TicksPerSecond = 10000000;  		var res = NumberValue;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			var msTicksDouble = res * TicksPerMillisecond;  			var msTicks = (long)msTicksDouble;  			if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  				msTicks = TimeSpan.MaxValue.Ticks;  			}  			if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  				msTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (msTicks);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			var sTicksDouble = res * TicksPerSecond;  			var sTicks = (long)sTicksDouble;  			if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  				sTicks = TimeSpan.MaxValue.Ticks;  			}  			if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  				sTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (sTicks);  			return true;  		default:  			result = null;  			return false;  		}  	}  	break;  case JsonObjectType.String:  	if (returnType == typeof(string)) {  		result = StringValue;  		return true;  	}  	if (returnType.IsEnum ()) {  		if (returnType.IsFlagsEnum ()) {  			return ParseFlagsEnum (returnType' out result);  		}  		return EnumValues.TryParse (returnType' StringValue' out result);  	}  	if (returnType == typeof(Guid)) {  		Guid guid;  		if (!Guid.TryParseExact (StringValue' "D"' out guid)) {  			result = null;  			return false;  		}  		result = guid;  		return true;  	}  	if (returnType == typeof(DateTime)) {  		DateTime res;  		bool ret;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  			ret = Methods.ReadMicrosoftStyleDateTime (StringValue' out res);  			result = res;  			return ret;  		case DateTimeFormat.ISO8601:  			ret = Methods.ReadISO8601DateTime (StringValue' out res);  			result = res;  			return ret;  		case DateTimeFormat.RFC1123:  			ret = Methods.ReadRFC1123DateTime (StringValue' out res);  			result = res;  			return ret;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(DateTimeOffset)) {  		DateTime dt;  		DateTimeOffset res;  		bool ret;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  			ret = Methods.ReadMicrosoftStyleDateTime (StringValue' out dt);  			res = dt;  			result = res;  			return ret;  		case DateTimeFormat.ISO8601:  			ret = Methods.ReadISO8601DateWithOffset (StringValue' out res);  			result = res;  			return ret;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(TimeSpan)) {  		TimeSpan ts;  		bool ret;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  			ret = Methods.ReadMicrosoftStyleTimeSpan (StringValue' out ts);  			result = ts;  			return ret;  		case DateTimeFormat.ISO8601:  			ret = Methods.ReadISO8601TimeSpan (StringValue' out ts);  			result = ts;  			return ret;  		default:  			result = null;  			return false;  		}  	}  	break;  case JsonObjectType.Object:  	if (returnType == typeof(System.Collections.IEnumerable)) {  		result = EnumerableObjectWrapper.MakeAsIEnumerable (ObjectMembers);  		return true;  	}  	if (returnType.IsGenericDictionary ()) {  		var args = returnType.GetGenericArguments ();  		var keyType = args [0];  		var valType = args [1];  		var stringKeys = keyType == typeof(string);  		var enumKeys = keyType.IsEnum ();  		// only strings and enums can be keys  		if (!(stringKeys || enumKeys)) {  			result = null;  			return false;  		}  		var coerced = new Dictionary<object' object> (ObjectMembers.Count);  		foreach (var kv in ObjectMembers) {  			object innerResult = null;  			if (kv.Value != null && !kv.Value.InnerTryConvert (valType' out innerResult)) {  				result = null;  				return false;  			}  			if (stringKeys) {  				coerced [kv.Key] = innerResult;  			} else {  				object @enum = Enum.Parse (keyType' kv.Key' ignoreCase: true);  				coerced [@enum] = innerResult;  			}  		}  		if (stringKeys) {  			result = Utils.ProjectStringDictionary (coerced' valType);  		} else {  			// enum keys  			result = Utils.ProjectEnumDictionary (coerced' keyType' valType);  		}  		return true;  	}  	break;  case JsonObjectType.Array:  	if (returnType == typeof(System.Collections.IEnumerable)) {  		result = EnumerableArrayWrapper.MakeAsIEnumerable (ArrayValue);  		return true;  	}  	if (returnType.IsGenericEnumerable ()) {  		var castTo = returnType.GetGenericArguments () [0];  		if (castTo == typeof(object)) {  			result = EnumerableArrayWrapper.MakeAsIEnumerableOfT (ArrayValue);  			return true;  		}  		bool bail = false;  		var dynamicProjection = ArrayValue.Select (val => {  			object innerResult;  			if (!val.InnerTryConvert (castTo' out innerResult)) {  				bail = true;  				return Activator.CreateInstance (castTo);  			}  			return innerResult;  		});  		result = Utils.DynamicProject (dynamicProjection' castTo);  		if (bail) {  			result = null;  			return false;  		}  		return true;  	}  	break;  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The following statement contains a magic number: switch (Type) {  case JsonObjectType.False:  	result = false;  	return returnType == typeof(bool);  case JsonObjectType.True:  	result = true;  	return returnType == typeof(bool);  case JsonObjectType.FastNumber:  	if (returnType == typeof(double)) {  		double res;  		var ret = FastNumberToDouble (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(float)) {  		float res;  		var ret = FastNumberToFloat (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(decimal)) {  		decimal res;  		var ret = FastNumberToDecimal (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(byte)) {  		byte res;  		var ret = FastNumberToByte (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(sbyte)) {  		sbyte res;  		var ret = FastNumberToSByte (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(short)) {  		short res;  		var ret = FastNumberToShort (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(ushort)) {  		ushort res;  		var ret = FastNumberToUShort (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(int)) {  		int res;  		var ret = FastNumberToInt (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(uint)) {  		uint res;  		var ret = FastNumberToUInt (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(long)) {  		long res;  		var ret = FastNumberToLong (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(ulong)) {  		ulong res;  		var ret = FastNumberToULong (out res);  		result = res;  		return ret;  	}  	if (returnType == typeof(DateTime)) {  		long res;  		var ret = FastNumberToLong (out res);  		if (!ret) {  			result = null;  			return false;  		}  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(DateTimeOffset)) {  		long res;  		var ret = FastNumberToLong (out res);  		if (!ret) {  			result = null;  			return false;  		}  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(TimeSpan)) {  		const double TicksPerMillisecond = 10000;  		const double TicksPerSecond = 10000000;  		double res;  		var ret = FastNumberToDouble (out res);  		if (!ret) {  			result = null;  			return false;  		}  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			var msTicksDouble = res * TicksPerMillisecond;  			var msTicks = (long)msTicksDouble;  			if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  				msTicks = TimeSpan.MaxValue.Ticks;  			}  			if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  				msTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (msTicks);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			var sTicksDouble = res * TicksPerSecond;  			var sTicks = (long)sTicksDouble;  			if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  				sTicks = TimeSpan.MaxValue.Ticks;  			}  			if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  				sTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (sTicks);  			return true;  		default:  			result = null;  			return false;  		}  	}  	break;  case JsonObjectType.Number:  	if (returnType == typeof(double)) {  		result = NumberValue;  		return true;  	}  	if (returnType == typeof(float)) {  		result = (float)NumberValue;  		return true;  	}  	if (returnType == typeof(decimal)) {  		result = (decimal)NumberValue;  		return true;  	}  	if (returnType == typeof(byte)) {  		result = (byte)NumberValue;  		return true;  	}  	if (returnType == typeof(sbyte)) {  		result = (sbyte)NumberValue;  		return true;  	}  	if (returnType == typeof(short)) {  		result = (short)NumberValue;  		return true;  	}  	if (returnType == typeof(ushort)) {  		result = (ushort)NumberValue;  		return true;  	}  	if (returnType == typeof(int)) {  		result = (int)NumberValue;  		return true;  	}  	if (returnType == typeof(uint)) {  		result = (uint)NumberValue;  		return true;  	}  	if (returnType == typeof(long)) {  		result = (long)NumberValue;  		return true;  	}  	if (returnType == typeof(ulong)) {  		result = (ulong)NumberValue;  		return true;  	}  	if (returnType == typeof(DateTime)) {  		var res = (long)NumberValue;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpoch + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(DateTimeOffset)) {  		var res = (long)NumberValue;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds (res);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			result = Methods.UnixEpochOffset + TimeSpan.FromSeconds (res);  			return true;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(TimeSpan)) {  		const double TicksPerMillisecond = 10000;  		const double TicksPerSecond = 10000000;  		var res = NumberValue;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MillisecondsSinceUnixEpoch:  			var msTicksDouble = res * TicksPerMillisecond;  			var msTicks = (long)msTicksDouble;  			if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  				msTicks = TimeSpan.MaxValue.Ticks;  			}  			if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  				msTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (msTicks);  			return true;  		case DateTimeFormat.SecondsSinceUnixEpoch:  			var sTicksDouble = res * TicksPerSecond;  			var sTicks = (long)sTicksDouble;  			if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  				sTicks = TimeSpan.MaxValue.Ticks;  			}  			if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  				sTicks = TimeSpan.MinValue.Ticks;  			}  			result = new TimeSpan (sTicks);  			return true;  		default:  			result = null;  			return false;  		}  	}  	break;  case JsonObjectType.String:  	if (returnType == typeof(string)) {  		result = StringValue;  		return true;  	}  	if (returnType.IsEnum ()) {  		if (returnType.IsFlagsEnum ()) {  			return ParseFlagsEnum (returnType' out result);  		}  		return EnumValues.TryParse (returnType' StringValue' out result);  	}  	if (returnType == typeof(Guid)) {  		Guid guid;  		if (!Guid.TryParseExact (StringValue' "D"' out guid)) {  			result = null;  			return false;  		}  		result = guid;  		return true;  	}  	if (returnType == typeof(DateTime)) {  		DateTime res;  		bool ret;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  			ret = Methods.ReadMicrosoftStyleDateTime (StringValue' out res);  			result = res;  			return ret;  		case DateTimeFormat.ISO8601:  			ret = Methods.ReadISO8601DateTime (StringValue' out res);  			result = res;  			return ret;  		case DateTimeFormat.RFC1123:  			ret = Methods.ReadRFC1123DateTime (StringValue' out res);  			result = res;  			return ret;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(DateTimeOffset)) {  		DateTime dt;  		DateTimeOffset res;  		bool ret;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  			ret = Methods.ReadMicrosoftStyleDateTime (StringValue' out dt);  			res = dt;  			result = res;  			return ret;  		case DateTimeFormat.ISO8601:  			ret = Methods.ReadISO8601DateWithOffset (StringValue' out res);  			result = res;  			return ret;  		default:  			result = null;  			return false;  		}  	}  	if (returnType == typeof(TimeSpan)) {  		TimeSpan ts;  		bool ret;  		switch (Options.UseDateTimeFormat) {  		case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  			ret = Methods.ReadMicrosoftStyleTimeSpan (StringValue' out ts);  			result = ts;  			return ret;  		case DateTimeFormat.ISO8601:  			ret = Methods.ReadISO8601TimeSpan (StringValue' out ts);  			result = ts;  			return ret;  		default:  			result = null;  			return false;  		}  	}  	break;  case JsonObjectType.Object:  	if (returnType == typeof(System.Collections.IEnumerable)) {  		result = EnumerableObjectWrapper.MakeAsIEnumerable (ObjectMembers);  		return true;  	}  	if (returnType.IsGenericDictionary ()) {  		var args = returnType.GetGenericArguments ();  		var keyType = args [0];  		var valType = args [1];  		var stringKeys = keyType == typeof(string);  		var enumKeys = keyType.IsEnum ();  		// only strings and enums can be keys  		if (!(stringKeys || enumKeys)) {  			result = null;  			return false;  		}  		var coerced = new Dictionary<object' object> (ObjectMembers.Count);  		foreach (var kv in ObjectMembers) {  			object innerResult = null;  			if (kv.Value != null && !kv.Value.InnerTryConvert (valType' out innerResult)) {  				result = null;  				return false;  			}  			if (stringKeys) {  				coerced [kv.Key] = innerResult;  			} else {  				object @enum = Enum.Parse (keyType' kv.Key' ignoreCase: true);  				coerced [@enum] = innerResult;  			}  		}  		if (stringKeys) {  			result = Utils.ProjectStringDictionary (coerced' valType);  		} else {  			// enum keys  			result = Utils.ProjectEnumDictionary (coerced' keyType' valType);  		}  		return true;  	}  	break;  case JsonObjectType.Array:  	if (returnType == typeof(System.Collections.IEnumerable)) {  		result = EnumerableArrayWrapper.MakeAsIEnumerable (ArrayValue);  		return true;  	}  	if (returnType.IsGenericEnumerable ()) {  		var castTo = returnType.GetGenericArguments () [0];  		if (castTo == typeof(object)) {  			result = EnumerableArrayWrapper.MakeAsIEnumerableOfT (ArrayValue);  			return true;  		}  		bool bail = false;  		var dynamicProjection = ArrayValue.Select (val => {  			object innerResult;  			if (!val.InnerTryConvert (castTo' out innerResult)) {  				bail = true;  				return Activator.CreateInstance (castTo);  			}  			return innerResult;  		});  		result = Utils.DynamicProject (dynamicProjection' castTo);  		if (bail) {  			result = null;  			return false;  		}  		return true;  	}  	break;  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The following statement contains a magic number: if (returnType == typeof(TimeSpan)) {  	const double TicksPerMillisecond = 10000;  	const double TicksPerSecond = 10000000;  	double res;  	var ret = FastNumberToDouble (out res);  	if (!ret) {  		result = null;  		return false;  	}  	switch (Options.UseDateTimeFormat) {  	case DateTimeFormat.MillisecondsSinceUnixEpoch:  		var msTicksDouble = res * TicksPerMillisecond;  		var msTicks = (long)msTicksDouble;  		if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  			msTicks = TimeSpan.MaxValue.Ticks;  		}  		if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  			msTicks = TimeSpan.MinValue.Ticks;  		}  		result = new TimeSpan (msTicks);  		return true;  	case DateTimeFormat.SecondsSinceUnixEpoch:  		var sTicksDouble = res * TicksPerSecond;  		var sTicks = (long)sTicksDouble;  		if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  			sTicks = TimeSpan.MaxValue.Ticks;  		}  		if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  			sTicks = TimeSpan.MinValue.Ticks;  		}  		result = new TimeSpan (sTicks);  		return true;  	default:  		result = null;  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The following statement contains a magic number: if (returnType == typeof(TimeSpan)) {  	const double TicksPerMillisecond = 10000;  	const double TicksPerSecond = 10000000;  	double res;  	var ret = FastNumberToDouble (out res);  	if (!ret) {  		result = null;  		return false;  	}  	switch (Options.UseDateTimeFormat) {  	case DateTimeFormat.MillisecondsSinceUnixEpoch:  		var msTicksDouble = res * TicksPerMillisecond;  		var msTicks = (long)msTicksDouble;  		if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  			msTicks = TimeSpan.MaxValue.Ticks;  		}  		if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  			msTicks = TimeSpan.MinValue.Ticks;  		}  		result = new TimeSpan (msTicks);  		return true;  	case DateTimeFormat.SecondsSinceUnixEpoch:  		var sTicksDouble = res * TicksPerSecond;  		var sTicks = (long)sTicksDouble;  		if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  			sTicks = TimeSpan.MaxValue.Ticks;  		}  		if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  			sTicks = TimeSpan.MinValue.Ticks;  		}  		result = new TimeSpan (sTicks);  		return true;  	default:  		result = null;  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The following statement contains a magic number: if (returnType == typeof(TimeSpan)) {  	const double TicksPerMillisecond = 10000;  	const double TicksPerSecond = 10000000;  	var res = NumberValue;  	switch (Options.UseDateTimeFormat) {  	case DateTimeFormat.MillisecondsSinceUnixEpoch:  		var msTicksDouble = res * TicksPerMillisecond;  		var msTicks = (long)msTicksDouble;  		if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  			msTicks = TimeSpan.MaxValue.Ticks;  		}  		if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  			msTicks = TimeSpan.MinValue.Ticks;  		}  		result = new TimeSpan (msTicks);  		return true;  	case DateTimeFormat.SecondsSinceUnixEpoch:  		var sTicksDouble = res * TicksPerSecond;  		var sTicks = (long)sTicksDouble;  		if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  			sTicks = TimeSpan.MaxValue.Ticks;  		}  		if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  			sTicks = TimeSpan.MinValue.Ticks;  		}  		result = new TimeSpan (sTicks);  		return true;  	default:  		result = null;  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The following statement contains a magic number: if (returnType == typeof(TimeSpan)) {  	const double TicksPerMillisecond = 10000;  	const double TicksPerSecond = 10000000;  	var res = NumberValue;  	switch (Options.UseDateTimeFormat) {  	case DateTimeFormat.MillisecondsSinceUnixEpoch:  		var msTicksDouble = res * TicksPerMillisecond;  		var msTicks = (long)msTicksDouble;  		if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  			msTicks = TimeSpan.MaxValue.Ticks;  		}  		if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  			msTicks = TimeSpan.MinValue.Ticks;  		}  		result = new TimeSpan (msTicks);  		return true;  	case DateTimeFormat.SecondsSinceUnixEpoch:  		var sTicksDouble = res * TicksPerSecond;  		var sTicks = (long)sTicksDouble;  		if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  			sTicks = TimeSpan.MaxValue.Ticks;  		}  		if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  			sTicks = TimeSpan.MinValue.Ticks;  		}  		result = new TimeSpan (sTicks);  		return true;  	default:  		result = null;  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,FastNumberToDouble,The following statement contains a magic number: if (FastNumberPart2 != 0) {  	double frac = FastNumberPart2;  	var divideBy = Math.Pow (10' FastNumberPart2Length);  	frac /= divideBy;  	ret += frac;  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,FastNumberToDouble,The following statement contains a magic number: if (FastNumberPart3 != 0) {  	double power = FastNumberPart3;  	ret *= Math.Pow (10' power);  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,FastNumberToDouble,The following statement contains a magic number: ret *= Math.Pow (10' power);  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following statement contains a magic number: if (Type == JsonObjectType.FastNumber) {  	const double TicksPerMillisecond = 10000;  	const double TicksPerSecond = 10000000;  	double res;  	var ret = FastNumberToDouble (out res);  	if (!ret) {  		ts = default(TimeSpan);  		return false;  	}  	switch (Options.UseDateTimeFormat) {  	case DateTimeFormat.MillisecondsSinceUnixEpoch:  		var msTicksDouble = res * TicksPerMillisecond;  		var msTicks = (long)msTicksDouble;  		if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  			msTicks = TimeSpan.MaxValue.Ticks;  		}  		if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  			msTicks = TimeSpan.MinValue.Ticks;  		}  		ts = new TimeSpan (msTicks);  		return true;  	case DateTimeFormat.SecondsSinceUnixEpoch:  		var sTicksDouble = res * TicksPerSecond;  		var sTicks = (long)sTicksDouble;  		if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  			sTicks = TimeSpan.MaxValue.Ticks;  		}  		if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  			sTicks = TimeSpan.MinValue.Ticks;  		}  		ts = new TimeSpan (sTicks);  		return true;  	}  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following statement contains a magic number: if (Type == JsonObjectType.FastNumber) {  	const double TicksPerMillisecond = 10000;  	const double TicksPerSecond = 10000000;  	double res;  	var ret = FastNumberToDouble (out res);  	if (!ret) {  		ts = default(TimeSpan);  		return false;  	}  	switch (Options.UseDateTimeFormat) {  	case DateTimeFormat.MillisecondsSinceUnixEpoch:  		var msTicksDouble = res * TicksPerMillisecond;  		var msTicks = (long)msTicksDouble;  		if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  			msTicks = TimeSpan.MaxValue.Ticks;  		}  		if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  			msTicks = TimeSpan.MinValue.Ticks;  		}  		ts = new TimeSpan (msTicks);  		return true;  	case DateTimeFormat.SecondsSinceUnixEpoch:  		var sTicksDouble = res * TicksPerSecond;  		var sTicks = (long)sTicksDouble;  		if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  			sTicks = TimeSpan.MaxValue.Ticks;  		}  		if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  			sTicks = TimeSpan.MinValue.Ticks;  		}  		ts = new TimeSpan (sTicks);  		return true;  	}  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following statement contains a magic number: if (Type == JsonObjectType.Number) {  	const double TicksPerMillisecond = 10000;  	const double TicksPerSecond = 10000000;  	var res = NumberValue;  	switch (Options.UseDateTimeFormat) {  	case DateTimeFormat.MillisecondsSinceUnixEpoch:  		var msTicksDouble = res * TicksPerMillisecond;  		var msTicks = (long)msTicksDouble;  		if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  			msTicks = TimeSpan.MaxValue.Ticks;  		}  		if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  			msTicks = TimeSpan.MinValue.Ticks;  		}  		ts = new TimeSpan (msTicks);  		return true;  	case DateTimeFormat.SecondsSinceUnixEpoch:  		var sTicksDouble = res * TicksPerSecond;  		var sTicks = (long)sTicksDouble;  		if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  			sTicks = TimeSpan.MaxValue.Ticks;  		}  		if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  			sTicks = TimeSpan.MinValue.Ticks;  		}  		ts = new TimeSpan (sTicks);  		return true;  	}  }  
Magic Number,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following statement contains a magic number: if (Type == JsonObjectType.Number) {  	const double TicksPerMillisecond = 10000;  	const double TicksPerSecond = 10000000;  	var res = NumberValue;  	switch (Options.UseDateTimeFormat) {  	case DateTimeFormat.MillisecondsSinceUnixEpoch:  		var msTicksDouble = res * TicksPerMillisecond;  		var msTicks = (long)msTicksDouble;  		if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  			msTicks = TimeSpan.MaxValue.Ticks;  		}  		if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  			msTicks = TimeSpan.MinValue.Ticks;  		}  		ts = new TimeSpan (msTicks);  		return true;  	case DateTimeFormat.SecondsSinceUnixEpoch:  		var sTicksDouble = res * TicksPerSecond;  		var sTicks = (long)sTicksDouble;  		if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  			sTicks = TimeSpan.MaxValue.Ticks;  		}  		if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  			sTicks = TimeSpan.MinValue.Ticks;  		}  		ts = new TimeSpan (sTicks);  		return true;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto char2;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto char3;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto char4;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto finished;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULong,The following statement contains a magic number: for (var i = 2; i < 20; i++) {  	c = reader.Peek ();  	if (c < '0' || c > '9')  		return ret;  	reader.Read ();  	if (firstDigitZero)  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	ret *= 10;  	ret += (uint)(c - '0');  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULong,The following statement contains a magic number: for (var i = 2; i < 20; i++) {  	c = reader.Peek ();  	if (c < '0' || c > '9')  		return ret;  	reader.Read ();  	if (firstDigitZero)  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	ret *= 10;  	ret += (uint)(c - '0');  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULong,The following statement contains a magic number: for (var i = 2; i < 20; i++) {  	c = reader.Peek ();  	if (c < '0' || c > '9')  		return ret;  	reader.Read ();  	if (firstDigitZero)  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	ret *= 10;  	ret += (uint)(c - '0');  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULong,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULong,The following statement contains a magic number: if (retCanBeMultiplied) {  	// remaining space will only be < 9 when we're really close  	//   to ulong.MaxValue (ie. we've read 1844674407370955161   	//   and are now on the last digit' which could be [0' 5])  	var remainingSpace = (ulong.MaxValue - (ret * 10UL));  	var asAdd = (uint)(c - '0');  	if (asAdd <= remainingSpace) {  		// we fit the criteria' advance!  		reader.Read ();  		ret *= 10;  		ret += asAdd;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULong,The following statement contains a magic number: if (asAdd <= remainingSpace) {  	// we fit the criteria' advance!  	reader.Read ();  	ret *= 10;  	ret += asAdd;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULong,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadLong,The following statement contains a magic number: while ((c = reader.Peek ()) != -1) {  	c -= '0';  	if (c < 0 || c > 9)  		break;  	reader.Read ();  	// skip digit  	ret *= 10;  	ret += c;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadLong,The following statement contains a magic number: while ((c = reader.Peek ()) != -1) {  	c -= '0';  	if (c < 0 || c > 9)  		break;  	reader.Read ();  	// skip digit  	ret *= 10;  	ret += c;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadLong,The following statement contains a magic number: if (c < 0 || c > 9)  	break;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadLong,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: while ((c = reader.Peek ()) != -1) {  	c -= '0';  	if (c < 0 || c > 9) {  		ulongRet = null;  		return;  	}  	reader.Read ();  	// skip digit  	length++;  	if (length == maxUIntLength)  		break;  	uintRet *= 10;  	uintRet += (uint)c;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: while ((c = reader.Peek ()) != -1) {  	c -= '0';  	if (c < 0 || c > 9) {  		ulongRet = null;  		return;  	}  	reader.Read ();  	// skip digit  	length++;  	if (length == maxUIntLength)  		break;  	uintRet *= 10;  	uintRet += (uint)c;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: if (c < 0 || c > 9) {  	ulongRet = null;  	return;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: uintRet *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: ulongRet *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: while ((c = reader.Peek ()) != -1) {  	c -= '0';  	if (c < 0 || c > 9) {  		return;  	}  	reader.Read ();  	// skip digit  	if (length == maxULongLength)  		break;  	length++;  	ulongRet *= 10;  	ulongRet += (ulong)c;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: while ((c = reader.Peek ()) != -1) {  	c -= '0';  	if (c < 0 || c > 9) {  		return;  	}  	reader.Read ();  	// skip digit  	if (length == maxULongLength)  		break;  	length++;  	ulongRet *= 10;  	ulongRet += (ulong)c;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: if (c < 0 || c > 9) {  	return;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: ulongRet *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: try {  	checked {  		var ulongRet2 = ulongRet;  		ulongRet2 *= 10;  		ulongRet2 += (ulong)c;  		ulongRet = ulongRet2;  		length++;  	}  } catch (OverflowException) {  	// whelp' looks like we're dropping that character  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: checked {  	var ulongRet2 = ulongRet;  	ulongRet2 *= 10;  	ulongRet2 += (ulong)c;  	ulongRet = ulongRet2;  	length++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: ulongRet2 *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: while ((c = reader.Peek ()) != -1) {  	c -= '0';  	if (c < 0 || c > 9) {  		return;  	}  	reader.Read ();  	// skip digit  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: if (c < 0 || c > 9) {  	return;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: if (str.Length < 9)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: if (str [0] != '/' || str [1] != 'D' || str [2] != 'a' || str [3] != 't' || str [4] != 'e' || str [5] != '(') {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: if (str [0] != '/' || str [1] != 'D' || str [2] != 'a' || str [3] != 't' || str [4] != 'e' || str [5] != '(') {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: if (str [0] != '/' || str [1] != 'D' || str [2] != 'a' || str [3] != 't' || str [4] != 'e' || str [5] != '(') {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: if (str [0] != '/' || str [1] != 'D' || str [2] != 'a' || str [3] != 't' || str [4] != 'e' || str [5] != '(') {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: for (var i = 0; ix < str.Length - 1 && i < 20; i++) {  	l *= 10;  	l += (c - '0');  	ix++;  	c = str [ix];  	if (c < '0' || c > '9')  		break;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: for (var i = 0; ix < str.Length - 1 && i < 20; i++) {  	l *= 10;  	l += (c - '0');  	ix++;  	c = str [ix];  	if (c < '0' || c > '9')  		break;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: l *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: if (hasTimeZone) {  	ix++;  	for (var i = 0; i < 4; i++) {  		if (ix == str.Length)  			return false;  		c = str [ix];  		if (c < '0' || c > '9')  			return false;  		ix++;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: for (var i = 0; i < 4; i++) {  	if (ix == str.Length)  		return false;  	c = str [ix];  	if (c < '0' || c > '9')  		return false;  	ix++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: if (remainingLen != 2)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: if (str.Length < 9)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: if (str [0] != '/' || str [1] != 'D' || str [2] != 'a' || str [3] != 't' || str [4] != 'e' || str [5] != '(') {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: if (str [0] != '/' || str [1] != 'D' || str [2] != 'a' || str [3] != 't' || str [4] != 'e' || str [5] != '(') {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: if (str [0] != '/' || str [1] != 'D' || str [2] != 'a' || str [3] != 't' || str [4] != 'e' || str [5] != '(') {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: if (str [0] != '/' || str [1] != 'D' || str [2] != 'a' || str [3] != 't' || str [4] != 'e' || str [5] != '(') {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: for (var i = 0; ix < str.Length - 1 && i < 20; i++) {  	l *= 10;  	l += (c - '0');  	ix++;  	c = str [ix];  	if (c < '0' || c > '9')  		break;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: for (var i = 0; ix < str.Length - 1 && i < 20; i++) {  	l *= 10;  	l += (c - '0');  	ix++;  	c = str [ix];  	if (c < '0' || c > '9')  		break;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: l *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: if (hasTimeZone) {  	tsIsNegative = str [ix] == '-';  	ix++;  	if (ix == str.Length)  		return false;  	c = str [ix];  	ix++;  	if (c < '0' || c > '9')  		return false;  	tsHour = c - '0';  	if (ix == str.Length)  		return false;  	c = str [ix];  	ix++;  	if (c < '0' || c > '9')  		return false;  	tsHour *= 10;  	tsHour += (c - '0');  	if (ix == str.Length)  		return false;  	c = str [ix];  	ix++;  	if (c < '0' || c > '9')  		return false;  	tsMin = c - '0';  	if (ix == str.Length)  		return false;  	c = str [ix];  	ix++;  	if (c < '0' || c > '9')  		return false;  	tsMin *= 10;  	tsMin += (c - '0');  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: if (hasTimeZone) {  	tsIsNegative = str [ix] == '-';  	ix++;  	if (ix == str.Length)  		return false;  	c = str [ix];  	ix++;  	if (c < '0' || c > '9')  		return false;  	tsHour = c - '0';  	if (ix == str.Length)  		return false;  	c = str [ix];  	ix++;  	if (c < '0' || c > '9')  		return false;  	tsHour *= 10;  	tsHour += (c - '0');  	if (ix == str.Length)  		return false;  	c = str [ix];  	ix++;  	if (c < '0' || c > '9')  		return false;  	tsMin = c - '0';  	if (ix == str.Length)  		return false;  	c = str [ix];  	ix++;  	if (c < '0' || c > '9')  		return false;  	tsMin *= 10;  	tsMin += (c - '0');  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: tsHour *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: tsMin *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: if (remainingLen != 2)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleTimeSpan,The following statement contains a magic number: for (; i < str.Length; i++) {  	var c = str [i];  	if (c == '.') {  		ixOfLastPeriod = i;  		if (!pastDays) {  			days = part;  			part = 0;  			pastDays = true;  			continue;  		}  		if (!pastSeconds) {  			seconds = part;  			part = 0;  			pastSeconds = true;  			continue;  		}  		ts = default(TimeSpan);  		return false;  	}  	if (c == ':') {  		if (!pastHours) {  			hours = part;  			part = 0;  			pastHours = true;  			continue;  		}  		if (!pastMinutes) {  			minutes = part;  			part = 0;  			pastMinutes = true;  			continue;  		}  		ts = default(TimeSpan);  		return false;  	}  	if (c < '0' || c > '9') {  		ts = default(TimeSpan);  		return false;  	}  	part *= 10;  	part += (c - '0');  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleTimeSpan,The following statement contains a magic number: part *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleTimeSpan,The following statement contains a magic number: if (fraction != 0) {  	var sizeOfFraction = str.Length - (ixOfLastPeriod + 1);  	if (sizeOfFraction > 7) {  		ts = default(TimeSpan);  		return false;  	}  	var fracOfSecond = part / DivideFractionBy [sizeOfFraction - 1];  	var ms = fracOfSecond * 1000.0;  	msInt = (int)ms;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleTimeSpan,The following statement contains a magic number: if (fraction != 0) {  	var sizeOfFraction = str.Length - (ixOfLastPeriod + 1);  	if (sizeOfFraction > 7) {  		ts = default(TimeSpan);  		return false;  	}  	var fracOfSecond = part / DivideFractionBy [sizeOfFraction - 1];  	var ms = fracOfSecond * 1000.0;  	msInt = (int)ms;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleTimeSpan,The following statement contains a magic number: if (sizeOfFraction > 7) {  	ts = default(TimeSpan);  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: hour *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: min *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: sec *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'J') {  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c == 'a') {  		if (ix >= str.Length) {  			res = 0;  			return false;  		}  		c = str [ix];  		ix++;  		if (c != 'n') {  			res = 0;  			return false;  		}  		res = 1;  		return true;  	}  	if (c != 'u') {  		res = 0;  		return false;  	}  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c == 'n') {  		res = 6;  		return true;  	}  	if (c == 'l') {  		res = 7;  		return true;  	}  	res = 0;  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'J') {  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c == 'a') {  		if (ix >= str.Length) {  			res = 0;  			return false;  		}  		c = str [ix];  		ix++;  		if (c != 'n') {  			res = 0;  			return false;  		}  		res = 1;  		return true;  	}  	if (c != 'u') {  		res = 0;  		return false;  	}  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c == 'n') {  		res = 6;  		return true;  	}  	if (c == 'l') {  		res = 7;  		return true;  	}  	res = 0;  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'n') {  	res = 6;  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 6;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'l') {  	res = 7;  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 7;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'F') {  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 'e') {  		res = 0;  		return false;  	}  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 'b') {  		res = 0;  		return false;  	}  	res = 2;  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 2;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'M') {  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 'a') {  		res = 0;  		return false;  	}  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c == 'r') {  		res = 3;  		return true;  	}  	if (c == 'y') {  		res = 5;  		return true;  	}  	res = 0;  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'M') {  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 'a') {  		res = 0;  		return false;  	}  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c == 'r') {  		res = 3;  		return true;  	}  	if (c == 'y') {  		res = 5;  		return true;  	}  	res = 0;  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'r') {  	res = 3;  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 3;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'y') {  	res = 5;  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 5;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'A') {  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c == 'p') {  		if (ix >= str.Length) {  			res = 0;  			return false;  		}  		c = str [ix];  		ix++;  		if (c != 'r') {  			res = 0;  			return false;  		}  		res = 4;  		return true;  	}  	if (c == 'u') {  		if (ix >= str.Length) {  			res = 0;  			return false;  		}  		c = str [ix];  		ix++;  		if (c != 'g') {  			res = 0;  			return false;  		}  		res = 8;  		return true;  	}  	res = 0;  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'A') {  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c == 'p') {  		if (ix >= str.Length) {  			res = 0;  			return false;  		}  		c = str [ix];  		ix++;  		if (c != 'r') {  			res = 0;  			return false;  		}  		res = 4;  		return true;  	}  	if (c == 'u') {  		if (ix >= str.Length) {  			res = 0;  			return false;  		}  		c = str [ix];  		ix++;  		if (c != 'g') {  			res = 0;  			return false;  		}  		res = 8;  		return true;  	}  	res = 0;  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'p') {  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 'r') {  		res = 0;  		return false;  	}  	res = 4;  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 4;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'u') {  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 'g') {  		res = 0;  		return false;  	}  	res = 8;  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 8;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'S') {  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 'e') {  		res = 0;  		return false;  	}  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 'p') {  		res = 0;  		return false;  	}  	res = 9;  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 9;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'O') {  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 'c') {  		res = 0;  		return false;  	}  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 't') {  		res = 0;  		return false;  	}  	res = 10;  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'N') {  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 'o') {  		res = 0;  		return false;  	}  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 'v') {  		res = 0;  		return false;  	}  	res = 11;  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 11;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'D') {  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 'e') {  		res = 0;  		return false;  	}  	if (ix >= str.Length) {  		res = 0;  		return false;  	}  	c = str [ix];  	ix++;  	if (c != 'c') {  		res = 0;  		return false;  	}  	res = 12;  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 12;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTime,The following statement contains a magic number: if (str.Length > 33) {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTime,The following statement contains a magic number: if (!_ParseISO8601Time (str' tPos.Value + 2' zPlusOrMinus ?? ix' ref hasSeparators' out time)) {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTimeOffset,The following statement contains a magic number: if (str.Length > 33) {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTimeOffset,The following statement contains a magic number: if (!_ParseISO8601Time (str' tPos.Value + 2' zPlusOrMinus ?? ix' ref hasSeparators' out time)) {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601TimeZoneOffset,The following statement contains a magic number: if (len < 2)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601TimeZoneOffset,The following statement contains a magic number: hour *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601TimeZoneOffset,The following statement contains a magic number: if (hour > 24)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601TimeZoneOffset,The following statement contains a magic number: mins *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601TimeZoneOffset,The following statement contains a magic number: if (mins > 59)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (len < 4)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 10:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c != '-')  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 10:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c != '-')  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 10:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c != '-')  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 10:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c != '-')  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 10:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c != '-')  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 10:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c != '-')  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 10:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c != '-')  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 10:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c != '-')  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 10:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c != '-')  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 10:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c != '-')  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 10:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c != '-')  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 10:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c != '-')  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			return _ConvertWeekDateToDateTime (year' week' 1' out dt);  		case 8:  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			week *= 10;  			start++;  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			week += (c - '0');  			if (week == 0 || week > 53)  				return false;  			start++;  			c = str [start];  			if (c < '1' || c > '7')  				return false;  			day = (c - '0');  			return _ConvertWeekDateToDateTime (year' week' day' out dt);  		default:  			return false;  		}  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c != '-')  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c != '-')  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c != '-')  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c != '-')  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c != '-')  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c != '-')  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c != '-')  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c != '-')  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c != '-')  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c != '-')  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c != '-')  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c != '-')  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		return _ConvertWeekDateToDateTime (year' week' 1' out dt);  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		week *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		week += (c - '0');  		if (week == 0 || week > 53)  			return false;  		start++;  		c = str [start];  		if (c < '1' || c > '7')  			return false;  		day = (c - '0');  		return _ConvertWeekDateToDateTime (year' week' day' out dt);  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	return _ConvertWeekDateToDateTime (year' week' 1' out dt);  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	start++;  	c = str [start];  	if (c != '-')  		return false;  	start++;  	c = str [start];  	if (c < '1' || c > '7')  		return false;  	day = (c - '0');  	return _ConvertWeekDateToDateTime (year' week' day' out dt);  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	return _ConvertWeekDateToDateTime (year' week' 1' out dt);  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	start++;  	c = str [start];  	if (c != '-')  		return false;  	start++;  	c = str [start];  	if (c < '1' || c > '7')  		return false;  	day = (c - '0');  	return _ConvertWeekDateToDateTime (year' week' day' out dt);  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	return _ConvertWeekDateToDateTime (year' week' 1' out dt);  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	start++;  	c = str [start];  	if (c != '-')  		return false;  	start++;  	c = str [start];  	if (c < '1' || c > '7')  		return false;  	day = (c - '0');  	return _ConvertWeekDateToDateTime (year' week' day' out dt);  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	return _ConvertWeekDateToDateTime (year' week' 1' out dt);  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	start++;  	c = str [start];  	if (c != '-')  		return false;  	start++;  	c = str [start];  	if (c < '1' || c > '7')  		return false;  	day = (c - '0');  	return _ConvertWeekDateToDateTime (year' week' day' out dt);  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	return _ConvertWeekDateToDateTime (year' week' 1' out dt);  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	start++;  	c = str [start];  	if (c != '-')  		return false;  	start++;  	c = str [start];  	if (c < '1' || c > '7')  		return false;  	day = (c - '0');  	return _ConvertWeekDateToDateTime (year' week' day' out dt);  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	return _ConvertWeekDateToDateTime (year' week' 1' out dt);  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	start++;  	c = str [start];  	if (c != '-')  		return false;  	start++;  	c = str [start];  	if (c < '1' || c > '7')  		return false;  	day = (c - '0');  	return _ConvertWeekDateToDateTime (year' week' day' out dt);  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: week *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (week == 0 || week > 53)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: week *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (week == 0 || week > 53)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	return _ConvertWeekDateToDateTime (year' week' 1' out dt);  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	start++;  	c = str [start];  	if (c < '1' || c > '7')  		return false;  	day = (c - '0');  	return _ConvertWeekDateToDateTime (year' week' day' out dt);  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	return _ConvertWeekDateToDateTime (year' week' 1' out dt);  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	start++;  	c = str [start];  	if (c < '1' || c > '7')  		return false;  	day = (c - '0');  	return _ConvertWeekDateToDateTime (year' week' day' out dt);  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	return _ConvertWeekDateToDateTime (year' week' 1' out dt);  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	start++;  	c = str [start];  	if (c < '1' || c > '7')  		return false;  	day = (c - '0');  	return _ConvertWeekDateToDateTime (year' week' day' out dt);  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	return _ConvertWeekDateToDateTime (year' week' 1' out dt);  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	start++;  	c = str [start];  	if (c < '1' || c > '7')  		return false;  	day = (c - '0');  	return _ConvertWeekDateToDateTime (year' week' day' out dt);  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	return _ConvertWeekDateToDateTime (year' week' 1' out dt);  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	start++;  	c = str [start];  	if (c < '1' || c > '7')  		return false;  	day = (c - '0');  	return _ConvertWeekDateToDateTime (year' week' day' out dt);  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	return _ConvertWeekDateToDateTime (year' week' 1' out dt);  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	week *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	week += (c - '0');  	if (week == 0 || week > 53)  		return false;  	start++;  	c = str [start];  	if (c < '1' || c > '7')  		return false;  	day = (c - '0');  	return _ConvertWeekDateToDateTime (year' week' day' out dt);  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: week *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (week == 0 || week > 53)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: week *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (week == 0 || week > 53)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  		return true;  	case 8:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 366)  			return false;  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				return false;  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  		return true;  	case 10:  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		month *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		month += (c - '0');  		if (month == 0 || month > 12)  			return false;  		start++;  		if (str [start] != '-')  			return false;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		day *= 10;  		start++;  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		day += (c - '0');  		if (day == 0 || day > 31)  			return false;  		start++;  		try {  			dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  			return true;  		} catch (ArgumentOutOfRangeException) {  			return false;  		}  	default:  		return false;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	dt = new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 10:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	if (str [start] != '-')  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: month *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (month == 0 || month > 12)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (day == 0 || day > 366)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: month *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (month == 0 || month > 12)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (day == 0 || day > 31)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 366)  		return false;  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			return false;  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	dt = (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	return true;  case 8:  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	month *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	month += (c - '0');  	if (month == 0 || month > 12)  		return false;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	day *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	day += (c - '0');  	if (day == 0 || day > 31)  		return false;  	start++;  	try {  		dt = (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		return true;  	} catch (ArgumentOutOfRangeException) {  		return false;  	}  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (day == 0 || day > 366)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: month *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (month == 0 || month > 12)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: if (day == 0 || day > 31)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: if (week != 1) {  	ret += TimeSpan.FromDays (7 * (week - 1));  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: ret += TimeSpan.FromDays (7 * (week - 1));  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek) {  case DayOfWeek.Sunday:  	currentDay = 7;  	break;  case DayOfWeek.Monday:  	currentDay = 1;  	break;  case DayOfWeek.Tuesday:  	currentDay = 2;  	break;  case DayOfWeek.Wednesday:  	currentDay = 3;  	break;  case DayOfWeek.Thursday:  	currentDay = 4;  	break;  case DayOfWeek.Friday:  	currentDay = 5;  	break;  case DayOfWeek.Saturday:  	currentDay = 6;  	break;  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek) {  case DayOfWeek.Sunday:  	currentDay = 7;  	break;  case DayOfWeek.Monday:  	currentDay = 1;  	break;  case DayOfWeek.Tuesday:  	currentDay = 2;  	break;  case DayOfWeek.Wednesday:  	currentDay = 3;  	break;  case DayOfWeek.Thursday:  	currentDay = 4;  	break;  case DayOfWeek.Friday:  	currentDay = 5;  	break;  case DayOfWeek.Saturday:  	currentDay = 6;  	break;  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek) {  case DayOfWeek.Sunday:  	currentDay = 7;  	break;  case DayOfWeek.Monday:  	currentDay = 1;  	break;  case DayOfWeek.Tuesday:  	currentDay = 2;  	break;  case DayOfWeek.Wednesday:  	currentDay = 3;  	break;  case DayOfWeek.Thursday:  	currentDay = 4;  	break;  case DayOfWeek.Friday:  	currentDay = 5;  	break;  case DayOfWeek.Saturday:  	currentDay = 6;  	break;  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek) {  case DayOfWeek.Sunday:  	currentDay = 7;  	break;  case DayOfWeek.Monday:  	currentDay = 1;  	break;  case DayOfWeek.Tuesday:  	currentDay = 2;  	break;  case DayOfWeek.Wednesday:  	currentDay = 3;  	break;  case DayOfWeek.Thursday:  	currentDay = 4;  	break;  case DayOfWeek.Friday:  	currentDay = 5;  	break;  case DayOfWeek.Saturday:  	currentDay = 6;  	break;  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek) {  case DayOfWeek.Sunday:  	currentDay = 7;  	break;  case DayOfWeek.Monday:  	currentDay = 1;  	break;  case DayOfWeek.Tuesday:  	currentDay = 2;  	break;  case DayOfWeek.Wednesday:  	currentDay = 3;  	break;  case DayOfWeek.Thursday:  	currentDay = 4;  	break;  case DayOfWeek.Friday:  	currentDay = 5;  	break;  case DayOfWeek.Saturday:  	currentDay = 6;  	break;  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek) {  case DayOfWeek.Sunday:  	currentDay = 7;  	break;  case DayOfWeek.Monday:  	currentDay = 1;  	break;  case DayOfWeek.Tuesday:  	currentDay = 2;  	break;  case DayOfWeek.Wednesday:  	currentDay = 3;  	break;  case DayOfWeek.Thursday:  	currentDay = 4;  	break;  case DayOfWeek.Friday:  	currentDay = 5;  	break;  case DayOfWeek.Saturday:  	currentDay = 6;  	break;  default:  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: currentDay = 7;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: currentDay = 2;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: currentDay = 3;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: currentDay = 4;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: currentDay = 5;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: currentDay = 6;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (len < 2)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: hour *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hour > 24)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 9) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsTicks = hour * HoursToTicks;  	hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsTicks);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 9) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsTicks = hour * HoursToTicks;  	hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsTicks);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 9) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsTicks = hour * HoursToTicks;  	hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsTicks);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 9) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsTicks = hour * HoursToTicks;  	hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsTicks);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 9) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 9) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (fracLength < 9) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (fracLength < 9) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c != ':')  		return false;  	start++;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		return false;  	var min = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	min *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	min += (c - '0');  	if (min > 59)  		return false;  	// just HOUR and MINUTE part  	if (start == stop) {  		ts = new TimeSpan (hour' min' 0);  		return true;  	}  	start++;  	c = str [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  		return true;  	}  	if (c == ':')  		return false;  	var secs = 0;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	secs *= 10;  	start++;  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		ts = new TimeSpan (hour' min' secs);  		return true;  	}  	start++;  	c = str [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = str [start];  			if (c < '0' || c > '9')  				return false;  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			return false;  		long hoursAsMilliseconds = hour * HoursToTicks;  		long minsAsMilliseconds = min * MinutesToTicks;  		long secsAsMilliseconds = secs * SecondsToTicks;  		secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  		ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  		return true;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (len < 4)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: min *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (min > 59)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 8) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 8) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (fracLength < 8) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (fracLength < 8) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: secs *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	long secsAsMilliseconds = secs * SecondsToTicks;  	secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	long secsAsMilliseconds = secs * SecondsToTicks;  	secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	long secsAsMilliseconds = secs * SecondsToTicks;  	secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 7) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 7) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (fracLength < 7) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (fracLength < 7) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (len < 4)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: min *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (min > 59)  	return false;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 8) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 8) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (fracLength < 8) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (fracLength < 8) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: minsAsMilliseconds += frac * 6 * Utils.Pow10 (8 - fracLength);  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: secs *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	long secsAsMilliseconds = secs * SecondsToTicks;  	secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	long secsAsMilliseconds = secs * SecondsToTicks;  	secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = str [start];  		if (c < '0' || c > '9')  			return false;  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		return false;  	long hoursAsMilliseconds = hour * HoursToTicks;  	long minsAsMilliseconds = min * MinutesToTicks;  	long secsAsMilliseconds = secs * SecondsToTicks;  	secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  	ts = TimeSpan.FromTicks (hoursAsMilliseconds + minsAsMilliseconds + secsAsMilliseconds);  	return true;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 7) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = str [start];  	if (c < '0' || c > '9')  		return false;  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 7) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (fracLength < 7) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: if (fracLength < 7) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: secsAsMilliseconds += frac * Utils.Pow10 (7 - fracLength);  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateWithOffset,The following statement contains a magic number: if (str.Length > 33) {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateWithOffset,The following statement contains a magic number: if (!_ParseISO8601Time (str' tPos.Value + 2' zPlusOrMinus ?? ix' ref hasSeparators' out time)) {  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601TimeSpan,The following statement contains a magic number: if (month != 0) {  	// .NET (via XmlConvert) converts months to years  	// This isn't inkeeping with the spec' but of the bad choices... I choose this one  	var yearsFromMonths = ((ulong)month) / 12;  	var monthsAfterYears = ((ulong)month) % 12;  	ticks += (ulong)(yearsFromMonths * TicksPerYear + monthsAfterYears * TicksPerMonth);  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601TimeSpan,The following statement contains a magic number: if (month != 0) {  	// .NET (via XmlConvert) converts months to years  	// This isn't inkeeping with the spec' but of the bad choices... I choose this one  	var yearsFromMonths = ((ulong)month) / 12;  	var monthsAfterYears = ((ulong)month) % 12;  	ticks += (ulong)(yearsFromMonths * TicksPerYear + monthsAfterYears * TicksPerMonth);  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: while (ix != str.Length) {  	if (fracSeen) {  		return false;  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPart (str' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			return false;  		}  		if (minutesSeen) {  			return false;  		}  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			return false;  		}  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: while (ix != str.Length) {  	if (fracSeen) {  		return false;  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPart (str' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			return false;  		}  		if (minutesSeen) {  			return false;  		}  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			return false;  		}  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: while (ix != str.Length) {  	if (fracSeen) {  		return false;  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPart (str' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			return false;  		}  		if (minutesSeen) {  			return false;  		}  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			return false;  		}  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: while (ix != str.Length) {  	if (fracSeen) {  		return false;  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPart (str' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			return false;  		}  		if (minutesSeen) {  			return false;  		}  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			return false;  		}  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: while (ix != str.Length) {  	if (fracSeen) {  		return false;  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPart (str' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			return false;  		}  		if (minutesSeen) {  			return false;  		}  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			return false;  		}  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			return false;  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	return false;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: if (part == 'H') {  	if (hourSeen) {  		return false;  	}  	if (minutesSeen) {  		return false;  	}  	if (secondsSeen) {  		return false;  	}  	ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  	hourSeen = true;  	continue;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: if (part == 'H') {  	if (hourSeen) {  		return false;  	}  	if (minutesSeen) {  		return false;  	}  	if (secondsSeen) {  		return false;  	}  	ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  	hourSeen = true;  	continue;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: if (part == 'M') {  	if (minutesSeen) {  		return false;  	}  	if (secondsSeen) {  		return false;  	}  	ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  	minutesSeen = true;  	continue;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: if (part == 'M') {  	if (minutesSeen) {  		return false;  	}  	if (secondsSeen) {  		return false;  	}  	ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  	minutesSeen = true;  	continue;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: if (part == 'S') {  	if (secondsSeen) {  		return false;  	}  	ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  	secondsSeen = true;  	continue;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadPart,The following statement contains a magic number: while (true) {  	var c = str [ix];  	if (c == '.' || c == ''') {  		whole = part;  		break;  	}  	ix++;  	if (c < '0' || c > '9' || ix == str.Length) {  		whole = part;  		fraction = 0;  		fracLen = 0;  		return c;  	}  	part *= 10;  	part += (c - '0');  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadPart,The following statement contains a magic number: part *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadPart,The following statement contains a magic number: while (true) {  	var c = str [ix];  	ix++;  	if (c < '0' || c > '9' || ix == str.Length) {  		fraction = part;  		fracLen = (ix - 1) - (ixOfPeriod + 1);  		return c;  	}  	part *= 10;  	part += (c - '0');  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadPart,The following statement contains a magic number: part *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto char2;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar *= 16;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto char3;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar *= 16;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto char4;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar *= 16;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto finished;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULongThunkReader,The following statement contains a magic number: for (var i = 2; i < 20; i++) {  	c = reader.Peek ();  	if (c < '0' || c > '9')  		return ret;  	reader.Read ();  	if (firstDigitZero)  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	ret *= 10;  	ret += (uint)(c - '0');  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULongThunkReader,The following statement contains a magic number: for (var i = 2; i < 20; i++) {  	c = reader.Peek ();  	if (c < '0' || c > '9')  		return ret;  	reader.Read ();  	if (firstDigitZero)  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	ret *= 10;  	ret += (uint)(c - '0');  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULongThunkReader,The following statement contains a magic number: for (var i = 2; i < 20; i++) {  	c = reader.Peek ();  	if (c < '0' || c > '9')  		return ret;  	reader.Read ();  	if (firstDigitZero)  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	ret *= 10;  	ret += (uint)(c - '0');  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULongThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULongThunkReader,The following statement contains a magic number: if (retCanBeMultiplied) {  	// remaining space will only be < 9 when we're really close  	//   to ulong.MaxValue (ie. we've read 1844674407370955161   	//   and are now on the last digit' which could be [0' 5])  	var remainingSpace = (ulong.MaxValue - (ret * 10UL));  	var asAdd = (uint)(c - '0');  	if (asAdd <= remainingSpace) {  		// we fit the criteria' advance!  		reader.Read ();  		ret *= 10;  		ret += asAdd;  	}  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULongThunkReader,The following statement contains a magic number: if (asAdd <= remainingSpace) {  	// we fit the criteria' advance!  	reader.Read ();  	ret *= 10;  	ret += asAdd;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULongThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntThunkReader,The following statement contains a magic number: while ((c = reader.Peek ()) != -1) {  	c -= '0';  	if (c < 0 || c > 9)  		break;  	reader.Read ();  	// skip digit  	length++;  	ret *= 10;  	ret += (uint)c;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntThunkReader,The following statement contains a magic number: while ((c = reader.Peek ()) != -1) {  	c -= '0';  	if (c < 0 || c > 9)  		break;  	reader.Read ();  	// skip digit  	length++;  	ret *= 10;  	ret += (uint)c;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	break;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadLongThunkReader,The following statement contains a magic number: while ((c = reader.Peek ()) != -1) {  	c -= '0';  	if (c < 0 || c > 9)  		break;  	reader.Read ();  	// skip digit  	ret *= 10;  	ret += c;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadLongThunkReader,The following statement contains a magic number: while ((c = reader.Peek ()) != -1) {  	c -= '0';  	if (c < 0 || c > 9)  		break;  	reader.Read ();  	// skip digit  	ret *= 10;  	ret += c;  }  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadLongThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	break;  
Magic Number,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadLongThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (a <= '9') {  	a -= '0';  } else {  	if (a <= 'F') {  		a -= ('A' - 10);  	} else {  		a -= ('a' - 10);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (a <= '9') {  	a -= '0';  } else {  	if (a <= 'F') {  		a -= ('A' - 10);  	} else {  		a -= ('a' - 10);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (a <= 'F') {  	a -= ('A' - 10);  } else {  	a -= ('a' - 10);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (a <= 'F') {  	a -= ('A' - 10);  } else {  	a -= ('a' - 10);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: a -= ('A' - 10);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: a -= ('a' - 10);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (b <= '9') {  	b -= '0';  } else {  	if (b <= 'F') {  		b -= ('A' - 10);  	} else {  		b -= ('a' - 10);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (b <= '9') {  	b -= '0';  } else {  	if (b <= 'F') {  		b -= ('A' - 10);  	} else {  		b -= ('a' - 10);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (b <= 'F') {  	b -= ('A' - 10);  } else {  	b -= ('a' - 10);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (b <= 'F') {  	b -= ('A' - 10);  } else {  	b -= ('a' - 10);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: b -= ('A' - 10);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: b -= ('a' - 10);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: return (byte)(a * 16 + b);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped = (c - '0') << 12;  } else if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped = (c - '0') << 12;  } else if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped = (c - '0') << 12;  } else if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped = (c - '0') << 12;  } else if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped = (c - '0') << 12;  } else if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped = (c - '0') << 12;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped = (10 + c - 'A') << 12;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped = (10 + c - 'A') << 12;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped = (10 + c - 'a') << 12;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped = (10 + c - 'a') << 12;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 8;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 8;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 8;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 8;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 8;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (c - '0') << 8;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'A') << 8;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'A') << 8;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'a') << 8;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'a') << 8;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 4;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 4;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 4;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 4;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 4;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (c - '0') << 4;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'A') << 4;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'A') << 4;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'a') << 4;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'a') << 4;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= c - '0';  } else if (c >= 'A' && c <= 'F') {  	unescaped |= 10 + c - 'A';  } else if (c >= 'a' && c <= 'f') {  	unescaped |= 10 + c - 'a';  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= c - '0';  } else if (c >= 'A' && c <= 'F') {  	unescaped |= 10 + c - 'A';  } else if (c >= 'a' && c <= 'f') {  	unescaped |= 10 + c - 'a';  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= 10 + c - 'A';  } else if (c >= 'a' && c <= 'f') {  	unescaped |= 10 + c - 'a';  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= 10 + c - 'A';  } else if (c >= 'a' && c <= 'f') {  	unescaped |= 10 + c - 'a';  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= 10 + c - 'A';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped |= 10 + c - 'a';  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= 10 + c - 'a';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	ret += c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	ret += c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	ret += c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	ret += c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	unescaped += c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	unescaped += c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	unescaped += c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	unescaped += c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpan,The following statement contains a magic number: for (; i < strLen; i++) {  	var c = buffer [i];  	if (c == '.') {  		ixOfLastPeriod = i;  		if (!pastDays) {  			days = part;  			part = 0;  			pastDays = true;  			continue;  		}  		if (!pastSeconds) {  			seconds = part;  			part = 0;  			pastSeconds = true;  			continue;  		}  		throw new DeserializationException ("Unexpected character ."' reader' false);  	}  	if (c == ':') {  		if (!pastHours) {  			hours = part;  			part = 0;  			pastHours = true;  			continue;  		}  		if (!pastMinutes) {  			minutes = part;  			part = 0;  			pastMinutes = true;  			continue;  		}  		throw new DeserializationException ("Unexpected character :"' reader' false);  	}  	if (c < '0' || c > '9') {  		throw new DeserializationException ("Expected digit' found " + c' reader' false);  	}  	part *= 10;  	part += (c - '0');  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpan,The following statement contains a magic number: part *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpan,The following statement contains a magic number: if (fraction != 0) {  	var sizeOfFraction = strLen - (ixOfLastPeriod + 1);  	if (sizeOfFraction > 7) {  		throw new DeserializationException ("Fractional part of TimeSpan too large"' reader' false);  	}  	var fracOfSecond = part / DivideFractionBy [sizeOfFraction - 1];  	var ms = fracOfSecond * 1000.0;  	msInt = (int)ms;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpan,The following statement contains a magic number: if (fraction != 0) {  	var sizeOfFraction = strLen - (ixOfLastPeriod + 1);  	if (sizeOfFraction > 7) {  		throw new DeserializationException ("Fractional part of TimeSpan too large"' reader' false);  	}  	var fracOfSecond = part / DivideFractionBy [sizeOfFraction - 1];  	var ms = fracOfSecond * 1000.0;  	msInt = (int)ms;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpan,The following statement contains a magic number: if (sizeOfFraction > 7) {  	throw new DeserializationException ("Fractional part of TimeSpan too large"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: hour *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: min *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: sec *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'J') {  	c = reader.Read ();  	if (c == 'a') {  		c = reader.Read ();  		if (c != 'n')  			throw new DeserializationException ("Expected n"' reader' c == -1);  		return 1;  	}  	if (c != 'u')  		throw new DeserializationException ("Expected u"' reader' c == -1);  	c = reader.Read ();  	if (c == 'n')  		return 6;  	if (c == 'l')  		return 7;  	throw new DeserializationException ("Expected n' or l"' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'J') {  	c = reader.Read ();  	if (c == 'a') {  		c = reader.Read ();  		if (c != 'n')  			throw new DeserializationException ("Expected n"' reader' c == -1);  		return 1;  	}  	if (c != 'u')  		throw new DeserializationException ("Expected u"' reader' c == -1);  	c = reader.Read ();  	if (c == 'n')  		return 6;  	if (c == 'l')  		return 7;  	throw new DeserializationException ("Expected n' or l"' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'n')  	return 6;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 6;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'l')  	return 7;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 7;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'F') {  	c = reader.Read ();  	if (c != 'e')  		throw new DeserializationException ("Expected e"' reader' c == -1);  	c = reader.Read ();  	if (c != 'b')  		throw new DeserializationException ("Expected b"' reader' c == -1);  	return 2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 2;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'M') {  	c = reader.Read ();  	if (c != 'a')  		throw new DeserializationException ("Expected a"' reader' c == -1);  	c = reader.Read ();  	if (c == 'r')  		return 3;  	if (c == 'y')  		return 5;  	throw new DeserializationException ("Expected r' or y"' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'M') {  	c = reader.Read ();  	if (c != 'a')  		throw new DeserializationException ("Expected a"' reader' c == -1);  	c = reader.Read ();  	if (c == 'r')  		return 3;  	if (c == 'y')  		return 5;  	throw new DeserializationException ("Expected r' or y"' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'r')  	return 3;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 3;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'y')  	return 5;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 5;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'A') {  	c = reader.Read ();  	if (c == 'p') {  		c = reader.Read ();  		if (c != 'r')  			throw new DeserializationException ("Expected r"' reader' c == -1);  		return 4;  	}  	if (c == 'u') {  		c = reader.Read ();  		if (c != 'g')  			throw new DeserializationException ("Expected g"' reader' c == -1);  		return 8;  	}  	throw new DeserializationException ("Expected p' or u"' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'A') {  	c = reader.Read ();  	if (c == 'p') {  		c = reader.Read ();  		if (c != 'r')  			throw new DeserializationException ("Expected r"' reader' c == -1);  		return 4;  	}  	if (c == 'u') {  		c = reader.Read ();  		if (c != 'g')  			throw new DeserializationException ("Expected g"' reader' c == -1);  		return 8;  	}  	throw new DeserializationException ("Expected p' or u"' reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'p') {  	c = reader.Read ();  	if (c != 'r')  		throw new DeserializationException ("Expected r"' reader' c == -1);  	return 4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 4;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'u') {  	c = reader.Read ();  	if (c != 'g')  		throw new DeserializationException ("Expected g"' reader' c == -1);  	return 8;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 8;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'S') {  	c = reader.Read ();  	if (c != 'e')  		throw new DeserializationException ("Expected e"' reader' c == -1);  	c = reader.Read ();  	if (c != 'p')  		throw new DeserializationException ("Expected p"' reader' c == -1);  	return 9;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 9;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'O') {  	c = reader.Read ();  	if (c != 'c')  		throw new DeserializationException ("Expected c"' reader' c == -1);  	c = reader.Read ();  	if (c != 't')  		throw new DeserializationException ("Expected t"' reader' c == -1);  	return 10;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'N') {  	c = reader.Read ();  	if (c != 'o')  		throw new DeserializationException ("Expected o"' reader' c == -1);  	c = reader.Read ();  	if (c != 'v')  		throw new DeserializationException ("Expected v"' reader' c == -1);  	return 11;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 11;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: if (c == 'D') {  	c = reader.Read ();  	if (c != 'e')  		throw new DeserializationException ("Expected e"' reader' c == -1);  	c = reader.Read ();  	if (c != 'c')  		throw new DeserializationException ("Expected c"' reader' c == -1);  	return 12;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 12;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftDateTimeOffset,The following statement contains a magic number: hour *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftDateTimeOffset,The following statement contains a magic number: min *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (len < 4)  	throw new DeserializationException ("ISO8601 date must begin with a 4 character year"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	start++;  	c = buffer [start];  	if (c != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	start++;  	c = buffer [start];  	if (c != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	start++;  	c = buffer [start];  	if (c != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	start++;  	c = buffer [start];  	if (c != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	start++;  	c = buffer [start];  	if (c != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	start++;  	c = buffer [start];  	if (c != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: week *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (week == 0 || week > 53)  	throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: week *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (week == 0 || week > 53)  	throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: week *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (week == 0 || week > 53)  	throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: week *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (week == 0 || week > 53)  	throw new DeserializationException ("Expected week to be between 01 and 53"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: month *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (month == 0 || month > 12)  	throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (day == 0 || day > 366)  	throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: month *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (month == 0 || month > 12)  	throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (day == 0 || day > 31)  	throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (day == 0 || day > 366)  	throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: month *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (month == 0 || month > 12)  	throw new DeserializationException ("Expected month to be between 01 and 12"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: if (day == 0 || day > 31)  	throw new DeserializationException ("Expected day to be between 01 and 31"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (len < 2)  	throw new DeserializationException ("ISO8601 time must begin with a 2 character hour"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: hour *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hour > 24)  	throw new DeserializationException ("Expected hour to be between 00 and 24"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 9) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 9) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 9) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 9) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 9) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 9) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (fracLength < 9) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (fracLength < 9) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (len < 4)  	throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: min *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (min > 59)  	throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 8) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 8) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (fracLength < 8) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (fracLength < 8) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: secs *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	long secsAsTicks = secs * SecondsToTicks;  	secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	long secsAsTicks = secs * SecondsToTicks;  	secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	long secsAsTicks = secs * SecondsToTicks;  	secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 7) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 7) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (fracLength < 7) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (fracLength < 7) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (len < 4)  	throw new DeserializationException ("Expected minute part of ISO8601 time"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: min *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (min > 59)  	throw new DeserializationException ("Expected minute to be between 00 and 59"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 8) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 8) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (fracLength < 8) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (fracLength < 8) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: secs *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	long secsAsTicks = secs * SecondsToTicks;  	secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	long secsAsTicks = secs * SecondsToTicks;  	secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	long secsAsTicks = secs * SecondsToTicks;  	secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 7) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 7) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (fracLength < 7) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: if (fracLength < 7) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The following statement contains a magic number: if (len < 2)  	throw new DeserializationException ("Expected hour part of ISO8601 timezone offset"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The following statement contains a magic number: hour *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The following statement contains a magic number: if (hour > 24)  	throw new DeserializationException ("Expected hour offset to be between 00 and 24"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The following statement contains a magic number: if (stop - start + 1 < 2)  	throw new DeserializationException ("Not enough character for ISO8601 timezone offset"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The following statement contains a magic number: mins *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The following statement contains a magic number: if (mins > 59)  	throw new DeserializationException ("Expected minute offset to be between 00 and 59"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: if (week != 1) {  	ret += TimeSpan.FromDays (7 * (week - 1));  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: ret += TimeSpan.FromDays (7 * (week - 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek) {  case DayOfWeek.Sunday:  	currentDay = 7;  	break;  case DayOfWeek.Monday:  	currentDay = 1;  	break;  case DayOfWeek.Tuesday:  	currentDay = 2;  	break;  case DayOfWeek.Wednesday:  	currentDay = 3;  	break;  case DayOfWeek.Thursday:  	currentDay = 4;  	break;  case DayOfWeek.Friday:  	currentDay = 5;  	break;  case DayOfWeek.Saturday:  	currentDay = 6;  	break;  default:  	throw new Exception ("Unexpected DayOfWeek");  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek) {  case DayOfWeek.Sunday:  	currentDay = 7;  	break;  case DayOfWeek.Monday:  	currentDay = 1;  	break;  case DayOfWeek.Tuesday:  	currentDay = 2;  	break;  case DayOfWeek.Wednesday:  	currentDay = 3;  	break;  case DayOfWeek.Thursday:  	currentDay = 4;  	break;  case DayOfWeek.Friday:  	currentDay = 5;  	break;  case DayOfWeek.Saturday:  	currentDay = 6;  	break;  default:  	throw new Exception ("Unexpected DayOfWeek");  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek) {  case DayOfWeek.Sunday:  	currentDay = 7;  	break;  case DayOfWeek.Monday:  	currentDay = 1;  	break;  case DayOfWeek.Tuesday:  	currentDay = 2;  	break;  case DayOfWeek.Wednesday:  	currentDay = 3;  	break;  case DayOfWeek.Thursday:  	currentDay = 4;  	break;  case DayOfWeek.Friday:  	currentDay = 5;  	break;  case DayOfWeek.Saturday:  	currentDay = 6;  	break;  default:  	throw new Exception ("Unexpected DayOfWeek");  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek) {  case DayOfWeek.Sunday:  	currentDay = 7;  	break;  case DayOfWeek.Monday:  	currentDay = 1;  	break;  case DayOfWeek.Tuesday:  	currentDay = 2;  	break;  case DayOfWeek.Wednesday:  	currentDay = 3;  	break;  case DayOfWeek.Thursday:  	currentDay = 4;  	break;  case DayOfWeek.Friday:  	currentDay = 5;  	break;  case DayOfWeek.Saturday:  	currentDay = 6;  	break;  default:  	throw new Exception ("Unexpected DayOfWeek");  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek) {  case DayOfWeek.Sunday:  	currentDay = 7;  	break;  case DayOfWeek.Monday:  	currentDay = 1;  	break;  case DayOfWeek.Tuesday:  	currentDay = 2;  	break;  case DayOfWeek.Wednesday:  	currentDay = 3;  	break;  case DayOfWeek.Thursday:  	currentDay = 4;  	break;  case DayOfWeek.Friday:  	currentDay = 5;  	break;  case DayOfWeek.Saturday:  	currentDay = 6;  	break;  default:  	throw new Exception ("Unexpected DayOfWeek");  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek) {  case DayOfWeek.Sunday:  	currentDay = 7;  	break;  case DayOfWeek.Monday:  	currentDay = 1;  	break;  case DayOfWeek.Tuesday:  	currentDay = 2;  	break;  case DayOfWeek.Wednesday:  	currentDay = 3;  	break;  case DayOfWeek.Thursday:  	currentDay = 4;  	break;  case DayOfWeek.Friday:  	currentDay = 5;  	break;  case DayOfWeek.Saturday:  	currentDay = 6;  	break;  default:  	throw new Exception ("Unexpected DayOfWeek");  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: currentDay = 7;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: currentDay = 2;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: currentDay = 3;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: currentDay = 4;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: currentDay = 5;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: currentDay = 6;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,The following statement contains a magic number: if (month != 0) {  	// .NET (via XmlConvert) converts months to years  	// This isn't inkeeping with the spec' but of the bad choices... I choose this one  	var yearsFromMonths = ((ulong)month) / 12;  	var monthsAfterYears = ((ulong)month) % 12;  	ticks += (ulong)(yearsFromMonths * TicksPerYear + monthsAfterYears * TicksPerMonth);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,The following statement contains a magic number: if (month != 0) {  	// .NET (via XmlConvert) converts months to years  	// This isn't inkeeping with the spec' but of the bad choices... I choose this one  	var yearsFromMonths = ((ulong)month) / 12;  	var monthsAfterYears = ((ulong)month) % 12;  	ticks += (ulong)(yearsFromMonths * TicksPerYear + monthsAfterYears * TicksPerMonth);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: while (ix != strLen) {  	if (fracSeen) {  		throw new DeserializationException ("Expected Time part of TimeSpan to end"' reader' false);  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPart (reader' str' strLen' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen twice"' reader' false);  		}  		if (minutesSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' reader' false);  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen twice"' reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' reader' false);  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			throw new DeserializationException ("Seconds part of TimeSpan seen twice"' reader' false);  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	throw new DeserializationException ("Expected H' M' or S but found: " + part' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: while (ix != strLen) {  	if (fracSeen) {  		throw new DeserializationException ("Expected Time part of TimeSpan to end"' reader' false);  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPart (reader' str' strLen' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen twice"' reader' false);  		}  		if (minutesSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' reader' false);  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen twice"' reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' reader' false);  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			throw new DeserializationException ("Seconds part of TimeSpan seen twice"' reader' false);  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	throw new DeserializationException ("Expected H' M' or S but found: " + part' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: while (ix != strLen) {  	if (fracSeen) {  		throw new DeserializationException ("Expected Time part of TimeSpan to end"' reader' false);  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPart (reader' str' strLen' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen twice"' reader' false);  		}  		if (minutesSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' reader' false);  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen twice"' reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' reader' false);  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			throw new DeserializationException ("Seconds part of TimeSpan seen twice"' reader' false);  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	throw new DeserializationException ("Expected H' M' or S but found: " + part' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: while (ix != strLen) {  	if (fracSeen) {  		throw new DeserializationException ("Expected Time part of TimeSpan to end"' reader' false);  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPart (reader' str' strLen' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen twice"' reader' false);  		}  		if (minutesSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' reader' false);  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen twice"' reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' reader' false);  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			throw new DeserializationException ("Seconds part of TimeSpan seen twice"' reader' false);  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	throw new DeserializationException ("Expected H' M' or S but found: " + part' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: while (ix != strLen) {  	if (fracSeen) {  		throw new DeserializationException ("Expected Time part of TimeSpan to end"' reader' false);  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPart (reader' str' strLen' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen twice"' reader' false);  		}  		if (minutesSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' reader' false);  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen twice"' reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' reader' false);  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			throw new DeserializationException ("Seconds part of TimeSpan seen twice"' reader' false);  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	throw new DeserializationException ("Expected H' M' or S but found: " + part' reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: if (part == 'H') {  	if (hourSeen) {  		throw new DeserializationException ("Hour part of TimeSpan seen twice"' reader' false);  	}  	if (minutesSeen) {  		throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' reader' false);  	}  	if (secondsSeen) {  		throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' reader' false);  	}  	ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  	hourSeen = true;  	continue;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: if (part == 'H') {  	if (hourSeen) {  		throw new DeserializationException ("Hour part of TimeSpan seen twice"' reader' false);  	}  	if (minutesSeen) {  		throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' reader' false);  	}  	if (secondsSeen) {  		throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' reader' false);  	}  	ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  	hourSeen = true;  	continue;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: if (part == 'M') {  	if (minutesSeen) {  		throw new DeserializationException ("Minute part of TimeSpan seen twice"' reader' false);  	}  	if (secondsSeen) {  		throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' reader' false);  	}  	ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  	minutesSeen = true;  	continue;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: if (part == 'M') {  	if (minutesSeen) {  		throw new DeserializationException ("Minute part of TimeSpan seen twice"' reader' false);  	}  	if (secondsSeen) {  		throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' reader' false);  	}  	ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  	minutesSeen = true;  	continue;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: if (part == 'S') {  	if (secondsSeen) {  		throw new DeserializationException ("Seconds part of TimeSpan seen twice"' reader' false);  	}  	ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  	secondsSeen = true;  	continue;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPart,The following statement contains a magic number: while (true) {  	var c = str [ix];  	if (c == '.' || c == ''') {  		whole = part;  		break;  	}  	ix++;  	if (c < '0' || c > '9' || ix == strLen) {  		whole = part;  		fraction = 0;  		fracLen = 0;  		return c;  	}  	part *= 10;  	part += (c - '0');  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPart,The following statement contains a magic number: part *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPart,The following statement contains a magic number: while (true) {  	var c = str [ix];  	ix++;  	if (c < '0' || c > '9' || ix == strLen) {  		fraction = part;  		fracLen = (ix - 1) - (ixOfPeriod + 1);  		return c;  	}  	part *= 10;  	part += (c - '0');  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPart,The following statement contains a magic number: part *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: temp *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: if (temp > 23)  	throw new DeserializationException ("Expected hour portion of timezone offset between 0 and 24"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: temp *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: temp *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: if (temp > 59)  	throw new DeserializationException ("Expected minute portion of timezone offset between 0 and 59"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8,The following statement contains a magic number: if (c < 0 || c > 9)  	return (byte)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8,The following statement contains a magic number: if (c < 0 || c > 9)  	return (byte)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8,The following statement contains a magic number: if (c < 0 || c > 9)  	return (sbyte)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8,The following statement contains a magic number: if (c < 0 || c > 9)  	return (sbyte)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: if (c < 0 || c > 9)  	return (short)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: if (c < 0 || c > 9)  	return (sbyte)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: if (c < 0 || c > 9)  	return (short)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: if (c < 0 || c > 9)  	return (short)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: if (c < 0 || c > 9)  	return (ushort)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: if (c < 0 || c > 9)  	return (ushort)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: if (c < 0 || c > 9)  	return (ushort)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: if (c < 0 || c > 9)  	return (ushort)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: checked {  	ret *= 10;  	ret += (uint)c;  	return ret;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDouble,The following statement contains a magic number: if (strLen >= 2 && asStr [0] == '0') {  	var secondChar = asStr [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDouble,The following statement contains a magic number: if (strLen >= 3 && asStr [0] == '-' && asStr [1] == '0') {  	var secondChar = asStr [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDouble,The following statement contains a magic number: if (strLen >= 3 && asStr [0] == '-' && asStr [1] == '0') {  	var secondChar = asStr [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArray,The following statement contains a magic number: if (idx >= 2 && buffer [0] == '0') {  	var secondChar = buffer [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArray,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArray,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: if (idx >= 2 && buffer [0] == '0') {  	var secondChar = buffer [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	while (decimalPointIdx >= 0 && endIdx > 1 && buffer [endIdx - 1] == '0') {  		endIdx--;  	}  	var startIdx = decimalPointIdx < 0 ? firstDigitIdx : Math.Min (decimalPointIdx' firstDigitIdx);  	while (startIdx < endIdx && buffer [startIdx] == '0') {  		startIdx++;  	}  	var hasIntegerComponent = buffer [startIdx] != '.';  	var includesDecimalPoint = decimalPointIdx >= 0;  	var lastCharIs5 = endIdx > 1 && buffer [endIdx - 1] == '5';  	var maxChars = 5 + (hasIntegerComponent ? 1 : 0) + (includesDecimalPoint ? 1 : 0) + (lastCharIs5 ? 1 : 0);  	if (endIdx - startIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var n = 0;  		for (idx = startIdx; idx < endIdx; ++idx) {  			if (idx != decimalPointIdx)  				n = n * 10 + buffer [idx] - '0';  		}  		if (buffer [firstValidCharIdx] == '-') {  			n = -n;  		}  		var result = (double)n;  		if (decimalPointIdx >= 0) {  			result /= DoubleDividers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	while (decimalPointIdx >= 0 && endIdx > 1 && buffer [endIdx - 1] == '0') {  		endIdx--;  	}  	var startIdx = decimalPointIdx < 0 ? firstDigitIdx : Math.Min (decimalPointIdx' firstDigitIdx);  	while (startIdx < endIdx && buffer [startIdx] == '0') {  		startIdx++;  	}  	var hasIntegerComponent = buffer [startIdx] != '.';  	var includesDecimalPoint = decimalPointIdx >= 0;  	var lastCharIs5 = endIdx > 1 && buffer [endIdx - 1] == '5';  	var maxChars = 5 + (hasIntegerComponent ? 1 : 0) + (includesDecimalPoint ? 1 : 0) + (lastCharIs5 ? 1 : 0);  	if (endIdx - startIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var n = 0;  		for (idx = startIdx; idx < endIdx; ++idx) {  			if (idx != decimalPointIdx)  				n = n * 10 + buffer [idx] - '0';  		}  		if (buffer [firstValidCharIdx] == '-') {  			n = -n;  		}  		var result = (double)n;  		if (decimalPointIdx >= 0) {  			result /= DoubleDividers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: if (endIdx - startIdx <= maxChars) {  	if (decimalPointIdx == endIdx - 1) {  		decimalPointIdx = -1;  		endIdx--;  	}  	var n = 0;  	for (idx = startIdx; idx < endIdx; ++idx) {  		if (idx != decimalPointIdx)  			n = n * 10 + buffer [idx] - '0';  	}  	if (buffer [firstValidCharIdx] == '-') {  		n = -n;  	}  	var result = (double)n;  	if (decimalPointIdx >= 0) {  		result /= DoubleDividers [endIdx - decimalPointIdx - 1];  	}  	return result;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: for (idx = startIdx; idx < endIdx; ++idx) {  	if (idx != decimalPointIdx)  		n = n * 10 + buffer [idx] - '0';  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: if (idx != decimalPointIdx)  	n = n * 10 + buffer [idx] - '0';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: n = n * 10 + buffer [idx] - '0';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingle,The following statement contains a magic number: if (strLen >= 2 && asStr [0] == '0') {  	var secondChar = asStr [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingle,The following statement contains a magic number: if (strLen >= 3 && asStr [0] == '-' && asStr [1] == '0') {  	var secondChar = asStr [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingle,The following statement contains a magic number: if (strLen >= 3 && asStr [0] == '-' && asStr [1] == '0') {  	var secondChar = asStr [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArray,The following statement contains a magic number: if (idx >= 2 && buffer [0] == '0') {  	var secondChar = buffer [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArray,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArray,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: if (idx >= 2 && buffer [0] == '0') {  	var secondChar = buffer [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	while (decimalPointIdx >= 0 && endIdx > 1 && buffer [endIdx - 1] == '0') {  		endIdx--;  	}  	var startIdx = decimalPointIdx < 0 ? firstDigitIdx : Math.Min (decimalPointIdx' firstDigitIdx);  	while (startIdx < endIdx && buffer [startIdx] == '0') {  		startIdx++;  	}  	var hasIntegerComponent = buffer [startIdx] != '.';  	var includesDecimalPoint = decimalPointIdx >= 0;  	var maxChars = 6 + (hasIntegerComponent ? 1 : 0) + (includesDecimalPoint ? 1 : 0);  	if (endIdx - startIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var n = 0;  		for (idx = startIdx; idx < endIdx; idx++) {  			if (idx != decimalPointIdx) {  				n = n * 10 + buffer [idx] - '0';  			}  		}  		if (buffer [firstValidCharIdx] == '-') {  			n = -n;  		}  		var result = (float)n;  		if (decimalPointIdx >= 0) {  			result /= SingleDividers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	while (decimalPointIdx >= 0 && endIdx > 1 && buffer [endIdx - 1] == '0') {  		endIdx--;  	}  	var startIdx = decimalPointIdx < 0 ? firstDigitIdx : Math.Min (decimalPointIdx' firstDigitIdx);  	while (startIdx < endIdx && buffer [startIdx] == '0') {  		startIdx++;  	}  	var hasIntegerComponent = buffer [startIdx] != '.';  	var includesDecimalPoint = decimalPointIdx >= 0;  	var maxChars = 6 + (hasIntegerComponent ? 1 : 0) + (includesDecimalPoint ? 1 : 0);  	if (endIdx - startIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var n = 0;  		for (idx = startIdx; idx < endIdx; idx++) {  			if (idx != decimalPointIdx) {  				n = n * 10 + buffer [idx] - '0';  			}  		}  		if (buffer [firstValidCharIdx] == '-') {  			n = -n;  		}  		var result = (float)n;  		if (decimalPointIdx >= 0) {  			result /= SingleDividers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: if (endIdx - startIdx <= maxChars) {  	if (decimalPointIdx == endIdx - 1) {  		decimalPointIdx = -1;  		endIdx--;  	}  	var n = 0;  	for (idx = startIdx; idx < endIdx; idx++) {  		if (idx != decimalPointIdx) {  			n = n * 10 + buffer [idx] - '0';  		}  	}  	if (buffer [firstValidCharIdx] == '-') {  		n = -n;  	}  	var result = (float)n;  	if (decimalPointIdx >= 0) {  		result /= SingleDividers [endIdx - decimalPointIdx - 1];  	}  	return result;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: for (idx = startIdx; idx < endIdx; idx++) {  	if (idx != decimalPointIdx) {  		n = n * 10 + buffer [idx] - '0';  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: if (idx != decimalPointIdx) {  	n = n * 10 + buffer [idx] - '0';  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: n = n * 10 + buffer [idx] - '0';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimal,The following statement contains a magic number: if (strLen >= 2 && asStr [0] == '0') {  	var secondChar = asStr [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimal,The following statement contains a magic number: if (strLen >= 3 && asStr [0] == '-' && asStr [1] == '0') {  	var secondChar = asStr [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimal,The following statement contains a magic number: if (strLen >= 3 && asStr [0] == '-' && asStr [1] == '0') {  	var secondChar = asStr [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArray,The following statement contains a magic number: if (idx >= 2 && buffer [0] == '0') {  	var secondChar = buffer [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArray,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArray,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (idx >= 2 && buffer [0] == '0') {  	var secondChar = buffer [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	var maxChars = decimalPointIdx < 0 ? 18 : 19;  	if (endIdx - firstDigitIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var negative = buffer [firstValidCharIdx] == '-';  		decimal result;  		var n1 = 0;  		// we use int rather than long so as to work well on 32-bit runtime  		for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  			if (idx != decimalPointIdx) {  				n1 = n1 * 10 + buffer [idx] - '0';  			}  		}  		if (negative) {  			n1 = -n1;  		}  		if (idx == endIdx) {  			result = n1;  		} else {  			var n2 = 0;  			var multiplier = 1;  			while (idx < endIdx) {  				if (idx != decimalPointIdx) {  					multiplier *= 10;  					n2 = n2 * 10 + buffer [idx] - '0';  				}  				idx++;  			}  			if (negative) {  				n2 = -n2;  			}  			result = (long)n1 * multiplier + (long)n2;  		}  		if (decimalPointIdx > 0) {  			result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	var maxChars = decimalPointIdx < 0 ? 18 : 19;  	if (endIdx - firstDigitIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var negative = buffer [firstValidCharIdx] == '-';  		decimal result;  		var n1 = 0;  		// we use int rather than long so as to work well on 32-bit runtime  		for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  			if (idx != decimalPointIdx) {  				n1 = n1 * 10 + buffer [idx] - '0';  			}  		}  		if (negative) {  			n1 = -n1;  		}  		if (idx == endIdx) {  			result = n1;  		} else {  			var n2 = 0;  			var multiplier = 1;  			while (idx < endIdx) {  				if (idx != decimalPointIdx) {  					multiplier *= 10;  					n2 = n2 * 10 + buffer [idx] - '0';  				}  				idx++;  			}  			if (negative) {  				n2 = -n2;  			}  			result = (long)n1 * multiplier + (long)n2;  		}  		if (decimalPointIdx > 0) {  			result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	var maxChars = decimalPointIdx < 0 ? 18 : 19;  	if (endIdx - firstDigitIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var negative = buffer [firstValidCharIdx] == '-';  		decimal result;  		var n1 = 0;  		// we use int rather than long so as to work well on 32-bit runtime  		for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  			if (idx != decimalPointIdx) {  				n1 = n1 * 10 + buffer [idx] - '0';  			}  		}  		if (negative) {  			n1 = -n1;  		}  		if (idx == endIdx) {  			result = n1;  		} else {  			var n2 = 0;  			var multiplier = 1;  			while (idx < endIdx) {  				if (idx != decimalPointIdx) {  					multiplier *= 10;  					n2 = n2 * 10 + buffer [idx] - '0';  				}  				idx++;  			}  			if (negative) {  				n2 = -n2;  			}  			result = (long)n1 * multiplier + (long)n2;  		}  		if (decimalPointIdx > 0) {  			result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	var maxChars = decimalPointIdx < 0 ? 18 : 19;  	if (endIdx - firstDigitIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var negative = buffer [firstValidCharIdx] == '-';  		decimal result;  		var n1 = 0;  		// we use int rather than long so as to work well on 32-bit runtime  		for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  			if (idx != decimalPointIdx) {  				n1 = n1 * 10 + buffer [idx] - '0';  			}  		}  		if (negative) {  			n1 = -n1;  		}  		if (idx == endIdx) {  			result = n1;  		} else {  			var n2 = 0;  			var multiplier = 1;  			while (idx < endIdx) {  				if (idx != decimalPointIdx) {  					multiplier *= 10;  					n2 = n2 * 10 + buffer [idx] - '0';  				}  				idx++;  			}  			if (negative) {  				n2 = -n2;  			}  			result = (long)n1 * multiplier + (long)n2;  		}  		if (decimalPointIdx > 0) {  			result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	var maxChars = decimalPointIdx < 0 ? 18 : 19;  	if (endIdx - firstDigitIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var negative = buffer [firstValidCharIdx] == '-';  		decimal result;  		var n1 = 0;  		// we use int rather than long so as to work well on 32-bit runtime  		for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  			if (idx != decimalPointIdx) {  				n1 = n1 * 10 + buffer [idx] - '0';  			}  		}  		if (negative) {  			n1 = -n1;  		}  		if (idx == endIdx) {  			result = n1;  		} else {  			var n2 = 0;  			var multiplier = 1;  			while (idx < endIdx) {  				if (idx != decimalPointIdx) {  					multiplier *= 10;  					n2 = n2 * 10 + buffer [idx] - '0';  				}  				idx++;  			}  			if (negative) {  				n2 = -n2;  			}  			result = (long)n1 * multiplier + (long)n2;  		}  		if (decimalPointIdx > 0) {  			result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	var maxChars = decimalPointIdx < 0 ? 18 : 19;  	if (endIdx - firstDigitIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var negative = buffer [firstValidCharIdx] == '-';  		decimal result;  		var n1 = 0;  		// we use int rather than long so as to work well on 32-bit runtime  		for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  			if (idx != decimalPointIdx) {  				n1 = n1 * 10 + buffer [idx] - '0';  			}  		}  		if (negative) {  			n1 = -n1;  		}  		if (idx == endIdx) {  			result = n1;  		} else {  			var n2 = 0;  			var multiplier = 1;  			while (idx < endIdx) {  				if (idx != decimalPointIdx) {  					multiplier *= 10;  					n2 = n2 * 10 + buffer [idx] - '0';  				}  				idx++;  			}  			if (negative) {  				n2 = -n2;  			}  			result = (long)n1 * multiplier + (long)n2;  		}  		if (decimalPointIdx > 0) {  			result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (endIdx - firstDigitIdx <= maxChars) {  	if (decimalPointIdx == endIdx - 1) {  		decimalPointIdx = -1;  		endIdx--;  	}  	var negative = buffer [firstValidCharIdx] == '-';  	decimal result;  	var n1 = 0;  	// we use int rather than long so as to work well on 32-bit runtime  	for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  		if (idx != decimalPointIdx) {  			n1 = n1 * 10 + buffer [idx] - '0';  		}  	}  	if (negative) {  		n1 = -n1;  	}  	if (idx == endIdx) {  		result = n1;  	} else {  		var n2 = 0;  		var multiplier = 1;  		while (idx < endIdx) {  			if (idx != decimalPointIdx) {  				multiplier *= 10;  				n2 = n2 * 10 + buffer [idx] - '0';  			}  			idx++;  		}  		if (negative) {  			n2 = -n2;  		}  		result = (long)n1 * multiplier + (long)n2;  	}  	if (decimalPointIdx > 0) {  		result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  	}  	return result;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (endIdx - firstDigitIdx <= maxChars) {  	if (decimalPointIdx == endIdx - 1) {  		decimalPointIdx = -1;  		endIdx--;  	}  	var negative = buffer [firstValidCharIdx] == '-';  	decimal result;  	var n1 = 0;  	// we use int rather than long so as to work well on 32-bit runtime  	for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  		if (idx != decimalPointIdx) {  			n1 = n1 * 10 + buffer [idx] - '0';  		}  	}  	if (negative) {  		n1 = -n1;  	}  	if (idx == endIdx) {  		result = n1;  	} else {  		var n2 = 0;  		var multiplier = 1;  		while (idx < endIdx) {  			if (idx != decimalPointIdx) {  				multiplier *= 10;  				n2 = n2 * 10 + buffer [idx] - '0';  			}  			idx++;  		}  		if (negative) {  			n2 = -n2;  		}  		result = (long)n1 * multiplier + (long)n2;  	}  	if (decimalPointIdx > 0) {  		result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  	}  	return result;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (endIdx - firstDigitIdx <= maxChars) {  	if (decimalPointIdx == endIdx - 1) {  		decimalPointIdx = -1;  		endIdx--;  	}  	var negative = buffer [firstValidCharIdx] == '-';  	decimal result;  	var n1 = 0;  	// we use int rather than long so as to work well on 32-bit runtime  	for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  		if (idx != decimalPointIdx) {  			n1 = n1 * 10 + buffer [idx] - '0';  		}  	}  	if (negative) {  		n1 = -n1;  	}  	if (idx == endIdx) {  		result = n1;  	} else {  		var n2 = 0;  		var multiplier = 1;  		while (idx < endIdx) {  			if (idx != decimalPointIdx) {  				multiplier *= 10;  				n2 = n2 * 10 + buffer [idx] - '0';  			}  			idx++;  		}  		if (negative) {  			n2 = -n2;  		}  		result = (long)n1 * multiplier + (long)n2;  	}  	if (decimalPointIdx > 0) {  		result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  	}  	return result;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (endIdx - firstDigitIdx <= maxChars) {  	if (decimalPointIdx == endIdx - 1) {  		decimalPointIdx = -1;  		endIdx--;  	}  	var negative = buffer [firstValidCharIdx] == '-';  	decimal result;  	var n1 = 0;  	// we use int rather than long so as to work well on 32-bit runtime  	for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  		if (idx != decimalPointIdx) {  			n1 = n1 * 10 + buffer [idx] - '0';  		}  	}  	if (negative) {  		n1 = -n1;  	}  	if (idx == endIdx) {  		result = n1;  	} else {  		var n2 = 0;  		var multiplier = 1;  		while (idx < endIdx) {  			if (idx != decimalPointIdx) {  				multiplier *= 10;  				n2 = n2 * 10 + buffer [idx] - '0';  			}  			idx++;  		}  		if (negative) {  			n2 = -n2;  		}  		result = (long)n1 * multiplier + (long)n2;  	}  	if (decimalPointIdx > 0) {  		result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  	}  	return result;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  	if (idx != decimalPointIdx) {  		n1 = n1 * 10 + buffer [idx] - '0';  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  	if (idx != decimalPointIdx) {  		n1 = n1 * 10 + buffer [idx] - '0';  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (idx != decimalPointIdx) {  	n1 = n1 * 10 + buffer [idx] - '0';  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: n1 = n1 * 10 + buffer [idx] - '0';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (idx == endIdx) {  	result = n1;  } else {  	var n2 = 0;  	var multiplier = 1;  	while (idx < endIdx) {  		if (idx != decimalPointIdx) {  			multiplier *= 10;  			n2 = n2 * 10 + buffer [idx] - '0';  		}  		idx++;  	}  	if (negative) {  		n2 = -n2;  	}  	result = (long)n1 * multiplier + (long)n2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (idx == endIdx) {  	result = n1;  } else {  	var n2 = 0;  	var multiplier = 1;  	while (idx < endIdx) {  		if (idx != decimalPointIdx) {  			multiplier *= 10;  			n2 = n2 * 10 + buffer [idx] - '0';  		}  		idx++;  	}  	if (negative) {  		n2 = -n2;  	}  	result = (long)n1 * multiplier + (long)n2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: while (idx < endIdx) {  	if (idx != decimalPointIdx) {  		multiplier *= 10;  		n2 = n2 * 10 + buffer [idx] - '0';  	}  	idx++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: while (idx < endIdx) {  	if (idx != decimalPointIdx) {  		multiplier *= 10;  		n2 = n2 * 10 + buffer [idx] - '0';  	}  	idx++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (idx != decimalPointIdx) {  	multiplier *= 10;  	n2 = n2 * 10 + buffer [idx] - '0';  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: if (idx != decimalPointIdx) {  	multiplier *= 10;  	n2 = n2 * 10 + buffer [idx] - '0';  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: multiplier *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: n2 = n2 * 10 + buffer [idx] - '0';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (byte)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (byte)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (sbyte)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (sbyte)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (short)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (sbyte)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (short)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (short)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (ushort)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (ushort)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (ushort)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (ushort)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (int)(ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return (uint)ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ((long)ret * (negative ? -1 : 1));  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	return ret;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: checked {  	ret *= 10;  	ret += (uint)c;  	return ret;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: if (idx >= 2 && buffer [0] == '0') {  	var secondChar = buffer [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	while (decimalPointIdx >= 0 && endIdx > 1 && buffer [endIdx - 1] == '0') {  		endIdx--;  	}  	var startIdx = decimalPointIdx < 0 ? firstDigitIdx : Math.Min (decimalPointIdx' firstDigitIdx);  	while (startIdx < endIdx && buffer [startIdx] == '0') {  		startIdx++;  	}  	var hasIntegerComponent = buffer [startIdx] != '.';  	var includesDecimalPoint = decimalPointIdx >= 0;  	var lastCharIs5 = endIdx > 1 && buffer [endIdx - 1] == '5';  	var maxChars = 5 + (hasIntegerComponent ? 1 : 0) + (includesDecimalPoint ? 1 : 0) + (lastCharIs5 ? 1 : 0);  	if (endIdx - startIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var n = 0;  		for (idx = startIdx; idx < endIdx; ++idx) {  			if (idx != decimalPointIdx)  				n = n * 10 + buffer [idx] - '0';  		}  		if (buffer [firstValidCharIdx] == '-') {  			n = -n;  		}  		var result = (double)n;  		if (decimalPointIdx >= 0) {  			result /= DoubleDividers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	while (decimalPointIdx >= 0 && endIdx > 1 && buffer [endIdx - 1] == '0') {  		endIdx--;  	}  	var startIdx = decimalPointIdx < 0 ? firstDigitIdx : Math.Min (decimalPointIdx' firstDigitIdx);  	while (startIdx < endIdx && buffer [startIdx] == '0') {  		startIdx++;  	}  	var hasIntegerComponent = buffer [startIdx] != '.';  	var includesDecimalPoint = decimalPointIdx >= 0;  	var lastCharIs5 = endIdx > 1 && buffer [endIdx - 1] == '5';  	var maxChars = 5 + (hasIntegerComponent ? 1 : 0) + (includesDecimalPoint ? 1 : 0) + (lastCharIs5 ? 1 : 0);  	if (endIdx - startIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var n = 0;  		for (idx = startIdx; idx < endIdx; ++idx) {  			if (idx != decimalPointIdx)  				n = n * 10 + buffer [idx] - '0';  		}  		if (buffer [firstValidCharIdx] == '-') {  			n = -n;  		}  		var result = (double)n;  		if (decimalPointIdx >= 0) {  			result /= DoubleDividers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: if (endIdx - startIdx <= maxChars) {  	if (decimalPointIdx == endIdx - 1) {  		decimalPointIdx = -1;  		endIdx--;  	}  	var n = 0;  	for (idx = startIdx; idx < endIdx; ++idx) {  		if (idx != decimalPointIdx)  			n = n * 10 + buffer [idx] - '0';  	}  	if (buffer [firstValidCharIdx] == '-') {  		n = -n;  	}  	var result = (double)n;  	if (decimalPointIdx >= 0) {  		result /= DoubleDividers [endIdx - decimalPointIdx - 1];  	}  	return result;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: for (idx = startIdx; idx < endIdx; ++idx) {  	if (idx != decimalPointIdx)  		n = n * 10 + buffer [idx] - '0';  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: if (idx != decimalPointIdx)  	n = n * 10 + buffer [idx] - '0';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: n = n * 10 + buffer [idx] - '0';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArrayThunkReader,The following statement contains a magic number: if (idx >= 2 && buffer [0] == '0') {  	var secondChar = buffer [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArrayThunkReader,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArrayThunkReader,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleThunkReader,The following statement contains a magic number: if (strLen >= 2 && asStr [0] == '0') {  	var secondChar = asStr [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleThunkReader,The following statement contains a magic number: if (strLen >= 3 && asStr [0] == '-' && asStr [1] == '0') {  	var secondChar = asStr [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleThunkReader,The following statement contains a magic number: if (strLen >= 3 && asStr [0] == '-' && asStr [1] == '0') {  	var secondChar = asStr [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: if (idx >= 2 && buffer [0] == '0') {  	var secondChar = buffer [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	while (decimalPointIdx >= 0 && endIdx > 1 && buffer [endIdx - 1] == '0') {  		endIdx--;  	}  	var startIdx = decimalPointIdx < 0 ? firstDigitIdx : Math.Min (decimalPointIdx' firstDigitIdx);  	while (startIdx < endIdx && buffer [startIdx] == '0') {  		startIdx++;  	}  	var hasIntegerComponent = buffer [startIdx] != '.';  	var includesDecimalPoint = decimalPointIdx >= 0;  	var maxChars = 6 + (hasIntegerComponent ? 1 : 0) + (includesDecimalPoint ? 1 : 0);  	if (endIdx - startIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var n = 0;  		for (idx = startIdx; idx < endIdx; idx++) {  			if (idx != decimalPointIdx) {  				n = n * 10 + buffer [idx] - '0';  			}  		}  		if (buffer [firstValidCharIdx] == '-') {  			n = -n;  		}  		var result = (float)n;  		if (decimalPointIdx >= 0) {  			result /= SingleDividers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	while (decimalPointIdx >= 0 && endIdx > 1 && buffer [endIdx - 1] == '0') {  		endIdx--;  	}  	var startIdx = decimalPointIdx < 0 ? firstDigitIdx : Math.Min (decimalPointIdx' firstDigitIdx);  	while (startIdx < endIdx && buffer [startIdx] == '0') {  		startIdx++;  	}  	var hasIntegerComponent = buffer [startIdx] != '.';  	var includesDecimalPoint = decimalPointIdx >= 0;  	var maxChars = 6 + (hasIntegerComponent ? 1 : 0) + (includesDecimalPoint ? 1 : 0);  	if (endIdx - startIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var n = 0;  		for (idx = startIdx; idx < endIdx; idx++) {  			if (idx != decimalPointIdx) {  				n = n * 10 + buffer [idx] - '0';  			}  		}  		if (buffer [firstValidCharIdx] == '-') {  			n = -n;  		}  		var result = (float)n;  		if (decimalPointIdx >= 0) {  			result /= SingleDividers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: if (endIdx - startIdx <= maxChars) {  	if (decimalPointIdx == endIdx - 1) {  		decimalPointIdx = -1;  		endIdx--;  	}  	var n = 0;  	for (idx = startIdx; idx < endIdx; idx++) {  		if (idx != decimalPointIdx) {  			n = n * 10 + buffer [idx] - '0';  		}  	}  	if (buffer [firstValidCharIdx] == '-') {  		n = -n;  	}  	var result = (float)n;  	if (decimalPointIdx >= 0) {  		result /= SingleDividers [endIdx - decimalPointIdx - 1];  	}  	return result;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: for (idx = startIdx; idx < endIdx; idx++) {  	if (idx != decimalPointIdx) {  		n = n * 10 + buffer [idx] - '0';  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: if (idx != decimalPointIdx) {  	n = n * 10 + buffer [idx] - '0';  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: n = n * 10 + buffer [idx] - '0';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArrayThunkReader,The following statement contains a magic number: if (idx >= 2 && buffer [0] == '0') {  	var secondChar = buffer [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArrayThunkReader,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArrayThunkReader,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleThunkReader,The following statement contains a magic number: if (strLen >= 2 && asStr [0] == '0') {  	var secondChar = asStr [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleThunkReader,The following statement contains a magic number: if (strLen >= 3 && asStr [0] == '-' && asStr [1] == '0') {  	var secondChar = asStr [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleThunkReader,The following statement contains a magic number: if (strLen >= 3 && asStr [0] == '-' && asStr [1] == '0') {  	var secondChar = asStr [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (idx >= 2 && buffer [0] == '0') {  	var secondChar = buffer [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	var maxChars = decimalPointIdx < 0 ? 18 : 19;  	if (endIdx - firstDigitIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var negative = buffer [firstValidCharIdx] == '-';  		decimal result;  		var n1 = 0;  		// we use int rather than long so as to work well on 32-bit runtime  		for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  			if (idx != decimalPointIdx) {  				n1 = n1 * 10 + buffer [idx] - '0';  			}  		}  		if (negative) {  			n1 = -n1;  		}  		if (idx == endIdx) {  			result = n1;  		} else {  			var n2 = 0;  			var multiplier = 1;  			while (idx < endIdx) {  				if (idx != decimalPointIdx) {  					multiplier *= 10;  					n2 = n2 * 10 + buffer [idx] - '0';  				}  				idx++;  			}  			if (negative) {  				n2 = -n2;  			}  			result = (long)n1 * multiplier + (long)n2;  		}  		if (decimalPointIdx > 0) {  			result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	var maxChars = decimalPointIdx < 0 ? 18 : 19;  	if (endIdx - firstDigitIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var negative = buffer [firstValidCharIdx] == '-';  		decimal result;  		var n1 = 0;  		// we use int rather than long so as to work well on 32-bit runtime  		for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  			if (idx != decimalPointIdx) {  				n1 = n1 * 10 + buffer [idx] - '0';  			}  		}  		if (negative) {  			n1 = -n1;  		}  		if (idx == endIdx) {  			result = n1;  		} else {  			var n2 = 0;  			var multiplier = 1;  			while (idx < endIdx) {  				if (idx != decimalPointIdx) {  					multiplier *= 10;  					n2 = n2 * 10 + buffer [idx] - '0';  				}  				idx++;  			}  			if (negative) {  				n2 = -n2;  			}  			result = (long)n1 * multiplier + (long)n2;  		}  		if (decimalPointIdx > 0) {  			result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	var maxChars = decimalPointIdx < 0 ? 18 : 19;  	if (endIdx - firstDigitIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var negative = buffer [firstValidCharIdx] == '-';  		decimal result;  		var n1 = 0;  		// we use int rather than long so as to work well on 32-bit runtime  		for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  			if (idx != decimalPointIdx) {  				n1 = n1 * 10 + buffer [idx] - '0';  			}  		}  		if (negative) {  			n1 = -n1;  		}  		if (idx == endIdx) {  			result = n1;  		} else {  			var n2 = 0;  			var multiplier = 1;  			while (idx < endIdx) {  				if (idx != decimalPointIdx) {  					multiplier *= 10;  					n2 = n2 * 10 + buffer [idx] - '0';  				}  				idx++;  			}  			if (negative) {  				n2 = -n2;  			}  			result = (long)n1 * multiplier + (long)n2;  		}  		if (decimalPointIdx > 0) {  			result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	var maxChars = decimalPointIdx < 0 ? 18 : 19;  	if (endIdx - firstDigitIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var negative = buffer [firstValidCharIdx] == '-';  		decimal result;  		var n1 = 0;  		// we use int rather than long so as to work well on 32-bit runtime  		for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  			if (idx != decimalPointIdx) {  				n1 = n1 * 10 + buffer [idx] - '0';  			}  		}  		if (negative) {  			n1 = -n1;  		}  		if (idx == endIdx) {  			result = n1;  		} else {  			var n2 = 0;  			var multiplier = 1;  			while (idx < endIdx) {  				if (idx != decimalPointIdx) {  					multiplier *= 10;  					n2 = n2 * 10 + buffer [idx] - '0';  				}  				idx++;  			}  			if (negative) {  				n2 = -n2;  			}  			result = (long)n1 * multiplier + (long)n2;  		}  		if (decimalPointIdx > 0) {  			result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	var maxChars = decimalPointIdx < 0 ? 18 : 19;  	if (endIdx - firstDigitIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var negative = buffer [firstValidCharIdx] == '-';  		decimal result;  		var n1 = 0;  		// we use int rather than long so as to work well on 32-bit runtime  		for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  			if (idx != decimalPointIdx) {  				n1 = n1 * 10 + buffer [idx] - '0';  			}  		}  		if (negative) {  			n1 = -n1;  		}  		if (idx == endIdx) {  			result = n1;  		} else {  			var n2 = 0;  			var multiplier = 1;  			while (idx < endIdx) {  				if (idx != decimalPointIdx) {  					multiplier *= 10;  					n2 = n2 * 10 + buffer [idx] - '0';  				}  				idx++;  			}  			if (negative) {  				n2 = -n2;  			}  			result = (long)n1 * multiplier + (long)n2;  		}  		if (decimalPointIdx > 0) {  			result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (eIdx < 0) {  	var endIdx = idx;  	var maxChars = decimalPointIdx < 0 ? 18 : 19;  	if (endIdx - firstDigitIdx <= maxChars) {  		if (decimalPointIdx == endIdx - 1) {  			decimalPointIdx = -1;  			endIdx--;  		}  		var negative = buffer [firstValidCharIdx] == '-';  		decimal result;  		var n1 = 0;  		// we use int rather than long so as to work well on 32-bit runtime  		for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  			if (idx != decimalPointIdx) {  				n1 = n1 * 10 + buffer [idx] - '0';  			}  		}  		if (negative) {  			n1 = -n1;  		}  		if (idx == endIdx) {  			result = n1;  		} else {  			var n2 = 0;  			var multiplier = 1;  			while (idx < endIdx) {  				if (idx != decimalPointIdx) {  					multiplier *= 10;  					n2 = n2 * 10 + buffer [idx] - '0';  				}  				idx++;  			}  			if (negative) {  				n2 = -n2;  			}  			result = (long)n1 * multiplier + (long)n2;  		}  		if (decimalPointIdx > 0) {  			result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  		}  		return result;  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (endIdx - firstDigitIdx <= maxChars) {  	if (decimalPointIdx == endIdx - 1) {  		decimalPointIdx = -1;  		endIdx--;  	}  	var negative = buffer [firstValidCharIdx] == '-';  	decimal result;  	var n1 = 0;  	// we use int rather than long so as to work well on 32-bit runtime  	for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  		if (idx != decimalPointIdx) {  			n1 = n1 * 10 + buffer [idx] - '0';  		}  	}  	if (negative) {  		n1 = -n1;  	}  	if (idx == endIdx) {  		result = n1;  	} else {  		var n2 = 0;  		var multiplier = 1;  		while (idx < endIdx) {  			if (idx != decimalPointIdx) {  				multiplier *= 10;  				n2 = n2 * 10 + buffer [idx] - '0';  			}  			idx++;  		}  		if (negative) {  			n2 = -n2;  		}  		result = (long)n1 * multiplier + (long)n2;  	}  	if (decimalPointIdx > 0) {  		result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  	}  	return result;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (endIdx - firstDigitIdx <= maxChars) {  	if (decimalPointIdx == endIdx - 1) {  		decimalPointIdx = -1;  		endIdx--;  	}  	var negative = buffer [firstValidCharIdx] == '-';  	decimal result;  	var n1 = 0;  	// we use int rather than long so as to work well on 32-bit runtime  	for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  		if (idx != decimalPointIdx) {  			n1 = n1 * 10 + buffer [idx] - '0';  		}  	}  	if (negative) {  		n1 = -n1;  	}  	if (idx == endIdx) {  		result = n1;  	} else {  		var n2 = 0;  		var multiplier = 1;  		while (idx < endIdx) {  			if (idx != decimalPointIdx) {  				multiplier *= 10;  				n2 = n2 * 10 + buffer [idx] - '0';  			}  			idx++;  		}  		if (negative) {  			n2 = -n2;  		}  		result = (long)n1 * multiplier + (long)n2;  	}  	if (decimalPointIdx > 0) {  		result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  	}  	return result;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (endIdx - firstDigitIdx <= maxChars) {  	if (decimalPointIdx == endIdx - 1) {  		decimalPointIdx = -1;  		endIdx--;  	}  	var negative = buffer [firstValidCharIdx] == '-';  	decimal result;  	var n1 = 0;  	// we use int rather than long so as to work well on 32-bit runtime  	for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  		if (idx != decimalPointIdx) {  			n1 = n1 * 10 + buffer [idx] - '0';  		}  	}  	if (negative) {  		n1 = -n1;  	}  	if (idx == endIdx) {  		result = n1;  	} else {  		var n2 = 0;  		var multiplier = 1;  		while (idx < endIdx) {  			if (idx != decimalPointIdx) {  				multiplier *= 10;  				n2 = n2 * 10 + buffer [idx] - '0';  			}  			idx++;  		}  		if (negative) {  			n2 = -n2;  		}  		result = (long)n1 * multiplier + (long)n2;  	}  	if (decimalPointIdx > 0) {  		result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  	}  	return result;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (endIdx - firstDigitIdx <= maxChars) {  	if (decimalPointIdx == endIdx - 1) {  		decimalPointIdx = -1;  		endIdx--;  	}  	var negative = buffer [firstValidCharIdx] == '-';  	decimal result;  	var n1 = 0;  	// we use int rather than long so as to work well on 32-bit runtime  	for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  		if (idx != decimalPointIdx) {  			n1 = n1 * 10 + buffer [idx] - '0';  		}  	}  	if (negative) {  		n1 = -n1;  	}  	if (idx == endIdx) {  		result = n1;  	} else {  		var n2 = 0;  		var multiplier = 1;  		while (idx < endIdx) {  			if (idx != decimalPointIdx) {  				multiplier *= 10;  				n2 = n2 * 10 + buffer [idx] - '0';  			}  			idx++;  		}  		if (negative) {  			n2 = -n2;  		}  		result = (long)n1 * multiplier + (long)n2;  	}  	if (decimalPointIdx > 0) {  		result *= DecimalMultipliers [endIdx - decimalPointIdx - 1];  	}  	return result;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  	if (idx != decimalPointIdx) {  		n1 = n1 * 10 + buffer [idx] - '0';  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: for (idx = firstDigitIdx; idx < endIdx && n1 < 100000000; ++idx) {  	if (idx != decimalPointIdx) {  		n1 = n1 * 10 + buffer [idx] - '0';  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (idx != decimalPointIdx) {  	n1 = n1 * 10 + buffer [idx] - '0';  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: n1 = n1 * 10 + buffer [idx] - '0';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (idx == endIdx) {  	result = n1;  } else {  	var n2 = 0;  	var multiplier = 1;  	while (idx < endIdx) {  		if (idx != decimalPointIdx) {  			multiplier *= 10;  			n2 = n2 * 10 + buffer [idx] - '0';  		}  		idx++;  	}  	if (negative) {  		n2 = -n2;  	}  	result = (long)n1 * multiplier + (long)n2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (idx == endIdx) {  	result = n1;  } else {  	var n2 = 0;  	var multiplier = 1;  	while (idx < endIdx) {  		if (idx != decimalPointIdx) {  			multiplier *= 10;  			n2 = n2 * 10 + buffer [idx] - '0';  		}  		idx++;  	}  	if (negative) {  		n2 = -n2;  	}  	result = (long)n1 * multiplier + (long)n2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: while (idx < endIdx) {  	if (idx != decimalPointIdx) {  		multiplier *= 10;  		n2 = n2 * 10 + buffer [idx] - '0';  	}  	idx++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: while (idx < endIdx) {  	if (idx != decimalPointIdx) {  		multiplier *= 10;  		n2 = n2 * 10 + buffer [idx] - '0';  	}  	idx++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (idx != decimalPointIdx) {  	multiplier *= 10;  	n2 = n2 * 10 + buffer [idx] - '0';  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: if (idx != decimalPointIdx) {  	multiplier *= 10;  	n2 = n2 * 10 + buffer [idx] - '0';  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: multiplier *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: n2 = n2 * 10 + buffer [idx] - '0';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArrayThunkReader,The following statement contains a magic number: if (idx >= 2 && buffer [0] == '0') {  	var secondChar = buffer [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArrayThunkReader,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArrayThunkReader,The following statement contains a magic number: if (idx >= 3 && buffer [0] == '-' && buffer [1] == '0') {  	var secondChar = buffer [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalThunkReader,The following statement contains a magic number: if (strLen >= 2 && asStr [0] == '0') {  	var secondChar = asStr [1];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalThunkReader,The following statement contains a magic number: if (strLen >= 3 && asStr [0] == '-' && asStr [1] == '0') {  	var secondChar = asStr [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalThunkReader,The following statement contains a magic number: if (strLen >= 3 && asStr [0] == '-' && asStr [1] == '0') {  	var secondChar = asStr [2];  	if (secondChar != '.' && secondChar != 'e' && secondChar != 'E') {  		throw new DeserializationException ("Number cannot have leading zeros"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	ret += c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	ret += c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	ret += c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	ret += c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	ret += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped = (c - '0') << 12;  } else if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped = (c - '0') << 12;  } else if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped = (c - '0') << 12;  } else if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped = (c - '0') << 12;  } else if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped = (c - '0') << 12;  } else if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped = (c - '0') << 12;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped = (10 + c - 'A') << 12;  } else if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped = (10 + c - 'A') << 12;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped = (10 + c - 'A') << 12;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped = (10 + c - 'a') << 12;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped = (10 + c - 'a') << 12;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped = (10 + c - 'a') << 12;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 8;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 8;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 8;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 8;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 8;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (c - '0') << 8;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 8;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'A') << 8;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'A') << 8;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 8;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'a') << 8;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'a') << 8;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 4;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 4;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 4;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 4;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= (c - '0') << 4;  } else if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (c - '0') << 4;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= (10 + c - 'A') << 4;  } else if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'A') << 4;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'A') << 4;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped |= (10 + c - 'a') << 4;  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'a') << 4;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (10 + c - 'a') << 4;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= c - '0';  } else if (c >= 'A' && c <= 'F') {  	unescaped |= 10 + c - 'A';  } else if (c >= 'a' && c <= 'f') {  	unescaped |= 10 + c - 'a';  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	unescaped |= c - '0';  } else if (c >= 'A' && c <= 'F') {  	unescaped |= 10 + c - 'A';  } else if (c >= 'a' && c <= 'f') {  	unescaped |= 10 + c - 'a';  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= 10 + c - 'A';  } else if (c >= 'a' && c <= 'f') {  	unescaped |= 10 + c - 'a';  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	unescaped |= 10 + c - 'A';  } else if (c >= 'a' && c <= 'f') {  	unescaped |= 10 + c - 'a';  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= 10 + c - 'A';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	unescaped |= 10 + c - 'a';  } else {  	throw new DeserializationException ("Expected hex digit' found: " + c' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= 10 + c - 'a';  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	encodedChar += c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	encodedChar += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (a <= '9') {  	a -= '0';  } else {  	if (a <= 'F') {  		a -= ('A' - 10);  	} else {  		a -= ('a' - 10);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (a <= '9') {  	a -= '0';  } else {  	if (a <= 'F') {  		a -= ('A' - 10);  	} else {  		a -= ('a' - 10);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (a <= 'F') {  	a -= ('A' - 10);  } else {  	a -= ('a' - 10);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (a <= 'F') {  	a -= ('A' - 10);  } else {  	a -= ('a' - 10);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: a -= ('A' - 10);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: a -= ('a' - 10);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (b <= '9') {  	b -= '0';  } else {  	if (b <= 'F') {  		b -= ('A' - 10);  	} else {  		b -= ('a' - 10);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (b <= '9') {  	b -= '0';  } else {  	if (b <= 'F') {  		b -= ('A' - 10);  	} else {  		b -= ('a' - 10);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (b <= 'F') {  	b -= ('A' - 10);  } else {  	b -= ('a' - 10);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: if (b <= 'F') {  	b -= ('A' - 10);  } else {  	b -= ('a' - 10);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: b -= ('A' - 10);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: b -= ('a' - 10);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: return (byte)(a * 16 + b);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	unescaped += c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	unescaped += c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char3;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	unescaped += c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto char4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped *= 16;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 9) {  	unescaped += c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: if (c >= 0 && c <= 5) {  	unescaped += 10 + c;  	goto finished;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: temp *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: if (temp > 23)  	throw new DeserializationException ("Expected hour portion of timezone offset between 0 and 24"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: temp *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: temp *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new DeserializationException ("Expected digit"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: if (temp > 59)  	throw new DeserializationException ("Expected minute portion of timezone offset between 0 and 59"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (len < 4)  	throw new DeserializationException ("ISO8601 date must begin with a 4 character year"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (isWeekDate) {  	start++;  	// skip the W  	var week = 0;  	if (hasSeparators.Value) {  		// Could still be  		// YYYY-Www         length:  8  		// YYYY-Www-D       length: 10  		switch (len) {  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 10:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c != '-')  				throw new DeserializationException ("Expected -"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	} else {  		// Could still be  		// YYYYWww          length: 7  		// YYYYWwwD         length: 8  		switch (len) {  		case 7:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			return ConvertWeekDateToDateTime (year' week' 1);  		case 8:  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			week *= 10;  			start++;  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			week += (c - '0');  			if (week == 0 || week > 53)  				throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  			start++;  			c = buffer [start];  			if (c < '1' || c > '7')  				throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  			day = (c - '0');  			return ConvertWeekDateToDateTime (year' week' day);  		default:  			throw new DeserializationException ("Unexpected date string length"' ref reader' false);  		}  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// YYYY-Www         length:  8  	// YYYY-Www-D       length: 10  	switch (len) {  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  } else {  	// Could still be  	// YYYYWww          length: 7  	// YYYYWwwD         length: 8  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		return ConvertWeekDateToDateTime (year' week' 1);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		week *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		week += (c - '0');  		if (week == 0 || week > 53)  			throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '1' || c > '7')  			throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  		day = (c - '0');  		return ConvertWeekDateToDateTime (year' week' day);  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	start++;  	c = buffer [start];  	if (c != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	start++;  	c = buffer [start];  	if (c != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	start++;  	c = buffer [start];  	if (c != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	start++;  	c = buffer [start];  	if (c != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	start++;  	c = buffer [start];  	if (c != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	start++;  	c = buffer [start];  	if (c != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: week *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (week == 0 || week > 53)  	throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: week *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (week == 0 || week > 53)  	throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	return ConvertWeekDateToDateTime (year' week' 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	week *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	week += (c - '0');  	if (week == 0 || week > 53)  		throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '1' || c > '7')  		throw new DeserializationException ("Expected day to be a digit between 1 and 7"' ref reader' false);  	day = (c - '0');  	return ConvertWeekDateToDateTime (year' week' day);  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: week *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (week == 0 || week > 53)  	throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: week *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (week == 0 || week > 53)  	throw new DeserializationException ("Expected week to be between 01 and 53"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	start++;  	// Could still be:  	// YYYY-MM              length:  7  	// YYYY-DDD             length:  8  	// YYYY-MM-DD           length: 10  	switch (len) {  	case 7:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		// year is [1'9999] and month is [1'12] for sure' no need to handle errors  		return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  	case 8:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 366)  			throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  		if (day == 366) {  			var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  			if (!isLeapYear)  				throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  		}  		// year is [1'9999] and day is [1'366]' no need to handle errors  		return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  	case 10:  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		month *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		month += (c - '0');  		if (month == 0 || month > 12)  			throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  		start++;  		if (buffer [start] != '-')  			throw new DeserializationException ("Expected -"' ref reader' false);  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		day *= 10;  		start++;  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		day += (c - '0');  		if (day == 0 || day > 31)  			throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  		start++;  		try {  			return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  		} catch (ArgumentOutOfRangeException e) {  			throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  		}  	default:  		throw new DeserializationException ("Unexpected date string length"' ref reader' false);  	}  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	// year is [1'9999] and month is [1'12] for sure' no need to handle errors  	return new DateTime (year' month' 1' 0' 0' 0' DateTimeKind.Local);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 10:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	if (buffer [start] != '-')  		throw new DeserializationException ("Expected -"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: month *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (month == 0 || month > 12)  	throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (day == 0 || day > 366)  	throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: month *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (month == 0 || month > 12)  	throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (day == 0 || day > 31)  	throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len) {  case 7:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 366)  		throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  	start++;  	if (day == 366) {  		var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  		if (!isLeapYear)  			throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  	}  	// year is [1'9999] and day is [1'366]' no need to handle errors  	return (new DateTime (year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays (day - 1);  case 8:  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	month *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	month += (c - '0');  	if (month == 0 || month > 12)  		throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	day *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	day += (c - '0');  	if (day == 0 || day > 31)  		throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  	start++;  	try {  		return (new DateTime (year' month' day' 0' 0' 0' DateTimeKind.Local));  	} catch (ArgumentOutOfRangeException e) {  		throw new DeserializationException ("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);  	}  default:  	throw new DeserializationException ("Unexpected date string length"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (day == 0 || day > 366)  	throw new DeserializationException ("Expected ordinal day to be between 001 and 366"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (day == 366) {  	var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));  	if (!isLeapYear)  		throw new DeserializationException ("Ordinal day can only be 366 in a leap year"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: month *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (month == 0 || month > 12)  	throw new DeserializationException ("Expected month to be between 01 and 12"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: if (day == 0 || day > 31)  	throw new DeserializationException ("Expected day to be between 01 and 31"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (len < 2)  	throw new DeserializationException ("ISO8601 time must begin with a 2 character hour"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: hour *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hour > 24)  	throw new DeserializationException ("Expected hour to be between 00 and 24"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 9) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 9) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 9) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 9) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 9) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 9) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (fracLength < 9) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (fracLength < 9) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: hoursAsTicks += frac * 36 * Utils.Pow10 (9 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (hasSeparators.Value) {  	// Could still be  	// hh:mm  	// hh:mm:ss  	// hh:mm'fff  	// hh:mm:ss'fff  	// hh:mm.fff  	// hh:mm:ss.fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c != ':')  		throw new DeserializationException ("Expected :"' ref reader' false);  	start++;  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  } else {  	// Could still be  	// hhmmss  	// hhmm  	// hhmm'fff  	// hhmm.fff  	// hhmmss.fff  	// hhmmss'fff  	if (len < 4)  		throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  	var min = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	min *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	min += (c - '0');  	if (min > 59)  		throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  	// just HOUR and MINUTE part  	if (start == stop) {  		return new TimeSpan (hour' min' 0);  	}  	start++;  	c = buffer [start];  	// HOUR' MINUTE' and FRACTION  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 8) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  	}  	if (c == ':')  		throw new DeserializationException ("Unexpected separator in ISO8601 time"' ref reader' false);  	var secs = 0;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	secs *= 10;  	start++;  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	secs += (c - '0');  	// HOUR' MINUTE' and SECONDS  	if (start == stop) {  		return new TimeSpan (hour' min' secs);  	}  	start++;  	c = buffer [start];  	if (c == ''' || c == '.') {  		start++;  		var frac = 0;  		var fracLength = 0;  		while (start <= stop) {  			c = buffer [start];  			if (c < '0' || c > '9')  				throw new DeserializationException ("Expected digit"' ref reader' false);  			// Max precision of TimeSpan.FromTicks  			if (fracLength < 7) {  				frac *= 10;  				frac += (c - '0');  				fracLength++;  			}  			start++;  		}  		if (fracLength == 0)  			throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  		long hoursAsTicks = hour * HoursToTicks;  		long minsAsTicks = min * MinutesToTicks;  		long secsAsTicks = secs * SecondsToTicks;  		secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  		return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  	}  	throw new DeserializationException ("Expected '' or ."' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (len < 4)  	throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: min *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (min > 59)  	throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 8) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 8) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (fracLength < 8) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (fracLength < 8) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: secs *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	long secsAsTicks = secs * SecondsToTicks;  	secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	long secsAsTicks = secs * SecondsToTicks;  	secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	long secsAsTicks = secs * SecondsToTicks;  	secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 7) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 7) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (fracLength < 7) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (fracLength < 7) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (len < 4)  	throw new DeserializationException ("Expected minute part of ISO8601 time"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: min *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (min > 59)  	throw new DeserializationException ("Expected minute to be between 00 and 59"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 8) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 8) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 8) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (fracLength < 8) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (fracLength < 8) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: minsAsTicks += frac * 6 * Utils.Pow10 (8 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: secs *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	long secsAsTicks = secs * SecondsToTicks;  	secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	long secsAsTicks = secs * SecondsToTicks;  	secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (c == ''' || c == '.') {  	start++;  	var frac = 0;  	var fracLength = 0;  	while (start <= stop) {  		c = buffer [start];  		if (c < '0' || c > '9')  			throw new DeserializationException ("Expected digit"' ref reader' false);  		// Max precision of TimeSpan.FromTicks  		if (fracLength < 7) {  			frac *= 10;  			frac += (c - '0');  			fracLength++;  		}  		start++;  	}  	if (fracLength == 0)  		throw new DeserializationException ("Expected fractional part of ISO8601 time"' ref reader' false);  	long hoursAsTicks = hour * HoursToTicks;  	long minsAsTicks = min * MinutesToTicks;  	long secsAsTicks = secs * SecondsToTicks;  	secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  	return TimeSpan.FromTicks (hoursAsTicks + minsAsTicks + secsAsTicks);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 7) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: while (start <= stop) {  	c = buffer [start];  	if (c < '0' || c > '9')  		throw new DeserializationException ("Expected digit"' ref reader' false);  	// Max precision of TimeSpan.FromTicks  	if (fracLength < 7) {  		frac *= 10;  		frac += (c - '0');  		fracLength++;  	}  	start++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (fracLength < 7) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: if (fracLength < 7) {  	frac *= 10;  	frac += (c - '0');  	fracLength++;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: frac *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: secsAsTicks += frac * Utils.Pow10 (7 - fracLength);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The following statement contains a magic number: if (len < 2)  	throw new DeserializationException ("Expected hour part of ISO8601 timezone offset"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The following statement contains a magic number: hour *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The following statement contains a magic number: if (hour > 24)  	throw new DeserializationException ("Expected hour offset to be between 00 and 24"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The following statement contains a magic number: if (stop - start + 1 < 2)  	throw new DeserializationException ("Not enough character for ISO8601 timezone offset"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The following statement contains a magic number: mins *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The following statement contains a magic number: if (mins > 59)  	throw new DeserializationException ("Expected minute offset to be between 00 and 59"' ref reader' false);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: day *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: year *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: hour *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: min *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: sec *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'J') {  	c = reader.Read ();  	if (c == 'a') {  		c = reader.Read ();  		if (c != 'n')  			throw new DeserializationException ("Expected n"' ref reader' c == -1);  		return 1;  	}  	if (c != 'u')  		throw new DeserializationException ("Expected u"' ref reader' c == -1);  	c = reader.Read ();  	if (c == 'n')  		return 6;  	if (c == 'l')  		return 7;  	throw new DeserializationException ("Expected n' or l"' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'J') {  	c = reader.Read ();  	if (c == 'a') {  		c = reader.Read ();  		if (c != 'n')  			throw new DeserializationException ("Expected n"' ref reader' c == -1);  		return 1;  	}  	if (c != 'u')  		throw new DeserializationException ("Expected u"' ref reader' c == -1);  	c = reader.Read ();  	if (c == 'n')  		return 6;  	if (c == 'l')  		return 7;  	throw new DeserializationException ("Expected n' or l"' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'n')  	return 6;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 6;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'l')  	return 7;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 7;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'F') {  	c = reader.Read ();  	if (c != 'e')  		throw new DeserializationException ("Expected e"' ref reader' c == -1);  	c = reader.Read ();  	if (c != 'b')  		throw new DeserializationException ("Expected b"' ref reader' c == -1);  	return 2;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 2;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'M') {  	c = reader.Read ();  	if (c != 'a')  		throw new DeserializationException ("Expected a"' ref reader' c == -1);  	c = reader.Read ();  	if (c == 'r')  		return 3;  	if (c == 'y')  		return 5;  	throw new DeserializationException ("Expected r' or y"' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'M') {  	c = reader.Read ();  	if (c != 'a')  		throw new DeserializationException ("Expected a"' ref reader' c == -1);  	c = reader.Read ();  	if (c == 'r')  		return 3;  	if (c == 'y')  		return 5;  	throw new DeserializationException ("Expected r' or y"' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'r')  	return 3;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 3;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'y')  	return 5;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 5;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'A') {  	c = reader.Read ();  	if (c == 'p') {  		c = reader.Read ();  		if (c != 'r')  			throw new DeserializationException ("Expected r"' ref reader' c == -1);  		return 4;  	}  	if (c == 'u') {  		c = reader.Read ();  		if (c != 'g')  			throw new DeserializationException ("Expected g"' ref reader' c == -1);  		return 8;  	}  	throw new DeserializationException ("Expected p' or u"' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'A') {  	c = reader.Read ();  	if (c == 'p') {  		c = reader.Read ();  		if (c != 'r')  			throw new DeserializationException ("Expected r"' ref reader' c == -1);  		return 4;  	}  	if (c == 'u') {  		c = reader.Read ();  		if (c != 'g')  			throw new DeserializationException ("Expected g"' ref reader' c == -1);  		return 8;  	}  	throw new DeserializationException ("Expected p' or u"' ref reader' c == -1);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'p') {  	c = reader.Read ();  	if (c != 'r')  		throw new DeserializationException ("Expected r"' ref reader' c == -1);  	return 4;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 4;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'u') {  	c = reader.Read ();  	if (c != 'g')  		throw new DeserializationException ("Expected g"' ref reader' c == -1);  	return 8;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 8;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'S') {  	c = reader.Read ();  	if (c != 'e')  		throw new DeserializationException ("Expected e"' ref reader' c == -1);  	c = reader.Read ();  	if (c != 'p')  		throw new DeserializationException ("Expected p"' ref reader' c == -1);  	return 9;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 9;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'O') {  	c = reader.Read ();  	if (c != 'c')  		throw new DeserializationException ("Expected c"' ref reader' c == -1);  	c = reader.Read ();  	if (c != 't')  		throw new DeserializationException ("Expected t"' ref reader' c == -1);  	return 10;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'N') {  	c = reader.Read ();  	if (c != 'o')  		throw new DeserializationException ("Expected o"' ref reader' c == -1);  	c = reader.Read ();  	if (c != 'v')  		throw new DeserializationException ("Expected v"' ref reader' c == -1);  	return 11;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 11;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: if (c == 'D') {  	c = reader.Read ();  	if (c != 'e')  		throw new DeserializationException ("Expected e"' ref reader' c == -1);  	c = reader.Read ();  	if (c != 'c')  		throw new DeserializationException ("Expected c"' ref reader' c == -1);  	return 12;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 12;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpanThunkReader,The following statement contains a magic number: for (; i < strLen; i++) {  	var c = buffer [i];  	if (c == '.') {  		ixOfLastPeriod = i;  		if (!pastDays) {  			days = part;  			part = 0;  			pastDays = true;  			continue;  		}  		if (!pastSeconds) {  			seconds = part;  			part = 0;  			pastSeconds = true;  			continue;  		}  		throw new DeserializationException ("Unexpected character ."' ref reader' false);  	}  	if (c == ':') {  		if (!pastHours) {  			hours = part;  			part = 0;  			pastHours = true;  			continue;  		}  		if (!pastMinutes) {  			minutes = part;  			part = 0;  			pastMinutes = true;  			continue;  		}  		throw new DeserializationException ("Unexpected character :"' ref reader' false);  	}  	if (c < '0' || c > '9') {  		throw new DeserializationException ("Expected digit' found " + c' ref reader' false);  	}  	part *= 10;  	part += (c - '0');  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpanThunkReader,The following statement contains a magic number: part *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpanThunkReader,The following statement contains a magic number: if (fraction != 0) {  	var sizeOfFraction = strLen - (ixOfLastPeriod + 1);  	if (sizeOfFraction > 7) {  		throw new DeserializationException ("Fractional part of TimeSpan too large"' ref reader' false);  	}  	var fracOfSecond = part / DivideFractionBy [sizeOfFraction - 1];  	var ms = fracOfSecond * 1000.0;  	msInt = (int)ms;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpanThunkReader,The following statement contains a magic number: if (fraction != 0) {  	var sizeOfFraction = strLen - (ixOfLastPeriod + 1);  	if (sizeOfFraction > 7) {  		throw new DeserializationException ("Fractional part of TimeSpan too large"' ref reader' false);  	}  	var fracOfSecond = part / DivideFractionBy [sizeOfFraction - 1];  	var ms = fracOfSecond * 1000.0;  	msInt = (int)ms;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpanThunkReader,The following statement contains a magic number: if (sizeOfFraction > 7) {  	throw new DeserializationException ("Fractional part of TimeSpan too large"' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The following statement contains a magic number: if (month != 0) {  	// .NET (via XmlConvert) converts months to years  	// This isn't inkeeping with the spec' but of the bad choices... I choose this one  	var yearsFromMonths = ((ulong)month) / 12;  	var monthsAfterYears = ((ulong)month) % 12;  	ticks += (ulong)(yearsFromMonths * TicksPerYear + monthsAfterYears * TicksPerMonth);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The following statement contains a magic number: if (month != 0) {  	// .NET (via XmlConvert) converts months to years  	// This isn't inkeeping with the spec' but of the bad choices... I choose this one  	var yearsFromMonths = ((ulong)month) / 12;  	var monthsAfterYears = ((ulong)month) % 12;  	ticks += (ulong)(yearsFromMonths * TicksPerYear + monthsAfterYears * TicksPerMonth);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: while (ix != strLen) {  	if (fracSeen) {  		throw new DeserializationException ("Expected Time part of TimeSpan to end"' ref reader' false);  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPartThunkReader (ref reader' str' strLen' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen twice"' ref reader' false);  		}  		if (minutesSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' ref reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen twice"' ref reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			throw new DeserializationException ("Seconds part of TimeSpan seen twice"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	throw new DeserializationException ("Expected H' M' or S but found: " + part' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: while (ix != strLen) {  	if (fracSeen) {  		throw new DeserializationException ("Expected Time part of TimeSpan to end"' ref reader' false);  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPartThunkReader (ref reader' str' strLen' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen twice"' ref reader' false);  		}  		if (minutesSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' ref reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen twice"' ref reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			throw new DeserializationException ("Seconds part of TimeSpan seen twice"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	throw new DeserializationException ("Expected H' M' or S but found: " + part' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: while (ix != strLen) {  	if (fracSeen) {  		throw new DeserializationException ("Expected Time part of TimeSpan to end"' ref reader' false);  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPartThunkReader (ref reader' str' strLen' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen twice"' ref reader' false);  		}  		if (minutesSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' ref reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen twice"' ref reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			throw new DeserializationException ("Seconds part of TimeSpan seen twice"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	throw new DeserializationException ("Expected H' M' or S but found: " + part' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: while (ix != strLen) {  	if (fracSeen) {  		throw new DeserializationException ("Expected Time part of TimeSpan to end"' ref reader' false);  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPartThunkReader (ref reader' str' strLen' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen twice"' ref reader' false);  		}  		if (minutesSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' ref reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen twice"' ref reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			throw new DeserializationException ("Seconds part of TimeSpan seen twice"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	throw new DeserializationException ("Expected H' M' or S but found: " + part' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: while (ix != strLen) {  	if (fracSeen) {  		throw new DeserializationException ("Expected Time part of TimeSpan to end"' ref reader' false);  	}  	int whole' fraction' fracLen;  	var part = ISO8601TimeSpan_ReadPartThunkReader (ref reader' str' strLen' ref ix' out whole' out fraction' out fracLen);  	if (fracLen != 0) {  		fracSeen = true;  	}  	if (part == 'H') {  		if (hourSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen twice"' ref reader' false);  		}  		if (minutesSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' ref reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  		hourSeen = true;  		continue;  	}  	if (part == 'M') {  		if (minutesSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen twice"' ref reader' false);  		}  		if (secondsSeen) {  			throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  		minutesSeen = true;  		continue;  	}  	if (part == 'S') {  		if (secondsSeen) {  			throw new DeserializationException ("Seconds part of TimeSpan seen twice"' ref reader' false);  		}  		ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  		secondsSeen = true;  		continue;  	}  	throw new DeserializationException ("Expected H' M' or S but found: " + part' ref reader' false);  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: if (part == 'H') {  	if (hourSeen) {  		throw new DeserializationException ("Hour part of TimeSpan seen twice"' ref reader' false);  	}  	if (minutesSeen) {  		throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' ref reader' false);  	}  	if (secondsSeen) {  		throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' ref reader' false);  	}  	ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  	hourSeen = true;  	continue;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: if (part == 'H') {  	if (hourSeen) {  		throw new DeserializationException ("Hour part of TimeSpan seen twice"' ref reader' false);  	}  	if (minutesSeen) {  		throw new DeserializationException ("Hour part of TimeSpan seen after minutes already parsed"' ref reader' false);  	}  	if (secondsSeen) {  		throw new DeserializationException ("Hour part of TimeSpan seen after seconds already parsed"' ref reader' false);  	}  	ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  	hourSeen = true;  	continue;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks (9' fraction * 36' fracLen);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: if (part == 'M') {  	if (minutesSeen) {  		throw new DeserializationException ("Minute part of TimeSpan seen twice"' ref reader' false);  	}  	if (secondsSeen) {  		throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' ref reader' false);  	}  	ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  	minutesSeen = true;  	continue;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: if (part == 'M') {  	if (minutesSeen) {  		throw new DeserializationException ("Minute part of TimeSpan seen twice"' ref reader' false);  	}  	if (secondsSeen) {  		throw new DeserializationException ("Minute part of TimeSpan seen after seconds already parsed"' ref reader' false);  	}  	ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  	minutesSeen = true;  	continue;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks (8' fraction * 6' fracLen);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: if (part == 'S') {  	if (secondsSeen) {  		throw new DeserializationException ("Seconds part of TimeSpan seen twice"' ref reader' false);  	}  	ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  	secondsSeen = true;  	continue;  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks (7' fraction' fracLen);  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPartThunkReader,The following statement contains a magic number: while (true) {  	var c = str [ix];  	if (c == '.' || c == ''') {  		whole = part;  		break;  	}  	ix++;  	if (c < '0' || c > '9' || ix == strLen) {  		whole = part;  		fraction = 0;  		fracLen = 0;  		return c;  	}  	part *= 10;  	part += (c - '0');  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPartThunkReader,The following statement contains a magic number: part *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPartThunkReader,The following statement contains a magic number: while (true) {  	var c = str [ix];  	ix++;  	if (c < '0' || c > '9' || ix == strLen) {  		fraction = part;  		fracLen = (ix - 1) - (ixOfPeriod + 1);  		return c;  	}  	part *= 10;  	part += (c - '0');  }  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPartThunkReader,The following statement contains a magic number: part *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftDateTimeOffsetThunkReader,The following statement contains a magic number: hour *= 10;  
Magic Number,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftDateTimeOffsetThunkReader,The following statement contains a magic number: min *= 10;  
Magic Number,Jil.Deserialize,NameAutomata,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,DoCharBranches,The following statement contains a magic number: if (NameAutomataConfig.UseBinarySearch) {  	var bsComparisons = (int)Math.Ceiling (Math.Log (namesToFinish.Count' 2)) + 1;  	if (bsComparisons < namesToFinish.Count) {  		DoCharBinarySearch (d' namesToFinish);  	} else {  		DoCharLinearScan (d' namesToFinish);  	}  } else {  	DoCharLinearScan (d' namesToFinish);  }  
Magic Number,Jil.Deserialize,NameAutomata,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,DoCharBinarySearch,The following statement contains a magic number: match = charsLeft => {  	if (charsLeft.Count == 0) {  		d.Emit.Branch (noMatch);  		// --empty--  		return;  	}  	if (charsLeft.Count == 1) {  		var exact = charsLeft [0];  		d.Emit.LoadLocal (d.Local_ch);  		// int  		d.Emit.LoadConstant ((int)exact.Item1);  		// int int  		d.Emit.BranchIfEqual (exact.Item2);  		// --empty--  		d.Emit.Branch (noMatch);  		// --empty--  		return;  	}  	var midPoint = charsLeft.Count / 2;  	var midVal = charsLeft [midPoint];  	var left = charsLeft.Take (midPoint).ToList ();  	var right = charsLeft.Skip (midPoint).ToList ();  	var leftLabel = d.Emit.DefineLabel ();  	d.Emit.LoadLocal (d.Local_ch);  	// int  	d.Emit.LoadConstant ((int)midVal.Item1);  	// int int  	d.Emit.BranchIfLess (leftLabel);  	// --empty--  	match (right);  	// --empty--  	d.Emit.MarkLabel (leftLabel);  	// --empty--  	match (left);  	// --empty  };  
Magic Number,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch (depth) {  case 0:  	return;  case 1:  	stream.Write (' ');  	return;  case 2:  	stream.Write ("  ");  	return;  case 3:  	stream.Write ("   ");  	return;  case 4:  	stream.Write ("    ");  	return;  case 5:  	stream.Write ("     ");  	return;  case 6:  	stream.Write ("      ");  	return;  case 7:  	stream.Write ("       ");  	return;  case 8:  	stream.Write ("        ");  	return;  case 9:  	stream.Write ("         ");  	return;  case 10:  	stream.Write ("          ");  	return;  }  
Magic Number,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch (depth) {  case 0:  	return;  case 1:  	stream.Write (' ');  	return;  case 2:  	stream.Write ("  ");  	return;  case 3:  	stream.Write ("   ");  	return;  case 4:  	stream.Write ("    ");  	return;  case 5:  	stream.Write ("     ");  	return;  case 6:  	stream.Write ("      ");  	return;  case 7:  	stream.Write ("       ");  	return;  case 8:  	stream.Write ("        ");  	return;  case 9:  	stream.Write ("         ");  	return;  case 10:  	stream.Write ("          ");  	return;  }  
Magic Number,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch (depth) {  case 0:  	return;  case 1:  	stream.Write (' ');  	return;  case 2:  	stream.Write ("  ");  	return;  case 3:  	stream.Write ("   ");  	return;  case 4:  	stream.Write ("    ");  	return;  case 5:  	stream.Write ("     ");  	return;  case 6:  	stream.Write ("      ");  	return;  case 7:  	stream.Write ("       ");  	return;  case 8:  	stream.Write ("        ");  	return;  case 9:  	stream.Write ("         ");  	return;  case 10:  	stream.Write ("          ");  	return;  }  
Magic Number,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch (depth) {  case 0:  	return;  case 1:  	stream.Write (' ');  	return;  case 2:  	stream.Write ("  ");  	return;  case 3:  	stream.Write ("   ");  	return;  case 4:  	stream.Write ("    ");  	return;  case 5:  	stream.Write ("     ");  	return;  case 6:  	stream.Write ("      ");  	return;  case 7:  	stream.Write ("       ");  	return;  case 8:  	stream.Write ("        ");  	return;  case 9:  	stream.Write ("         ");  	return;  case 10:  	stream.Write ("          ");  	return;  }  
Magic Number,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch (depth) {  case 0:  	return;  case 1:  	stream.Write (' ');  	return;  case 2:  	stream.Write ("  ");  	return;  case 3:  	stream.Write ("   ");  	return;  case 4:  	stream.Write ("    ");  	return;  case 5:  	stream.Write ("     ");  	return;  case 6:  	stream.Write ("      ");  	return;  case 7:  	stream.Write ("       ");  	return;  case 8:  	stream.Write ("        ");  	return;  case 9:  	stream.Write ("         ");  	return;  case 10:  	stream.Write ("          ");  	return;  }  
Magic Number,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch (depth) {  case 0:  	return;  case 1:  	stream.Write (' ');  	return;  case 2:  	stream.Write ("  ");  	return;  case 3:  	stream.Write ("   ");  	return;  case 4:  	stream.Write ("    ");  	return;  case 5:  	stream.Write ("     ");  	return;  case 6:  	stream.Write ("      ");  	return;  case 7:  	stream.Write ("       ");  	return;  case 8:  	stream.Write ("        ");  	return;  case 9:  	stream.Write ("         ");  	return;  case 10:  	stream.Write ("          ");  	return;  }  
Magic Number,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch (depth) {  case 0:  	return;  case 1:  	stream.Write (' ');  	return;  case 2:  	stream.Write ("  ");  	return;  case 3:  	stream.Write ("   ");  	return;  case 4:  	stream.Write ("    ");  	return;  case 5:  	stream.Write ("     ");  	return;  case 6:  	stream.Write ("      ");  	return;  case 7:  	stream.Write ("       ");  	return;  case 8:  	stream.Write ("        ");  	return;  case 9:  	stream.Write ("         ");  	return;  case 10:  	stream.Write ("          ");  	return;  }  
Magic Number,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch (depth) {  case 0:  	return;  case 1:  	stream.Write (' ');  	return;  case 2:  	stream.Write ("  ");  	return;  case 3:  	stream.Write ("   ");  	return;  case 4:  	stream.Write ("    ");  	return;  case 5:  	stream.Write ("     ");  	return;  case 6:  	stream.Write ("      ");  	return;  case 7:  	stream.Write ("       ");  	return;  case 8:  	stream.Write ("        ");  	return;  case 9:  	stream.Write ("         ");  	return;  case 10:  	stream.Write ("          ");  	return;  }  
Magic Number,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch (depth) {  case 0:  	return;  case 1:  	stream.Write (' ');  	return;  case 2:  	stream.Write ("  ");  	return;  case 3:  	stream.Write ("   ");  	return;  case 4:  	stream.Write ("    ");  	return;  case 5:  	stream.Write ("     ");  	return;  case 6:  	stream.Write ("      ");  	return;  case 7:  	stream.Write ("       ");  	return;  case 8:  	stream.Write ("        ");  	return;  case 9:  	stream.Write ("         ");  	return;  case 10:  	stream.Write ("          ");  	return;  }  
Magic Number,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,GetSemiStaticSerializerFor,The following statement contains a magic number: emit.LoadArgument (2);  
Magic Number,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,GetSemiStaticSerializerFor,The following statement contains a magic number: emit.LoadArgument (3);  
Magic Number,Jil.SerializeDynamic,RecursiveSerializerCache,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\RecursiveSerializerCache.cs,_GetFor,The following statement contains a magic number: lock (Cache) {  	cached = (Action<TextWriter' T' int>)Cache [opts];  	if (cached != null)  		return cached;  	var type = typeof(T);  	var optionsField = OptionsLookup.GetOptionsFieldFor (opts);  	var serializeMtd = DynamicSerializer.SerializeMtd;  	var emit = Emit.NewDynamicMethod (typeof(void)' new[] {  		typeof(TextWriter)'  		type'  		typeof(int)  	}' doVerify: Utils.DoVerify);  	emit.LoadArgument (0);  	// TextWriter  	emit.LoadArgument (1);  	// TextWriter T  	emit.LoadField (optionsField);  	// TextWriter T options  	emit.LoadArgument (2);  	// TextWriter T options int  	emit.Call (serializeMtd);  	// --empty--  	emit.Return ();  	Cache [opts] = cached = emit.CreateDelegate<Action<TextWriter' T' int>> (Utils.DelegateOptimizationOptions);  	return cached;  }  
Magic Number,Jil.SerializeDynamic,RecursiveSerializerCache,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\RecursiveSerializerCache.cs,_GetFor,The following statement contains a magic number: emit.LoadArgument (2);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: Emit.LoadArgument (2);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: using (var count = Emit.DeclareLocal<int> ()) {  	WriteString ("\n");  	var loop = Emit.DefineLabel ();  	Emit.LoadArgument (2);  	// int  	Emit.StoreLocal (count);  	// --empty--  	Emit.MarkLabel (loop);  	Emit.LoadLocal (count);  	// int  	Emit.BranchIfFalse (done);  	// --empty--  	WriteString (" ");  	// --empty--  	Emit.LoadLocal (count);  	// int  	Emit.LoadConstant (-1);  	// int -1  	Emit.Add ();  	// (int-1)  	Emit.StoreLocal (count);  	// --empty-  	Emit.Branch (loop);  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: Emit.LoadArgument (2);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,IncreaseIndent,The following statement contains a magic number: if (PrettyPrint || RecursiveTypes.Count != 0) {  	Emit.LoadArgument (2);  	// indent  	Emit.LoadConstant (1);  	// indent 1  	Emit.Add ();  	// (indent+1)  	Emit.StoreArgument (2);  	// --empty--  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,IncreaseIndent,The following statement contains a magic number: if (PrettyPrint || RecursiveTypes.Count != 0) {  	Emit.LoadArgument (2);  	// indent  	Emit.LoadConstant (1);  	// indent 1  	Emit.Add ();  	// (indent+1)  	Emit.StoreArgument (2);  	// --empty--  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,IncreaseIndent,The following statement contains a magic number: Emit.LoadArgument (2);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,IncreaseIndent,The following statement contains a magic number: Emit.StoreArgument (2);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,DecreaseIndent,The following statement contains a magic number: if (PrettyPrint || RecursiveTypes.Count != 0) {  	Emit.LoadArgument (2);  	// indent  	Emit.LoadConstant (-1);  	// indent -1  	Emit.Add ();  	// (indent-1)  	Emit.StoreArgument (2);  	// --empty--  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,DecreaseIndent,The following statement contains a magic number: if (PrettyPrint || RecursiveTypes.Count != 0) {  	Emit.LoadArgument (2);  	// indent  	Emit.LoadConstant (-1);  	// indent -1  	Emit.Add ();  	// (indent-1)  	Emit.StoreArgument (2);  	// --empty--  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,DecreaseIndent,The following statement contains a magic number: Emit.LoadArgument (2);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,DecreaseIndent,The following statement contains a magic number: Emit.StoreArgument (2);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The following statement contains a magic number: if (isRecursive) {  	// Stack is:  	//  - serializingType  	//  - TextWriter  	//  - Action<TextWriter' serializingType>  	Emit.LoadArgument (2);  	// Action<> TextWriter serializingType int  	Type recursiveAct;  	if (BuildingToString) {  		recursiveAct = typeof(StringThunkDelegate<>).MakeGenericType (serializingType);  	} else {  		recursiveAct = typeof(Action<' ' >).MakeGenericType (typeof(TextWriter)' serializingType' typeof(int));  	}  	var invoke = recursiveAct.GetMethod ("Invoke");  	Emit.Call (invoke);  	return;  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The following statement contains a magic number: Emit.LoadArgument (2);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteNullable,The following statement contains a magic number: if (underlyingType.IsPrimitiveType ()) {  	WritePrimitive (underlyingType' quotesNeedHandling);  } else {  	if (underlyingType.IsEnum ()) {  		WriteEnumOrPrimitive (nullableMember' underlyingType' requiresQuotes: false' hasTextWriter: true' popTextWriter: true' containedInNullable: true);  	} else {  		using (var loc = Emit.DeclareLocal (underlyingType)) {  			Emit.StoreLocal (loc);  			// TextWriter  			if (RecursiveTypes.ContainsKey (underlyingType)) {  				Type act;  				if (BuildingToString) {  					act = typeof(StringThunkDelegate<>).MakeGenericType (underlyingType);  				} else {  					act = typeof(Action<' ' >).MakeGenericType (typeof(TextWriter)' underlyingType' typeof(int));  				}  				var invoke = act.GetMethod ("Invoke");  				Emit.Pop ();  				// --empty--  				Emit.LoadLocal (RecursiveTypes [underlyingType]);  				// Action<TextWriter' underlyingType>  				Emit.LoadArgument (0);  				// Action<'> TextWriter  				Emit.LoadLocal (loc);  				// Action<'> TextWriter value  				Emit.LoadArgument (2);  				// Action<'> TextWriter value int  				Emit.Call (invoke);  				// --empty--  			} else {  				if (underlyingType.IsListType ()) {  					WriteList (nullableMember' underlyingType' loc);  				} else {  					if (underlyingType.IsDictionaryType ()) {  						WriteDictionary (nullableMember' underlyingType' loc);  					} else {  						if (underlyingType.IsEnumerableType ()) {  							WriteEnumerable (nullableMember' underlyingType' loc);  						} else {  							Emit.Pop ();  							WriteObject (underlyingType' loc);  						}  					}  				}  			}  		}  	}  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteNullable,The following statement contains a magic number: if (underlyingType.IsEnum ()) {  	WriteEnumOrPrimitive (nullableMember' underlyingType' requiresQuotes: false' hasTextWriter: true' popTextWriter: true' containedInNullable: true);  } else {  	using (var loc = Emit.DeclareLocal (underlyingType)) {  		Emit.StoreLocal (loc);  		// TextWriter  		if (RecursiveTypes.ContainsKey (underlyingType)) {  			Type act;  			if (BuildingToString) {  				act = typeof(StringThunkDelegate<>).MakeGenericType (underlyingType);  			} else {  				act = typeof(Action<' ' >).MakeGenericType (typeof(TextWriter)' underlyingType' typeof(int));  			}  			var invoke = act.GetMethod ("Invoke");  			Emit.Pop ();  			// --empty--  			Emit.LoadLocal (RecursiveTypes [underlyingType]);  			// Action<TextWriter' underlyingType>  			Emit.LoadArgument (0);  			// Action<'> TextWriter  			Emit.LoadLocal (loc);  			// Action<'> TextWriter value  			Emit.LoadArgument (2);  			// Action<'> TextWriter value int  			Emit.Call (invoke);  			// --empty--  		} else {  			if (underlyingType.IsListType ()) {  				WriteList (nullableMember' underlyingType' loc);  			} else {  				if (underlyingType.IsDictionaryType ()) {  					WriteDictionary (nullableMember' underlyingType' loc);  				} else {  					if (underlyingType.IsEnumerableType ()) {  						WriteEnumerable (nullableMember' underlyingType' loc);  					} else {  						Emit.Pop ();  						WriteObject (underlyingType' loc);  					}  				}  			}  		}  	}  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteNullable,The following statement contains a magic number: using (var loc = Emit.DeclareLocal (underlyingType)) {  	Emit.StoreLocal (loc);  	// TextWriter  	if (RecursiveTypes.ContainsKey (underlyingType)) {  		Type act;  		if (BuildingToString) {  			act = typeof(StringThunkDelegate<>).MakeGenericType (underlyingType);  		} else {  			act = typeof(Action<' ' >).MakeGenericType (typeof(TextWriter)' underlyingType' typeof(int));  		}  		var invoke = act.GetMethod ("Invoke");  		Emit.Pop ();  		// --empty--  		Emit.LoadLocal (RecursiveTypes [underlyingType]);  		// Action<TextWriter' underlyingType>  		Emit.LoadArgument (0);  		// Action<'> TextWriter  		Emit.LoadLocal (loc);  		// Action<'> TextWriter value  		Emit.LoadArgument (2);  		// Action<'> TextWriter value int  		Emit.Call (invoke);  		// --empty--  	} else {  		if (underlyingType.IsListType ()) {  			WriteList (nullableMember' underlyingType' loc);  		} else {  			if (underlyingType.IsDictionaryType ()) {  				WriteDictionary (nullableMember' underlyingType' loc);  			} else {  				if (underlyingType.IsEnumerableType ()) {  					WriteEnumerable (nullableMember' underlyingType' loc);  				} else {  					Emit.Pop ();  					WriteObject (underlyingType' loc);  				}  			}  		}  	}  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteNullable,The following statement contains a magic number: if (RecursiveTypes.ContainsKey (underlyingType)) {  	Type act;  	if (BuildingToString) {  		act = typeof(StringThunkDelegate<>).MakeGenericType (underlyingType);  	} else {  		act = typeof(Action<' ' >).MakeGenericType (typeof(TextWriter)' underlyingType' typeof(int));  	}  	var invoke = act.GetMethod ("Invoke");  	Emit.Pop ();  	// --empty--  	Emit.LoadLocal (RecursiveTypes [underlyingType]);  	// Action<TextWriter' underlyingType>  	Emit.LoadArgument (0);  	// Action<'> TextWriter  	Emit.LoadLocal (loc);  	// Action<'> TextWriter value  	Emit.LoadArgument (2);  	// Action<'> TextWriter value int  	Emit.Call (invoke);  	// --empty--  } else {  	if (underlyingType.IsListType ()) {  		WriteList (nullableMember' underlyingType' loc);  	} else {  		if (underlyingType.IsDictionaryType ()) {  			WriteDictionary (nullableMember' underlyingType' loc);  		} else {  			if (underlyingType.IsEnumerableType ()) {  				WriteEnumerable (nullableMember' underlyingType' loc);  			} else {  				Emit.Pop ();  				WriteObject (underlyingType' loc);  			}  		}  	}  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteNullable,The following statement contains a magic number: Emit.LoadArgument (2);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMicrosoftStyleDateTime,The following statement contains a magic number: if (!SkipDateTimeMathMethods) {  	var subtractMtd = typeof(DateTime).GetMethod ("Subtract"' new[] {  		typeof(DateTime)  	});  	var totalMs = typeof(TimeSpan).GetProperty ("TotalMilliseconds");  	var dtCons = typeof(DateTime).GetConstructor (new[] {  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(DateTimeKind)  	});  	Emit.LoadConstant (1970);  	// TextWriter DateTime* 1970  	Emit.LoadConstant (1);  	// TextWriter DateTime* 1970 1  	Emit.LoadConstant (1);  	// TextWriter DateTime* 1970 1 1  	Emit.LoadConstant (0);  	// TextWriter DateTime* 1970 1 1 0  	Emit.LoadConstant (0);  	// TextWriter DateTime* 1970 1 1 0 0  	Emit.LoadConstant (0);  	// TextWriter DateTime* 1970 1 1 0 0 0   	Emit.LoadConstant ((int)DateTimeKind.Utc);  	// TextWriter DateTime* 1970 1 1 0 0 0 Utc  	Emit.NewObject (dtCons);  	// TextWriter DateTime* DateTime*  	Emit.Call (subtractMtd);  	// TextWriter TimeSpan  	using (var loc = Emit.DeclareLocal<TimeSpan> ()) {  		Emit.StoreLocal (loc);  		// TextWriter  		Emit.LoadLocalAddress (loc);  		// TextWriter TimeSpan*  	}  	LoadProperty (totalMs);  	// TextWriter double  	Emit.Convert<long> ();  	// TextWriter int  	WriteString ("\"\\/Date(");  	// TextWriter int  	WritePrimitive (typeof(long)' quotesNeedHandling: false);  	// --empty--  	WriteString (")\\/\"");  	// --empty--  	return;  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMicrosoftStyleDateTime,The following statement contains a magic number: Emit.LoadConstant (1970);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMillisecondsStyleDateTime,The following statement contains a magic number: if (!SkipDateTimeMathMethods) {  	var subtractMtd = typeof(DateTime).GetMethod ("Subtract"' new[] {  		typeof(DateTime)  	});  	var totalMs = typeof(TimeSpan).GetProperty ("TotalMilliseconds");  	var dtCons = typeof(DateTime).GetConstructor (new[] {  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(DateTimeKind)  	});  	Emit.LoadConstant (1970);  	// TextWriter DateTime* 1970  	Emit.LoadConstant (1);  	// TextWriter DateTime* 1970 1  	Emit.LoadConstant (1);  	// TextWriter DateTime* 1970 1 1  	Emit.LoadConstant (0);  	// TextWriter DateTime* 1970 1 1 0  	Emit.LoadConstant (0);  	// TextWriter DateTime* 1970 1 1 0 0  	Emit.LoadConstant (0);  	// TextWriter DateTime* 1970 1 1 0 0 0   	Emit.LoadConstant ((int)DateTimeKind.Utc);  	// TextWriter DateTime* 1970 1 1 0 0 0 Utc  	Emit.NewObject (dtCons);  	// TextWriter DateTime* DateTime*  	Emit.Call (subtractMtd);  	// TextWriter TimeSpan  	using (var loc = Emit.DeclareLocal<TimeSpan> ()) {  		Emit.StoreLocal (loc);  		// TextWriter  		Emit.LoadLocalAddress (loc);  		// TextWriter TimeSpan*  	}  	LoadProperty (totalMs);  	// TextWriter double  	Emit.Convert<long> ();  	// TextWriter int  	WritePrimitive (typeof(long)' quotesNeedHandling: false);  	// --empty--  	return;  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMillisecondsStyleDateTime,The following statement contains a magic number: Emit.LoadConstant (1970);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteSecondsStyleDateTime,The following statement contains a magic number: if (!SkipDateTimeMathMethods) {  	var subtractMtd = typeof(DateTime).GetMethod ("Subtract"' new[] {  		typeof(DateTime)  	});  	var totalS = typeof(TimeSpan).GetProperty ("TotalSeconds");  	var dtCons = typeof(DateTime).GetConstructor (new[] {  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(DateTimeKind)  	});  	Emit.LoadConstant (1970);  	// TextWriter DateTime* 1970  	Emit.LoadConstant (1);  	// TextWriter DateTime* 1970 1  	Emit.LoadConstant (1);  	// TextWriter DateTime* 1970 1 1  	Emit.LoadConstant (0);  	// TextWriter DateTime* 1970 1 1 0  	Emit.LoadConstant (0);  	// TextWriter DateTime* 1970 1 1 0 0  	Emit.LoadConstant (0);  	// TextWriter DateTime* 1970 1 1 0 0 0   	Emit.LoadConstant ((int)DateTimeKind.Utc);  	// TextWriter DateTime* 1970 1 1 0 0 0 Utc  	Emit.NewObject (dtCons);  	// TextWriter DateTime* DateTime*  	Emit.Call (subtractMtd);  	// TextWriter TimeSpan  	using (var loc = Emit.DeclareLocal<TimeSpan> ()) {  		Emit.StoreLocal (loc);  		// TextWriter  		Emit.LoadLocalAddress (loc);  		// TextWriter TimeSpan*  	}  	LoadProperty (totalS);  	// TextWriter double  	Emit.Convert<long> ();  	// TextWriter int  	WritePrimitive (typeof(long)' quotesNeedHandling: false);  	// --empty--  	return;  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteSecondsStyleDateTime,The following statement contains a magic number: Emit.LoadConstant (1970);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteElement,The following statement contains a magic number: if (isRecursive) {  	// Stack is:  	//  - serializingType  	//  - TextWriter  	//  - Action<TextWriter' serializingType' int>  	Type recursiveAct;  	if (BuildingToString) {  		recursiveAct = typeof(StringThunkDelegate<>).MakeGenericType (elementType);  	} else {  		recursiveAct = typeof(Action<' ' >).MakeGenericType (typeof(TextWriter)' elementType' typeof(int));  	}  	var invoke = recursiveAct.GetMethod ("Invoke");  	Emit.LoadArgument (2);  	// Action<TextWriter' elementType' int> TextWriter int  	Emit.Call (invoke);  	// --empty--  	return;  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteElement,The following statement contains a magic number: Emit.LoadArgument (2);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,DynamicCallOutCheck,The following statement contains a magic number: if (ShouldDynamicCallOut (onType)) {  	var serializeMtd = DynamicSerializer.SerializeMtd;  	if (dynamicMember != null) {  		serializeMtd = DynamicSerializer.SerializeInternalMtd;  		if (dynamicMember.MemberType == MemberTypes.Field) {  			// Load the field from a RuntimeFieldHandle constant  			Emit.LoadConstant ((FieldInfo)dynamicMember);  			// RuntimeFieldHandle  			Emit.LoadConstant (dynamicMember.DeclaringType);  			// RuntimeTypeHandle  			Emit.Call (_FieldInfoFromHandle);  			// FieldInfo  			Emit.CastClass (typeof(MemberInfo));  			// MemberInfo  		} else {  			// Load the property using reflection' yes it is ugly  			// but there is no other way  			Emit.LoadConstant (dynamicMember.DeclaringType);  			// RuntimeTypeHandle  			Emit.Call (_TypeFromHandle);  			// Type  			Emit.LoadConstant (dynamicMember.Name);  			// Type string  			Emit.LoadConstant ((int)(BindingFlags.Public | BindingFlags.Instance));  			// Type string int  			Emit.Call (_TypeGetProperty);  			// PropertyInfo  			Emit.CastClass (typeof(MemberInfo));  			// MemberInfo  		}  	}  	Emit.LoadArgument (0);  	// TextWriter  	if (inLocal != null) {  		Emit.LoadLocal (inLocal);  		// TextWriter object  	} else {  		Emit.LoadArgument (1);  		// TextWriter object  	}  	var equivalentOptions = new Options (this.PrettyPrint' this.ExcludeNulls' this.JSONP' this.DateFormat' this.IncludeInherited' this.UnspecifiedDateTimeBehavior' this.SerializationNameFormat);  	var optionsField = OptionsLookup.GetOptionsFieldFor (equivalentOptions);  	Emit.LoadField (optionsField);  	// TextWriter object Options  	Emit.LoadArgument (2);  	// TextWriter object Options int  	Emit.Call (serializeMtd);  	// void  	return true;  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,DynamicCallOutCheck,The following statement contains a magic number: Emit.LoadArgument (2);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValueIfNotNull,The following statement contains a magic number: if (isRecursive) {  	// Stack is:  	//  - elementType  	//  - TextWriter  	//  - Action<TextWriter' elementType' int>  	Type recursiveAct;  	if (BuildingToString) {  		recursiveAct = typeof(StringThunkDelegate<>).MakeGenericType (elementType);  	} else {  		recursiveAct = typeof(Action<' ' >).MakeGenericType (typeof(TextWriter)' elementType' typeof(int));  	}  	var invoke = recursiveAct.GetMethod ("Invoke");  	Emit.LoadArgument (2);  	// Action<TextWriter' elementType' int> TextWriter elementType int  	Emit.Call (invoke);  	// --empty--  	Emit.MarkLabel (done);  	return;  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValueIfNotNull,The following statement contains a magic number: Emit.LoadArgument (2);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValue,The following statement contains a magic number: if (isRecursive) {  	// Stack is:  	//  - elementType  	//  - TextWriter  	//  - Action<TextWriter' elementType' int>  	Type recursiveAct;  	if (BuildingToString) {  		recursiveAct = typeof(StringThunkDelegate<>).MakeGenericType (elementType);  	} else {  		recursiveAct = typeof(Action<' ' >).MakeGenericType (typeof(TextWriter)' elementType' typeof(int));  	}  	var invoke = recursiveAct.GetMethod ("Invoke");  	Emit.LoadArgument (2);  	// Action<TextWriter' elementType' int> TextWriter elementType int  	Emit.Call (invoke);  	// --empty--  	return;  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValue,The following statement contains a magic number: Emit.LoadArgument (2);  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildObjectWithNewImpl,The following statement contains a magic number: if (recursiveTypes.Count != 0) {  	var goOn = Emit.DefineLabel ();  	Emit.LoadArgument (2);  	// int  	Emit.LoadConstant (RecursionLimit);  	// int int  	Emit.BranchIfLess (goOn);  	// --empty--  	Emit.NewObject (typeof(InfiniteRecursionException));  	// infiniteRecursionException  	Emit.Throw ();  	// --empty--  	Emit.MarkLabel (goOn);  	// --empty--  }  
Magic Number,Jil.Serialize,InlineSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildObjectWithNewImpl,The following statement contains a magic number: Emit.LoadArgument (2);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [8] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [13] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [18] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [23] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [6] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [7] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B01 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [4] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [5] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B02 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [2] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [3] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B03 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B04 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [11] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [12] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B05 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [9] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [10] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B06 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [16] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [17] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B07 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [14] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [15] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B08 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [19] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [20] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B09 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [21] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [22] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B10 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [24] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [25] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B11 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [26] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [27] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B12 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [28] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [29] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B13 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [30] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [31] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B14 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [32] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [33] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B15 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [34] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer [35] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: writer.Write (buffer' 0' 36);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [4] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [3] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: digits = DigitPairs [(byte)(val / 100)];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [2] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [5] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [7] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [6] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [8] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [10] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [9] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [11] = 'T';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [13] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [12] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [14] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [16] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [15] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [17] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [19] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [18] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [20] = '.';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [27] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [26] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: fracEnd = 28;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: fracEnd = 26;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [25] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [24] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: fracEnd = 24;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [25] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [24] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [23] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [22] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: fracEnd = 22;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [23] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [22] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer [21] = (char)('0' + fracPart);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: fracEnd = 20;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: writer.Write (buffer' 0' fracEnd + 2);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [4] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [3] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: digits = DigitPairs [(byte)(val / 100)];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [2] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [5] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [7] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [6] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [8] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [10] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [9] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [11] = 'T';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [13] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [12] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [14] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [16] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [15] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [17] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [19] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [18] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [20] = '.';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [27] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [26] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: fracEnd = 28;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: fracEnd = 26;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [25] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [24] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: fracEnd = 24;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [25] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [24] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [23] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [22] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: fracEnd = 22;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [23] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [22] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [21] = (char)('0' + fracPart);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: fracEnd = 20;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [fracEnd + 2] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [fracEnd + 3] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [fracEnd + 4] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [fracEnd + 5] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer [fracEnd + 6] = '"';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: writer.Write (buffer' 0' fracEnd + 7);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteInt,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteInt,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteInt,The following statement contains a magic number: copy /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: writer.Write (DigitTriplets' number * 3' 3);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: writer.Write (DigitTriplets' number * 3' 3);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' number * 3 + 1' 2);  } else {  	writer.Write (DigitTriplets' number * 3 + 2' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' number * 3 + 1' 2);  } else {  	writer.Write (DigitTriplets' number * 3 + 2' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' number * 3 + 1' 2);  } else {  	writer.Write (DigitTriplets' number * 3 + 2' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' number * 3 + 1' 2);  } else {  	writer.Write (DigitTriplets' number * 3 + 2' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' number * 3 + 1' 2);  } else {  	writer.Write (DigitTriplets' number * 3 + 2' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: writer.Write (DigitTriplets' number * 3 + 1' 2);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: writer.Write (DigitTriplets' number * 3 + 1' 2);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: writer.Write (DigitTriplets' number * 3 + 2' 1);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: writer.Write (DigitTriplets' number * 3 + 2' 1);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d543 = (number / 1000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d543 = (number / 1000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: numLen = 6;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 10000) {  	numLen = 5;  	goto digit4;  } else {  	numLen = 4;  	goto digit3;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 10000) {  	numLen = 5;  	goto digit4;  } else {  	numLen = 4;  	goto digit3;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 10000) {  	numLen = 5;  	goto digit4;  } else {  	numLen = 4;  	goto digit3;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: numLen = 5;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: numLen = 4;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d876 = (number / 1000000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d876 = (number / 1000000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: numLen = 9;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 10000000) {  	numLen = 8;  	goto digit7;  } else {  	numLen = 7;  	goto digit6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 10000000) {  	numLen = 8;  	goto digit7;  } else {  	numLen = 7;  	goto digit6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: if (number >= 10000000) {  	numLen = 8;  	goto digit7;  } else {  	numLen = 7;  	goto digit6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: numLen = 8;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: numLen = 7;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: numLen = 10;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer [2] = DigitTriplets [d876 + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer [3] = DigitTriplets [d876 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer [3] = DigitTriplets [d876 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer [4] = DigitTriplets [d543];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer [5] = DigitTriplets [d543 + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer [6] = DigitTriplets [d543 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer [6] = DigitTriplets [d543 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer [7] = DigitTriplets [d012];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer [8] = DigitTriplets [d012 + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer [9] = DigitTriplets [d012 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer [9] = DigitTriplets [d012 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: writer.Write (buffer' 10 - numLen' numLen);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUInt,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUInt,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUInt,The following statement contains a magic number: copy /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: writer.Write (DigitTriplets' (int)(number * 3)' 3);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: writer.Write (DigitTriplets' (int)(number * 3)' 3);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  } else {  	writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  } else {  	writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  } else {  	writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  } else {  	writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  } else {  	writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d543 = (number / 1000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d543 = (number / 1000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: numLen = 6;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 10000) {  	numLen = 5;  	goto digit4;  } else {  	numLen = 4;  	goto digit3;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 10000) {  	numLen = 5;  	goto digit4;  } else {  	numLen = 4;  	goto digit3;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 10000) {  	numLen = 5;  	goto digit4;  } else {  	numLen = 4;  	goto digit3;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: numLen = 5;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: numLen = 4;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d876 = (number / 1000000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d876 = (number / 1000000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: numLen = 9;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 10000000) {  	numLen = 8;  	goto digit7;  } else {  	numLen = 7;  	goto digit6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 10000000) {  	numLen = 8;  	goto digit7;  } else {  	numLen = 7;  	goto digit6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: if (number >= 10000000) {  	numLen = 8;  	goto digit7;  } else {  	numLen = 7;  	goto digit6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: numLen = 8;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: numLen = 7;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: numLen = 10;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer [2] = DigitTriplets [d876 + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer [3] = DigitTriplets [d876 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer [3] = DigitTriplets [d876 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer [4] = DigitTriplets [d543];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer [5] = DigitTriplets [d543 + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer [6] = DigitTriplets [d543 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer [6] = DigitTriplets [d543 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer [7] = DigitTriplets [d012];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer [8] = DigitTriplets [d012 + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer [9] = DigitTriplets [d012 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer [9] = DigitTriplets [d012 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: writer.Write (buffer' 10 - numLen' numLen);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteLong,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteLong,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteLong,The following statement contains a magic number: copy /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteULong,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteULong,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteULong,The following statement contains a magic number: copy /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [7] = digits.Second;  	buffer [6] = digits.First;  	fracEnd = 8;  } else {  	fracEnd = 6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [7] = digits.Second;  	buffer [6] = digits.First;  	fracEnd = 8;  } else {  	fracEnd = 6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [7] = digits.Second;  	buffer [6] = digits.First;  	fracEnd = 8;  } else {  	fracEnd = 6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [7] = digits.Second;  	buffer [6] = digits.First;  	fracEnd = 8;  } else {  	fracEnd = 6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer [7] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer [6] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: fracEnd = 8;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: fracEnd = 6;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [5] = digits.Second;  	buffer [4] = digits.First;  } else {  	if (fracEnd == 6) {  		fracEnd = 4;  	} else {  		buffer [5] = '0';  		buffer [4] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [5] = digits.Second;  	buffer [4] = digits.First;  } else {  	if (fracEnd == 6) {  		fracEnd = 4;  	} else {  		buffer [5] = '0';  		buffer [4] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [5] = digits.Second;  	buffer [4] = digits.First;  } else {  	if (fracEnd == 6) {  		fracEnd = 4;  	} else {  		buffer [5] = '0';  		buffer [4] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [5] = digits.Second;  	buffer [4] = digits.First;  } else {  	if (fracEnd == 6) {  		fracEnd = 4;  	} else {  		buffer [5] = '0';  		buffer [4] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [5] = digits.Second;  	buffer [4] = digits.First;  } else {  	if (fracEnd == 6) {  		fracEnd = 4;  	} else {  		buffer [5] = '0';  		buffer [4] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [5] = digits.Second;  	buffer [4] = digits.First;  } else {  	if (fracEnd == 6) {  		fracEnd = 4;  	} else {  		buffer [5] = '0';  		buffer [4] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer [5] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer [4] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracEnd == 6) {  	fracEnd = 4;  } else {  	buffer [5] = '0';  	buffer [4] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracEnd == 6) {  	fracEnd = 4;  } else {  	buffer [5] = '0';  	buffer [4] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracEnd == 6) {  	fracEnd = 4;  } else {  	buffer [5] = '0';  	buffer [4] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracEnd == 6) {  	fracEnd = 4;  } else {  	buffer [5] = '0';  	buffer [4] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: fracEnd = 4;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer [5] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer [4] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [3] = digits.Second;  	buffer [2] = digits.First;  } else {  	if (fracEnd == 4) {  		fracEnd = 2;  	} else {  		buffer [3] = '0';  		buffer [2] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [3] = digits.Second;  	buffer [2] = digits.First;  } else {  	if (fracEnd == 4) {  		fracEnd = 2;  	} else {  		buffer [3] = '0';  		buffer [2] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [3] = digits.Second;  	buffer [2] = digits.First;  } else {  	if (fracEnd == 4) {  		fracEnd = 2;  	} else {  		buffer [3] = '0';  		buffer [2] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [3] = digits.Second;  	buffer [2] = digits.First;  } else {  	if (fracEnd == 4) {  		fracEnd = 2;  	} else {  		buffer [3] = '0';  		buffer [2] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [3] = digits.Second;  	buffer [2] = digits.First;  } else {  	if (fracEnd == 4) {  		fracEnd = 2;  	} else {  		buffer [3] = '0';  		buffer [2] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [3] = digits.Second;  	buffer [2] = digits.First;  } else {  	if (fracEnd == 4) {  		fracEnd = 2;  	} else {  		buffer [3] = '0';  		buffer [2] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer [3] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer [2] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracEnd == 4) {  	fracEnd = 2;  } else {  	buffer [3] = '0';  	buffer [2] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracEnd == 4) {  	fracEnd = 2;  } else {  	buffer [3] = '0';  	buffer [2] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracEnd == 4) {  	fracEnd = 2;  } else {  	buffer [3] = '0';  	buffer [2] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: if (fracEnd == 4) {  	fracEnd = 2;  } else {  	buffer [3] = '0';  	buffer [2] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: fracEnd = 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer [3] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer [2] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [2] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [3] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [4] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [5] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [6] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [7] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: endCount = 8;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [8] = '.';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [15] = digits.Second;  	buffer [14] = digits.First;  	fracEnd = 16;  } else {  	fracEnd = 14;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [15] = digits.Second;  	buffer [14] = digits.First;  	fracEnd = 16;  } else {  	fracEnd = 14;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [15] = digits.Second;  	buffer [14] = digits.First;  	fracEnd = 16;  } else {  	fracEnd = 14;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [15] = digits.Second;  	buffer [14] = digits.First;  	fracEnd = 16;  } else {  	fracEnd = 14;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [15] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [14] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: fracEnd = 16;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: fracEnd = 14;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [13] = digits.Second;  	buffer [12] = digits.First;  } else {  	if (fracEnd == 14) {  		fracEnd = 12;  	} else {  		buffer [13] = '0';  		buffer [12] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [13] = digits.Second;  	buffer [12] = digits.First;  } else {  	if (fracEnd == 14) {  		fracEnd = 12;  	} else {  		buffer [13] = '0';  		buffer [12] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [13] = digits.Second;  	buffer [12] = digits.First;  } else {  	if (fracEnd == 14) {  		fracEnd = 12;  	} else {  		buffer [13] = '0';  		buffer [12] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [13] = digits.Second;  	buffer [12] = digits.First;  } else {  	if (fracEnd == 14) {  		fracEnd = 12;  	} else {  		buffer [13] = '0';  		buffer [12] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [13] = digits.Second;  	buffer [12] = digits.First;  } else {  	if (fracEnd == 14) {  		fracEnd = 12;  	} else {  		buffer [13] = '0';  		buffer [12] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [13] = digits.Second;  	buffer [12] = digits.First;  } else {  	if (fracEnd == 14) {  		fracEnd = 12;  	} else {  		buffer [13] = '0';  		buffer [12] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [13] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [12] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracEnd == 14) {  	fracEnd = 12;  } else {  	buffer [13] = '0';  	buffer [12] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracEnd == 14) {  	fracEnd = 12;  } else {  	buffer [13] = '0';  	buffer [12] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracEnd == 14) {  	fracEnd = 12;  } else {  	buffer [13] = '0';  	buffer [12] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracEnd == 14) {  	fracEnd = 12;  } else {  	buffer [13] = '0';  	buffer [12] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: fracEnd = 12;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [13] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [12] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [11] = digits.Second;  	buffer [10] = digits.First;  } else {  	if (fracEnd == 12) {  		fracEnd = 10;  	} else {  		buffer [11] = '0';  		buffer [10] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [11] = digits.Second;  	buffer [10] = digits.First;  } else {  	if (fracEnd == 12) {  		fracEnd = 10;  	} else {  		buffer [11] = '0';  		buffer [10] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [11] = digits.Second;  	buffer [10] = digits.First;  } else {  	if (fracEnd == 12) {  		fracEnd = 10;  	} else {  		buffer [11] = '0';  		buffer [10] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [11] = digits.Second;  	buffer [10] = digits.First;  } else {  	if (fracEnd == 12) {  		fracEnd = 10;  	} else {  		buffer [11] = '0';  		buffer [10] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [11] = digits.Second;  	buffer [10] = digits.First;  } else {  	if (fracEnd == 12) {  		fracEnd = 10;  	} else {  		buffer [11] = '0';  		buffer [10] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [11] = digits.Second;  	buffer [10] = digits.First;  } else {  	if (fracEnd == 12) {  		fracEnd = 10;  	} else {  		buffer [11] = '0';  		buffer [10] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [11] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [10] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracEnd == 12) {  	fracEnd = 10;  } else {  	buffer [11] = '0';  	buffer [10] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracEnd == 12) {  	fracEnd = 10;  } else {  	buffer [11] = '0';  	buffer [10] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracEnd == 12) {  	fracEnd = 10;  } else {  	buffer [11] = '0';  	buffer [10] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: if (fracEnd == 12) {  	fracEnd = 10;  } else {  	buffer [11] = '0';  	buffer [10] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: fracEnd = 10;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [11] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [10] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer [9] = (char)('0' + fracPart);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [8] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [13] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [18] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [23] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [6] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [7] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B01 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [4] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [5] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B02 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [2] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [3] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B03 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B04 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [11] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [12] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B05 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [9] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [10] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B06 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [16] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [17] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B07 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [14] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [15] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B08 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [19] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [20] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B09 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [21] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [22] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B10 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [24] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [25] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B11 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [26] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [27] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B12 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [28] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [29] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B13 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [30] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [31] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B14 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [32] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [33] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B15 * 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [34] = WriteGuidLookup [b];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer [35] = WriteGuidLookup [b + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: writer.Write (buffer' 0' 36);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [4] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [3] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: digits = DigitPairs [(byte)(val / 100)];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [2] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [5] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [7] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [6] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [8] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [10] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [9] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [11] = 'T';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [13] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [12] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [14] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [16] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [15] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [17] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [19] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [18] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [20] = '.';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [27] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [26] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: fracEnd = 28;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: fracEnd = 26;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [25] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [24] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: fracEnd = 24;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [25] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [24] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [23] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [22] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: fracEnd = 22;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [23] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [22] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer [21] = (char)('0' + fracPart);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: fracEnd = 20;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: writer.Write (buffer' 0' fracEnd + 2);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [4] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [3] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: digits = DigitPairs [(byte)(val / 100)];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [2] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [5] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [7] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [6] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [8] = '-';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [10] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [9] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [11] = 'T';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [13] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [12] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [14] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [16] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [15] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [17] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [19] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [18] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [20] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [27] = digits.Second;  		buffer [26] = digits.First;  		fracEnd = 28;  	} else {  		fracEnd = 26;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [25] = digits.Second;  		buffer [24] = digits.First;  	} else {  		if (fracEnd == 26) {  			fracEnd = 24;  		} else {  			buffer [25] = '0';  			buffer [24] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [23] = digits.Second;  		buffer [22] = digits.First;  	} else {  		if (fracEnd == 24) {  			fracEnd = 22;  		} else {  			buffer [23] = '0';  			buffer [22] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [21] = (char)('0' + fracPart);  } else {  	fracEnd = 20;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [20] = '.';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [27] = digits.Second;  	buffer [26] = digits.First;  	fracEnd = 28;  } else {  	fracEnd = 26;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [27] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [26] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: fracEnd = 28;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: fracEnd = 26;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [25] = digits.Second;  	buffer [24] = digits.First;  } else {  	if (fracEnd == 26) {  		fracEnd = 24;  	} else {  		buffer [25] = '0';  		buffer [24] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [25] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [24] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 26) {  	fracEnd = 24;  } else {  	buffer [25] = '0';  	buffer [24] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: fracEnd = 24;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [25] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [24] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [23] = digits.Second;  	buffer [22] = digits.First;  } else {  	if (fracEnd == 24) {  		fracEnd = 22;  	} else {  		buffer [23] = '0';  		buffer [22] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [23] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [22] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: if (fracEnd == 24) {  	fracEnd = 22;  } else {  	buffer [23] = '0';  	buffer [22] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: fracEnd = 22;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [23] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [22] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [21] = (char)('0' + fracPart);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: fracEnd = 20;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [fracEnd + 2] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [fracEnd + 3] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [fracEnd + 4] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [fracEnd + 5] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer [fracEnd + 6] = '"';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: writer.Write (buffer' 0' fracEnd + 7);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteInt_ThunkWriter,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteInt_ThunkWriter,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteInt_ThunkWriter,The following statement contains a magic number: copy /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' number * 3' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' number * 3 + 1' 2);  		} else {  			writer.Write (DigitTriplets' number * 3 + 2' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' number * 3' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' number * 3 + 1' 2);  	} else {  		writer.Write (DigitTriplets' number * 3 + 2' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: writer.Write (DigitTriplets' number * 3' 3);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: writer.Write (DigitTriplets' number * 3' 3);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' number * 3 + 1' 2);  } else {  	writer.Write (DigitTriplets' number * 3 + 2' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' number * 3 + 1' 2);  } else {  	writer.Write (DigitTriplets' number * 3 + 2' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' number * 3 + 1' 2);  } else {  	writer.Write (DigitTriplets' number * 3 + 2' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' number * 3 + 1' 2);  } else {  	writer.Write (DigitTriplets' number * 3 + 2' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' number * 3 + 1' 2);  } else {  	writer.Write (DigitTriplets' number * 3 + 2' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: writer.Write (DigitTriplets' number * 3 + 1' 2);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: writer.Write (DigitTriplets' number * 3 + 1' 2);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: writer.Write (DigitTriplets' number * 3 + 2' 1);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: writer.Write (DigitTriplets' number * 3 + 2' 1);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: numLen = 6;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 10000) {  	numLen = 5;  	goto digit4;  } else {  	numLen = 4;  	goto digit3;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 10000) {  	numLen = 5;  	goto digit4;  } else {  	numLen = 4;  	goto digit3;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 10000) {  	numLen = 5;  	goto digit4;  } else {  	numLen = 4;  	goto digit3;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: numLen = 5;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: numLen = 4;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: numLen = 9;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 10000000) {  	numLen = 8;  	goto digit7;  } else {  	numLen = 7;  	goto digit6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 10000000) {  	numLen = 8;  	goto digit7;  } else {  	numLen = 7;  	goto digit6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: if (number >= 10000000) {  	numLen = 8;  	goto digit7;  } else {  	numLen = 7;  	goto digit6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: numLen = 8;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: numLen = 7;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: numLen = 10;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer [2] = DigitTriplets [d876 + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer [3] = DigitTriplets [d876 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer [3] = DigitTriplets [d876 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer [4] = DigitTriplets [d543];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer [5] = DigitTriplets [d543 + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer [6] = DigitTriplets [d543 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer [6] = DigitTriplets [d543 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer [7] = DigitTriplets [d012];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer [8] = DigitTriplets [d012 + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer [9] = DigitTriplets [d012 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer [9] = DigitTriplets [d012 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: writer.Write (buffer' 10 - numLen' numLen);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUInt_ThunkWriter,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUInt_ThunkWriter,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUInt_ThunkWriter,The following statement contains a magic number: copy /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000) {  	if (number >= 100) {  		writer.Write (DigitTriplets' (int)(number * 3)' 3);  	} else {  		if (number >= 10) {  			writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  		} else {  			writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  		}  	}  	return;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100) {  	writer.Write (DigitTriplets' (int)(number * 3)' 3);  } else {  	if (number >= 10) {  		writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  	} else {  		writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: writer.Write (DigitTriplets' (int)(number * 3)' 3);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: writer.Write (DigitTriplets' (int)(number * 3)' 3);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  } else {  	writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  } else {  	writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  } else {  	writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  } else {  	writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 10) {  	writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  } else {  	writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: writer.Write (DigitTriplets' (int)(number * 3 + 1)' 2);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: writer.Write (DigitTriplets' (int)(number * 3 + 2)' 1);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000) {  	d543 = (number / 1000) * 3;  	if (number >= 100000) {  		numLen = 6;  		goto digit5;  	} else {  		if (number >= 10000) {  			numLen = 5;  			goto digit4;  		} else {  			numLen = 4;  			goto digit3;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100000) {  	numLen = 6;  	goto digit5;  } else {  	if (number >= 10000) {  		numLen = 5;  		goto digit4;  	} else {  		numLen = 4;  		goto digit3;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: numLen = 6;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 10000) {  	numLen = 5;  	goto digit4;  } else {  	numLen = 4;  	goto digit3;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 10000) {  	numLen = 5;  	goto digit4;  } else {  	numLen = 4;  	goto digit3;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 10000) {  	numLen = 5;  	goto digit4;  } else {  	numLen = 4;  	goto digit3;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: numLen = 5;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: numLen = 4;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number < 1000000000) {  	d876 = (number / 1000000) * 3;  	if (number >= 100000000) {  		numLen = 9;  		goto digit8;  	} else {  		if (number >= 10000000) {  			numLen = 8;  			goto digit7;  		} else {  			numLen = 7;  			goto digit6;  		}  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 100000000) {  	numLen = 9;  	goto digit8;  } else {  	if (number >= 10000000) {  		numLen = 8;  		goto digit7;  	} else {  		numLen = 7;  		goto digit6;  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: numLen = 9;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 10000000) {  	numLen = 8;  	goto digit7;  } else {  	numLen = 7;  	goto digit6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 10000000) {  	numLen = 8;  	goto digit7;  } else {  	numLen = 7;  	goto digit6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: if (number >= 10000000) {  	numLen = 8;  	goto digit7;  } else {  	numLen = 7;  	goto digit6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: numLen = 8;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: numLen = 7;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: numLen = 10;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer [2] = DigitTriplets [d876 + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer [3] = DigitTriplets [d876 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer [3] = DigitTriplets [d876 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer [4] = DigitTriplets [d543];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer [5] = DigitTriplets [d543 + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer [6] = DigitTriplets [d543 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer [6] = DigitTriplets [d543 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer [7] = DigitTriplets [d012];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer [8] = DigitTriplets [d012 + 1];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer [9] = DigitTriplets [d012 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer [9] = DigitTriplets [d012 + 2];  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: writer.Write (buffer' 10 - numLen' numLen);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteLong_ThunkWriter,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteLong_ThunkWriter,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteLong_ThunkWriter,The following statement contains a magic number: copy /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteULong_ThunkWriter,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteULong_ThunkWriter,The following statement contains a magic number: do {  	byte ix = (byte)(copy % 100);  	copy /= 100;  	var chars = DigitPairs [ix];  	buffer [ptr--] = chars.Second;  	buffer [ptr--] = chars.First;  } while (copy != 0);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteULong_ThunkWriter,The following statement contains a magic number: copy /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [0] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [7] = digits.Second;  		buffer [6] = digits.First;  		fracEnd = 8;  	} else {  		fracEnd = 6;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [5] = digits.Second;  		buffer [4] = digits.First;  	} else {  		if (fracEnd == 6) {  			fracEnd = 4;  		} else {  			buffer [5] = '0';  			buffer [4] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [3] = digits.Second;  		buffer [2] = digits.First;  	} else {  		if (fracEnd == 4) {  			fracEnd = 2;  		} else {  			buffer [3] = '0';  			buffer [2] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [1] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [7] = digits.Second;  	buffer [6] = digits.First;  	fracEnd = 8;  } else {  	fracEnd = 6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [7] = digits.Second;  	buffer [6] = digits.First;  	fracEnd = 8;  } else {  	fracEnd = 6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [7] = digits.Second;  	buffer [6] = digits.First;  	fracEnd = 8;  } else {  	fracEnd = 6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [7] = digits.Second;  	buffer [6] = digits.First;  	fracEnd = 8;  } else {  	fracEnd = 6;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer [7] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer [6] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: fracEnd = 8;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: fracEnd = 6;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [5] = digits.Second;  	buffer [4] = digits.First;  } else {  	if (fracEnd == 6) {  		fracEnd = 4;  	} else {  		buffer [5] = '0';  		buffer [4] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [5] = digits.Second;  	buffer [4] = digits.First;  } else {  	if (fracEnd == 6) {  		fracEnd = 4;  	} else {  		buffer [5] = '0';  		buffer [4] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [5] = digits.Second;  	buffer [4] = digits.First;  } else {  	if (fracEnd == 6) {  		fracEnd = 4;  	} else {  		buffer [5] = '0';  		buffer [4] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [5] = digits.Second;  	buffer [4] = digits.First;  } else {  	if (fracEnd == 6) {  		fracEnd = 4;  	} else {  		buffer [5] = '0';  		buffer [4] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [5] = digits.Second;  	buffer [4] = digits.First;  } else {  	if (fracEnd == 6) {  		fracEnd = 4;  	} else {  		buffer [5] = '0';  		buffer [4] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [5] = digits.Second;  	buffer [4] = digits.First;  } else {  	if (fracEnd == 6) {  		fracEnd = 4;  	} else {  		buffer [5] = '0';  		buffer [4] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer [5] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer [4] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracEnd == 6) {  	fracEnd = 4;  } else {  	buffer [5] = '0';  	buffer [4] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracEnd == 6) {  	fracEnd = 4;  } else {  	buffer [5] = '0';  	buffer [4] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracEnd == 6) {  	fracEnd = 4;  } else {  	buffer [5] = '0';  	buffer [4] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracEnd == 6) {  	fracEnd = 4;  } else {  	buffer [5] = '0';  	buffer [4] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: fracEnd = 4;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer [5] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer [4] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [3] = digits.Second;  	buffer [2] = digits.First;  } else {  	if (fracEnd == 4) {  		fracEnd = 2;  	} else {  		buffer [3] = '0';  		buffer [2] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [3] = digits.Second;  	buffer [2] = digits.First;  } else {  	if (fracEnd == 4) {  		fracEnd = 2;  	} else {  		buffer [3] = '0';  		buffer [2] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [3] = digits.Second;  	buffer [2] = digits.First;  } else {  	if (fracEnd == 4) {  		fracEnd = 2;  	} else {  		buffer [3] = '0';  		buffer [2] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [3] = digits.Second;  	buffer [2] = digits.First;  } else {  	if (fracEnd == 4) {  		fracEnd = 2;  	} else {  		buffer [3] = '0';  		buffer [2] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [3] = digits.Second;  	buffer [2] = digits.First;  } else {  	if (fracEnd == 4) {  		fracEnd = 2;  	} else {  		buffer [3] = '0';  		buffer [2] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [3] = digits.Second;  	buffer [2] = digits.First;  } else {  	if (fracEnd == 4) {  		fracEnd = 2;  	} else {  		buffer [3] = '0';  		buffer [2] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer [3] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer [2] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracEnd == 4) {  	fracEnd = 2;  } else {  	buffer [3] = '0';  	buffer [2] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracEnd == 4) {  	fracEnd = 2;  } else {  	buffer [3] = '0';  	buffer [2] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracEnd == 4) {  	fracEnd = 2;  } else {  	buffer [3] = '0';  	buffer [2] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: if (fracEnd == 4) {  	fracEnd = 2;  } else {  	buffer [3] = '0';  	buffer [2] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: fracEnd = 2;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer [3] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer [2] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [2] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [3] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [4] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [5] = ':';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [6] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [7] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: endCount = 8;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (remainingTicks > 0) {  	buffer [8] = '.';  	var fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [15] = digits.Second;  		buffer [14] = digits.First;  		fracEnd = 16;  	} else {  		fracEnd = 14;  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [13] = digits.Second;  		buffer [12] = digits.First;  	} else {  		if (fracEnd == 14) {  			fracEnd = 12;  		} else {  			buffer [13] = '0';  			buffer [12] = '0';  		}  	}  	fracPart = remainingTicks % 100;  	remainingTicks /= 100;  	if (fracPart > 0) {  		digits = DigitPairs [fracPart];  		buffer [11] = digits.Second;  		buffer [10] = digits.First;  	} else {  		if (fracEnd == 12) {  			fracEnd = 10;  		} else {  			buffer [11] = '0';  			buffer [10] = '0';  		}  	}  	fracPart = remainingTicks;  	buffer [9] = (char)('0' + fracPart);  	endCount = fracEnd;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [8] = '.';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [15] = digits.Second;  	buffer [14] = digits.First;  	fracEnd = 16;  } else {  	fracEnd = 14;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [15] = digits.Second;  	buffer [14] = digits.First;  	fracEnd = 16;  } else {  	fracEnd = 14;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [15] = digits.Second;  	buffer [14] = digits.First;  	fracEnd = 16;  } else {  	fracEnd = 14;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [15] = digits.Second;  	buffer [14] = digits.First;  	fracEnd = 16;  } else {  	fracEnd = 14;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [15] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [14] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: fracEnd = 16;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: fracEnd = 14;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [13] = digits.Second;  	buffer [12] = digits.First;  } else {  	if (fracEnd == 14) {  		fracEnd = 12;  	} else {  		buffer [13] = '0';  		buffer [12] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [13] = digits.Second;  	buffer [12] = digits.First;  } else {  	if (fracEnd == 14) {  		fracEnd = 12;  	} else {  		buffer [13] = '0';  		buffer [12] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [13] = digits.Second;  	buffer [12] = digits.First;  } else {  	if (fracEnd == 14) {  		fracEnd = 12;  	} else {  		buffer [13] = '0';  		buffer [12] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [13] = digits.Second;  	buffer [12] = digits.First;  } else {  	if (fracEnd == 14) {  		fracEnd = 12;  	} else {  		buffer [13] = '0';  		buffer [12] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [13] = digits.Second;  	buffer [12] = digits.First;  } else {  	if (fracEnd == 14) {  		fracEnd = 12;  	} else {  		buffer [13] = '0';  		buffer [12] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [13] = digits.Second;  	buffer [12] = digits.First;  } else {  	if (fracEnd == 14) {  		fracEnd = 12;  	} else {  		buffer [13] = '0';  		buffer [12] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [13] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [12] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracEnd == 14) {  	fracEnd = 12;  } else {  	buffer [13] = '0';  	buffer [12] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracEnd == 14) {  	fracEnd = 12;  } else {  	buffer [13] = '0';  	buffer [12] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracEnd == 14) {  	fracEnd = 12;  } else {  	buffer [13] = '0';  	buffer [12] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracEnd == 14) {  	fracEnd = 12;  } else {  	buffer [13] = '0';  	buffer [12] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: fracEnd = 12;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [13] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [12] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [11] = digits.Second;  	buffer [10] = digits.First;  } else {  	if (fracEnd == 12) {  		fracEnd = 10;  	} else {  		buffer [11] = '0';  		buffer [10] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [11] = digits.Second;  	buffer [10] = digits.First;  } else {  	if (fracEnd == 12) {  		fracEnd = 10;  	} else {  		buffer [11] = '0';  		buffer [10] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [11] = digits.Second;  	buffer [10] = digits.First;  } else {  	if (fracEnd == 12) {  		fracEnd = 10;  	} else {  		buffer [11] = '0';  		buffer [10] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [11] = digits.Second;  	buffer [10] = digits.First;  } else {  	if (fracEnd == 12) {  		fracEnd = 10;  	} else {  		buffer [11] = '0';  		buffer [10] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [11] = digits.Second;  	buffer [10] = digits.First;  } else {  	if (fracEnd == 12) {  		fracEnd = 10;  	} else {  		buffer [11] = '0';  		buffer [10] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracPart > 0) {  	digits = DigitPairs [fracPart];  	buffer [11] = digits.Second;  	buffer [10] = digits.First;  } else {  	if (fracEnd == 12) {  		fracEnd = 10;  	} else {  		buffer [11] = '0';  		buffer [10] = '0';  	}  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [11] = digits.Second;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [10] = digits.First;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracEnd == 12) {  	fracEnd = 10;  } else {  	buffer [11] = '0';  	buffer [10] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracEnd == 12) {  	fracEnd = 10;  } else {  	buffer [11] = '0';  	buffer [10] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracEnd == 12) {  	fracEnd = 10;  } else {  	buffer [11] = '0';  	buffer [10] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: if (fracEnd == 12) {  	fracEnd = 10;  } else {  	buffer [11] = '0';  	buffer [10] = '0';  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: fracEnd = 10;  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [11] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [10] = '0';  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer [9] = (char)('0' + fracPart);  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Magic Number,Jil.Serialize,SerializeDynamicThunk,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\SerializeDynamicThunk.cs,SerializeDynamicThunk,The following statement contains a magic number: emit.LoadArgument (2);  
Magic Number,Jil.Serialize,ThunkWriter,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,WriteDayOfWeek,The following statement contains a magic number: Builder.Append (ThunkWriterCharArrays.ConstantString_DaysOfWeek' ix' 3);  
Duplicate Code,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The method contains a code clone-set at the following line numbers (starting from the method definition): ((184' 204)' (564' 584)' (944' 964)' (1324' 1344)' (1704' 1724))
Duplicate Code,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The method contains a code clone-set at the following line numbers (starting from the method definition): ((184' 204)' (564' 584)' (944' 964)' (1324' 1344)' (1704' 1724))
Duplicate Code,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The method contains a code clone-set at the following line numbers (starting from the method definition): ((130' 158)' (236' 264))
Duplicate Code,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The method contains a code clone-set at the following line numbers (starting from the method definition): ((11' 35)' (40' 64))
Duplicate Code,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The method contains a code clone-set at the following line numbers (starting from the method definition): ((89' 119)' (101' 131))
Duplicate Code,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The method contains a code clone-set at the following line numbers (starting from the method definition): ((217' 241)' (286' 310))
Duplicate Code,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The method contains a code clone-set at the following line numbers (starting from the method definition): ((88' 134)' (190' 236))
Duplicate Code,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The method contains a code clone-set at the following line numbers (starting from the method definition): ((138' 181)' (239' 282))
Duplicate Code,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadDictionary,The method contains a code clone-set at the following line numbers (starting from the method definition): ((55' 81)' (108' 134))
Duplicate Code,Jil.Deserialize,InlineDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAndSetDiscriminantUnion,The method contains a code clone-set at the following line numbers (starting from the method definition): ((99' 121)' (160' 182))
Duplicate Code,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The method contains a code clone-set at the following line numbers (starting from the method definition): ((214' 236)' (281' 303))
Duplicate Code,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The method contains a code clone-set at the following line numbers (starting from the method definition): ((86' 130)' (184' 228))
Duplicate Code,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The method contains a code clone-set at the following line numbers (starting from the method definition): ((134' 175)' (231' 272))
Duplicate Code,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The method contains a code clone-set at the following line numbers (starting from the method definition): ((214' 236)' (281' 303))
Duplicate Code,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The method contains a code clone-set at the following line numbers (starting from the method definition): ((86' 130)' (184' 228))
Duplicate Code,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The method contains a code clone-set at the following line numbers (starting from the method definition): ((134' 175)' (231' 272))
Missing Default,Jil.Common,ExtensionMethods,F:\newReposMay17\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,JsonEscapeFast,The following switch statement is missing a default case: switch (c) {  case '\u0000':  	output.Write (@"\u0000");  	continue;  case '\u0001':  	output.Write (@"\u0001");  	continue;  case '\u0002':  	output.Write (@"\u0002");  	continue;  case '\u0003':  	output.Write (@"\u0003");  	continue;  case '\u0004':  	output.Write (@"\u0004");  	continue;  case '\u0005':  	output.Write (@"\u0005");  	continue;  case '\u0006':  	output.Write (@"\u0006");  	continue;  case '\u0007':  	output.Write (@"\u0007");  	continue;  case '\u0008':  	output.Write (@"\u0008");  	continue;  case '\u0009':  	output.Write (@"\t");  	continue;  case '\u000A':  	output.Write (@"\n");  	continue;  case '\u000B':  	output.Write (@"\v");  	continue;  case '\u000C':  	output.Write (@"\f");  	continue;  case '\u000D':  	output.Write (@"\r");  	continue;  case '\u000E':  	output.Write (@"\u000E");  	continue;  case '\u000F':  	output.Write (@"\u000F");  	continue;  case '\u0010':  	output.Write (@"\u0010");  	continue;  case '\u0011':  	output.Write (@"\u0011");  	continue;  case '\u0012':  	output.Write (@"\u0012");  	continue;  case '\u0013':  	output.Write (@"\u0013");  	continue;  case '\u0014':  	output.Write (@"\u0014");  	continue;  case '\u0015':  	output.Write (@"\u0015");  	continue;  case '\u0016':  	output.Write (@"\u0016");  	continue;  case '\u0017':  	output.Write (@"\u0017");  	continue;  case '\u0018':  	output.Write (@"\u0018");  	continue;  case '\u0019':  	output.Write (@"\u0019");  	continue;  case '\u001A':  	output.Write (@"\u001A");  	continue;  case '\u001B':  	output.Write (@"\u001B");  	continue;  case '\u001C':  	output.Write (@"\u001C");  	continue;  case '\u001D':  	output.Write (@"\u001D");  	continue;  case '\u001E':  	output.Write (@"\u001E");  	continue;  case '\u001F':  	output.Write (@"\u001F");  	continue;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseDateTimeFormat) {  case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  	switch (options.ShouldPrettyPrint) {  	case false:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyle' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNulls' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrint' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case DateTimeFormat.MillisecondsSinceUnixEpoch:  	switch (options.ShouldPrettyPrint) {  	case false:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<Milliseconds' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNulls' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrint' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case DateTimeFormat.SecondsSinceUnixEpoch:  	switch (options.ShouldPrettyPrint) {  	case false:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<Seconds' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNulls' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrint' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case DateTimeFormat.ISO8601:  	switch (options.ShouldPrettyPrint) {  	case false:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601CamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601Utc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601UtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601Inherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601InheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601InheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601JSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601JSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601JSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601JSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601JSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNulls' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrint' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case DateTimeFormat.RFC1123:  	switch (options.ShouldPrettyPrint) {  	case false:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123CamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123Utc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123UtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123Inherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123InheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123InheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123JSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123JSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123JSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123JSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123JSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNulls' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrint' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint) {  case false:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyle' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNulls' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrint' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyle' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNulls' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyle' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyle' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyle' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyle' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNulls' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNulls' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNulls' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNulls' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrint' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrint' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrint' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrint' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrint' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint) {  case false:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<Milliseconds' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNulls' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrint' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<Milliseconds' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNulls' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<Milliseconds' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<Milliseconds' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<Milliseconds' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<Milliseconds' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNulls' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNulls' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNulls' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNulls' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrint' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrint' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrint' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrint' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrint' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint) {  case false:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<Seconds' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNulls' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrint' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<Seconds' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNulls' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<Seconds' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<Seconds' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<Seconds' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<Seconds' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNulls' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNulls' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNulls' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNulls' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrint' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrint' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrint' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrint' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrint' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint) {  case false:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601CamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601Utc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601UtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601Inherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601InheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601InheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601JSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601JSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601JSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601JSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601JSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNulls' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrint' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601CamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601Utc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601UtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601Inherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601InheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601InheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601JSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601JSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601JSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601JSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601JSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNulls' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601CamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601Utc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601UtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601Inherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601InheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601InheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601JSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601JSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601JSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601JSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601JSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601CamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601Utc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601UtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601Inherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601InheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601InheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601CamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601Utc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601UtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601CamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601Utc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601UtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601Inherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601InheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601InheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601Inherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601InheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601InheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601JSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601JSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601JSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601JSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601JSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601JSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601JSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601JSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601JSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601JSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601JSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601JSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601JSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601JSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601JSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNulls' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNulls' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNulls' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNulls' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrint' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrint' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrint' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrint' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrint' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint) {  case false:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123CamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123Utc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123UtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123Inherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123InheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123InheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123JSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123JSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123JSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123JSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123JSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNulls' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrint' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123CamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123Utc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123UtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123Inherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123InheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123InheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123JSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123JSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123JSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123JSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123JSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNulls' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123CamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123Utc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123UtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123Inherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123InheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123InheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123JSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123JSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123JSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123JSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123JSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123CamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123Utc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123UtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123Inherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123InheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123InheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123CamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123Utc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123UtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123CamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123Utc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123UtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123Inherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123InheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123InheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123Inherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123InheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123InheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123JSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123JSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123JSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123JSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123JSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123JSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123JSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123JSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123JSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123JSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123JSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123JSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123JSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123JSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123JSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNulls' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNulls' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNulls' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNulls' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrint' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrint' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrint' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrint' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrint' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseDateTimeFormat) {  case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  	switch (options.ShouldPrettyPrint) {  	case false:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyle' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case DateTimeFormat.MillisecondsSinceUnixEpoch:  	switch (options.ShouldPrettyPrint) {  	case false:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<Milliseconds' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNulls' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrint' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case DateTimeFormat.SecondsSinceUnixEpoch:  	switch (options.ShouldPrettyPrint) {  	case false:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<Seconds' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNulls' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrint' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case DateTimeFormat.ISO8601:  	switch (options.ShouldPrettyPrint) {  	case false:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601CamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601Utc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601UtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601Inherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601InheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601InheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601JSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601JSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601JSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601JSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNulls' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrint' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case DateTimeFormat.RFC1123:  	switch (options.ShouldPrettyPrint) {  	case false:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123CamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123Utc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123UtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123Inherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123InheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123InheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123JSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123JSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123JSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123JSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNulls' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldExcludeNulls) {  		case false:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrint' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.IsJSONP) {  			case false:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			case true:  				switch (options.ShouldIncludeInherited) {  				case false:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				case true:  					switch (options.UseUnspecifiedDateTimeKindBehavior) {  					case UnspecifiedDateTimeKindBehavior.IsLocal:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  						}  						break;  					case UnspecifiedDateTimeKindBehavior.IsUTC:  						switch (options.SerializationNameFormat) {  						case SerializationNameFormat.Verbatim:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  						case SerializationNameFormat.CamelCase:  							return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  						}  						break;  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint) {  case false:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyle' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyle' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyle' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyle' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyle' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyle' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint) {  case false:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<Milliseconds' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNulls' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrint' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<Milliseconds' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNulls' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<Milliseconds' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<Milliseconds' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<Milliseconds' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<Milliseconds' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNulls' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNulls' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNulls' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNulls' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrint' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrint' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrint' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrint' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrint' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint) {  case false:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<Seconds' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNulls' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrint' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<Seconds' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNulls' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<Seconds' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<Seconds' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<Seconds' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<Seconds' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNulls' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNulls' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNulls' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNulls' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrint' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrint' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrint' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrint' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrint' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint) {  case false:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601CamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601Utc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601UtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601Inherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601InheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601InheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601JSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601JSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601JSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601JSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNulls' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrint' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601CamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601Utc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601UtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601Inherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601InheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601InheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601JSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601JSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601JSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601JSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNulls' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601CamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601Utc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601UtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601Inherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601InheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601InheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601JSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601JSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601JSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601JSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601CamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601Utc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601UtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601Inherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601InheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601InheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601CamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601Utc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601UtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601CamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601Utc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601UtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601Inherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601InheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601InheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601Inherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601InheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601InheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601JSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601JSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601JSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601JSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601JSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601JSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601JSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601JSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601JSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601JSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601JSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601JSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNulls' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNulls' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNulls' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNulls' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrint' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrint' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrint' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrint' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrint' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint) {  case false:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123CamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123Utc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123UtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123Inherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123InheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123InheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123JSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123JSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123JSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123JSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNulls' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldExcludeNulls) {  	case false:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrint' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.IsJSONP) {  		case false:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		case true:  			switch (options.ShouldIncludeInherited) {  			case false:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			case true:  				switch (options.UseUnspecifiedDateTimeKindBehavior) {  				case UnspecifiedDateTimeKindBehavior.IsLocal:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  					}  					break;  				case UnspecifiedDateTimeKindBehavior.IsUTC:  					switch (options.SerializationNameFormat) {  					case SerializationNameFormat.Verbatim:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  					case SerializationNameFormat.CamelCase:  						return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  					}  					break;  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123CamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123Utc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123UtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123Inherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123InheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123InheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123JSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123JSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123JSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123JSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNulls' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123CamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123Utc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123UtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123Inherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123InheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123InheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123JSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123JSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123JSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123JSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123CamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123Utc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123UtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123Inherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123InheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123InheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123CamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123Utc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123UtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123CamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123Utc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123UtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123Inherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123InheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123InheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123Inherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123InheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123InheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123JSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123JSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123JSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123JSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123JSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123JSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123JSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123JSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123JSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123JSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123JSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123JSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNulls' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNulls' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNulls' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNulls' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls) {  case false:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrint' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.IsJSONP) {  	case false:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	case true:  		switch (options.ShouldIncludeInherited) {  		case false:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		case true:  			switch (options.UseUnspecifiedDateTimeKindBehavior) {  			case UnspecifiedDateTimeKindBehavior.IsLocal:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  				}  				break;  			case UnspecifiedDateTimeKindBehavior.IsUTC:  				switch (options.SerializationNameFormat) {  				case SerializationNameFormat.Verbatim:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  				case SerializationNameFormat.CamelCase:  					return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  				}  				break;  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrint' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrint' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrint' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrint' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP) {  case false:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  case true:  	switch (options.ShouldIncludeInherited) {  	case false:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	case true:  		switch (options.UseUnspecifiedDateTimeKindBehavior) {  		case UnspecifiedDateTimeKindBehavior.IsLocal:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  			}  			break;  		case UnspecifiedDateTimeKindBehavior.IsUTC:  			switch (options.SerializationNameFormat) {  			case SerializationNameFormat.Verbatim:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  			case SerializationNameFormat.CamelCase:  				return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  			}  			break;  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited) {  case false:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  case true:  	switch (options.UseUnspecifiedDateTimeKindBehavior) {  	case UnspecifiedDateTimeKindBehavior.IsLocal:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  		}  		break;  	case UnspecifiedDateTimeKindBehavior.IsUTC:  		switch (options.SerializationNameFormat) {  		case SerializationNameFormat.Verbatim:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  		case SerializationNameFormat.CamelCase:  			return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  		}  		break;  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior) {  case UnspecifiedDateTimeKindBehavior.IsLocal:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  	}  	break;  case UnspecifiedDateTimeKindBehavior.IsUTC:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  	case SerializationNameFormat.CamelCase:  		return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString ();  case SerializationNameFormat.CamelCase:  	return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString ();  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.UseDateTimeFormat) {  case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyle' T>.Get () (reader' 0);  	case SerializationNameFormat.CamelCase:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyleCamelCase' T>.Get () (reader' 0);  	}  	break;  case DateTimeFormat.MillisecondsSinceUnixEpoch:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyle' T>.Get () (reader' 0);  	case SerializationNameFormat.CamelCase:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyleCamelCase' T>.Get () (reader' 0);  	}  	break;  case DateTimeFormat.SecondsSinceUnixEpoch:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyle' T>.Get () (reader' 0);  	case SerializationNameFormat.CamelCase:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyleCamelCase' T>.Get () (reader' 0);  	}  	break;  case DateTimeFormat.ISO8601:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601Style' T>.Get () (reader' 0);  	case SerializationNameFormat.CamelCase:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601StyleCamelCase' T>.Get () (reader' 0);  	}  	break;  case DateTimeFormat.RFC1123:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123Style' T>.Get () (reader' 0);  	case SerializationNameFormat.CamelCase:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123StyleCamelCase' T>.Get () (reader' 0);  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyle' T>.Get () (reader' 0);  case SerializationNameFormat.CamelCase:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyleCamelCase' T>.Get () (reader' 0);  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyle' T>.Get () (reader' 0);  case SerializationNameFormat.CamelCase:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyleCamelCase' T>.Get () (reader' 0);  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyle' T>.Get () (reader' 0);  case SerializationNameFormat.CamelCase:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyleCamelCase' T>.Get () (reader' 0);  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601Style' T>.Get () (reader' 0);  case SerializationNameFormat.CamelCase:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601StyleCamelCase' T>.Get () (reader' 0);  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123Style' T>.Get () (reader' 0);  case SerializationNameFormat.CamelCase:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123StyleCamelCase' T>.Get () (reader' 0);  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.UseDateTimeFormat) {  case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyle' T>.GetFromString () (ref thunk' 0);  	case SerializationNameFormat.CamelCase:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyleCamelCase' T>.GetFromString () (ref thunk' 0);  	}  	break;  case DateTimeFormat.MillisecondsSinceUnixEpoch:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyle' T>.GetFromString () (ref thunk' 0);  	case SerializationNameFormat.CamelCase:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyleCamelCase' T>.GetFromString () (ref thunk' 0);  	}  	break;  case DateTimeFormat.SecondsSinceUnixEpoch:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyle' T>.GetFromString () (ref thunk' 0);  	case SerializationNameFormat.CamelCase:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyleCamelCase' T>.GetFromString () (ref thunk' 0);  	}  	break;  case DateTimeFormat.ISO8601:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601Style' T>.GetFromString () (ref thunk' 0);  	case SerializationNameFormat.CamelCase:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601StyleCamelCase' T>.GetFromString () (ref thunk' 0);  	}  	break;  case DateTimeFormat.RFC1123:  	switch (options.SerializationNameFormat) {  	case SerializationNameFormat.Verbatim:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123Style' T>.GetFromString () (ref thunk' 0);  	case SerializationNameFormat.CamelCase:  		return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123StyleCamelCase' T>.GetFromString () (ref thunk' 0);  	}  	break;  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyle' T>.GetFromString () (ref thunk' 0);  case SerializationNameFormat.CamelCase:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyleCamelCase' T>.GetFromString () (ref thunk' 0);  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyle' T>.GetFromString () (ref thunk' 0);  case SerializationNameFormat.CamelCase:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyleCamelCase' T>.GetFromString () (ref thunk' 0);  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyle' T>.GetFromString () (ref thunk' 0);  case SerializationNameFormat.CamelCase:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyleCamelCase' T>.GetFromString () (ref thunk' 0);  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601Style' T>.GetFromString () (ref thunk' 0);  case SerializationNameFormat.CamelCase:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601StyleCamelCase' T>.GetFromString () (ref thunk' 0);  }  
Missing Default,Jil,JSON,F:\newReposMay17\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat) {  case SerializationNameFormat.Verbatim:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123Style' T>.GetFromString () (ref thunk' 0);  case SerializationNameFormat.CamelCase:  	return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123StyleCamelCase' T>.GetFromString () (ref thunk' 0);  }  
Missing Default,Jil.DeserializeDynamic,DynamicDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,_DeserializeMember,The following switch statement is missing a default case: switch (c) {  case '"':  	DeserializeString (reader' builder);  	return;  case '[':  	DeserializeArray (reader' builder);  	return;  case '{':  	DeserializeObject (reader' builder);  	return;  case 'n':  	DeserializeNull (reader' builder);  	return;  case 't':  	DeserializeTrue (reader' builder);  	return;  case 'f':  	DeserializeFalse (reader' builder);  	return;  case '-':  	DeserializeNumber ('-'' reader' builder);  	return;  }  
Missing Default,Jil.DeserializeDynamic,DynamicDeserializer,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,_DeserializeMemberThunkReader,The following switch statement is missing a default case: switch (c) {  case '"':  	DeserializeStringThunkReader (ref reader' builder);  	return;  case '[':  	DeserializeArrayThunkReader (ref reader' builder);  	return;  case '{':  	DeserializeObjectThunkReader (ref reader' builder);  	return;  case 'n':  	DeserializeNullThunkReader (ref reader' builder);  	return;  case 't':  	DeserializeTrueThunkReader (ref reader' builder);  	return;  case 'f':  	DeserializeFalseThunkReader (ref reader' builder);  	return;  case '-':  	DeserializeNumberThunkReader ('-'' ref reader' builder);  	return;  }  
Missing Default,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,Put,The following switch statement is missing a default case: switch (Type) {  case JsonObjectType.Array:  	ArrayValue.Add (other);  	return;  case JsonObjectType.ObjectMember:  	if (MemberPart1 == null) {  		MemberPart1 = other;  	} else {  		if (MemberPart2 == null) {  			MemberPart2 = other;  			this.Parent.ObjectMembers.Add (MemberPart1.StringValue' MemberPart2);  		} else {  			throw new InvalidOperationException ();  		}  	}  	return;  }  
Missing Default,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryBinaryOperation,The following switch statement is missing a default case: switch (operand) {  case ExpressionType.And:  	if (!returnType.IsAssignableFrom (typeof(bool))) {  		result = null;  		return false;  	}  	if (Type == JsonObjectType.False) {  		result = false;  		return true;  	}  	if (Type == JsonObjectType.True) {  		result = (bool)rightHand;  		return true;  	}  	break;  case ExpressionType.Or:  	if (!returnType.IsAssignableFrom (typeof(bool))) {  		result = null;  		return false;  	}  	if (Type == JsonObjectType.False) {  		result = (bool)rightHand;  		return true;  	}  	if (Type == JsonObjectType.True) {  		result = true;  		return true;  	}  	break;  case ExpressionType.Add:  case ExpressionType.AddChecked:  	if (!returnType.IsAssignableFrom (typeof(float))) {  		result = null;  		return false;  	}  	if (Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber) {  		object lhsRef;  		if (InnerTryConvert (typeof(float)' out lhsRef)) {  			var lhs = (float)lhsRef;  			var rhs = (float)rightHand;  			result = lhs + rhs;  			return true;  		}  	}  	break;  case ExpressionType.Divide:  	if (!returnType.IsAssignableFrom (typeof(float))) {  		result = null;  		return false;  	}  	if (Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber) {  		object lhsRef;  		if (InnerTryConvert (typeof(float)' out lhsRef)) {  			var lhs = (float)lhsRef;  			var rhs = (float)rightHand;  			result = lhs / rhs;  			return true;  		}  	}  	break;  case ExpressionType.Equal:  	if (!returnType.IsAssignableFrom (typeof(bool))) {  		result = null;  		return false;  	}  	if (object.ReferenceEquals (rightHand' null)) {  		result = false;  		return true;  	}  	if (object.ReferenceEquals (this' rightHand)) {  		result = true;  		return true;  	}  	if (Type == JsonObjectType.FastNumber || Type == JsonObjectType.Number) {  		object leftHand;  		if (InnerTryConvert (typeof(float)' out leftHand)) {  			var rhs = (float)rightHand;  			var lhs = (float)leftHand;  			result = lhs == rhs;  			return true;  		}  	}  	if (Type == JsonObjectType.String) {  		object leftHand;  		if (InnerTryConvert (typeof(string)' out leftHand)) {  			var rhs = (string)rightHand;  			var lhs = (string)leftHand;  			result = lhs == rhs;  			return true;  		}  	}  	if (Type == JsonObjectType.True) {  		result = (bool)rightHand;  		return true;  	}  	if (Type == JsonObjectType.False) {  		result = !(bool)rightHand;  		return true;  	}  	break;  case ExpressionType.GreaterThan:  	if (!returnType.IsAssignableFrom (typeof(bool))) {  		result = null;  		return false;  	}  	if (Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber) {  		object lhsRef;  		if (InnerTryConvert (typeof(float)' out lhsRef)) {  			var lhs = (float)lhsRef;  			var rhs = (float)rightHand;  			result = lhs > rhs;  			return true;  		}  	}  	break;  case ExpressionType.GreaterThanOrEqual:  	if (!returnType.IsAssignableFrom (typeof(bool))) {  		result = null;  		return false;  	}  	if (Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber) {  		object lhsRef;  		if (InnerTryConvert (typeof(float)' out lhsRef)) {  			var lhs = (float)lhsRef;  			var rhs = (float)rightHand;  			result = lhs >= rhs;  			return true;  		}  	}  	break;  case ExpressionType.LessThan:  	if (!returnType.IsAssignableFrom (typeof(bool))) {  		result = null;  		return false;  	}  	if (Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber) {  		object lhsRef;  		if (InnerTryConvert (typeof(float)' out lhsRef)) {  			var lhs = (float)lhsRef;  			var rhs = (float)rightHand;  			result = lhs < rhs;  			return true;  		}  	}  	break;  case ExpressionType.LessThanOrEqual:  	if (!returnType.IsAssignableFrom (typeof(bool))) {  		result = null;  		return false;  	}  	if (Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber) {  		object lhsRef;  		if (InnerTryConvert (typeof(float)' out lhsRef)) {  			var lhs = (float)lhsRef;  			var rhs = (float)rightHand;  			result = lhs <= rhs;  			return true;  		}  	}  	break;  case ExpressionType.Multiply:  case ExpressionType.MultiplyChecked:  	if (!returnType.IsAssignableFrom (typeof(float))) {  		result = null;  		return false;  	}  	if (Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber) {  		object lhsRef;  		if (InnerTryConvert (typeof(float)' out lhsRef)) {  			var lhs = (float)lhsRef;  			var rhs = (float)rightHand;  			result = lhs * rhs;  			return true;  		}  	}  	break;  case ExpressionType.NotEqual:  	if (!returnType.IsAssignableFrom (typeof(bool))) {  		result = null;  		return false;  	}  	if (object.ReferenceEquals (rightHand' null)) {  		result = true;  		return true;  	}  	if (object.ReferenceEquals (this' rightHand)) {  		result = false;  		return true;  	}  	if (Type == JsonObjectType.FastNumber || Type == JsonObjectType.Number) {  		object leftHand;  		if (InnerTryConvert (typeof(float)' out leftHand)) {  			var rhs = (float)rightHand;  			var lhs = (float)leftHand;  			result = lhs != rhs;  			return true;  		}  	}  	if (Type == JsonObjectType.String) {  		object leftHand;  		if (InnerTryConvert (typeof(string)' out leftHand)) {  			var rhs = (string)rightHand;  			var lhs = (string)leftHand;  			result = lhs != rhs;  			return true;  		}  	}  	if (Type == JsonObjectType.True) {  		result = !(bool)rightHand;  		return true;  	}  	if (Type == JsonObjectType.False) {  		result = (bool)rightHand;  		return true;  	}  	break;  case ExpressionType.Subtract:  case ExpressionType.SubtractChecked:  	if (!returnType.IsAssignableFrom (typeof(float))) {  		result = null;  		return false;  	}  	if (Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber) {  		object lhsRef;  		if (InnerTryConvert (typeof(float)' out lhsRef)) {  			var lhs = (float)lhsRef;  			var rhs = (float)rightHand;  			result = lhs - rhs;  			return true;  		}  	}  	break;  }  
Missing Default,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryUnaryOperation,The following switch statement is missing a default case: switch (operand) {  case ExpressionType.IsFalse:  	if (!returnType.IsAssignableFrom (typeof(bool))) {  		result = null;  		return false;  	}  	result = Type == JsonObjectType.False;  	return true;  case ExpressionType.IsTrue:  	if (!returnType.IsAssignableFrom (typeof(bool))) {  		result = null;  		return false;  	}  	result = Type == JsonObjectType.True;  	return true;  case ExpressionType.UnaryPlus:  	if (Type == JsonObjectType.FastNumber || Type == JsonObjectType.Number) {  		return this.InnerTryConvert (returnType' out result);  	}  	break;  case ExpressionType.NegateChecked:  case ExpressionType.Negate:  	if (Type == JsonObjectType.FastNumber) {  		var negated = new JsonObject {  			Type = JsonObjectType.FastNumber'  			FastNumberNegative = !this.FastNumberNegative'  			FastNumberPart1 = this.FastNumberPart1'  			FastNumberPart2 = this.FastNumberPart2'  			FastNumberPart2Length = this.FastNumberPart2Length'  			FastNumberPart3 = this.FastNumberPart3  		};  		return negated.InnerTryConvert (returnType' out result);  	}  	if (Type == JsonObjectType.Number) {  		var negated = new JsonObject {  			Type = JsonObjectType.Number'  			NumberValue = -this.NumberValue  		};  		return negated.InnerTryConvert (returnType' out result);  	}  	break;  case ExpressionType.Not:  	if (Type == JsonObjectType.True) {  		return JsonObject.False.InnerTryConvert (returnType' out result);  	}  	if (Type == JsonObjectType.False) {  		return JsonObject.True.InnerTryConvert (returnType' out result);  	}  	break;  }  
Missing Default,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTime,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat) {  case DateTimeFormat.MillisecondsSinceUnixEpoch:  	dt = Methods.UnixEpoch + TimeSpan.FromMilliseconds (res);  	return true;  case DateTimeFormat.SecondsSinceUnixEpoch:  	dt = Methods.UnixEpoch + TimeSpan.FromSeconds (res);  	return true;  }  
Missing Default,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTime,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat) {  case DateTimeFormat.MillisecondsSinceUnixEpoch:  	dt = Methods.UnixEpoch + TimeSpan.FromMilliseconds (res);  	return true;  case DateTimeFormat.SecondsSinceUnixEpoch:  	dt = Methods.UnixEpoch + TimeSpan.FromSeconds (res);  	return true;  }  
Missing Default,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTime,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat) {  case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  	ret = Methods.ReadMicrosoftStyleDateTime (StringValue' out res);  	dt = res;  	return ret;  case DateTimeFormat.ISO8601:  	ret = Methods.ReadISO8601DateTime (StringValue' out res);  	dt = res;  	return ret;  }  
Missing Default,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTimeOffset,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat) {  case DateTimeFormat.MillisecondsSinceUnixEpoch:  	dto = Methods.UnixEpoch + TimeSpan.FromMilliseconds (res);  	return true;  case DateTimeFormat.SecondsSinceUnixEpoch:  	dto = Methods.UnixEpoch + TimeSpan.FromSeconds (res);  	return true;  }  
Missing Default,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTimeOffset,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat) {  case DateTimeFormat.MillisecondsSinceUnixEpoch:  	dto = Methods.UnixEpoch + TimeSpan.FromMilliseconds (res);  	return true;  case DateTimeFormat.SecondsSinceUnixEpoch:  	dto = Methods.UnixEpoch + TimeSpan.FromSeconds (res);  	return true;  }  
Missing Default,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTimeOffset,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat) {  case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  	ret = Methods.ReadMicrosoftStyleDateTimeOffset (StringValue' out res);  	dto = res;  	return ret;  case DateTimeFormat.ISO8601:  	ret = Methods.ReadISO8601DateTimeOffset (StringValue' out res);  	dto = res;  	return ret;  }  
Missing Default,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat) {  case DateTimeFormat.MillisecondsSinceUnixEpoch:  	var msTicksDouble = res * TicksPerMillisecond;  	var msTicks = (long)msTicksDouble;  	if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  		msTicks = TimeSpan.MaxValue.Ticks;  	}  	if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  		msTicks = TimeSpan.MinValue.Ticks;  	}  	ts = new TimeSpan (msTicks);  	return true;  case DateTimeFormat.SecondsSinceUnixEpoch:  	var sTicksDouble = res * TicksPerSecond;  	var sTicks = (long)sTicksDouble;  	if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  		sTicks = TimeSpan.MaxValue.Ticks;  	}  	if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  		sTicks = TimeSpan.MinValue.Ticks;  	}  	ts = new TimeSpan (sTicks);  	return true;  }  
Missing Default,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat) {  case DateTimeFormat.MillisecondsSinceUnixEpoch:  	var msTicksDouble = res * TicksPerMillisecond;  	var msTicks = (long)msTicksDouble;  	if (msTicksDouble >= TimeSpan.MaxValue.Ticks) {  		msTicks = TimeSpan.MaxValue.Ticks;  	}  	if (msTicksDouble <= TimeSpan.MinValue.Ticks) {  		msTicks = TimeSpan.MinValue.Ticks;  	}  	ts = new TimeSpan (msTicks);  	return true;  case DateTimeFormat.SecondsSinceUnixEpoch:  	var sTicksDouble = res * TicksPerSecond;  	var sTicks = (long)sTicksDouble;  	if (sTicksDouble >= TimeSpan.MaxValue.Ticks) {  		sTicks = TimeSpan.MaxValue.Ticks;  	}  	if (sTicksDouble <= TimeSpan.MinValue.Ticks) {  		sTicks = TimeSpan.MinValue.Ticks;  	}  	ts = new TimeSpan (sTicks);  	return true;  }  
Missing Default,Jil.DeserializeDynamic,JsonObject,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat) {  case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:  	ret = Methods.ReadMicrosoftStyleTimeSpan (StringValue' out ts);  	return ret;  case DateTimeFormat.ISO8601:  	ret = Methods.ReadISO8601TimeSpan (StringValue' out ts);  	return ret;  }  
Missing Default,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBuffer,The following switch statement is missing a default case: switch (second) {  case '"':  	buffer [ix] = '"';  	ix++;  	continue;  case '\\':  	buffer [ix] = '\\';  	ix++;  	continue;  case '/':  	buffer [ix] = '/';  	ix++;  	continue;  case 'b':  	buffer [ix] = '\b';  	ix++;  	continue;  case 'f':  	buffer [ix] = '\f';  	ix++;  	continue;  case 'n':  	buffer [ix] = '\n';  	ix++;  	continue;  case 'r':  	buffer [ix] = '\r';  	ix++;  	continue;  case 't':  	buffer [ix] = '\t';  	ix++;  	continue;  }  
Missing Default,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBuffer,The following switch statement is missing a default case: switch (second) {  case '"':  	commonSb.Append ('"');  	continue;  case '\\':  	commonSb.Append ('\\');  	continue;  case '/':  	commonSb.Append ('/');  	continue;  case 'b':  	commonSb.Append ('\b');  	continue;  case 'f':  	commonSb.Append ('\f');  	continue;  case 'n':  	commonSb.Append ('\n');  	continue;  case 'r':  	commonSb.Append ('\r');  	continue;  case 't':  	commonSb.Append ('\t');  	continue;  }  
Missing Default,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBufferThunkReader,The following switch statement is missing a default case: switch (second) {  case '"':  	buffer [ix] = '"';  	ix++;  	continue;  case '\\':  	buffer [ix] = '\\';  	ix++;  	continue;  case '/':  	buffer [ix] = '/';  	ix++;  	continue;  case 'b':  	buffer [ix] = '\b';  	ix++;  	continue;  case 'f':  	buffer [ix] = '\f';  	ix++;  	continue;  case 'n':  	buffer [ix] = '\n';  	ix++;  	continue;  case 'r':  	buffer [ix] = '\r';  	ix++;  	continue;  case 't':  	buffer [ix] = '\t';  	ix++;  	continue;  }  
Missing Default,Jil.DeserializeDynamic,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBufferThunkReader,The following switch statement is missing a default case: switch (second) {  case '"':  	commonSb.Append ('"');  	continue;  case '\\':  	commonSb.Append ('\\');  	continue;  case '/':  	commonSb.Append ('/');  	continue;  case 'b':  	commonSb.Append ('\b');  	continue;  case 'f':  	commonSb.Append ('\f');  	continue;  case 'n':  	commonSb.Append ('\n');  	continue;  case 'r':  	commonSb.Append ('\r');  	continue;  case 't':  	commonSb.Append ('\t');  	continue;  }  
Missing Default,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The following switch statement is missing a default case: switch (second) {  case '"':  	continue;  case '\\':  	continue;  case '/':  	continue;  case 'b':  	continue;  case 'f':  	continue;  case 'n':  	continue;  case 'r':  	continue;  case 't':  	continue;  }  
Missing Default,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedString,The following switch statement is missing a default case: switch (second) {  case '"':  	commonSb.Append ('"');  	continue;  case '\\':  	commonSb.Append ('\\');  	continue;  case '/':  	commonSb.Append ('/');  	continue;  case 'b':  	commonSb.Append ('\b');  	continue;  case 'f':  	commonSb.Append ('\f');  	continue;  case 'n':  	commonSb.Append ('\n');  	continue;  case 'r':  	commonSb.Append ('\r');  	continue;  case 't':  	commonSb.Append ('\t');  	continue;  }  
Missing Default,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithCharArray,The following switch statement is missing a default case: switch (second) {  case '"':  	buffer [idx++] = '"';  	continue;  case '\\':  	buffer [idx++] = '\\';  	continue;  case '/':  	buffer [idx++] = '/';  	continue;  case 'b':  	buffer [idx++] = '\b';  	continue;  case 'f':  	buffer [idx++] = '\f';  	continue;  case 'n':  	buffer [idx++] = '\n';  	continue;  case 'r':  	buffer [idx++] = '\r';  	continue;  case 't':  	buffer [idx++] = '\t';  	continue;  }  
Missing Default,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBuffer,The following switch statement is missing a default case: switch (second) {  case '"':  	buffer [ix] = '"';  	ix++;  	continue;  case '\\':  	buffer [ix] = '\\';  	ix++;  	continue;  case '/':  	buffer [ix] = '/';  	ix++;  	continue;  case 'b':  	buffer [ix] = '\b';  	ix++;  	continue;  case 'f':  	buffer [ix] = '\f';  	ix++;  	continue;  case 'n':  	buffer [ix] = '\n';  	ix++;  	continue;  case 'r':  	buffer [ix] = '\r';  	ix++;  	continue;  case 't':  	buffer [ix] = '\t';  	ix++;  	continue;  }  
Missing Default,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBuffer,The following switch statement is missing a default case: switch (second) {  case '"':  	commonSb.Append ('"');  	continue;  case '\\':  	commonSb.Append ('\\');  	continue;  case '/':  	commonSb.Append ('/');  	continue;  case 'b':  	commonSb.Append ('\b');  	continue;  case 'f':  	commonSb.Append ('\f');  	continue;  case 'n':  	commonSb.Append ('\n');  	continue;  case 'r':  	commonSb.Append ('\r');  	continue;  case 't':  	commonSb.Append ('\t');  	continue;  }  
Missing Default,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following switch statement is missing a default case: switch (second) {  case '"':  	return '"';  case '\\':  	return '\\';  case '/':  	return '/';  case 'b':  	return '\b';  case 'f':  	return '\f';  case 'n':  	return '\n';  case 'r':  	return '\r';  case 't':  	return '\t';  }  
Missing Default,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following switch statement is missing a default case: switch (second) {  case '"':  	return '"';  case '\\':  	return '\\';  case '/':  	return '/';  case 'b':  	return '\b';  case 'f':  	return '\f';  case 'n':  	return '\n';  case 'r':  	return '\r';  case 't':  	return '\t';  }  
Missing Default,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithCharArrayThunkReader,The following switch statement is missing a default case: switch (second) {  case '"':  	buffer [idx++] = '"';  	continue;  case '\\':  	buffer [idx++] = '\\';  	continue;  case '/':  	buffer [idx++] = '/';  	continue;  case 'b':  	buffer [idx++] = '\b';  	continue;  case 'f':  	buffer [idx++] = '\f';  	continue;  case 'n':  	buffer [idx++] = '\n';  	continue;  case 'r':  	buffer [idx++] = '\r';  	continue;  case 't':  	buffer [idx++] = '\t';  	continue;  }  
Missing Default,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBufferThunkReader,The following switch statement is missing a default case: switch (second) {  case '"':  	buffer [ix] = '"';  	ix++;  	continue;  case '\\':  	buffer [ix] = '\\';  	ix++;  	continue;  case '/':  	buffer [ix] = '/';  	ix++;  	continue;  case 'b':  	buffer [ix] = '\b';  	ix++;  	continue;  case 'f':  	buffer [ix] = '\f';  	ix++;  	continue;  case 'n':  	buffer [ix] = '\n';  	ix++;  	continue;  case 'r':  	buffer [ix] = '\r';  	ix++;  	continue;  case 't':  	buffer [ix] = '\t';  	ix++;  	continue;  }  
Missing Default,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBufferThunkReader,The following switch statement is missing a default case: switch (second) {  case '"':  	commonSb.Append ('"');  	continue;  case '\\':  	commonSb.Append ('\\');  	continue;  case '/':  	commonSb.Append ('/');  	continue;  case 'b':  	commonSb.Append ('\b');  	continue;  case 'f':  	commonSb.Append ('\f');  	continue;  case 'n':  	commonSb.Append ('\n');  	continue;  case 'r':  	commonSb.Append ('\r');  	continue;  case 't':  	commonSb.Append ('\t');  	continue;  }  
Missing Default,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringThunkReader,The following switch statement is missing a default case: switch (second) {  case '"':  	commonSb.Append ('"');  	continue;  case '\\':  	commonSb.Append ('\\');  	continue;  case '/':  	commonSb.Append ('/');  	continue;  case 'b':  	commonSb.Append ('\b');  	continue;  case 'f':  	commonSb.Append ('\f');  	continue;  case 'n':  	commonSb.Append ('\n');  	continue;  case 'r':  	commonSb.Append ('\r');  	continue;  case 't':  	commonSb.Append ('\t');  	continue;  }  
Missing Default,Jil.Deserialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The following switch statement is missing a default case: switch (second) {  case '"':  	continue;  case '\\':  	continue;  case '/':  	continue;  case 'b':  	continue;  case 'f':  	continue;  case 'n':  	continue;  case 'r':  	continue;  case 't':  	continue;  }  
Missing Default,Jil.SerializeDynamic,DynamicSerializer,F:\newReposMay17\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following switch statement is missing a default case: switch (depth) {  case 0:  	return;  case 1:  	stream.Write (' ');  	return;  case 2:  	stream.Write ("  ");  	return;  case 3:  	stream.Write ("   ");  	return;  case 4:  	stream.Write ("    ");  	return;  case 5:  	stream.Write ("     ");  	return;  case 6:  	stream.Write ("      ");  	return;  case 7:  	stream.Write ("       ");  	return;  case 8:  	stream.Write ("        ");  	return;  case 9:  	stream.Write ("         ");  	return;  case 10:  	stream.Write ("          ");  	return;  }  
Missing Default,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following switch statement is missing a default case: switch (dt.DayOfWeek) {  case DayOfWeek.Sunday:  	writer.Write ("Sun' ");  	break;  case DayOfWeek.Monday:  	writer.Write ("Mon' ");  	break;  case DayOfWeek.Tuesday:  	writer.Write ("Tue' ");  	break;  case DayOfWeek.Wednesday:  	writer.Write ("Wed' ");  	break;  case DayOfWeek.Thursday:  	writer.Write ("Thu' ");  	break;  case DayOfWeek.Friday:  	writer.Write ("Fri' ");  	break;  case DayOfWeek.Saturday:  	writer.Write ("Sat' ");  	break;  }  
Missing Default,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following switch statement is missing a default case: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
Missing Default,Jil.Serialize,Methods,F:\newReposMay17\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following switch statement is missing a default case: switch (dt.Month) {  case 1:  	writer.Write ("Jan ");  	break;  case 2:  	writer.Write ("Feb ");  	break;  case 3:  	writer.Write ("Mar ");  	break;  case 4:  	writer.Write ("Apr ");  	break;  case 5:  	writer.Write ("May ");  	break;  case 6:  	writer.Write ("Jun ");  	break;  case 7:  	writer.Write ("Jul ");  	break;  case 8:  	writer.Write ("Aug ");  	break;  case 9:  	writer.Write ("Sep ");  	break;  case 10:  	writer.Write ("Oct ");  	break;  case 11:  	writer.Write ("Nov ");  	break;  case 12:  	writer.Write ("Dec ");  	break;  }  
